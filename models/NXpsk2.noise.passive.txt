File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "NXpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 275, character 6:
Warning: identifier e rebound.
File "NXpsk2.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 279, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NXpsk2.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "NXpsk2.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 292, character 6:
Warning: identifier s rebound.
File "NXpsk2.noise.passive.pv", line 293, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 293, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "NXpsk2.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NXpsk2.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NXpsk2.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NXpsk2.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 322, characters 6-7:
Warning: identifier re rebound.
File "NXpsk2.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 325, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 327, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 335, characters 6-7:
Warning: identifier re rebound.
File "NXpsk2.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 339, characters 48-53:
Warning: identifier valid1 rebound.
File "NXpsk2.noise.passive.pv", line 340, characters 6-7:
Warning: identifier rs rebound.
File "NXpsk2.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 345, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 522, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 513, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 514, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NXpsk2.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 335, characters 6-7:
Warning: identifier re rebound.
File "NXpsk2.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 339, characters 48-53:
Warning: identifier valid1 rebound.
File "NXpsk2.noise.passive.pv", line 340, characters 6-7:
Warning: identifier rs rebound.
File "NXpsk2.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 345, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "NXpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 500, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 275, character 6:
Warning: identifier e rebound.
File "NXpsk2.noise.passive.pv", line 276, characters 6-7:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 279, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 279, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NXpsk2.noise.passive.pv", line 280, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 568, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 569, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NXpsk2.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 560, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 287, character 6:
Warning: identifier e rebound.
File "NXpsk2.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ne rebound.
File "NXpsk2.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 292, character 6:
Warning: identifier s rebound.
File "NXpsk2.noise.passive.pv", line 293, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 293, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "NXpsk2.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NXpsk2.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 236, character 36:
Warning: identifier h rebound.
File "NXpsk2.noise.passive.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 548, characters 8-9:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 322, characters 6-7:
Warning: identifier re rebound.
File "NXpsk2.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 325, characters 7-8:
Warning: identifier ss rebound.
File "NXpsk2.noise.passive.pv", line 327, characters 7-8:
Warning: identifier hs rebound.
File "NXpsk2.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "NXpsk2.noise.passive.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "NXpsk2.noise.passive.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_550: keypair = keypairpack(empty,empty) in
    (
        {5}let e_551: keypair = keypairpack(empty,empty) in
        {6}let rs_552: key = empty in
        {7}let re_553: key = empty in
        {8}let v_554: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_555: key = catch-fail(v_554) in
        {10}let v_556: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_557: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_554) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then symmetricstatepack(v_556,v_555,v_554) else fail-any) else fail-any) else fail-any))) in
        {12}let v_558: symmetricstate = catch-fail((if success?((if not-caught-fail(v_554) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then symmetricstatepack(v_556,v_555,v_554) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),empty)) else fail-any) else fail-any)) in
        {13}let hs: handshakestate = (if not-caught-fail(v_558) then handshakestatepack(v_558,s_550,e_551,rs_552,re_553,key_psk(alice,bob),true) else fail-any) in
        {14}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {43}get statestore(=alice,=bob,=sid,statepack_a(hs_559: handshakestate)) in
        {15}let v_560: bitstring = catch-fail(handshakestateunpack(hs_559)) in
        {16}let v_561: bitstring = catch-fail((empty,empty,empty)) in
        {17}let v_562: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {18}let v_563: keypair = catch-fail((if not-caught-fail(v_562) then keypairpack(validkey(v_562),key_e(alice,bob,sid)) else fail-any)) in
        {19}let v_564: bitstring = catch-fail(getpublickey(v_563)) in
        {20}let v_565: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_560))) in
        {21}let v_566: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_560)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then symmetricstatepack(1-proj-3-tuple(v_565),2-proj-3-tuple(v_565),hash(3-proj-3-tuple(v_565),v_564)) else fail-any) else fail-any)) in
        {22}let v_567: bitstring = catch-fail(symmetricstateunpack(v_566)) in
        {23}let v_568: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_567),getpublickey(v_563))) in
        {24}let v_569: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_567),getpublickey(v_563))) in
        {25}let v_570: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_567),getpublickey(v_563))) in
        {26}let v_571: bitstring = catch-fail((if (success?(getpublickey(v_563)) && success?(2-proj-3-tuple(v_567))) then (if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (v_568,v_569,v_570) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_572: symmetricstate = catch-fail((if success?(getpublickey(v_563)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_571)) then cipherstatepack(2-proj-3-tuple(v_571),minnonce) else fail-any),1-proj-3-tuple(v_571),3-proj-3-tuple(v_567)) else fail-any) else fail-any) else fail-any)) in
        {28}let v_573: bitstring = catch-fail(symmetricstateunpack(v_572)) in
        {29}let v_574: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {30}let v_575: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_574),2-proj-2-tuple(v_574),3-proj-3-tuple(v_573),msg_a(alice,bob,sid))) in
        {31}let v_576: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {32}let v_577: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_574))) && success?(1-proj-3-tuple(v_573))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then cipherstatepack(1-proj-2-tuple(v_576),increment_nonce(2-proj-2-tuple(v_574))) else fail-any) else fail-any)) in
        {33}let v_578: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_573)) && success?(1-proj-3-tuple(v_573))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_577) then (v_577,v_575) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_579: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_578),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) in
        {35}let v_580: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_578)) && success?(symmetricstatepack(1-proj-2-tuple(v_578),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),hash(3-proj-3-tuple(v_579),2-proj-2-tuple(v_578))) else fail-any) else fail-any)) in
        {36}let v_581: bitstring = catch-fail((if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-2-tuple(v_578))))) then (if not-caught-fail(v_580) then (v_580,2-proj-2-tuple(v_578)) else fail-any) else fail-any) else fail-any)) in
        {37}let v_582: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_581),2-proj-7-tuple(v_560),v_563,4-proj-7-tuple(v_560),5-proj-7-tuple(v_560),6-proj-7-tuple(v_560),7-proj-7-tuple(v_560))) in
        {38}let v_583: bitstring = catch-fail(concat3(v_564,2-proj-3-tuple(v_561),2-proj-2-tuple(v_581))) in
        {39}let (hs_584: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-7-tuple(v_560))))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if not-caught-fail(v_563) then (if not-caught-fail(v_564) then (if not-caught-fail(v_566) then (if not-caught-fail(v_572) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (v_582,v_583) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {40}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {41}insert statestore(alice,bob,sid,statepack_b(hs_584));
        {42}out(pub, message_a)
    ) | (
        {113}get statestore(=alice,=bob,=sid,statepack_b(hs_585: handshakestate)) in
        {44}in(pub, message_b: bitstring);
        {45}let v_586: bitstring = catch-fail(handshakestateunpack(hs_585)) in
        {46}let v_587: bitstring = catch-fail(deconcat3(message_b)) in
        {47}let v_588: bool = catch-fail(true) in
        {48}let v_589: key = catch-fail(1-proj-3-tuple(v_587)) in
        {49}let v_590: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_586))) in
        {50}let v_591: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_586)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_590),hash(3-proj-3-tuple(v_590),v_589)) else fail-any) else fail-any)) in
        {51}let v_592: bitstring = catch-fail(symmetricstateunpack(v_591)) in
        {52}let v_593: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_592),v_589)) in
        {53}let v_594: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_592),v_589)) in
        {54}let v_595: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_592),v_589)) in
        {55}let v_596: bitstring = catch-fail((if success?(2-proj-3-tuple(v_592)) then (if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (if not-caught-fail(v_595) then (v_593,v_594,v_595) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {56}let v_597: symmetricstate = catch-fail((if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_596)) then cipherstatepack(2-proj-3-tuple(v_596),minnonce) else fail-any),1-proj-3-tuple(v_596),3-proj-3-tuple(v_592)) else fail-any) else fail-any)) in
        {57}let v_598: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_586))) in
        {58}let v_599: bitstring = catch-fail(symmetricstateunpack(v_597)) in
        {59}let v_600: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_599),(if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_589) else fail-any) else fail-any))) in
        {60}let v_601: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_599),(if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_589) else fail-any) else fail-any))) in
        {61}let v_602: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_599),(if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_589) else fail-any) else fail-any))) in
        {62}let v_603: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_589) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_599))) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_600,v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_604: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_589) else fail-any) else fail-any)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_603)) then cipherstatepack(2-proj-3-tuple(v_603),minnonce) else fail-any),1-proj-3-tuple(v_603),3-proj-3-tuple(v_599)) else fail-any) else fail-any) else fail-any)) in
        {64}let v_605: bitstring = catch-fail(symmetricstateunpack(v_604)) in
        {65}let v_606: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_605))) in
        {66}let v_607: aead = catch-fail(decrypt(1-proj-2-tuple(v_606),2-proj-2-tuple(v_606),3-proj-3-tuple(v_605),2-proj-3-tuple(v_587))) in
        {67}let v_608: bitstring = catch-fail(aeadunpack(v_607)) in
        {68}let v_609: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_605))) in
        {69}let v_610: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_606))) && success?(1-proj-3-tuple(v_605))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then cipherstatepack(1-proj-2-tuple(v_609),increment_nonce(2-proj-2-tuple(v_606))) else fail-any) else fail-any)) in
        {70}let v_611: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_587)) && (success?(3-proj-3-tuple(v_605)) && success?(1-proj-3-tuple(v_605)))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then (if not-caught-fail(v_607) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if not-caught-fail(v_610) then (v_610,3-proj-3-tuple(v_608),1-proj-3-tuple(v_608)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_612: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)))) in
        {72}let v_613: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_587)) && success?(symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then symmetricstatepack(1-proj-3-tuple(v_612),2-proj-3-tuple(v_612),hash(3-proj-3-tuple(v_612),2-proj-3-tuple(v_587))) else fail-any) else fail-any)) in
        {73}let v_614: bitstring = catch-fail((if success?(2-proj-3-tuple(v_587)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if not-caught-fail(v_613) then (v_613,2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {74}let v_615: key = catch-fail(2-proj-3-tuple(v_614)) in
        {75}let v_616: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_586))) in
        {76}let v_617: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_614))) in
        {77}let v_618: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_617),(if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then dhexp(2-proj-2-tuple(v_616),v_615) else fail-any) else fail-any))) in
        {78}let v_619: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_617),(if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then dhexp(2-proj-2-tuple(v_616),v_615) else fail-any) else fail-any))) in
        {79}let v_620: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_617),(if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then dhexp(2-proj-2-tuple(v_616),v_615) else fail-any) else fail-any))) in
        {80}let v_621: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then dhexp(2-proj-2-tuple(v_616),v_615) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_617))) then (if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (if not-caught-fail(v_620) then (v_618,v_619,v_620) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_622: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_586)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then dhexp(2-proj-2-tuple(v_616),v_615) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_614))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_621)) then cipherstatepack(2-proj-3-tuple(v_621),minnonce) else fail-any),1-proj-3-tuple(v_621),3-proj-3-tuple(v_617)) else fail-any) else fail-any) else fail-any)) in
        {82}let v_623: bitstring = catch-fail(symmetricstateunpack(v_622)) in
        {83}let v_624: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_623),6-proj-7-tuple(v_586))) in
        {84}let v_625: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_623),6-proj-7-tuple(v_586))) in
        {85}let v_626: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_623),6-proj-7-tuple(v_586))) in
        {86}let v_627: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_586)) && success?(2-proj-3-tuple(v_623))) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (v_624,v_625,v_626) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_628: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_623),1-proj-3-tuple(v_627),3-proj-3-tuple(v_623)))) in
        {88}let v_629: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_627)) && success?(symmetricstatepack(1-proj-3-tuple(v_623),1-proj-3-tuple(v_627),3-proj-3-tuple(v_623)))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_628),hash(3-proj-3-tuple(v_628),2-proj-3-tuple(v_627))) else fail-any) else fail-any))) in
        {89}let v_630: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_586)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_627)) then cipherstatepack(3-proj-3-tuple(v_627),minnonce) else fail-any),1-proj-3-tuple(v_627),3-proj-3-tuple(v_629)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_631: bitstring = catch-fail(symmetricstateunpack(v_630)) in
        {91}let v_632: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_631))) in
        {92}let v_633: aead = catch-fail(decrypt(1-proj-2-tuple(v_632),2-proj-2-tuple(v_632),3-proj-3-tuple(v_631),3-proj-3-tuple(v_587))) in
        {93}let v_634: bitstring = catch-fail(aeadunpack(v_633)) in
        {94}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_631))) in
        {95}let v_636: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_632))) && success?(1-proj-3-tuple(v_631))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then cipherstatepack(1-proj-2-tuple(v_635),increment_nonce(2-proj-2-tuple(v_632))) else fail-any) else fail-any)) in
        {96}let v_637: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_587)) && (success?(3-proj-3-tuple(v_631)) && success?(1-proj-3-tuple(v_631)))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then (if not-caught-fail(v_633) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if not-caught-fail(v_636) then (v_636,3-proj-3-tuple(v_634),1-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_638: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_637),2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)))) in
        {98}let v_639: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_587)) && success?(symmetricstatepack(1-proj-3-tuple(v_637),2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_638),hash(3-proj-3-tuple(v_638),3-proj-3-tuple(v_587))) else fail-any) else fail-any)) in
        {99}let v_640: bitstring = catch-fail((if success?(3-proj-3-tuple(v_587)) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_639) then (v_639,2-proj-3-tuple(v_637),3-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {100}let v_641: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {101}let v_642: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_640),2-proj-7-tuple(v_586),3-proj-7-tuple(v_586),v_615,v_589,6-proj-7-tuple(v_586),7-proj-7-tuple(v_586))) in
        {102}let v_643: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_640))) in
        {103}let v_644: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_643),zero)) in
        {104}let v_645: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_643),zero)) in
        {105}let v_646: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_643),zero)) in
        {106}let v_647: bitstring = catch-fail((if success?(2-proj-3-tuple(v_643)) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (v_644,v_645,v_646) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_648: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_647)) then cipherstatepack(1-proj-3-tuple(v_647),minnonce) else fail-any)) in
        {108}let v_649: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_647)) then cipherstatepack(2-proj-3-tuple(v_647),minnonce) else fail-any)) in
        {109}let v_650: bitstring = catch-fail((if success?(1-proj-3-tuple(v_640)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (1-proj-3-tuple(v_640),v_648,v_649) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {110}let (hs_651: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-7-tuple(v_586))))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (if not-caught-fail(v_591) then (if not-caught-fail(v_597) then (if not-caught-fail(v_604) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_622) then (if not-caught-fail(v_630) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if ((3-proj-3-tuple(v_614) && 3-proj-3-tuple(v_640)) && (v_615 = getpublickey((if not-caught-fail(v_641) then keypairpack(validkey(v_641),key_s(bob)) else fail-any)))) then (if not-caught-fail(v_642) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (v_642,2-proj-3-tuple(v_640),true,2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {111}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {112}insert statestore(alice,bob,sid,statepack_c(hs_651,cs1,cs2))
    ) | (
        {114}!
        {133}get statestore(=alice,=bob,=sid,statepack_c(hs_652: handshakestate,cs1_653: cipherstate,cs2_654: cipherstate)) in
        {115}let hs_655: handshakestate = handshakestatesetcs(hs_652,cs1_653) in
        {116}let v_656: bitstring = catch-fail(handshakestateunpack(hs_655)) in
        {117}let v_657: bitstring = catch-fail((empty,empty,empty)) in
        {118}let v_658: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_656))) in
        {119}let v_659: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_658))) in
        {120}let v_660: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_659),2-proj-2-tuple(v_659),3-proj-3-tuple(v_658),msg_c(alice,bob,sid))) in
        {121}let v_661: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_658))) in
        {122}let v_662: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_659))) && success?(1-proj-3-tuple(v_658))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then cipherstatepack(1-proj-2-tuple(v_661),increment_nonce(2-proj-2-tuple(v_659))) else fail-any) else fail-any)) in
        {123}let v_663: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_658)) && success?(1-proj-3-tuple(v_658))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_662) then (v_662,v_660) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_664: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_663),2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)))) in
        {125}let v_665: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_663)) && success?(symmetricstatepack(1-proj-2-tuple(v_663),2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then symmetricstatepack(1-proj-3-tuple(v_664),2-proj-3-tuple(v_664),hash(3-proj-3-tuple(v_664),2-proj-2-tuple(v_663))) else fail-any) else fail-any)) in
        {126}let v_666: bitstring = catch-fail((if success?(1-proj-7-tuple(v_656)) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then (if not-caught-fail(v_665) then (v_665,2-proj-2-tuple(v_663)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_667: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_666),2-proj-7-tuple(v_656),3-proj-7-tuple(v_656),4-proj-7-tuple(v_656),5-proj-7-tuple(v_656),6-proj-7-tuple(v_656),7-proj-7-tuple(v_656))) in
        {128}let v_668: bitstring = catch-fail(concat3(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),2-proj-2-tuple(v_666))) in
        {129}let (hs_669: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-7-tuple(v_656))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (v_667,v_668) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {130}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {131}insert statestore(alice,bob,sid,statepack_d(hs_669,handshakestategetcs(hs_669),cs2_654));
        {132}out(pub, message_c)
    ) | (
        {134}!
        {154}get statestore(=alice,=bob,=sid,statepack_d(hs_670: handshakestate,cs1_671: cipherstate,cs2_672: cipherstate)) in
        {135}let hs_673: handshakestate = handshakestatesetcs(hs_670,cs2_672) in
        {136}in(pub, message_d: bitstring);
        {137}let v_674: bitstring = catch-fail(handshakestateunpack(hs_673)) in
        {138}let v_675: bitstring = catch-fail(deconcat3(message_d)) in
        {139}let v_676: bool = catch-fail(true) in
        {140}let v_677: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_674))) in
        {141}let v_678: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_677))) in
        {142}let v_679: aead = catch-fail(decrypt(1-proj-2-tuple(v_678),2-proj-2-tuple(v_678),3-proj-3-tuple(v_677),3-proj-3-tuple(v_675))) in
        {143}let v_680: bitstring = catch-fail(aeadunpack(v_679)) in
        {144}let v_681: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_677))) in
        {145}let v_682: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_678))) && success?(1-proj-3-tuple(v_677))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then cipherstatepack(1-proj-2-tuple(v_681),increment_nonce(2-proj-2-tuple(v_678))) else fail-any) else fail-any)) in
        {146}let v_683: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_675)) && (success?(3-proj-3-tuple(v_677)) && success?(1-proj-3-tuple(v_677)))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then (if not-caught-fail(v_679) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if not-caught-fail(v_682) then (v_682,3-proj-3-tuple(v_680),1-proj-3-tuple(v_680)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {147}let v_684: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_677),3-proj-3-tuple(v_677)))) in
        {148}let v_685: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_675)) && success?(symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_677),3-proj-3-tuple(v_677)))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),3-proj-3-tuple(v_675))) else fail-any) else fail-any)) in
        {149}let v_686: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_675)) && success?(1-proj-7-tuple(v_674))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if not-caught-fail(v_685) then (v_685,2-proj-3-tuple(v_683),3-proj-3-tuple(v_683)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {150}let v_687: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_686),2-proj-7-tuple(v_674),3-proj-7-tuple(v_674),4-proj-7-tuple(v_674),5-proj-7-tuple(v_674),6-proj-7-tuple(v_674),7-proj-7-tuple(v_674))) in
        {151}let (hs_688: handshakestate,plaintext_d: bitstring,valid_689: bool) = (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-7-tuple(v_674))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if not-caught-fail(v_676) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (v_676 && 3-proj-3-tuple(v_686)) then (if not-caught-fail(v_687) then (v_687,2-proj-3-tuple(v_686),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {152}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {153}event RecvEnd(valid_689)
    ) | (
        {155}event LeakPsk(phase0,alice,bob);
        {156}out(pub, key_psk(alice,bob))
    ) | (
        {157}phase 1;
        {158}event LeakPsk(phase1,alice,bob);
        {159}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {160}let s_690: keypair = keypairpack(empty,empty) in
    (
        {161}let e_691: keypair = keypairpack(empty,empty) in
        {162}let rs_692: key = empty in
        {163}let re_693: key = empty in
        {164}let v_694: bitstring = catch-fail(hash(somename,empty)) in
        {165}let v_695: key = catch-fail(v_694) in
        {166}let v_696: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {167}let v_697: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_694) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then symmetricstatepack(v_696,v_695,v_694) else fail-any) else fail-any) else fail-any))) in
        {168}let v_698: symmetricstate = catch-fail((if success?((if not-caught-fail(v_694) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then symmetricstatepack(v_696,v_695,v_694) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_697),hash(3-proj-3-tuple(v_697),empty)) else fail-any) else fail-any)) in
        {169}let hs_699: handshakestate = (if not-caught-fail(v_698) then handshakestatepack(v_698,s_690,e_691,rs_692,re_693,key_psk(alice,charlie),true) else fail-any) in
        {170}insert statestore(alice,charlie,sid,statepack_a(hs_699))
    ) | (
        {199}get statestore(=alice,=charlie,=sid,statepack_a(hs_700: handshakestate)) in
        {171}let v_701: bitstring = catch-fail(handshakestateunpack(hs_700)) in
        {172}let v_702: bitstring = catch-fail((empty,empty,empty)) in
        {173}let v_703: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {174}let v_704: keypair = catch-fail((if not-caught-fail(v_703) then keypairpack(validkey(v_703),key_e(alice,charlie,sid)) else fail-any)) in
        {175}let v_705: bitstring = catch-fail(getpublickey(v_704)) in
        {176}let v_706: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_701))) in
        {177}let v_707: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_701)) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_706),hash(3-proj-3-tuple(v_706),v_705)) else fail-any) else fail-any)) in
        {178}let v_708: bitstring = catch-fail(symmetricstateunpack(v_707)) in
        {179}let v_709: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_708),getpublickey(v_704))) in
        {180}let v_710: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_708),getpublickey(v_704))) in
        {181}let v_711: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_708),getpublickey(v_704))) in
        {182}let v_712: bitstring = catch-fail((if (success?(getpublickey(v_704)) && success?(2-proj-3-tuple(v_708))) then (if not-caught-fail(v_709) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (v_709,v_710,v_711) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_713: symmetricstate = catch-fail((if success?(getpublickey(v_704)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_712)) then cipherstatepack(2-proj-3-tuple(v_712),minnonce) else fail-any),1-proj-3-tuple(v_712),3-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any)) in
        {184}let v_714: bitstring = catch-fail(symmetricstateunpack(v_713)) in
        {185}let v_715: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_714))) in
        {186}let v_716: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_715),2-proj-2-tuple(v_715),3-proj-3-tuple(v_714),msg_a(alice,charlie,sid))) in
        {187}let v_717: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_714))) in
        {188}let v_718: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_715))) && success?(1-proj-3-tuple(v_714))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then cipherstatepack(1-proj-2-tuple(v_717),increment_nonce(2-proj-2-tuple(v_715))) else fail-any) else fail-any)) in
        {189}let v_719: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_714)) && success?(1-proj-3-tuple(v_714))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then (if not-caught-fail(v_716) then (if not-caught-fail(v_718) then (v_718,v_716) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_720: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_719),2-proj-3-tuple(v_714),3-proj-3-tuple(v_714)))) in
        {191}let v_721: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_719)) && success?(symmetricstatepack(1-proj-2-tuple(v_719),2-proj-3-tuple(v_714),3-proj-3-tuple(v_714)))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then symmetricstatepack(1-proj-3-tuple(v_720),2-proj-3-tuple(v_720),hash(3-proj-3-tuple(v_720),2-proj-2-tuple(v_719))) else fail-any) else fail-any)) in
        {192}let v_722: bitstring = catch-fail((if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then (if not-caught-fail(v_721) then (v_721,2-proj-2-tuple(v_719)) else fail-any) else fail-any) else fail-any)) in
        {193}let v_723: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_722),2-proj-7-tuple(v_701),v_704,4-proj-7-tuple(v_701),5-proj-7-tuple(v_701),6-proj-7-tuple(v_701),7-proj-7-tuple(v_701))) in
        {194}let v_724: bitstring = catch-fail(concat3(v_705,2-proj-3-tuple(v_702),2-proj-2-tuple(v_722))) in
        {195}let (hs_725: handshakestate,message_a_726: bitstring) = (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-7-tuple(v_701))))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (if not-caught-fail(v_707) then (if not-caught-fail(v_713) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then (v_723,v_724) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {196}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {197}insert statestore(alice,charlie,sid,statepack_b(hs_725));
        {198}out(pub, message_a_726)
    ) | (
        {269}get statestore(=alice,=charlie,=sid,statepack_b(hs_727: handshakestate)) in
        {200}in(pub, message_b_728: bitstring);
        {201}let v_729: bitstring = catch-fail(handshakestateunpack(hs_727)) in
        {202}let v_730: bitstring = catch-fail(deconcat3(message_b_728)) in
        {203}let v_731: bool = catch-fail(true) in
        {204}let v_732: key = catch-fail(1-proj-3-tuple(v_730)) in
        {205}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_729))) in
        {206}let v_734: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_729)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_733),hash(3-proj-3-tuple(v_733),v_732)) else fail-any) else fail-any)) in
        {207}let v_735: bitstring = catch-fail(symmetricstateunpack(v_734)) in
        {208}let v_736: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_735),v_732)) in
        {209}let v_737: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_735),v_732)) in
        {210}let v_738: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_735),v_732)) in
        {211}let v_739: bitstring = catch-fail((if success?(2-proj-3-tuple(v_735)) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then (if not-caught-fail(v_738) then (v_736,v_737,v_738) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_740: symmetricstate = catch-fail((if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_739)) then cipherstatepack(2-proj-3-tuple(v_739),minnonce) else fail-any),1-proj-3-tuple(v_739),3-proj-3-tuple(v_735)) else fail-any) else fail-any)) in
        {213}let v_741: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_729))) in
        {214}let v_742: bitstring = catch-fail(symmetricstateunpack(v_740)) in
        {215}let v_743: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_742),(if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then dhexp(2-proj-2-tuple(v_741),v_732) else fail-any) else fail-any))) in
        {216}let v_744: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_742),(if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then dhexp(2-proj-2-tuple(v_741),v_732) else fail-any) else fail-any))) in
        {217}let v_745: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_742),(if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then dhexp(2-proj-2-tuple(v_741),v_732) else fail-any) else fail-any))) in
        {218}let v_746: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then dhexp(2-proj-2-tuple(v_741),v_732) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_742))) then (if not-caught-fail(v_743) then (if not-caught-fail(v_744) then (if not-caught-fail(v_745) then (v_743,v_744,v_745) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_747: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then dhexp(2-proj-2-tuple(v_741),v_732) else fail-any) else fail-any)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_746)) then cipherstatepack(2-proj-3-tuple(v_746),minnonce) else fail-any),1-proj-3-tuple(v_746),3-proj-3-tuple(v_742)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_748: bitstring = catch-fail(symmetricstateunpack(v_747)) in
        {221}let v_749: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_748))) in
        {222}let v_750: aead = catch-fail(decrypt(1-proj-2-tuple(v_749),2-proj-2-tuple(v_749),3-proj-3-tuple(v_748),2-proj-3-tuple(v_730))) in
        {223}let v_751: bitstring = catch-fail(aeadunpack(v_750)) in
        {224}let v_752: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_748))) in
        {225}let v_753: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_749))) && success?(1-proj-3-tuple(v_748))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-2-tuple(v_752))))) then cipherstatepack(1-proj-2-tuple(v_752),increment_nonce(2-proj-2-tuple(v_749))) else fail-any) else fail-any)) in
        {226}let v_754: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_730)) && (success?(3-proj-3-tuple(v_748)) && success?(1-proj-3-tuple(v_748)))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then (if not-caught-fail(v_750) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if not-caught-fail(v_753) then (v_753,3-proj-3-tuple(v_751),1-proj-3-tuple(v_751)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_755: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_754),2-proj-3-tuple(v_748),3-proj-3-tuple(v_748)))) in
        {228}let v_756: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_730)) && success?(symmetricstatepack(1-proj-3-tuple(v_754),2-proj-3-tuple(v_748),3-proj-3-tuple(v_748)))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_755),hash(3-proj-3-tuple(v_755),2-proj-3-tuple(v_730))) else fail-any) else fail-any)) in
        {229}let v_757: bitstring = catch-fail((if success?(2-proj-3-tuple(v_730)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if not-caught-fail(v_756) then (v_756,2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_758: key = catch-fail(2-proj-3-tuple(v_757)) in
        {231}let v_759: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_729))) in
        {232}let v_760: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_757))) in
        {233}let v_761: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_760),(if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_758) else fail-any) else fail-any))) in
        {234}let v_762: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_760),(if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_758) else fail-any) else fail-any))) in
        {235}let v_763: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_760),(if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_758) else fail-any) else fail-any))) in
        {236}let v_764: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_758) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_760))) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then (v_761,v_762,v_763) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {237}let v_765: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_729)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then dhexp(2-proj-2-tuple(v_759),v_758) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_757))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_764)) then cipherstatepack(2-proj-3-tuple(v_764),minnonce) else fail-any),1-proj-3-tuple(v_764),3-proj-3-tuple(v_760)) else fail-any) else fail-any) else fail-any)) in
        {238}let v_766: bitstring = catch-fail(symmetricstateunpack(v_765)) in
        {239}let v_767: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_766),6-proj-7-tuple(v_729))) in
        {240}let v_768: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_766),6-proj-7-tuple(v_729))) in
        {241}let v_769: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_766),6-proj-7-tuple(v_729))) in
        {242}let v_770: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_729)) && success?(2-proj-3-tuple(v_766))) then (if not-caught-fail(v_767) then (if not-caught-fail(v_768) then (if not-caught-fail(v_769) then (v_767,v_768,v_769) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_771: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_766),1-proj-3-tuple(v_770),3-proj-3-tuple(v_766)))) in
        {244}let v_772: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_770)) && success?(symmetricstatepack(1-proj-3-tuple(v_766),1-proj-3-tuple(v_770),3-proj-3-tuple(v_766)))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_771),hash(3-proj-3-tuple(v_771),2-proj-3-tuple(v_770))) else fail-any) else fail-any))) in
        {245}let v_773: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_729)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_770)) then cipherstatepack(3-proj-3-tuple(v_770),minnonce) else fail-any),1-proj-3-tuple(v_770),3-proj-3-tuple(v_772)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_774: bitstring = catch-fail(symmetricstateunpack(v_773)) in
        {247}let v_775: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_774))) in
        {248}let v_776: aead = catch-fail(decrypt(1-proj-2-tuple(v_775),2-proj-2-tuple(v_775),3-proj-3-tuple(v_774),3-proj-3-tuple(v_730))) in
        {249}let v_777: bitstring = catch-fail(aeadunpack(v_776)) in
        {250}let v_778: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_774))) in
        {251}let v_779: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_775))) && success?(1-proj-3-tuple(v_774))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then cipherstatepack(1-proj-2-tuple(v_778),increment_nonce(2-proj-2-tuple(v_775))) else fail-any) else fail-any)) in
        {252}let v_780: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_730)) && (success?(3-proj-3-tuple(v_774)) && success?(1-proj-3-tuple(v_774)))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then (if not-caught-fail(v_776) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then (if not-caught-fail(v_779) then (v_779,3-proj-3-tuple(v_777),1-proj-3-tuple(v_777)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_781: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_774),3-proj-3-tuple(v_774)))) in
        {254}let v_782: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_730)) && success?(symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_774),3-proj-3-tuple(v_774)))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then symmetricstatepack(1-proj-3-tuple(v_781),2-proj-3-tuple(v_781),hash(3-proj-3-tuple(v_781),3-proj-3-tuple(v_730))) else fail-any) else fail-any)) in
        {255}let v_783: bitstring = catch-fail((if success?(3-proj-3-tuple(v_730)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then (if not-caught-fail(v_782) then (v_782,2-proj-3-tuple(v_780),3-proj-3-tuple(v_780)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_784: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {257}let v_785: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_783),2-proj-7-tuple(v_729),3-proj-7-tuple(v_729),v_758,v_732,6-proj-7-tuple(v_729),7-proj-7-tuple(v_729))) in
        {258}let v_786: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_783))) in
        {259}let v_787: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_786),zero)) in
        {260}let v_788: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_786),zero)) in
        {261}let v_789: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_786),zero)) in
        {262}let v_790: bitstring = catch-fail((if success?(2-proj-3-tuple(v_786)) then (if not-caught-fail(v_787) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (v_787,v_788,v_789) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_791: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_790)) then cipherstatepack(1-proj-3-tuple(v_790),minnonce) else fail-any)) in
        {264}let v_792: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_790)) then cipherstatepack(2-proj-3-tuple(v_790),minnonce) else fail-any)) in
        {265}let v_793: bitstring = catch-fail((if success?(1-proj-3-tuple(v_783)) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (1-proj-3-tuple(v_783),v_791,v_792) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let (hs_794: handshakestate,plaintext_b_795: bitstring,valid_796: bool,cs1_797: cipherstate,cs2_798: cipherstate) = (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-7-tuple(v_729))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_731) then (if not-caught-fail(v_732) then (if not-caught-fail(v_734) then (if not-caught-fail(v_740) then (if not-caught-fail(v_747) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if not-caught-fail(v_758) then (if not-caught-fail(v_765) then (if not-caught-fail(v_773) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (if ((3-proj-3-tuple(v_757) && 3-proj-3-tuple(v_783)) && (v_758 = getpublickey((if not-caught-fail(v_784) then keypairpack(validkey(v_784),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_785) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (v_785,2-proj-3-tuple(v_783),true,2-proj-3-tuple(v_793),3-proj-3-tuple(v_793)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {267}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_795);
        {268}insert statestore(alice,charlie,sid,statepack_c(hs_794,cs1_797,cs2_798))
    ) | (
        {270}!
        {289}get statestore(=alice,=charlie,=sid,statepack_c(hs_799: handshakestate,cs1_800: cipherstate,cs2_801: cipherstate)) in
        {271}let hs_802: handshakestate = handshakestatesetcs(hs_799,cs1_800) in
        {272}let v_803: bitstring = catch-fail(handshakestateunpack(hs_802)) in
        {273}let v_804: bitstring = catch-fail((empty,empty,empty)) in
        {274}let v_805: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_803))) in
        {275}let v_806: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {276}let v_807: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_806),2-proj-2-tuple(v_806),3-proj-3-tuple(v_805),msg_c(alice,charlie,sid))) in
        {277}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_805))) in
        {278}let v_809: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_806))) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then cipherstatepack(1-proj-2-tuple(v_808),increment_nonce(2-proj-2-tuple(v_806))) else fail-any) else fail-any)) in
        {279}let v_810: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_805)) && success?(1-proj-3-tuple(v_805))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then (if not-caught-fail(v_807) then (if not-caught-fail(v_809) then (v_809,v_807) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_811: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_810),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) in
        {281}let v_812: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_810)) && success?(symmetricstatepack(1-proj-2-tuple(v_810),2-proj-3-tuple(v_805),3-proj-3-tuple(v_805)))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then symmetricstatepack(1-proj-3-tuple(v_811),2-proj-3-tuple(v_811),hash(3-proj-3-tuple(v_811),2-proj-2-tuple(v_810))) else fail-any) else fail-any)) in
        {282}let v_813: bitstring = catch-fail((if success?(1-proj-7-tuple(v_803)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_812) then (v_812,2-proj-2-tuple(v_810)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_814: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_813),2-proj-7-tuple(v_803),3-proj-7-tuple(v_803),4-proj-7-tuple(v_803),5-proj-7-tuple(v_803),6-proj-7-tuple(v_803),7-proj-7-tuple(v_803))) in
        {284}let v_815: bitstring = catch-fail(concat3(1-proj-3-tuple(v_804),2-proj-3-tuple(v_804),2-proj-2-tuple(v_813))) in
        {285}let (hs_816: handshakestate,message_c_817: bitstring) = (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-7-tuple(v_803))))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {286}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {287}insert statestore(alice,charlie,sid,statepack_d(hs_816,handshakestategetcs(hs_816),cs2_801));
        {288}out(pub, message_c_817)
    ) | (
        {290}!
        {310}get statestore(=alice,=charlie,=sid,statepack_d(hs_818: handshakestate,cs1_819: cipherstate,cs2_820: cipherstate)) in
        {291}let hs_821: handshakestate = handshakestatesetcs(hs_818,cs2_820) in
        {292}in(pub, message_d_822: bitstring);
        {293}let v_823: bitstring = catch-fail(handshakestateunpack(hs_821)) in
        {294}let v_824: bitstring = catch-fail(deconcat3(message_d_822)) in
        {295}let v_825: bool = catch-fail(true) in
        {296}let v_826: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_823))) in
        {297}let v_827: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_826))) in
        {298}let v_828: aead = catch-fail(decrypt(1-proj-2-tuple(v_827),2-proj-2-tuple(v_827),3-proj-3-tuple(v_826),3-proj-3-tuple(v_824))) in
        {299}let v_829: bitstring = catch-fail(aeadunpack(v_828)) in
        {300}let v_830: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_826))) in
        {301}let v_831: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_827))) && success?(1-proj-3-tuple(v_826))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then cipherstatepack(1-proj-2-tuple(v_830),increment_nonce(2-proj-2-tuple(v_827))) else fail-any) else fail-any)) in
        {302}let v_832: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_824)) && (success?(3-proj-3-tuple(v_826)) && success?(1-proj-3-tuple(v_826)))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-2-tuple(v_827))))) then (if not-caught-fail(v_828) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if not-caught-fail(v_831) then (v_831,3-proj-3-tuple(v_829),1-proj-3-tuple(v_829)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_833: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_832),2-proj-3-tuple(v_826),3-proj-3-tuple(v_826)))) in
        {304}let v_834: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_824)) && success?(symmetricstatepack(1-proj-3-tuple(v_832),2-proj-3-tuple(v_826),3-proj-3-tuple(v_826)))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then symmetricstatepack(1-proj-3-tuple(v_833),2-proj-3-tuple(v_833),hash(3-proj-3-tuple(v_833),3-proj-3-tuple(v_824))) else fail-any) else fail-any)) in
        {305}let v_835: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_824)) && success?(1-proj-7-tuple(v_823))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if not-caught-fail(v_834) then (v_834,2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_836: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_835),2-proj-7-tuple(v_823),3-proj-7-tuple(v_823),4-proj-7-tuple(v_823),5-proj-7-tuple(v_823),6-proj-7-tuple(v_823),7-proj-7-tuple(v_823))) in
        {307}let (hs_837: handshakestate,plaintext_d_838: bitstring,valid_839: bool) = (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-7-tuple(v_823))))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_825) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if (v_825 && 3-proj-3-tuple(v_835)) then (if not-caught-fail(v_836) then (v_836,2-proj-3-tuple(v_835),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {308}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_838);
        {309}event RecvEnd(valid_839)
    ) | (
        {311}event LeakPsk(phase0,alice,charlie);
        {312}out(pub, key_psk(alice,charlie))
    ) | (
        {313}phase 1;
        {314}event LeakPsk(phase1,alice,charlie);
        {315}out(pub, key_psk(alice,charlie))
    ) | (
        0
    )
) | (
    {316}let s_840: keypair = keypairpack(empty,empty) in
    {317}out(pub, getpublickey(s_840));
    (
        {318}let e_841: keypair = keypairpack(empty,empty) in
        {319}let rs_842: key = empty in
        {320}let re_843: key = empty in
        {321}let v_844: bitstring = catch-fail(hash(somename,empty)) in
        {322}let v_845: key = catch-fail(v_844) in
        {323}let v_846: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {324}let v_847: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_844) then (if not-caught-fail(v_845) then (if not-caught-fail(v_846) then symmetricstatepack(v_846,v_845,v_844) else fail-any) else fail-any) else fail-any))) in
        {325}let v_848: symmetricstate = catch-fail((if success?((if not-caught-fail(v_844) then (if not-caught-fail(v_845) then (if not-caught-fail(v_846) then symmetricstatepack(v_846,v_845,v_844) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then symmetricstatepack(1-proj-3-tuple(v_847),2-proj-3-tuple(v_847),hash(3-proj-3-tuple(v_847),empty)) else fail-any) else fail-any)) in
        {326}let hs_849: handshakestate = (if not-caught-fail(v_848) then handshakestatepack(v_848,s_840,e_841,rs_842,re_843,key_psk(alice,bob),false) else fail-any) in
        {327}insert statestore(bob,alice,sid,statepack_a(hs_849))
    ) | (
        {355}get statestore(=bob,=alice,=sid,statepack_a(hs_850: handshakestate)) in
        {328}in(pub, message_a_851: bitstring);
        {329}let v_852: bitstring = catch-fail(handshakestateunpack(hs_850)) in
        {330}let v_853: bitstring = catch-fail(deconcat3(message_a_851)) in
        {331}let v_854: bool = catch-fail(true) in
        {332}let v_855: key = catch-fail(1-proj-3-tuple(v_853)) in
        {333}let v_856: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_852))) in
        {334}let v_857: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_852)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack(1-proj-3-tuple(v_856),2-proj-3-tuple(v_856),hash(3-proj-3-tuple(v_856),v_855)) else fail-any) else fail-any)) in
        {335}let v_858: bitstring = catch-fail(symmetricstateunpack(v_857)) in
        {336}let v_859: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_858),v_855)) in
        {337}let v_860: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_858),v_855)) in
        {338}let v_861: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_858),v_855)) in
        {339}let v_862: bitstring = catch-fail((if success?(2-proj-3-tuple(v_858)) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (v_859,v_860,v_861) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let v_863: symmetricstate = catch-fail((if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_862)) then cipherstatepack(2-proj-3-tuple(v_862),minnonce) else fail-any),1-proj-3-tuple(v_862),3-proj-3-tuple(v_858)) else fail-any) else fail-any)) in
        {341}let v_864: bitstring = catch-fail(symmetricstateunpack(v_863)) in
        {342}let v_865: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {343}let v_866: aead = catch-fail(decrypt(1-proj-2-tuple(v_865),2-proj-2-tuple(v_865),3-proj-3-tuple(v_864),3-proj-3-tuple(v_853))) in
        {344}let v_867: bitstring = catch-fail(aeadunpack(v_866)) in
        {345}let v_868: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {346}let v_869: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_865))) && success?(1-proj-3-tuple(v_864))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-2-tuple(v_868))))) then cipherstatepack(1-proj-2-tuple(v_868),increment_nonce(2-proj-2-tuple(v_865))) else fail-any) else fail-any)) in
        {347}let v_870: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_853)) && (success?(3-proj-3-tuple(v_864)) && success?(1-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_866) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if not-caught-fail(v_869) then (v_869,3-proj-3-tuple(v_867),1-proj-3-tuple(v_867)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_871: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) in
        {349}let v_872: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_853)) && success?(symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then symmetricstatepack(1-proj-3-tuple(v_871),2-proj-3-tuple(v_871),hash(3-proj-3-tuple(v_871),3-proj-3-tuple(v_853))) else fail-any) else fail-any)) in
        {350}let v_873: bitstring = catch-fail((if success?(3-proj-3-tuple(v_853)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if not-caught-fail(v_872) then (v_872,2-proj-3-tuple(v_870),3-proj-3-tuple(v_870)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_874: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_873),2-proj-7-tuple(v_852),3-proj-7-tuple(v_852),4-proj-7-tuple(v_852),v_855,6-proj-7-tuple(v_852),7-proj-7-tuple(v_852))) in
        {352}let (hs_875: handshakestate,plaintext_a: bitstring,valid_876: bool) = (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-7-tuple(v_852))))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if not-caught-fail(v_854) then (if not-caught-fail(v_855) then (if not-caught-fail(v_857) then (if not-caught-fail(v_863) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if (v_854 && 3-proj-3-tuple(v_873)) then (if not-caught-fail(v_874) then (v_874,2-proj-3-tuple(v_873),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {353}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {354}insert statestore(bob,alice,sid,statepack_b(hs_875))
    ) | (
        {425}get statestore(=bob,=alice,=sid,statepack_b(hs_877: handshakestate)) in
        {356}let v_878: bitstring = catch-fail(handshakestateunpack(hs_877)) in
        {357}let v_879: bitstring = catch-fail((empty,empty,empty)) in
        {358}let v_880: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {359}let v_881: keypair = catch-fail((if not-caught-fail(v_880) then keypairpack(validkey(v_880),key_e(bob,alice,sid)) else fail-any)) in
        {360}let v_882: bitstring = catch-fail(getpublickey(v_881)) in
        {361}let v_883: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_878))) in
        {362}let v_884: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_878)) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),v_882)) else fail-any) else fail-any)) in
        {363}let v_885: bitstring = catch-fail(symmetricstateunpack(v_884)) in
        {364}let v_886: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_885),getpublickey(v_881))) in
        {365}let v_887: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_885),getpublickey(v_881))) in
        {366}let v_888: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_885),getpublickey(v_881))) in
        {367}let v_889: bitstring = catch-fail((if (success?(getpublickey(v_881)) && success?(2-proj-3-tuple(v_885))) then (if not-caught-fail(v_886) then (if not-caught-fail(v_887) then (if not-caught-fail(v_888) then (v_886,v_887,v_888) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {368}let v_890: symmetricstate = catch-fail((if success?(getpublickey(v_881)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_889)) then cipherstatepack(2-proj-3-tuple(v_889),minnonce) else fail-any),1-proj-3-tuple(v_889),3-proj-3-tuple(v_885)) else fail-any) else fail-any) else fail-any)) in
        {369}let v_891: bitstring = catch-fail(keypairunpack(v_881)) in
        {370}let v_892: bitstring = catch-fail(symmetricstateunpack(v_890)) in
        {371}let v_893: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_892),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {372}let v_894: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_892),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {373}let v_895: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_892),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {374}let v_896: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_878)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_892))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (v_893,v_894,v_895) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_897: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then dhexp(2-proj-2-tuple(v_891),5-proj-7-tuple(v_878)) else fail-any) else fail-any)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_896)) then cipherstatepack(2-proj-3-tuple(v_896),minnonce) else fail-any),1-proj-3-tuple(v_896),3-proj-3-tuple(v_892)) else fail-any) else fail-any) else fail-any)) in
        {376}let v_898: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {377}let v_899: keypair = catch-fail((if not-caught-fail(v_898) then keypairpack(validkey(v_898),key_s(bob)) else fail-any)) in
        {378}let v_900: bitstring = catch-fail(symmetricstateunpack(v_897)) in
        {379}let v_901: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {380}let v_902: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_901),2-proj-2-tuple(v_901),3-proj-3-tuple(v_900),getpublickey(v_899))) in
        {381}let v_903: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {382}let v_904: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_901))) && success?(1-proj-3-tuple(v_900))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then cipherstatepack(1-proj-2-tuple(v_903),increment_nonce(2-proj-2-tuple(v_901))) else fail-any) else fail-any)) in
        {383}let v_905: bitstring = catch-fail((if (success?(getpublickey(v_899)) && (success?(3-proj-3-tuple(v_900)) && success?(1-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then (if not-caught-fail(v_902) then (if not-caught-fail(v_904) then (v_904,v_902) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {384}let v_906: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_905),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) in
        {385}let v_907: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_905)) && success?(symmetricstatepack(1-proj-2-tuple(v_905),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_906),hash(3-proj-3-tuple(v_906),2-proj-2-tuple(v_905))) else fail-any) else fail-any)) in
        {386}let v_908: bitstring = catch-fail((if success?(getpublickey(v_899)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-2-tuple(v_905))))) then (if not-caught-fail(v_907) then (v_907,2-proj-2-tuple(v_905)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_909: bitstring = catch-fail(keypairunpack(v_899)) in
        {388}let v_910: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_908))) in
        {389}let v_911: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_910),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {390}let v_912: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_910),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {391}let v_913: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_910),(if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_878)) else fail-any) else fail-any))) in
        {392}let v_914: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_878)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_910))) then (if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then (v_911,v_912,v_913) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let v_915: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_878)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then dhexp(2-proj-2-tuple(v_909),5-proj-7-tuple(v_878)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_908))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_914)) then cipherstatepack(2-proj-3-tuple(v_914),minnonce) else fail-any),1-proj-3-tuple(v_914),3-proj-3-tuple(v_910)) else fail-any) else fail-any) else fail-any)) in
        {394}let v_916: bitstring = catch-fail(symmetricstateunpack(v_915)) in
        {395}let v_917: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_916),6-proj-7-tuple(v_878))) in
        {396}let v_918: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_916),6-proj-7-tuple(v_878))) in
        {397}let v_919: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_916),6-proj-7-tuple(v_878))) in
        {398}let v_920: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_878)) && success?(2-proj-3-tuple(v_916))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (v_917,v_918,v_919) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_921: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_916),1-proj-3-tuple(v_920),3-proj-3-tuple(v_916)))) in
        {400}let v_922: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_920)) && success?(symmetricstatepack(1-proj-3-tuple(v_916),1-proj-3-tuple(v_920),3-proj-3-tuple(v_916)))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then symmetricstatepack(1-proj-3-tuple(v_921),2-proj-3-tuple(v_921),hash(3-proj-3-tuple(v_921),2-proj-3-tuple(v_920))) else fail-any) else fail-any))) in
        {401}let v_923: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_878)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_920)) then cipherstatepack(3-proj-3-tuple(v_920),minnonce) else fail-any),1-proj-3-tuple(v_920),3-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_924: bitstring = catch-fail(symmetricstateunpack(v_923)) in
        {403}let v_925: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {404}let v_926: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_925),2-proj-2-tuple(v_925),3-proj-3-tuple(v_924),msg_b(bob,alice,sid))) in
        {405}let v_927: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_924))) in
        {406}let v_928: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_925))) && success?(1-proj-3-tuple(v_924))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then cipherstatepack(1-proj-2-tuple(v_927),increment_nonce(2-proj-2-tuple(v_925))) else fail-any) else fail-any)) in
        {407}let v_929: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_924)) && success?(1-proj-3-tuple(v_924))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-2-tuple(v_925))))) then (if not-caught-fail(v_926) then (if not-caught-fail(v_928) then (v_928,v_926) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {408}let v_930: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_929),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) in
        {409}let v_931: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_929)) && success?(symmetricstatepack(1-proj-2-tuple(v_929),2-proj-3-tuple(v_924),3-proj-3-tuple(v_924)))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then symmetricstatepack(1-proj-3-tuple(v_930),2-proj-3-tuple(v_930),hash(3-proj-3-tuple(v_930),2-proj-2-tuple(v_929))) else fail-any) else fail-any)) in
        {410}let v_932: bitstring = catch-fail((if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_931) then (v_931,2-proj-2-tuple(v_929)) else fail-any) else fail-any) else fail-any)) in
        {411}let v_933: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_932),v_899,v_881,4-proj-7-tuple(v_878),5-proj-7-tuple(v_878),6-proj-7-tuple(v_878),7-proj-7-tuple(v_878))) in
        {412}let v_934: bitstring = catch-fail(concat3(v_882,2-proj-2-tuple(v_908),2-proj-2-tuple(v_932))) in
        {413}let v_935: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_932))) in
        {414}let v_936: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_935),zero)) in
        {415}let v_937: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_935),zero)) in
        {416}let v_938: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_935),zero)) in
        {417}let v_939: bitstring = catch-fail((if success?(2-proj-3-tuple(v_935)) then (if not-caught-fail(v_936) then (if not-caught-fail(v_937) then (if not-caught-fail(v_938) then (v_936,v_937,v_938) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_940: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_939)) then cipherstatepack(1-proj-3-tuple(v_939),minnonce) else fail-any)) in
        {419}let v_941: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_939)) then cipherstatepack(2-proj-3-tuple(v_939),minnonce) else fail-any)) in
        {420}let v_942: bitstring = catch-fail((if success?(1-proj-2-tuple(v_932)) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_941) then (1-proj-2-tuple(v_932),v_940,v_941) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let (hs_943: handshakestate,message_b_944: bitstring,cs1_945: cipherstate,cs2_946: cipherstate) = (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-7-tuple(v_878))))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (if not-caught-fail(v_884) then (if not-caught-fail(v_890) then (if not-caught-fail(v_897) then (if not-caught-fail(v_899) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-2-tuple(v_908))))) then (if not-caught-fail(v_915) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then (if not-caught-fail(v_933) then (if not-caught-fail(v_934) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (v_933,v_934,2-proj-3-tuple(v_942),3-proj-3-tuple(v_942)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {422}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {423}insert statestore(bob,alice,sid,statepack_c(hs_943,cs1_945,cs2_946));
        {424}out(pub, message_b_944)
    ) | (
        {426}!
        {446}get statestore(=bob,=alice,=sid,statepack_c(hs_947: handshakestate,cs1_948: cipherstate,cs2_949: cipherstate)) in
        {427}let hs_950: handshakestate = handshakestatesetcs(hs_947,cs1_948) in
        {428}in(pub, message_c_951: bitstring);
        {429}let v_952: bitstring = catch-fail(handshakestateunpack(hs_950)) in
        {430}let v_953: bitstring = catch-fail(deconcat3(message_c_951)) in
        {431}let v_954: bool = catch-fail(true) in
        {432}let v_955: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_952))) in
        {433}let v_956: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {434}let v_957: aead = catch-fail(decrypt(1-proj-2-tuple(v_956),2-proj-2-tuple(v_956),3-proj-3-tuple(v_955),3-proj-3-tuple(v_953))) in
        {435}let v_958: bitstring = catch-fail(aeadunpack(v_957)) in
        {436}let v_959: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {437}let v_960: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_956))) && success?(1-proj-3-tuple(v_955))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then cipherstatepack(1-proj-2-tuple(v_959),increment_nonce(2-proj-2-tuple(v_956))) else fail-any) else fail-any)) in
        {438}let v_961: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_953)) && (success?(3-proj-3-tuple(v_955)) && success?(1-proj-3-tuple(v_955)))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then (if not-caught-fail(v_957) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if not-caught-fail(v_960) then (v_960,3-proj-3-tuple(v_958),1-proj-3-tuple(v_958)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_962: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) in
        {440}let v_963: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_953)) && success?(symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then symmetricstatepack(1-proj-3-tuple(v_962),2-proj-3-tuple(v_962),hash(3-proj-3-tuple(v_962),3-proj-3-tuple(v_953))) else fail-any) else fail-any)) in
        {441}let v_964: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_953)) && success?(1-proj-7-tuple(v_952))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_963) then (v_963,2-proj-3-tuple(v_961),3-proj-3-tuple(v_961)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {442}let v_965: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_964),2-proj-7-tuple(v_952),3-proj-7-tuple(v_952),4-proj-7-tuple(v_952),5-proj-7-tuple(v_952),6-proj-7-tuple(v_952),7-proj-7-tuple(v_952))) in
        {443}let (hs_966: handshakestate,plaintext_c: bitstring,valid_967: bool) = (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-7-tuple(v_952))))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if not-caught-fail(v_954) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if (v_954 && 3-proj-3-tuple(v_964)) then (if not-caught-fail(v_965) then (v_965,2-proj-3-tuple(v_964),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {444}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {445}insert statestore(bob,alice,sid,statepack_d(hs_966,handshakestategetcs(hs_966),cs2_949))
    ) | (
        {447}!
        {465}get statestore(=bob,=alice,=sid,statepack_d(hs_968: handshakestate,cs1_969: cipherstate,cs2_970: cipherstate)) in
        {448}let hs_971: handshakestate = handshakestatesetcs(hs_968,cs2_970) in
        {449}let v_972: bitstring = catch-fail(handshakestateunpack(hs_971)) in
        {450}let v_973: bitstring = catch-fail((empty,empty,empty)) in
        {451}let v_974: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_972))) in
        {452}let v_975: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_974))) in
        {453}let v_976: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_975),2-proj-2-tuple(v_975),3-proj-3-tuple(v_974),msg_d(bob,alice,sid))) in
        {454}let v_977: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_974))) in
        {455}let v_978: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_975))) && success?(1-proj-3-tuple(v_974))) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-2-tuple(v_977))))) then cipherstatepack(1-proj-2-tuple(v_977),increment_nonce(2-proj-2-tuple(v_975))) else fail-any) else fail-any)) in
        {456}let v_979: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_974)) && success?(1-proj-3-tuple(v_974))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-2-tuple(v_975))))) then (if not-caught-fail(v_976) then (if not-caught-fail(v_978) then (v_978,v_976) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {457}let v_980: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_979),2-proj-3-tuple(v_974),3-proj-3-tuple(v_974)))) in
        {458}let v_981: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_979)) && success?(symmetricstatepack(1-proj-2-tuple(v_979),2-proj-3-tuple(v_974),3-proj-3-tuple(v_974)))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-3-tuple(v_980))))) then symmetricstatepack(1-proj-3-tuple(v_980),2-proj-3-tuple(v_980),hash(3-proj-3-tuple(v_980),2-proj-2-tuple(v_979))) else fail-any) else fail-any)) in
        {459}let v_982: bitstring = catch-fail((if success?(1-proj-7-tuple(v_972)) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-2-tuple(v_979))))) then (if not-caught-fail(v_981) then (v_981,2-proj-2-tuple(v_979)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_983: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_982),2-proj-7-tuple(v_972),3-proj-7-tuple(v_972),4-proj-7-tuple(v_972),5-proj-7-tuple(v_972),6-proj-7-tuple(v_972),7-proj-7-tuple(v_972))) in
        {461}let v_984: bitstring = catch-fail(concat3(1-proj-3-tuple(v_973),2-proj-3-tuple(v_973),2-proj-2-tuple(v_982))) in
        {462}let (hs_985: handshakestate,message_d_986: bitstring) = (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-7-tuple(v_972))))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-2-tuple(v_982))))) then (if not-caught-fail(v_983) then (if not-caught-fail(v_984) then (v_983,v_984) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {463}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {464}out(pub, message_d_986)
    ) | (
        {466}event LeakPsk(phase0,alice,bob);
        {467}out(pub, key_psk(alice,bob))
    ) | (
        {468}phase 1;
        {469}event LeakPsk(phase1,alice,bob);
        {470}out(pub, key_psk(alice,bob))
    ) | (
        {471}event LeakS(phase0,bob);
        {472}out(pub, key_s(bob))
    ) | (
        {473}phase 1;
        {474}event LeakS(phase1,bob);
        {475}out(pub, key_s(bob))
    )
) | (
    {476}let s_987: keypair = keypairpack(empty,empty) in
    {477}out(pub, getpublickey(s_987));
    (
        {478}let e_988: keypair = keypairpack(empty,empty) in
        {479}let rs_989: key = empty in
        {480}let re_990: key = empty in
        {481}let v_991: bitstring = catch-fail(hash(somename,empty)) in
        {482}let v_992: key = catch-fail(v_991) in
        {483}let v_993: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {484}let v_994: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_991) then (if not-caught-fail(v_992) then (if not-caught-fail(v_993) then symmetricstatepack(v_993,v_992,v_991) else fail-any) else fail-any) else fail-any))) in
        {485}let v_995: symmetricstate = catch-fail((if success?((if not-caught-fail(v_991) then (if not-caught-fail(v_992) then (if not-caught-fail(v_993) then symmetricstatepack(v_993,v_992,v_991) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then symmetricstatepack(1-proj-3-tuple(v_994),2-proj-3-tuple(v_994),hash(3-proj-3-tuple(v_994),empty)) else fail-any) else fail-any)) in
        {486}let hs_996: handshakestate = (if not-caught-fail(v_995) then handshakestatepack(v_995,s_987,e_988,rs_989,re_990,key_psk(charlie,bob),false) else fail-any) in
        {487}insert statestore(bob,charlie,sid,statepack_a(hs_996))
    ) | (
        {515}get statestore(=bob,=charlie,=sid,statepack_a(hs_997: handshakestate)) in
        {488}in(pub, message_a_998: bitstring);
        {489}let v_999: bitstring = catch-fail(handshakestateunpack(hs_997)) in
        {490}let v_1000: bitstring = catch-fail(deconcat3(message_a_998)) in
        {491}let v_1001: bool = catch-fail(true) in
        {492}let v_1002: key = catch-fail(1-proj-3-tuple(v_1000)) in
        {493}let v_1003: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_999))) in
        {494}let v_1004: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_999)) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then symmetricstatepack(1-proj-3-tuple(v_1003),2-proj-3-tuple(v_1003),hash(3-proj-3-tuple(v_1003),v_1002)) else fail-any) else fail-any)) in
        {495}let v_1005: bitstring = catch-fail(symmetricstateunpack(v_1004)) in
        {496}let v_1006: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1005),v_1002)) in
        {497}let v_1007: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1005),v_1002)) in
        {498}let v_1008: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1005),v_1002)) in
        {499}let v_1009: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1005)) then (if not-caught-fail(v_1006) then (if not-caught-fail(v_1007) then (if not-caught-fail(v_1008) then (v_1006,v_1007,v_1008) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {500}let v_1010: symmetricstate = catch-fail((if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1009)) then cipherstatepack(2-proj-3-tuple(v_1009),minnonce) else fail-any),1-proj-3-tuple(v_1009),3-proj-3-tuple(v_1005)) else fail-any) else fail-any)) in
        {501}let v_1011: bitstring = catch-fail(symmetricstateunpack(v_1010)) in
        {502}let v_1012: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1011))) in
        {503}let v_1013: aead = catch-fail(decrypt(1-proj-2-tuple(v_1012),2-proj-2-tuple(v_1012),3-proj-3-tuple(v_1011),3-proj-3-tuple(v_1000))) in
        {504}let v_1014: bitstring = catch-fail(aeadunpack(v_1013)) in
        {505}let v_1015: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1011))) in
        {506}let v_1016: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1012))) && success?(1-proj-3-tuple(v_1011))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then cipherstatepack(1-proj-2-tuple(v_1015),increment_nonce(2-proj-2-tuple(v_1012))) else fail-any) else fail-any)) in
        {507}let v_1017: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1000)) && (success?(3-proj-3-tuple(v_1011)) && success?(1-proj-3-tuple(v_1011)))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then (if not-caught-fail(v_1013) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if not-caught-fail(v_1016) then (v_1016,3-proj-3-tuple(v_1014),1-proj-3-tuple(v_1014)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {508}let v_1018: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1017),2-proj-3-tuple(v_1011),3-proj-3-tuple(v_1011)))) in
        {509}let v_1019: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1000)) && success?(symmetricstatepack(1-proj-3-tuple(v_1017),2-proj-3-tuple(v_1011),3-proj-3-tuple(v_1011)))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-3-tuple(v_1018))))) then symmetricstatepack(1-proj-3-tuple(v_1018),2-proj-3-tuple(v_1018),hash(3-proj-3-tuple(v_1018),3-proj-3-tuple(v_1000))) else fail-any) else fail-any)) in
        {510}let v_1020: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1000)) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if not-caught-fail(v_1019) then (v_1019,2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {511}let v_1021: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1020),2-proj-7-tuple(v_999),3-proj-7-tuple(v_999),4-proj-7-tuple(v_999),v_1002,6-proj-7-tuple(v_999),7-proj-7-tuple(v_999))) in
        {512}let (hs_1022: handshakestate,plaintext_a_1023: bitstring,valid_1024: bool) = (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-7-tuple(v_999))))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then (if not-caught-fail(v_1001) then (if not-caught-fail(v_1002) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1010) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if (v_1001 && 3-proj-3-tuple(v_1020)) then (if not-caught-fail(v_1021) then (v_1021,2-proj-3-tuple(v_1020),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {513}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1023);
        {514}insert statestore(bob,charlie,sid,statepack_b(hs_1022))
    ) | (
        {585}get statestore(=bob,=charlie,=sid,statepack_b(hs_1025: handshakestate)) in
        {516}let v_1026: bitstring = catch-fail(handshakestateunpack(hs_1025)) in
        {517}let v_1027: bitstring = catch-fail((empty,empty,empty)) in
        {518}let v_1028: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {519}let v_1029: keypair = catch-fail((if not-caught-fail(v_1028) then keypairpack(validkey(v_1028),key_e(bob,charlie,sid)) else fail-any)) in
        {520}let v_1030: bitstring = catch-fail(getpublickey(v_1029)) in
        {521}let v_1031: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1026))) in
        {522}let v_1032: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then symmetricstatepack(1-proj-3-tuple(v_1031),2-proj-3-tuple(v_1031),hash(3-proj-3-tuple(v_1031),v_1030)) else fail-any) else fail-any)) in
        {523}let v_1033: bitstring = catch-fail(symmetricstateunpack(v_1032)) in
        {524}let v_1034: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1033),getpublickey(v_1029))) in
        {525}let v_1035: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1033),getpublickey(v_1029))) in
        {526}let v_1036: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1033),getpublickey(v_1029))) in
        {527}let v_1037: bitstring = catch-fail((if (success?(getpublickey(v_1029)) && success?(2-proj-3-tuple(v_1033))) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1035) then (if not-caught-fail(v_1036) then (v_1034,v_1035,v_1036) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {528}let v_1038: symmetricstate = catch-fail((if success?(getpublickey(v_1029)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1037)) then cipherstatepack(2-proj-3-tuple(v_1037),minnonce) else fail-any),1-proj-3-tuple(v_1037),3-proj-3-tuple(v_1033)) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1039: bitstring = catch-fail(keypairunpack(v_1029)) in
        {530}let v_1040: bitstring = catch-fail(symmetricstateunpack(v_1038)) in
        {531}let v_1041: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1040),(if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-2-tuple(v_1039))))) then dhexp(2-proj-2-tuple(v_1039),5-proj-7-tuple(v_1026)) else fail-any) else fail-any))) in
        {532}let v_1042: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1040),(if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-2-tuple(v_1039))))) then dhexp(2-proj-2-tuple(v_1039),5-proj-7-tuple(v_1026)) else fail-any) else fail-any))) in
        {533}let v_1043: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1040),(if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-2-tuple(v_1039))))) then dhexp(2-proj-2-tuple(v_1039),5-proj-7-tuple(v_1026)) else fail-any) else fail-any))) in
        {534}let v_1044: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-2-tuple(v_1039))))) then dhexp(2-proj-2-tuple(v_1039),5-proj-7-tuple(v_1026)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1040))) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1042) then (if not-caught-fail(v_1043) then (v_1041,v_1042,v_1043) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1045: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-2-tuple(v_1039))))) then dhexp(2-proj-2-tuple(v_1039),5-proj-7-tuple(v_1026)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1044)) then cipherstatepack(2-proj-3-tuple(v_1044),minnonce) else fail-any),1-proj-3-tuple(v_1044),3-proj-3-tuple(v_1040)) else fail-any) else fail-any) else fail-any)) in
        {536}let v_1046: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {537}let v_1047: keypair = catch-fail((if not-caught-fail(v_1046) then keypairpack(validkey(v_1046),key_s(bob)) else fail-any)) in
        {538}let v_1048: bitstring = catch-fail(symmetricstateunpack(v_1045)) in
        {539}let v_1049: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1048))) in
        {540}let v_1050: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1049),2-proj-2-tuple(v_1049),3-proj-3-tuple(v_1048),getpublickey(v_1047))) in
        {541}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1048))) in
        {542}let v_1052: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1049))) && success?(1-proj-3-tuple(v_1048))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then cipherstatepack(1-proj-2-tuple(v_1051),increment_nonce(2-proj-2-tuple(v_1049))) else fail-any) else fail-any)) in
        {543}let v_1053: bitstring = catch-fail((if (success?(getpublickey(v_1047)) && (success?(3-proj-3-tuple(v_1048)) && success?(1-proj-3-tuple(v_1048)))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-2-tuple(v_1049))))) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1052) then (v_1052,v_1050) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {544}let v_1054: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1053),2-proj-3-tuple(v_1048),3-proj-3-tuple(v_1048)))) in
        {545}let v_1055: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1053)) && success?(symmetricstatepack(1-proj-2-tuple(v_1053),2-proj-3-tuple(v_1048),3-proj-3-tuple(v_1048)))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then symmetricstatepack(1-proj-3-tuple(v_1054),2-proj-3-tuple(v_1054),hash(3-proj-3-tuple(v_1054),2-proj-2-tuple(v_1053))) else fail-any) else fail-any)) in
        {546}let v_1056: bitstring = catch-fail((if success?(getpublickey(v_1047)) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then (if not-caught-fail(v_1055) then (v_1055,2-proj-2-tuple(v_1053)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1057: bitstring = catch-fail(keypairunpack(v_1047)) in
        {548}let v_1058: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1056))) in
        {549}let v_1059: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1058),(if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),5-proj-7-tuple(v_1026)) else fail-any) else fail-any))) in
        {550}let v_1060: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1058),(if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),5-proj-7-tuple(v_1026)) else fail-any) else fail-any))) in
        {551}let v_1061: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1058),(if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),5-proj-7-tuple(v_1026)) else fail-any) else fail-any))) in
        {552}let v_1062: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),5-proj-7-tuple(v_1026)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1058))) then (if not-caught-fail(v_1059) then (if not-caught-fail(v_1060) then (if not-caught-fail(v_1061) then (v_1059,v_1060,v_1061) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1063: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then dhexp(2-proj-2-tuple(v_1057),5-proj-7-tuple(v_1026)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1056))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-3-tuple(v_1062))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1062)) then cipherstatepack(2-proj-3-tuple(v_1062),minnonce) else fail-any),1-proj-3-tuple(v_1062),3-proj-3-tuple(v_1058)) else fail-any) else fail-any) else fail-any)) in
        {554}let v_1064: bitstring = catch-fail(symmetricstateunpack(v_1063)) in
        {555}let v_1065: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1064),6-proj-7-tuple(v_1026))) in
        {556}let v_1066: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1064),6-proj-7-tuple(v_1026))) in
        {557}let v_1067: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1064),6-proj-7-tuple(v_1026))) in
        {558}let v_1068: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_1026)) && success?(2-proj-3-tuple(v_1064))) then (if not-caught-fail(v_1065) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1067) then (v_1065,v_1066,v_1067) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {559}let v_1069: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1064),1-proj-3-tuple(v_1068),3-proj-3-tuple(v_1064)))) in
        {560}let v_1070: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_1068)) && success?(symmetricstatepack(1-proj-3-tuple(v_1064),1-proj-3-tuple(v_1068),3-proj-3-tuple(v_1064)))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then symmetricstatepack(1-proj-3-tuple(v_1069),2-proj-3-tuple(v_1069),hash(3-proj-3-tuple(v_1069),2-proj-3-tuple(v_1068))) else fail-any) else fail-any))) in
        {561}let v_1071: symmetricstate = catch-fail((if success?(6-proj-7-tuple(v_1026)) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_1068)) then cipherstatepack(3-proj-3-tuple(v_1068),minnonce) else fail-any),1-proj-3-tuple(v_1068),3-proj-3-tuple(v_1070)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {562}let v_1072: bitstring = catch-fail(symmetricstateunpack(v_1071)) in
        {563}let v_1073: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1072))) in
        {564}let v_1074: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1073),2-proj-2-tuple(v_1073),3-proj-3-tuple(v_1072),msg_b(bob,charlie,sid))) in
        {565}let v_1075: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1072))) in
        {566}let v_1076: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1073))) && success?(1-proj-3-tuple(v_1072))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then cipherstatepack(1-proj-2-tuple(v_1075),increment_nonce(2-proj-2-tuple(v_1073))) else fail-any) else fail-any)) in
        {567}let v_1077: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1072)) && success?(1-proj-3-tuple(v_1072))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then (if not-caught-fail(v_1074) then (if not-caught-fail(v_1076) then (v_1076,v_1074) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1078: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1077),2-proj-3-tuple(v_1072),3-proj-3-tuple(v_1072)))) in
        {569}let v_1079: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1077)) && success?(symmetricstatepack(1-proj-2-tuple(v_1077),2-proj-3-tuple(v_1072),3-proj-3-tuple(v_1072)))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-3-tuple(v_1078))))) then symmetricstatepack(1-proj-3-tuple(v_1078),2-proj-3-tuple(v_1078),hash(3-proj-3-tuple(v_1078),2-proj-2-tuple(v_1077))) else fail-any) else fail-any)) in
        {570}let v_1080: bitstring = catch-fail((if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-2-tuple(v_1077))))) then (if not-caught-fail(v_1079) then (v_1079,2-proj-2-tuple(v_1077)) else fail-any) else fail-any) else fail-any)) in
        {571}let v_1081: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1080),v_1047,v_1029,4-proj-7-tuple(v_1026),5-proj-7-tuple(v_1026),6-proj-7-tuple(v_1026),7-proj-7-tuple(v_1026))) in
        {572}let v_1082: bitstring = catch-fail(concat3(v_1030,2-proj-2-tuple(v_1056),2-proj-2-tuple(v_1080))) in
        {573}let v_1083: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1080))) in
        {574}let v_1084: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1083),zero)) in
        {575}let v_1085: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1083),zero)) in
        {576}let v_1086: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1083),zero)) in
        {577}let v_1087: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1083)) then (if not-caught-fail(v_1084) then (if not-caught-fail(v_1085) then (if not-caught-fail(v_1086) then (v_1084,v_1085,v_1086) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {578}let v_1088: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1087)) then cipherstatepack(1-proj-3-tuple(v_1087),minnonce) else fail-any)) in
        {579}let v_1089: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1087)) then cipherstatepack(2-proj-3-tuple(v_1087),minnonce) else fail-any)) in
        {580}let v_1090: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1080)) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-3-tuple(v_1087))))) then (if not-caught-fail(v_1088) then (if not-caught-fail(v_1089) then (1-proj-2-tuple(v_1080),v_1088,v_1089) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {581}let (hs_1091: handshakestate,message_b_1092: bitstring,cs1_1093: cipherstate,cs2_1094: cipherstate) = (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-7-tuple(v_1026))))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-3-tuple(v_1027))))) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then (if not-caught-fail(v_1032) then (if not-caught-fail(v_1038) then (if not-caught-fail(v_1045) then (if not-caught-fail(v_1047) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then (if not-caught-fail(v_1063) then (if not-caught-fail(v_1071) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-2-tuple(v_1080))))) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then (v_1081,v_1082,2-proj-3-tuple(v_1090),3-proj-3-tuple(v_1090)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {582}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {583}insert statestore(bob,charlie,sid,statepack_c(hs_1091,cs1_1093,cs2_1094));
        {584}out(pub, message_b_1092)
    ) | (
        {586}!
        {606}get statestore(=bob,=charlie,=sid,statepack_c(hs_1095: handshakestate,cs1_1096: cipherstate,cs2_1097: cipherstate)) in
        {587}let hs_1098: handshakestate = handshakestatesetcs(hs_1095,cs1_1096) in
        {588}in(pub, message_c_1099: bitstring);
        {589}let v_1100: bitstring = catch-fail(handshakestateunpack(hs_1098)) in
        {590}let v_1101: bitstring = catch-fail(deconcat3(message_c_1099)) in
        {591}let v_1102: bool = catch-fail(true) in
        {592}let v_1103: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1100))) in
        {593}let v_1104: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1103))) in
        {594}let v_1105: aead = catch-fail(decrypt(1-proj-2-tuple(v_1104),2-proj-2-tuple(v_1104),3-proj-3-tuple(v_1103),3-proj-3-tuple(v_1101))) in
        {595}let v_1106: bitstring = catch-fail(aeadunpack(v_1105)) in
        {596}let v_1107: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1103))) in
        {597}let v_1108: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1104))) && success?(1-proj-3-tuple(v_1103))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-2-tuple(v_1107))))) then cipherstatepack(1-proj-2-tuple(v_1107),increment_nonce(2-proj-2-tuple(v_1104))) else fail-any) else fail-any)) in
        {598}let v_1109: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1101)) && (success?(3-proj-3-tuple(v_1103)) && success?(1-proj-3-tuple(v_1103)))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-2-tuple(v_1104))))) then (if not-caught-fail(v_1105) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then (if not-caught-fail(v_1108) then (v_1108,3-proj-3-tuple(v_1106),1-proj-3-tuple(v_1106)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1110: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1109),2-proj-3-tuple(v_1103),3-proj-3-tuple(v_1103)))) in
        {600}let v_1111: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1101)) && success?(symmetricstatepack(1-proj-3-tuple(v_1109),2-proj-3-tuple(v_1103),3-proj-3-tuple(v_1103)))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then symmetricstatepack(1-proj-3-tuple(v_1110),2-proj-3-tuple(v_1110),hash(3-proj-3-tuple(v_1110),3-proj-3-tuple(v_1101))) else fail-any) else fail-any)) in
        {601}let v_1112: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1101)) && success?(1-proj-7-tuple(v_1100))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then (if not-caught-fail(v_1111) then (v_1111,2-proj-3-tuple(v_1109),3-proj-3-tuple(v_1109)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {602}let v_1113: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1112),2-proj-7-tuple(v_1100),3-proj-7-tuple(v_1100),4-proj-7-tuple(v_1100),5-proj-7-tuple(v_1100),6-proj-7-tuple(v_1100),7-proj-7-tuple(v_1100))) in
        {603}let (hs_1114: handshakestate,plaintext_c_1115: bitstring,valid_1116: bool) = (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-7-tuple(v_1100))))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then (if not-caught-fail(v_1102) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if (v_1102 && 3-proj-3-tuple(v_1112)) then (if not-caught-fail(v_1113) then (v_1113,2-proj-3-tuple(v_1112),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {604}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1115);
        {605}insert statestore(bob,charlie,sid,statepack_d(hs_1114,handshakestategetcs(hs_1114),cs2_1097))
    ) | (
        {607}!
        {625}get statestore(=bob,=charlie,=sid,statepack_d(hs_1117: handshakestate,cs1_1118: cipherstate,cs2_1119: cipherstate)) in
        {608}let hs_1120: handshakestate = handshakestatesetcs(hs_1117,cs2_1119) in
        {609}let v_1121: bitstring = catch-fail(handshakestateunpack(hs_1120)) in
        {610}let v_1122: bitstring = catch-fail((empty,empty,empty)) in
        {611}let v_1123: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1121))) in
        {612}let v_1124: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {613}let v_1125: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1124),2-proj-2-tuple(v_1124),3-proj-3-tuple(v_1123),msg_d(bob,charlie,sid))) in
        {614}let v_1126: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {615}let v_1127: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1124))) && success?(1-proj-3-tuple(v_1123))) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-2-tuple(v_1126))))) then cipherstatepack(1-proj-2-tuple(v_1126),increment_nonce(2-proj-2-tuple(v_1124))) else fail-any) else fail-any)) in
        {616}let v_1128: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1123)) && success?(1-proj-3-tuple(v_1123))) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then (if not-caught-fail(v_1125) then (if not-caught-fail(v_1127) then (v_1127,v_1125) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {617}let v_1129: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1128),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) in
        {618}let v_1130: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1128)) && success?(symmetricstatepack(1-proj-2-tuple(v_1128),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then symmetricstatepack(1-proj-3-tuple(v_1129),2-proj-3-tuple(v_1129),hash(3-proj-3-tuple(v_1129),2-proj-2-tuple(v_1128))) else fail-any) else fail-any)) in
        {619}let v_1131: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1121)) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (not-caught-fail(v_1128) && success?(is-true(success?(1-proj-2-tuple(v_1128))))) then (if not-caught-fail(v_1130) then (v_1130,2-proj-2-tuple(v_1128)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {620}let v_1132: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1131),2-proj-7-tuple(v_1121),3-proj-7-tuple(v_1121),4-proj-7-tuple(v_1121),5-proj-7-tuple(v_1121),6-proj-7-tuple(v_1121),7-proj-7-tuple(v_1121))) in
        {621}let v_1133: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1122),2-proj-3-tuple(v_1122),2-proj-2-tuple(v_1131))) in
        {622}let (hs_1134: handshakestate,message_d_1135: bitstring) = (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-7-tuple(v_1121))))) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-3-tuple(v_1122))))) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-2-tuple(v_1131))))) then (if not-caught-fail(v_1132) then (if not-caught-fail(v_1133) then (v_1132,v_1133) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {623}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {624}out(pub, message_d_1135)
    ) | (
        {626}event LeakPsk(phase0,charlie,bob);
        {627}out(pub, key_psk(charlie,bob))
    ) | (
        {628}phase 1;
        {629}event LeakPsk(phase1,charlie,bob);
        {630}out(pub, key_psk(charlie,bob))
    ) | (
        {631}event LeakS(phase0,bob);
        {632}out(pub, key_s(bob))
    ) | (
        {633}phase 1;
        {634}event LeakS(phase1,bob);
        {635}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)) && event(LeakPsk(p,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || (event(LeakPsk(phase1,alice,bob)) && event(LeakS(p,bob)) && event(LeakPsk(p,alice,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)) && event(LeakPsk(p,alice,bob))); attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || (event(LeakPsk(phase1,alice,bob)) && event(LeakS(p,bob)) && event(LeakPsk(p,alice,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 138 rules in the queue.
400 rules inserted. The rule base contains 384 rules. 93 rules in the queue.
600 rules inserted. The rule base contains 552 rules. 97 rules in the queue.
800 rules inserted. The rule base contains 738 rules. 161 rules in the queue.
1000 rules inserted. The rule base contains 920 rules. 191 rules in the queue.
1200 rules inserted. The rule base contains 1068 rules. 210 rules in the queue.
1400 rules inserted. The rule base contains 1155 rules. 170 rules in the queue.
1600 rules inserted. The rule base contains 1278 rules. 214 rules in the queue.
1800 rules inserted. The rule base contains 1426 rules. 220 rules in the queue.
2000 rules inserted. The rule base contains 1570 rules. 211 rules in the queue.
2200 rules inserted. The rule base contains 1726 rules. 248 rules in the queue.
2400 rules inserted. The rule base contains 1868 rules. 300 rules in the queue.
2600 rules inserted. The rule base contains 2006 rules. 353 rules in the queue.
2800 rules inserted. The rule base contains 2138 rules. 368 rules in the queue.
3000 rules inserted. The rule base contains 2259 rules. 383 rules in the queue.
3200 rules inserted. The rule base contains 2355 rules. 389 rules in the queue.
3400 rules inserted. The rule base contains 2454 rules. 390 rules in the queue.
3600 rules inserted. The rule base contains 2557 rules. 345 rules in the queue.
3800 rules inserted. The rule base contains 2688 rules. 290 rules in the queue.
4000 rules inserted. The rule base contains 2852 rules. 273 rules in the queue.
4200 rules inserted. The rule base contains 3013 rules. 309 rules in the queue.
4400 rules inserted. The rule base contains 3168 rules. 345 rules in the queue.
4600 rules inserted. The rule base contains 3325 rules. 410 rules in the queue.
4800 rules inserted. The rule base contains 3453 rules. 428 rules in the queue.
5000 rules inserted. The rule base contains 3587 rules. 437 rules in the queue.
5200 rules inserted. The rule base contains 3688 rules. 423 rules in the queue.
5400 rules inserted. The rule base contains 3775 rules. 399 rules in the queue.
5600 rules inserted. The rule base contains 3855 rules. 346 rules in the queue.
5800 rules inserted. The rule base contains 3928 rules. 272 rules in the queue.
6000 rules inserted. The rule base contains 4014 rules. 229 rules in the queue.
6200 rules inserted. The rule base contains 4086 rules. 192 rules in the queue.
6400 rules inserted. The rule base contains 4211 rules. 177 rules in the queue.
6600 rules inserted. The rule base contains 4337 rules. 155 rules in the queue.
6800 rules inserted. The rule base contains 4435 rules. 103 rules in the queue.
7000 rules inserted. The rule base contains 4546 rules. 117 rules in the queue.
7200 rules inserted. The rule base contains 4639 rules. 59 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778813]),msg_a(alice,charlie,sid[!1 = @sid_828778813]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778814]),msg_a(alice,charlie,sid[!1 = @sid_828778813])))
Abbreviations:
sid_828778847 = sid[!1 = @sid_828778837]
sid_828778848 = sid[!1 = @sid_828778821]

1. The entry statestore(bob,alice,sid_828778847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {327}.
table(statestore(bob,alice,sid_828778847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_828778848,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_828778848,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_828778848,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stagepack_a(sid_828778848),msg_a(alice,charlie,sid_828778848)) may be executed at {196}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g))),msg_a(alice,charlie,sid_828778848))) may be sent on channel pub at output {198}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g))),msg_a(alice,charlie,sid_828778848)))).

4. The entry statestore(bob,alice,sid_828778847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g))),msg_a(alice,charlie,sid_828778848))) that may be sent on channel pub by 3 may be received at input {328}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_828778848),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_828778847),msg_a(alice,charlie,sid_828778848)) may be executed at {353}.
end(RecvMsg(bob,alice,stagepack_a(sid_828778847),msg_a(alice,charlie,sid_828778848))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778851]),msg_a(alice,bob,sid[!1 = @sid_828778851]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778852]),msg_a(alice,bob,sid[!1 = @sid_828778851])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778855]),msg_a(alice,charlie,sid[!1 = @sid_828778855]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778856]),msg_a(alice,charlie,sid[!1 = @sid_828778855])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778865]),msg_a(alice,bob,sid[!1 = @sid_828778865]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778866]),msg_a(alice,bob,sid[!1 = @sid_828778865])))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778869]),msg_a(alice,charlie,sid[!1 = @sid_828778869]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778870]),msg_a(alice,charlie,sid[!1 = @sid_828778869])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778883]),msg_a(alice,charlie,sid[!1 = @sid_828778883]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778884]),msg_a(alice,charlie,sid[!1 = @sid_828778883])))
Abbreviations:
sid_828778917 = sid[!1 = @sid_828778907]
sid_828778918 = sid[!1 = @sid_828778891]

1. The entry statestore(bob,alice,sid_828778917,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {327}.
table(statestore(bob,alice,sid_828778917,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_828778918,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_828778918,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_828778918,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stagepack_a(sid_828778918),msg_a(alice,charlie,sid_828778918)) may be executed at {196}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g))),msg_a(alice,charlie,sid_828778918))) may be sent on channel pub at output {198}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g))),msg_a(alice,charlie,sid_828778918)))).

4. The entry statestore(bob,alice,sid_828778917,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g))),msg_a(alice,charlie,sid_828778918))) that may be sent on channel pub by 3 may be received at input {328}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_828778918),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_828778917),msg_a(alice,charlie,sid_828778918)) may be executed at {353}.
end(RecvMsg(bob,alice,stagepack_a(sid_828778917),msg_a(alice,charlie,sid_828778918))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_828778925]),msg_a(alice,charlie,sid[!1 = @sid_828778925]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_828778926]),msg_a(alice,charlie,sid[!1 = @sid_828778925])))
Abbreviations:
sid_828778959 = sid[!1 = @sid_828778949]
sid_828778960 = sid[!1 = @sid_828778933]

1. The entry statestore(bob,alice,sid_828778959,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {327}.
table(statestore(bob,alice,sid_828778959,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,charlie,sid_828778960,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) may be inserted in a table at insert {170}.
table(statestore(alice,charlie,sid_828778960,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true)))).

3. The entry statestore(alice,charlie,sid_828778960,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,charlie),true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stagepack_a(sid_828778960),msg_a(alice,charlie,sid_828778960)) may be executed at {196}.
So the message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g))),msg_a(alice,charlie,sid_828778960))) may be sent on channel pub at output {198}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g))),msg_a(alice,charlie,sid_828778960)))).

4. The entry statestore(bob,alice,sid_828778959,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g))),msg_a(alice,charlie,sid_828778960))) that may be sent on channel pub by 3 may be received at input {328}.
We have validkey(dhexp_real(key_e(alice,charlie,sid_828778960),g)) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_828778959),msg_a(alice,charlie,sid_828778960)) may be executed at {353}.
end(RecvMsg(bob,alice,stagepack_a(sid_828778959),msg_a(alice,charlie,sid_828778960))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828778963]),msg_a(alice,bob,sid[!1 = @sid_828778963]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_828778963]))
Abbreviations:
sid_828779015 = sid[!1 = @sid_828778991]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_828779015,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828779015,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_828779015,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828779015),msg_a(alice,bob,sid_828779015)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g)))).

14. By 13, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))).
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015))).

15. By 14, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779015),g))),msg_a(alice,bob,sid_828779015)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_828779015).
attacker(msg_a(alice,bob,sid_828779015)).

16. By 15, the attacker may know msg_a(alice,bob,sid_828779015).
So the attacker may know msg_a(alice,bob,sid_828779015) in phase 1.
attacker_p1(msg_a(alice,bob,sid_828779015)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779018]),msg_a(alice,bob,sid[!1 = @sid_828779018]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_828779018]))
Abbreviations:
sid_828779070 = sid[!1 = @sid_828779046]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_828779070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828779070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_828779070,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828779070),msg_a(alice,bob,sid_828779070)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g)))).

14. By 13, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))).
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070))).

15. By 14, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779070),g))),msg_a(alice,bob,sid_828779070)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_828779070).
attacker(msg_a(alice,bob,sid_828779070)).

16. By 15, the attacker may know msg_a(alice,bob,sid_828779070).
So the attacker may know msg_a(alice,bob,sid_828779070) in phase 1.
attacker_p1(msg_a(alice,bob,sid_828779070)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)) && event(LeakPsk(p,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779073]),msg_a(alice,bob,sid[!1 = @sid_828779073]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_828779073]))
Abbreviations:
sid_828779126 = sid[!1 = @sid_828779102]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_828779126,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828779126,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_828779126,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828779126),msg_a(alice,bob,sid_828779126)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g)))).

14. By 13, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))).
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126))).

15. By 14, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779126),g))),msg_a(alice,bob,sid_828779126)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_828779126).
attacker(msg_a(alice,bob,sid_828779126)).

16. By 15, the attacker may know msg_a(alice,bob,sid_828779126).
So the attacker may know msg_a(alice,bob,sid_828779126) in phase 1.
attacker_p1(msg_a(alice,bob,sid_828779126)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)) && event(LeakPsk(p,alice,bob))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779129]),msg_a(alice,bob,sid[!1 = @sid_828779129]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_828779129]))
Abbreviations:
sid_828779181 = sid[!1 = @sid_828779157]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_828779181,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828779181,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_828779181,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828779181),msg_a(alice,bob,sid_828779181)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181)).
attacker(encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181))).

6. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))).
attacker(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g)))).

14. By 13, the attacker may know hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))).
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))).
By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181))).

15. By 14, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779181),g))),msg_a(alice,bob,sid_828779181)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_828779181).
attacker(msg_a(alice,bob,sid_828779181)).

16. By 15, the attacker may know msg_a(alice,bob,sid_828779181).
So the attacker may know msg_a(alice,bob,sid_828779181) in phase 1.
attacker_p1(msg_a(alice,bob,sid_828779181)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779184]),msg_b(bob,alice,sid[!1 = @sid_828779184]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779185]),msg_a(alice,bob,sid[!1 = @sid_828779185]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828779185]),msg_b(bob,alice,sid[!1 = @sid_828779184])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779193]),msg_b(bob,alice,sid[!1 = @sid_828779193]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779194]),msg_a(alice,bob,sid[!1 = @sid_828779194]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828779194]),msg_b(bob,alice,sid[!1 = @sid_828779193])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779203]),msg_b(bob,alice,sid[!1 = @sid_828779203]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779204]),msg_a(alice,bob,sid[!1 = @sid_828779204]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828779204]),msg_b(bob,alice,sid[!1 = @sid_828779203])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779213]),msg_b(bob,alice,sid[!1 = @sid_828779213]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779214]),msg_a(alice,bob,sid[!1 = @sid_828779214]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828779214]),msg_b(bob,alice,sid[!1 = @sid_828779213])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779222]),msg_b(bob,alice,sid[!1 = @sid_828779222]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779223]),msg_a(alice,bob,sid[!1 = @sid_828779223]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_828779223]),msg_b(bob,alice,sid[!1 = @sid_828779222])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || (event(LeakPsk(phase1,alice,bob)) && event(LeakS(p,bob)) && event(LeakPsk(p,alice,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || (event(LeakPsk(phase1,alice,bob)) && event(LeakS(p,bob)) && event(LeakPsk(p,alice,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779244]),msg_c(alice,bob,sid[!1 = @sid_828779244]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779245]),msg_b(bob,alice,sid[!1 = @sid_828779245]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779244]),msg_a(alice,bob,sid[!1 = @sid_828779244]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828779245]),msg_c(alice,bob,sid[!1 = @sid_828779244])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779253]),msg_c(alice,bob,sid[!1 = @sid_828779253]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779254]),msg_b(bob,alice,sid[!1 = @sid_828779254]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779253]),msg_a(alice,bob,sid[!1 = @sid_828779253]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828779254]),msg_c(alice,bob,sid[!1 = @sid_828779253])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779263]),msg_c(alice,bob,sid[!1 = @sid_828779263]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779264]),msg_b(bob,alice,sid[!1 = @sid_828779264]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779263]),msg_a(alice,bob,sid[!1 = @sid_828779263]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828779264]),msg_c(alice,bob,sid[!1 = @sid_828779263])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1253,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779273]),msg_c(alice,bob,sid[!1 = @sid_828779273]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779274]),msg_b(bob,alice,sid[!1 = @sid_828779274]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779273]),msg_a(alice,bob,sid[!1 = @sid_828779273]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828779274]),msg_c(alice,bob,sid[!1 = @sid_828779273])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779282]),msg_c(alice,bob,sid[!1 = @sid_828779282]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779283]),msg_b(bob,alice,sid[!1 = @sid_828779283]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779282]),msg_a(alice,bob,sid[!1 = @sid_828779282]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_828779283]),msg_c(alice,bob,sid[!1 = @sid_828779282])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)) && event(LeakPsk(p,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)) && event(LeakPsk(p,alice,bob))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779304]),msg_d(bob,alice,sid[!1 = @sid_828779304]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779305]),msg_c(alice,bob,sid[!1 = @sid_828779305]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779304]),msg_b(bob,alice,sid[!1 = @sid_828779304]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779305]),msg_a(alice,bob,sid[!1 = @sid_828779305]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779305]),msg_d(bob,alice,sid[!1 = @sid_828779304])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779313]),msg_d(bob,alice,sid[!1 = @sid_828779313]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779314]),msg_c(alice,bob,sid[!1 = @sid_828779314]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779313]),msg_b(bob,alice,sid[!1 = @sid_828779313]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779314]),msg_a(alice,bob,sid[!1 = @sid_828779314]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779314]),msg_d(bob,alice,sid[!1 = @sid_828779313])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779323]),msg_d(bob,alice,sid[!1 = @sid_828779323]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779324]),msg_c(alice,bob,sid[!1 = @sid_828779324]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779323]),msg_b(bob,alice,sid[!1 = @sid_828779323]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779324]),msg_a(alice,bob,sid[!1 = @sid_828779324]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779324]),msg_d(bob,alice,sid[!1 = @sid_828779323])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1253,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779333]),msg_d(bob,alice,sid[!1 = @sid_828779333]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779334]),msg_c(alice,bob,sid[!1 = @sid_828779334]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779333]),msg_b(bob,alice,sid[!1 = @sid_828779333]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779334]),msg_a(alice,bob,sid[!1 = @sid_828779334]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779334]),msg_d(bob,alice,sid[!1 = @sid_828779333])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || event(LeakPsk(phase0,alice,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779342]),msg_d(bob,alice,sid[!1 = @sid_828779342]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779343]),msg_c(alice,bob,sid[!1 = @sid_828779343]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779342]),msg_b(bob,alice,sid[!1 = @sid_828779342]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779343]),msg_a(alice,bob,sid[!1 = @sid_828779343]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_828779343]),msg_d(bob,alice,sid[!1 = @sid_828779342])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || event(LeakPsk(phase1,alice,bob)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || (event(LeakPsk(phase1,alice,bob)) && event(LeakS(p,bob)) && event(LeakPsk(p,alice,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) || (event(LeakPsk(phase1,alice,bob)) && event(LeakS(p,bob)) && event(LeakPsk(p,alice,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakPsk(phase0,alice,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_828779362]),msg_d(bob,alice,sid[!1 = @sid_828779362]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_828779363]),msg_c(alice,bob,sid[!1 = @sid_828779363]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_828779362]),msg_b(bob,alice,sid[!1 = @sid_828779362]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_828779363]),msg_a(alice,bob,sid[!1 = @sid_828779363]))) -> end(RecvEnd(true))
Abbreviations:
sid_828779595 = sid[!1 = @sid_828779584]
sid_828779596 = sid[!1 = @sid_828779541]

1. The entry statestore(alice,bob,sid_828779595,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {14}.
table(statestore(alice,bob,sid_828779595,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true)))).

2. The entry statestore(alice,bob,sid_828779595,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828779595),msg_a(alice,bob,sid_828779595)) may be executed at {40}.
So the entry statestore(alice,bob,sid_828779595,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),empty,empty,key_psk(alice,bob),true))) may be inserted in a table at insert {41}.
table(statestore(alice,bob,sid_828779595,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),empty,empty,key_psk(alice,bob),true)))).

3. The entry statestore(bob,alice,sid_828779596,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {327}.
table(statestore(bob,alice,sid_828779596,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

4. The entry statestore(alice,bob,sid_828779595,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),true))) that may be in a table by 1 may be read at get {43}.
The event SendMsg(alice,bob,stagepack_a(sid_828779595),msg_a(alice,bob,sid_828779595)) may be executed at {40}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))) may be sent on channel pub at output {42}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595)))).

5. The entry statestore(bob,alice,sid_828779596,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 3 may be read at get {355}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),empty,encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))) that may be sent on channel pub by 4 may be received at input {328}.
We have validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)) <> caught-fail.
So the entry statestore(bob,alice,sid_828779596,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false))) may be inserted in a table at insert {354}.
table(statestore(bob,alice,sid_828779596,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false)))).

6. The entry statestore(bob,alice,sid_828779596,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {425}.
The event SendMsg(bob,alice,stagepack_b(sid_828779596),msg_b(bob,alice,sid_828779596)) may be executed at {422}.
So the message concat3(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))) may be sent on channel pub at output {424}.
mess(pub,concat3(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596)))).

7. The entry statestore(alice,bob,sid_828779595,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),empty,empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {113}.
The message concat3(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))) that may be sent on channel pub by 6 may be received at input {44}.
So the entry statestore(alice,bob,sid_828779595,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {112}.
table(statestore(alice,bob,sid_828779595,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce)))).

8. The entry statestore(alice,bob,sid_828779595,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {133}.
The event SendMsg(alice,bob,stagepack_c(sid_828779595),msg_c(alice,bob,sid_828779595)) may be executed at {130}.
So the entry statestore(alice,bob,sid_828779595,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {131}.
table(statestore(alice,bob,sid_828779595,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_828779596,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false))) that may be in a table by 5 may be read at get {425}.
The event SendMsg(bob,alice,stagepack_b(sid_828779596),msg_b(bob,alice,sid_828779596)) may be executed at {422}.
So the entry statestore(bob,alice,sid_828779596,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_e(bob,alice,sid_828779596)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {423}.
table(statestore(bob,alice,sid_828779596,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_e(bob,alice,sid_828779596)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce)))).

10. The entry statestore(alice,bob,sid_828779595,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 7 may be read at get {133}.
The event SendMsg(alice,bob,stagepack_c(sid_828779595),msg_c(alice,bob,sid_828779595)) may be executed at {130}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595))) may be sent on channel pub at output {132}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595)))).

11. The entry statestore(bob,alice,sid_828779596,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_e(bob,alice,sid_828779596)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 9 may be read at get {446}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595))) that may be sent on channel pub by 10 may be received at input {428}.
So the entry statestore(bob,alice,sid_828779596,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_e(bob,alice,sid_828779596)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) may be inserted in a table at insert {445}.
table(statestore(bob,alice,sid_828779596,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_e(bob,alice,sid_828779596)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_828779596,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_e(bob,alice,sid_828779596)),empty,validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_psk(alice,bob),false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 11 may be read at get {465}.
The event SendMsg(bob,alice,stagepack_d(sid_828779596),msg_d(bob,alice,sid_828779596)) may be executed at {463}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595))),msg_d(bob,alice,sid_828779596))) may be sent on channel pub at output {464}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595))),msg_d(bob,alice,sid_828779596)))).

13. The entry statestore(alice,bob,sid_828779595,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595)))),keypairpack(empty,empty),keypairpack(validkey(dhexp_real(key_e(alice,bob,sid_828779595),g)),key_e(alice,bob,sid_828779595)),validkey(dhexp_real(key_s(bob),g)),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g)),key_psk(alice,bob),true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce))) that may be in a table by 8 may be read at get {154}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),encrypt(hmac_hash3(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob)),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),encrypt(hmac_hash2(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),minnonce,hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),msg_a(alice,bob,sid_828779595))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),validkey(dhexp_real(key_s(bob),g)))),hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),validkey(dhexp_real(key_e(alice,bob,sid_828779595),g))),validkey(dhexp_real(key_e(bob,alice,sid_828779596),g))),dhexp_real(key_e(bob,alice,sid_828779596),dhexp_real(key_e(alice,bob,sid_828779595),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_828779595),g))),key_psk(alice,bob))),msg_b(bob,alice,sid_828779596))),msg_c(alice,bob,sid_828779595))),msg_d(bob,alice,sid_828779596))) that may be sent on channel pub by 12 may be received at input {136}.
So event RecvEnd(true) may be executed at {153}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
