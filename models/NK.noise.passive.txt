File "NK.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "NK.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "NK.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 316, character 6:
Warning: identifier e rebound.
File "NK.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 339, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 345, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 353, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.passive.pv", line 354, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 359, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 367, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 369, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 489, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 482, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 353, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.passive.pv", line 354, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 359, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 474, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "NK.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 532, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 367, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 369, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 524, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 316, character 6:
Warning: identifier e rebound.
File "NK.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 517, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 339, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 342, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 345, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_409: keypair = keypairpack(empty,empty) in
    (
        {3}let e_410: keypair = keypairpack(empty,empty) in
        {4}let v_411: key = catch-fail(dhexp(key_s(bob),g)) in
        {5}let rs_412: key = getpublickey((if not-caught-fail(v_411) then keypairpack(v_411,key_s(bob)) else fail-any)) in
        {6}let re_413: key = empty in
        {7}let v_414: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_415: key = catch-fail(v_414) in
        {9}let v_416: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_417: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_414) then (if not-caught-fail(v_415) then (if not-caught-fail(v_416) then symmetricstatepack(v_416,v_415,v_414) else fail-any) else fail-any) else fail-any))) in
        {11}let v_418: symmetricstate = catch-fail((if success?((if not-caught-fail(v_414) then (if not-caught-fail(v_415) then (if not-caught-fail(v_416) then symmetricstatepack(v_416,v_415,v_414) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_417) && success?(is-true(success?(1-proj-3-tuple(v_417))))) then symmetricstatepack(1-proj-3-tuple(v_417),2-proj-3-tuple(v_417),hash(3-proj-3-tuple(v_417),empty)) else fail-any) else fail-any)) in
        {12}let v_419: bitstring = catch-fail(symmetricstateunpack(v_418)) in
        {13}let v_420: symmetricstate = catch-fail((if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-3-tuple(v_419))))) then symmetricstatepack(1-proj-3-tuple(v_419),2-proj-3-tuple(v_419),hash(3-proj-3-tuple(v_419),rs_412)) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_418) then (if not-caught-fail(v_420) then handshakestatepack(v_420,s_409,e_410,rs_412,re_413,empty,true) else fail-any) else fail-any) in
        {15}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {45}get statestore(=alice,=bob,statepack_a(hs_421: handshakestate)) in
        {16}let v_422: bitstring = catch-fail(handshakestateunpack(hs_421)) in
        {17}let v_423: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_424: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {19}let v_425: keypair = catch-fail((if not-caught-fail(v_424) then keypairpack(v_424,key_e(alice,bob)) else fail-any)) in
        {20}let v_426: bitstring = catch-fail(getpublickey(v_425)) in
        {21}let v_427: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_422))) in
        {22}let v_428: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_422)) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-3-tuple(v_427))))) then symmetricstatepack(1-proj-3-tuple(v_427),2-proj-3-tuple(v_427),hash(3-proj-3-tuple(v_427),v_426)) else fail-any) else fail-any)) in
        {23}let v_429: bitstring = catch-fail(keypairunpack(v_425)) in
        {24}let v_430: bitstring = catch-fail(symmetricstateunpack(v_428)) in
        {25}let v_431: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_430),(if success?(4-proj-7-tuple(v_422)) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-2-tuple(v_429))))) then dhexp(2-proj-2-tuple(v_429),4-proj-7-tuple(v_422)) else fail-any) else fail-any))) in
        {26}let v_432: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_430),(if success?(4-proj-7-tuple(v_422)) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-2-tuple(v_429))))) then dhexp(2-proj-2-tuple(v_429),4-proj-7-tuple(v_422)) else fail-any) else fail-any))) in
        {27}let v_433: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_430),(if success?(4-proj-7-tuple(v_422)) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-2-tuple(v_429))))) then dhexp(2-proj-2-tuple(v_429),4-proj-7-tuple(v_422)) else fail-any) else fail-any))) in
        {28}let v_434: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_422)) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-2-tuple(v_429))))) then dhexp(2-proj-2-tuple(v_429),4-proj-7-tuple(v_422)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_430))) then (if not-caught-fail(v_431) then (if not-caught-fail(v_432) then (if not-caught-fail(v_433) then (v_431,v_432,v_433) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_435: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_422)) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-2-tuple(v_429))))) then dhexp(2-proj-2-tuple(v_429),4-proj-7-tuple(v_422)) else fail-any) else fail-any)) then (if (not-caught-fail(v_430) && success?(is-true(success?(1-proj-3-tuple(v_430))))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-3-tuple(v_434))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_434)) then cipherstatepack(2-proj-3-tuple(v_434),minnonce) else fail-any),1-proj-3-tuple(v_434),3-proj-3-tuple(v_430)) else fail-any) else fail-any) else fail-any)) in
        {30}let v_436: bitstring = catch-fail(symmetricstateunpack(v_435)) in
        {31}let v_437: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_436))) in
        {32}let v_438: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_437),2-proj-2-tuple(v_437),3-proj-3-tuple(v_436),msg_a(alice,bob))) in
        {33}let v_439: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_436))) in
        {34}let v_440: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_437))) && success?(1-proj-3-tuple(v_436))) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-2-tuple(v_439))))) then cipherstatepack(1-proj-2-tuple(v_439),increment_nonce(2-proj-2-tuple(v_437))) else fail-any) else fail-any)) in
        {35}let v_441: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_436)) && success?(1-proj-3-tuple(v_436))) then (if (not-caught-fail(v_437) && success?(is-true(success?(1-proj-2-tuple(v_437))))) then (if not-caught-fail(v_438) then (if not-caught-fail(v_440) then (v_440,v_438) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {36}let v_442: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_441),2-proj-3-tuple(v_436),3-proj-3-tuple(v_436)))) in
        {37}let v_443: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_441)) && success?(symmetricstatepack(1-proj-2-tuple(v_441),2-proj-3-tuple(v_436),3-proj-3-tuple(v_436)))) then (if (not-caught-fail(v_442) && success?(is-true(success?(1-proj-3-tuple(v_442))))) then symmetricstatepack(1-proj-3-tuple(v_442),2-proj-3-tuple(v_442),hash(3-proj-3-tuple(v_442),2-proj-2-tuple(v_441))) else fail-any) else fail-any)) in
        {38}let v_444: bitstring = catch-fail((if (not-caught-fail(v_436) && success?(is-true(success?(1-proj-3-tuple(v_436))))) then (if (not-caught-fail(v_441) && success?(is-true(success?(1-proj-2-tuple(v_441))))) then (if not-caught-fail(v_443) then (v_443,2-proj-2-tuple(v_441)) else fail-any) else fail-any) else fail-any)) in
        {39}let v_445: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_444),2-proj-7-tuple(v_422),v_425,4-proj-7-tuple(v_422),5-proj-7-tuple(v_422),6-proj-7-tuple(v_422),7-proj-7-tuple(v_422))) in
        {40}let v_446: bitstring = catch-fail(concat3(v_426,2-proj-3-tuple(v_423),2-proj-2-tuple(v_444))) in
        {41}let (hs_447: handshakestate,re_448: key,message_a: bitstring) = (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-7-tuple(v_422))))) then (if (not-caught-fail(v_423) && success?(is-true(success?(1-proj-3-tuple(v_423))))) then (if not-caught-fail(v_425) then (if not-caught-fail(v_426) then (if not-caught-fail(v_428) then (if not-caught-fail(v_435) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-2-tuple(v_444))))) then (if not-caught-fail(v_445) then (if not-caught-fail(v_446) then (v_445,5-proj-7-tuple(v_422),v_446) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {42}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {43}insert statestore(alice,bob,statepack_b(hs_447));
        {44}out(pub, message_a)
    ) | (
        {74}get statestore(=alice,=bob,statepack_b(hs_449: handshakestate)) in
        {46}in(pub, message_b: bitstring);
        {47}let v_450: bitstring = catch-fail(handshakestateunpack(hs_449)) in
        {48}let v_451: bitstring = catch-fail(deconcat3(message_b)) in
        {49}let v_452: bool = catch-fail(true) in
        {50}let v_453: key = catch-fail(1-proj-3-tuple(v_451)) in
        {51}let v_454: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_450))) in
        {52}let v_455: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_450)) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-3-tuple(v_454))))) then symmetricstatepack(1-proj-3-tuple(v_454),2-proj-3-tuple(v_454),hash(3-proj-3-tuple(v_454),v_453)) else fail-any) else fail-any)) in
        {53}let v_456: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_450))) in
        {54}let v_457: bitstring = catch-fail(symmetricstateunpack(v_455)) in
        {55}let v_458: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_457),(if success?(3-proj-7-tuple(v_450)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then dhexp(2-proj-2-tuple(v_456),v_453) else fail-any) else fail-any))) in
        {56}let v_459: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_457),(if success?(3-proj-7-tuple(v_450)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then dhexp(2-proj-2-tuple(v_456),v_453) else fail-any) else fail-any))) in
        {57}let v_460: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_457),(if success?(3-proj-7-tuple(v_450)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then dhexp(2-proj-2-tuple(v_456),v_453) else fail-any) else fail-any))) in
        {58}let v_461: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_450)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then dhexp(2-proj-2-tuple(v_456),v_453) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_457))) then (if not-caught-fail(v_458) then (if not-caught-fail(v_459) then (if not-caught-fail(v_460) then (v_458,v_459,v_460) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {59}let v_462: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_450)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-2-tuple(v_456))))) then dhexp(2-proj-2-tuple(v_456),v_453) else fail-any) else fail-any)) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-3-tuple(v_457))))) then (if (not-caught-fail(v_461) && success?(is-true(success?(1-proj-3-tuple(v_461))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_461)) then cipherstatepack(2-proj-3-tuple(v_461),minnonce) else fail-any),1-proj-3-tuple(v_461),3-proj-3-tuple(v_457)) else fail-any) else fail-any) else fail-any)) in
        {60}let v_463: bitstring = catch-fail(symmetricstateunpack(v_462)) in
        {61}let v_464: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_463))) in
        {62}let v_465: aead = catch-fail(decrypt(1-proj-2-tuple(v_464),2-proj-2-tuple(v_464),3-proj-3-tuple(v_463),3-proj-3-tuple(v_451))) in
        {63}let v_466: bitstring = catch-fail(aeadunpack(v_465)) in
        {64}let v_467: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_463))) in
        {65}let v_468: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_464))) && success?(1-proj-3-tuple(v_463))) then (if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-2-tuple(v_467))))) then cipherstatepack(1-proj-2-tuple(v_467),increment_nonce(2-proj-2-tuple(v_464))) else fail-any) else fail-any)) in
        {66}let v_469: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_451)) && (success?(3-proj-3-tuple(v_463)) && success?(1-proj-3-tuple(v_463)))) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-2-tuple(v_464))))) then (if not-caught-fail(v_465) then (if (not-caught-fail(v_466) && success?(is-true(success?(1-proj-3-tuple(v_466))))) then (if not-caught-fail(v_468) then (v_468,3-proj-3-tuple(v_466),1-proj-3-tuple(v_466)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {67}let v_470: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_469),2-proj-3-tuple(v_463),3-proj-3-tuple(v_463)))) in
        {68}let v_471: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_451)) && success?(symmetricstatepack(1-proj-3-tuple(v_469),2-proj-3-tuple(v_463),3-proj-3-tuple(v_463)))) then (if (not-caught-fail(v_470) && success?(is-true(success?(1-proj-3-tuple(v_470))))) then symmetricstatepack(1-proj-3-tuple(v_470),2-proj-3-tuple(v_470),hash(3-proj-3-tuple(v_470),3-proj-3-tuple(v_451))) else fail-any) else fail-any)) in
        {69}let v_472: bitstring = catch-fail((if success?(3-proj-3-tuple(v_451)) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-3-tuple(v_463))))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-3-tuple(v_469))))) then (if not-caught-fail(v_471) then (v_471,2-proj-3-tuple(v_469),3-proj-3-tuple(v_469)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_473: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_472),2-proj-7-tuple(v_450),3-proj-7-tuple(v_450),4-proj-7-tuple(v_450),v_453,6-proj-7-tuple(v_450),7-proj-7-tuple(v_450))) in
        {71}let (hs_474: handshakestate,re_475: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_450) && success?(is-true(success?(1-proj-7-tuple(v_450))))) then (if (not-caught-fail(v_451) && success?(is-true(success?(1-proj-3-tuple(v_451))))) then (if not-caught-fail(v_452) then (if not-caught-fail(v_453) then (if not-caught-fail(v_455) then (if not-caught-fail(v_462) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-3-tuple(v_472))))) then (if (v_452 && 3-proj-3-tuple(v_472)) then (if not-caught-fail(v_473) then (v_473,getpublickey(3-proj-7-tuple(v_450)),2-proj-3-tuple(v_472),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {72}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {73}insert statestore(alice,bob,statepack_c(hs_474))
    ) | (
        {100}get statestore(=alice,=bob,statepack_c(hs_476: handshakestate)) in
        {75}let v_477: bitstring = catch-fail(handshakestateunpack(hs_476)) in
        {76}let v_478: bitstring = catch-fail((empty,empty,empty)) in
        {77}let v_479: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_477))) in
        {78}let v_480: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_479))) in
        {79}let v_481: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_480),2-proj-2-tuple(v_480),3-proj-3-tuple(v_479),msg_c(alice,bob))) in
        {80}let v_482: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_479))) in
        {81}let v_483: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_480))) && success?(1-proj-3-tuple(v_479))) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-2-tuple(v_482))))) then cipherstatepack(1-proj-2-tuple(v_482),increment_nonce(2-proj-2-tuple(v_480))) else fail-any) else fail-any)) in
        {82}let v_484: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_479)) && success?(1-proj-3-tuple(v_479))) then (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-2-tuple(v_480))))) then (if not-caught-fail(v_481) then (if not-caught-fail(v_483) then (v_483,v_481) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_485: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_484),2-proj-3-tuple(v_479),3-proj-3-tuple(v_479)))) in
        {84}let v_486: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_484)) && success?(symmetricstatepack(1-proj-2-tuple(v_484),2-proj-3-tuple(v_479),3-proj-3-tuple(v_479)))) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then symmetricstatepack(1-proj-3-tuple(v_485),2-proj-3-tuple(v_485),hash(3-proj-3-tuple(v_485),2-proj-2-tuple(v_484))) else fail-any) else fail-any)) in
        {85}let v_487: bitstring = catch-fail((if success?(1-proj-7-tuple(v_477)) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-2-tuple(v_484))))) then (if not-caught-fail(v_486) then (v_486,2-proj-2-tuple(v_484)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_488: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_487),2-proj-7-tuple(v_477),3-proj-7-tuple(v_477),4-proj-7-tuple(v_477),5-proj-7-tuple(v_477),6-proj-7-tuple(v_477),7-proj-7-tuple(v_477))) in
        {87}let v_489: bitstring = catch-fail(concat3(1-proj-3-tuple(v_478),2-proj-3-tuple(v_478),2-proj-2-tuple(v_487))) in
        {88}let v_490: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_487))) in
        {89}let v_491: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_490),zero)) in
        {90}let v_492: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_490),zero)) in
        {91}let v_493: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_490),zero)) in
        {92}let v_494: bitstring = catch-fail((if success?(2-proj-3-tuple(v_490)) then (if not-caught-fail(v_491) then (if not-caught-fail(v_492) then (if not-caught-fail(v_493) then (v_491,v_492,v_493) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {93}let v_495: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_494)) then cipherstatepack(1-proj-3-tuple(v_494),minnonce) else fail-any)) in
        {94}let v_496: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_494)) then cipherstatepack(2-proj-3-tuple(v_494),minnonce) else fail-any)) in
        {95}let v_497: bitstring = catch-fail((if success?(1-proj-2-tuple(v_487)) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-3-tuple(v_490))))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-3-tuple(v_494))))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_496) then (1-proj-2-tuple(v_487),v_495,v_496) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let (hs_498: handshakestate,re_499: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-7-tuple(v_477))))) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-3-tuple(v_478))))) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-2-tuple(v_487))))) then (if not-caught-fail(v_488) then (if not-caught-fail(v_489) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-3-tuple(v_497))))) then (v_488,5-proj-7-tuple(v_477),v_489,2-proj-3-tuple(v_497),3-proj-3-tuple(v_497)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {97}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {98}insert statestore(alice,bob,statepack_d(hs_498));
        {99}out(pub, message_c)
    ) | (
        {101}event LeakS(phase0,alice);
        {102}out(pub, key_s(alice))
    ) | (
        {103}phase 1;
        {104}event LeakS(phase1,alice);
        {105}out(pub, key_s(alice))
    )
) | (
    {106}let s_500: keypair = keypairpack(empty,empty) in
    (
        {107}let e_501: keypair = keypairpack(empty,empty) in
        {108}let v_502: key = catch-fail(dhexp(key_s(charlie),g)) in
        {109}let rs_503: key = getpublickey((if not-caught-fail(v_502) then keypairpack(v_502,key_s(charlie)) else fail-any)) in
        {110}let re_504: key = empty in
        {111}let v_505: bitstring = catch-fail(hash(somename,empty)) in
        {112}let v_506: key = catch-fail(v_505) in
        {113}let v_507: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {114}let v_508: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (if not-caught-fail(v_507) then symmetricstatepack(v_507,v_506,v_505) else fail-any) else fail-any) else fail-any))) in
        {115}let v_509: symmetricstate = catch-fail((if success?((if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (if not-caught-fail(v_507) then symmetricstatepack(v_507,v_506,v_505) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then symmetricstatepack(1-proj-3-tuple(v_508),2-proj-3-tuple(v_508),hash(3-proj-3-tuple(v_508),empty)) else fail-any) else fail-any)) in
        {116}let v_510: bitstring = catch-fail(symmetricstateunpack(v_509)) in
        {117}let v_511: symmetricstate = catch-fail((if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_510),hash(3-proj-3-tuple(v_510),rs_503)) else fail-any)) in
        {118}let hs_512: handshakestate = (if not-caught-fail(v_509) then (if not-caught-fail(v_511) then handshakestatepack(v_511,s_500,e_501,rs_503,re_504,empty,true) else fail-any) else fail-any) in
        {119}insert statestore(alice,charlie,statepack_a(hs_512))
    ) | (
        {149}get statestore(=alice,=charlie,statepack_a(hs_513: handshakestate)) in
        {120}let v_514: bitstring = catch-fail(handshakestateunpack(hs_513)) in
        {121}let v_515: bitstring = catch-fail((empty,empty,empty)) in
        {122}let v_516: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {123}let v_517: keypair = catch-fail((if not-caught-fail(v_516) then keypairpack(v_516,key_e(alice,charlie)) else fail-any)) in
        {124}let v_518: bitstring = catch-fail(getpublickey(v_517)) in
        {125}let v_519: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_514))) in
        {126}let v_520: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_514)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then symmetricstatepack(1-proj-3-tuple(v_519),2-proj-3-tuple(v_519),hash(3-proj-3-tuple(v_519),v_518)) else fail-any) else fail-any)) in
        {127}let v_521: bitstring = catch-fail(keypairunpack(v_517)) in
        {128}let v_522: bitstring = catch-fail(symmetricstateunpack(v_520)) in
        {129}let v_523: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_522),(if success?(4-proj-7-tuple(v_514)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-2-tuple(v_521))))) then dhexp(2-proj-2-tuple(v_521),4-proj-7-tuple(v_514)) else fail-any) else fail-any))) in
        {130}let v_524: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_522),(if success?(4-proj-7-tuple(v_514)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-2-tuple(v_521))))) then dhexp(2-proj-2-tuple(v_521),4-proj-7-tuple(v_514)) else fail-any) else fail-any))) in
        {131}let v_525: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_522),(if success?(4-proj-7-tuple(v_514)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-2-tuple(v_521))))) then dhexp(2-proj-2-tuple(v_521),4-proj-7-tuple(v_514)) else fail-any) else fail-any))) in
        {132}let v_526: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_514)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-2-tuple(v_521))))) then dhexp(2-proj-2-tuple(v_521),4-proj-7-tuple(v_514)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_522))) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then (if not-caught-fail(v_525) then (v_523,v_524,v_525) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {133}let v_527: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_514)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-2-tuple(v_521))))) then dhexp(2-proj-2-tuple(v_521),4-proj-7-tuple(v_514)) else fail-any) else fail-any)) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_526)) then cipherstatepack(2-proj-3-tuple(v_526),minnonce) else fail-any),1-proj-3-tuple(v_526),3-proj-3-tuple(v_522)) else fail-any) else fail-any) else fail-any)) in
        {134}let v_528: bitstring = catch-fail(symmetricstateunpack(v_527)) in
        {135}let v_529: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_528))) in
        {136}let v_530: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_529),2-proj-2-tuple(v_529),3-proj-3-tuple(v_528),msg_a(alice,charlie))) in
        {137}let v_531: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_528))) in
        {138}let v_532: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_529))) && success?(1-proj-3-tuple(v_528))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then cipherstatepack(1-proj-2-tuple(v_531),increment_nonce(2-proj-2-tuple(v_529))) else fail-any) else fail-any)) in
        {139}let v_533: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_528)) && success?(1-proj-3-tuple(v_528))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-2-tuple(v_529))))) then (if not-caught-fail(v_530) then (if not-caught-fail(v_532) then (v_532,v_530) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {140}let v_534: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_533),2-proj-3-tuple(v_528),3-proj-3-tuple(v_528)))) in
        {141}let v_535: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_533)) && success?(symmetricstatepack(1-proj-2-tuple(v_533),2-proj-3-tuple(v_528),3-proj-3-tuple(v_528)))) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then symmetricstatepack(1-proj-3-tuple(v_534),2-proj-3-tuple(v_534),hash(3-proj-3-tuple(v_534),2-proj-2-tuple(v_533))) else fail-any) else fail-any)) in
        {142}let v_536: bitstring = catch-fail((if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then (if not-caught-fail(v_535) then (v_535,2-proj-2-tuple(v_533)) else fail-any) else fail-any) else fail-any)) in
        {143}let v_537: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_536),2-proj-7-tuple(v_514),v_517,4-proj-7-tuple(v_514),5-proj-7-tuple(v_514),6-proj-7-tuple(v_514),7-proj-7-tuple(v_514))) in
        {144}let v_538: bitstring = catch-fail(concat3(v_518,2-proj-3-tuple(v_515),2-proj-2-tuple(v_536))) in
        {145}let (hs_539: handshakestate,re_540: key,message_a_541: bitstring) = (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-7-tuple(v_514))))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then (if not-caught-fail(v_517) then (if not-caught-fail(v_518) then (if not-caught-fail(v_520) then (if not-caught-fail(v_527) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then (v_537,5-proj-7-tuple(v_514),v_538) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {146}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {147}insert statestore(alice,charlie,statepack_b(hs_539));
        {148}out(pub, message_a_541)
    ) | (
        {178}get statestore(=alice,=charlie,statepack_b(hs_542: handshakestate)) in
        {150}in(pub, message_b_543: bitstring);
        {151}let v_544: bitstring = catch-fail(handshakestateunpack(hs_542)) in
        {152}let v_545: bitstring = catch-fail(deconcat3(message_b_543)) in
        {153}let v_546: bool = catch-fail(true) in
        {154}let v_547: key = catch-fail(1-proj-3-tuple(v_545)) in
        {155}let v_548: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_544))) in
        {156}let v_549: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_544)) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then symmetricstatepack(1-proj-3-tuple(v_548),2-proj-3-tuple(v_548),hash(3-proj-3-tuple(v_548),v_547)) else fail-any) else fail-any)) in
        {157}let v_550: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_544))) in
        {158}let v_551: bitstring = catch-fail(symmetricstateunpack(v_549)) in
        {159}let v_552: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_551),(if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any))) in
        {160}let v_553: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_551),(if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any))) in
        {161}let v_554: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_551),(if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any))) in
        {162}let v_555: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_551))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (v_552,v_553,v_554) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {163}let v_556: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_544)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then dhexp(2-proj-2-tuple(v_550),v_547) else fail-any) else fail-any)) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_555)) then cipherstatepack(2-proj-3-tuple(v_555),minnonce) else fail-any),1-proj-3-tuple(v_555),3-proj-3-tuple(v_551)) else fail-any) else fail-any) else fail-any)) in
        {164}let v_557: bitstring = catch-fail(symmetricstateunpack(v_556)) in
        {165}let v_558: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_557))) in
        {166}let v_559: aead = catch-fail(decrypt(1-proj-2-tuple(v_558),2-proj-2-tuple(v_558),3-proj-3-tuple(v_557),3-proj-3-tuple(v_545))) in
        {167}let v_560: bitstring = catch-fail(aeadunpack(v_559)) in
        {168}let v_561: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_557))) in
        {169}let v_562: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_558))) && success?(1-proj-3-tuple(v_557))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-2-tuple(v_561))))) then cipherstatepack(1-proj-2-tuple(v_561),increment_nonce(2-proj-2-tuple(v_558))) else fail-any) else fail-any)) in
        {170}let v_563: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_545)) && (success?(3-proj-3-tuple(v_557)) && success?(1-proj-3-tuple(v_557)))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then (if not-caught-fail(v_559) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if not-caught-fail(v_562) then (v_562,3-proj-3-tuple(v_560),1-proj-3-tuple(v_560)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {171}let v_564: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_563),2-proj-3-tuple(v_557),3-proj-3-tuple(v_557)))) in
        {172}let v_565: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_545)) && success?(symmetricstatepack(1-proj-3-tuple(v_563),2-proj-3-tuple(v_557),3-proj-3-tuple(v_557)))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),3-proj-3-tuple(v_545))) else fail-any) else fail-any)) in
        {173}let v_566: bitstring = catch-fail((if success?(3-proj-3-tuple(v_545)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if not-caught-fail(v_565) then (v_565,2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {174}let v_567: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_566),2-proj-7-tuple(v_544),3-proj-7-tuple(v_544),4-proj-7-tuple(v_544),v_547,6-proj-7-tuple(v_544),7-proj-7-tuple(v_544))) in
        {175}let (hs_568: handshakestate,re_569: key,plaintext_b_570: bitstring,valid_571: bool) = (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-7-tuple(v_544))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (if not-caught-fail(v_549) then (if not-caught-fail(v_556) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if (v_546 && 3-proj-3-tuple(v_566)) then (if not-caught-fail(v_567) then (v_567,getpublickey(3-proj-7-tuple(v_544)),2-proj-3-tuple(v_566),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {176}event RecvMsg(alice,charlie,stage_b,plaintext_b_570,valid_571);
        {177}insert statestore(alice,charlie,statepack_c(hs_568))
    ) | (
        {204}get statestore(=alice,=charlie,statepack_c(hs_572: handshakestate)) in
        {179}let v_573: bitstring = catch-fail(handshakestateunpack(hs_572)) in
        {180}let v_574: bitstring = catch-fail((empty,empty,empty)) in
        {181}let v_575: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_573))) in
        {182}let v_576: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_575))) in
        {183}let v_577: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_576),2-proj-2-tuple(v_576),3-proj-3-tuple(v_575),msg_c(alice,charlie))) in
        {184}let v_578: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_575))) in
        {185}let v_579: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_576))) && success?(1-proj-3-tuple(v_575))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-2-tuple(v_578))))) then cipherstatepack(1-proj-2-tuple(v_578),increment_nonce(2-proj-2-tuple(v_576))) else fail-any) else fail-any)) in
        {186}let v_580: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_575)) && success?(1-proj-3-tuple(v_575))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then (if not-caught-fail(v_577) then (if not-caught-fail(v_579) then (v_579,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let v_581: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_580),2-proj-3-tuple(v_575),3-proj-3-tuple(v_575)))) in
        {188}let v_582: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_580)) && success?(symmetricstatepack(1-proj-2-tuple(v_580),2-proj-3-tuple(v_575),3-proj-3-tuple(v_575)))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),2-proj-2-tuple(v_580))) else fail-any) else fail-any)) in
        {189}let v_583: bitstring = catch-fail((if success?(1-proj-7-tuple(v_573)) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then (if not-caught-fail(v_582) then (v_582,2-proj-2-tuple(v_580)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_584: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_583),2-proj-7-tuple(v_573),3-proj-7-tuple(v_573),4-proj-7-tuple(v_573),5-proj-7-tuple(v_573),6-proj-7-tuple(v_573),7-proj-7-tuple(v_573))) in
        {191}let v_585: bitstring = catch-fail(concat3(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),2-proj-2-tuple(v_583))) in
        {192}let v_586: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_583))) in
        {193}let v_587: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_586),zero)) in
        {194}let v_588: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_586),zero)) in
        {195}let v_589: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_586),zero)) in
        {196}let v_590: bitstring = catch-fail((if success?(2-proj-3-tuple(v_586)) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (v_587,v_588,v_589) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_591: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_590)) then cipherstatepack(1-proj-3-tuple(v_590),minnonce) else fail-any)) in
        {198}let v_592: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_590)) then cipherstatepack(2-proj-3-tuple(v_590),minnonce) else fail-any)) in
        {199}let v_593: bitstring = catch-fail((if success?(1-proj-2-tuple(v_583)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (1-proj-2-tuple(v_583),v_591,v_592) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {200}let (hs_594: handshakestate,re_595: key,message_c_596: bitstring,cs1_597: cipherstate,cs2_598: cipherstate) = (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-7-tuple(v_573))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (v_584,5-proj-7-tuple(v_573),v_585,2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {201}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {202}insert statestore(alice,charlie,statepack_d(hs_594));
        {203}out(pub, message_c_596)
    ) | (
        {205}event LeakS(phase0,alice);
        {206}out(pub, key_s(alice))
    ) | (
        {207}phase 1;
        {208}event LeakS(phase1,alice);
        {209}out(pub, key_s(alice))
    )
) | (
    {210}let v_599: key = catch-fail(dhexp(key_s(bob),g)) in
    {211}let s_600: keypair = (if not-caught-fail(v_599) then keypairpack(v_599,key_s(bob)) else fail-any) in
    {212}out(pub, getpublickey(s_600));
    (
        {213}let e_601: keypair = keypairpack(empty,empty) in
        {214}let rs_602: key = empty in
        {215}let re_603: key = empty in
        {216}let v_604: bitstring = catch-fail(hash(somename,empty)) in
        {217}let v_605: key = catch-fail(v_604) in
        {218}let v_606: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {219}let v_607: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then symmetricstatepack(v_606,v_605,v_604) else fail-any) else fail-any) else fail-any))) in
        {220}let v_608: symmetricstate = catch-fail((if success?((if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then symmetricstatepack(v_606,v_605,v_604) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_607),hash(3-proj-3-tuple(v_607),empty)) else fail-any) else fail-any)) in
        {221}let v_609: bitstring = catch-fail(symmetricstateunpack(v_608)) in
        {222}let v_610: symmetricstate = catch-fail((if success?(getpublickey(s_600)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),hash(3-proj-3-tuple(v_609),getpublickey(s_600))) else fail-any) else fail-any)) in
        {223}let hs_611: handshakestate = (if not-caught-fail(v_608) then (if not-caught-fail(v_610) then handshakestatepack(v_610,s_600,e_601,rs_602,re_603,empty,false) else fail-any) else fail-any) in
        {224}insert statestore(bob,alice,statepack_a(hs_611))
    ) | (
        {253}get statestore(=bob,=alice,statepack_a(hs_612: handshakestate)) in
        {225}in(pub, message_a_613: bitstring);
        {226}let v_614: bitstring = catch-fail(handshakestateunpack(hs_612)) in
        {227}let v_615: bitstring = catch-fail(deconcat3(message_a_613)) in
        {228}let v_616: bool = catch-fail(true) in
        {229}let v_617: key = catch-fail(1-proj-3-tuple(v_615)) in
        {230}let v_618: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_614))) in
        {231}let v_619: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_614)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),v_617)) else fail-any) else fail-any)) in
        {232}let v_620: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_614))) in
        {233}let v_621: bitstring = catch-fail(symmetricstateunpack(v_619)) in
        {234}let v_622: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_621),(if success?(2-proj-7-tuple(v_614)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then dhexp(2-proj-2-tuple(v_620),v_617) else fail-any) else fail-any))) in
        {235}let v_623: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_621),(if success?(2-proj-7-tuple(v_614)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then dhexp(2-proj-2-tuple(v_620),v_617) else fail-any) else fail-any))) in
        {236}let v_624: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_621),(if success?(2-proj-7-tuple(v_614)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then dhexp(2-proj-2-tuple(v_620),v_617) else fail-any) else fail-any))) in
        {237}let v_625: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_614)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then dhexp(2-proj-2-tuple(v_620),v_617) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_621))) then (if not-caught-fail(v_622) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (v_622,v_623,v_624) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let v_626: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_614)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then dhexp(2-proj-2-tuple(v_620),v_617) else fail-any) else fail-any)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_625)) then cipherstatepack(2-proj-3-tuple(v_625),minnonce) else fail-any),1-proj-3-tuple(v_625),3-proj-3-tuple(v_621)) else fail-any) else fail-any) else fail-any)) in
        {239}let v_627: bitstring = catch-fail(symmetricstateunpack(v_626)) in
        {240}let v_628: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_627))) in
        {241}let v_629: aead = catch-fail(decrypt(1-proj-2-tuple(v_628),2-proj-2-tuple(v_628),3-proj-3-tuple(v_627),3-proj-3-tuple(v_615))) in
        {242}let v_630: bitstring = catch-fail(aeadunpack(v_629)) in
        {243}let v_631: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_627))) in
        {244}let v_632: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_628))) && success?(1-proj-3-tuple(v_627))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then cipherstatepack(1-proj-2-tuple(v_631),increment_nonce(2-proj-2-tuple(v_628))) else fail-any) else fail-any)) in
        {245}let v_633: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_615)) && (success?(3-proj-3-tuple(v_627)) && success?(1-proj-3-tuple(v_627)))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then (if not-caught-fail(v_629) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if not-caught-fail(v_632) then (v_632,3-proj-3-tuple(v_630),1-proj-3-tuple(v_630)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_634: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_633),2-proj-3-tuple(v_627),3-proj-3-tuple(v_627)))) in
        {247}let v_635: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_615)) && success?(symmetricstatepack(1-proj-3-tuple(v_633),2-proj-3-tuple(v_627),3-proj-3-tuple(v_627)))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then symmetricstatepack(1-proj-3-tuple(v_634),2-proj-3-tuple(v_634),hash(3-proj-3-tuple(v_634),3-proj-3-tuple(v_615))) else fail-any) else fail-any)) in
        {248}let v_636: bitstring = catch-fail((if success?(3-proj-3-tuple(v_615)) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if not-caught-fail(v_635) then (v_635,2-proj-3-tuple(v_633),3-proj-3-tuple(v_633)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_637: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_636),2-proj-7-tuple(v_614),3-proj-7-tuple(v_614),4-proj-7-tuple(v_614),v_617,6-proj-7-tuple(v_614),7-proj-7-tuple(v_614))) in
        {250}let (hs_638: handshakestate,re_639: key,plaintext_a: bitstring,valid_640: bool) = (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-7-tuple(v_614))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (if not-caught-fail(v_619) then (if not-caught-fail(v_626) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if (v_616 && 3-proj-3-tuple(v_636)) then (if not-caught-fail(v_637) then (v_637,getpublickey(3-proj-7-tuple(v_614)),2-proj-3-tuple(v_636),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {251}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_640);
        {252}insert statestore(bob,alice,statepack_b(hs_638))
    ) | (
        {283}get statestore(=bob,=alice,statepack_b(hs_641: handshakestate)) in
        {254}let v_642: bitstring = catch-fail(handshakestateunpack(hs_641)) in
        {255}let v_643: bitstring = catch-fail((empty,empty,empty)) in
        {256}let v_644: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {257}let v_645: keypair = catch-fail((if not-caught-fail(v_644) then keypairpack(v_644,key_e(bob,alice)) else fail-any)) in
        {258}let v_646: bitstring = catch-fail(getpublickey(v_645)) in
        {259}let v_647: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_642))) in
        {260}let v_648: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_642)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),v_646)) else fail-any) else fail-any)) in
        {261}let v_649: bitstring = catch-fail(keypairunpack(v_645)) in
        {262}let v_650: bitstring = catch-fail(symmetricstateunpack(v_648)) in
        {263}let v_651: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_650),(if success?(5-proj-7-tuple(v_642)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),5-proj-7-tuple(v_642)) else fail-any) else fail-any))) in
        {264}let v_652: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_650),(if success?(5-proj-7-tuple(v_642)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),5-proj-7-tuple(v_642)) else fail-any) else fail-any))) in
        {265}let v_653: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_650),(if success?(5-proj-7-tuple(v_642)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),5-proj-7-tuple(v_642)) else fail-any) else fail-any))) in
        {266}let v_654: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_642)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),5-proj-7-tuple(v_642)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_650))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (v_651,v_652,v_653) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {267}let v_655: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_642)) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),5-proj-7-tuple(v_642)) else fail-any) else fail-any)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_654)) then cipherstatepack(2-proj-3-tuple(v_654),minnonce) else fail-any),1-proj-3-tuple(v_654),3-proj-3-tuple(v_650)) else fail-any) else fail-any) else fail-any)) in
        {268}let v_656: bitstring = catch-fail(symmetricstateunpack(v_655)) in
        {269}let v_657: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_656))) in
        {270}let v_658: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_657),2-proj-2-tuple(v_657),3-proj-3-tuple(v_656),msg_b(bob,alice))) in
        {271}let v_659: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_656))) in
        {272}let v_660: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_657))) && success?(1-proj-3-tuple(v_656))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then cipherstatepack(1-proj-2-tuple(v_659),increment_nonce(2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
        {273}let v_661: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_656)) && success?(1-proj-3-tuple(v_656))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_658) then (if not-caught-fail(v_660) then (v_660,v_658) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {274}let v_662: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_661),2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)))) in
        {275}let v_663: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_661)) && success?(symmetricstatepack(1-proj-2-tuple(v_661),2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then symmetricstatepack(1-proj-3-tuple(v_662),2-proj-3-tuple(v_662),hash(3-proj-3-tuple(v_662),2-proj-2-tuple(v_661))) else fail-any) else fail-any)) in
        {276}let v_664: bitstring = catch-fail((if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then (if not-caught-fail(v_663) then (v_663,2-proj-2-tuple(v_661)) else fail-any) else fail-any) else fail-any)) in
        {277}let v_665: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_664),2-proj-7-tuple(v_642),v_645,4-proj-7-tuple(v_642),5-proj-7-tuple(v_642),6-proj-7-tuple(v_642),7-proj-7-tuple(v_642))) in
        {278}let v_666: bitstring = catch-fail(concat3(v_646,2-proj-3-tuple(v_643),2-proj-2-tuple(v_664))) in
        {279}let (hs_667: handshakestate,re_668: key,message_b_669: bitstring) = (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-7-tuple(v_642))))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (if not-caught-fail(v_648) then (if not-caught-fail(v_655) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (v_665,5-proj-7-tuple(v_642),v_666) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {280}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {281}insert statestore(bob,alice,statepack_c(hs_667));
        {282}out(pub, message_b_669)
    ) | (
        {311}get statestore(=bob,=alice,statepack_c(hs_670: handshakestate)) in
        {284}in(pub, message_c_671: bitstring);
        {285}let v_672: bitstring = catch-fail(handshakestateunpack(hs_670)) in
        {286}let v_673: bitstring = catch-fail(deconcat3(message_c_671)) in
        {287}let v_674: bool = catch-fail(true) in
        {288}let v_675: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_672))) in
        {289}let v_676: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {290}let v_677: aead = catch-fail(decrypt(1-proj-2-tuple(v_676),2-proj-2-tuple(v_676),3-proj-3-tuple(v_675),3-proj-3-tuple(v_673))) in
        {291}let v_678: bitstring = catch-fail(aeadunpack(v_677)) in
        {292}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {293}let v_680: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_676))) && success?(1-proj-3-tuple(v_675))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then cipherstatepack(1-proj-2-tuple(v_679),increment_nonce(2-proj-2-tuple(v_676))) else fail-any) else fail-any)) in
        {294}let v_681: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_673)) && (success?(3-proj-3-tuple(v_675)) && success?(1-proj-3-tuple(v_675)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if not-caught-fail(v_680) then (v_680,3-proj-3-tuple(v_678),1-proj-3-tuple(v_678)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_682: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) in
        {296}let v_683: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_673)) && success?(symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),3-proj-3-tuple(v_673))) else fail-any) else fail-any)) in
        {297}let v_684: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_673)) && success?(1-proj-7-tuple(v_672))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if not-caught-fail(v_683) then (v_683,2-proj-3-tuple(v_681),3-proj-3-tuple(v_681)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_685: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_684),2-proj-7-tuple(v_672),3-proj-7-tuple(v_672),4-proj-7-tuple(v_672),5-proj-7-tuple(v_672),6-proj-7-tuple(v_672),7-proj-7-tuple(v_672))) in
        {299}let v_686: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_684))) in
        {300}let v_687: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_686),zero)) in
        {301}let v_688: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_686),zero)) in
        {302}let v_689: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_686),zero)) in
        {303}let v_690: bitstring = catch-fail((if success?(2-proj-3-tuple(v_686)) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (v_687,v_688,v_689) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_691: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_690)) then cipherstatepack(1-proj-3-tuple(v_690),minnonce) else fail-any)) in
        {305}let v_692: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_690)) then cipherstatepack(2-proj-3-tuple(v_690),minnonce) else fail-any)) in
        {306}let v_693: bitstring = catch-fail((if success?(1-proj-3-tuple(v_684)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (1-proj-3-tuple(v_684),v_691,v_692) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {307}let (hs_694: handshakestate,re_695: key,plaintext_c: bitstring,valid_696: bool,cs1_697: cipherstate,cs2_698: cipherstate) = (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-7-tuple(v_672))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if not-caught-fail(v_674) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if (v_674 && 3-proj-3-tuple(v_684)) then (if not-caught-fail(v_685) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (v_685,getpublickey(3-proj-7-tuple(v_672)),2-proj-3-tuple(v_684),true,2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {308}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_696);
        {309}insert statestore(bob,alice,statepack_d(hs_694));
        {310}event RecvEnd(valid_696)
    ) | (
        {312}event LeakS(phase0,bob);
        {313}out(pub, key_s(bob))
    ) | (
        {314}phase 1;
        {315}event LeakS(phase1,bob);
        {316}out(pub, key_s(bob))
    )
) | (
    {317}let v_699: key = catch-fail(dhexp(key_s(bob),g)) in
    {318}let s_700: keypair = (if not-caught-fail(v_699) then keypairpack(v_699,key_s(bob)) else fail-any) in
    {319}out(pub, getpublickey(s_700));
    (
        {320}let e_701: keypair = keypairpack(empty,empty) in
        {321}let rs_702: key = empty in
        {322}let re_703: key = empty in
        {323}let v_704: bitstring = catch-fail(hash(somename,empty)) in
        {324}let v_705: key = catch-fail(v_704) in
        {325}let v_706: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {326}let v_707: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then symmetricstatepack(v_706,v_705,v_704) else fail-any) else fail-any) else fail-any))) in
        {327}let v_708: symmetricstate = catch-fail((if success?((if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then symmetricstatepack(v_706,v_705,v_704) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),empty)) else fail-any) else fail-any)) in
        {328}let v_709: bitstring = catch-fail(symmetricstateunpack(v_708)) in
        {329}let v_710: symmetricstate = catch-fail((if success?(getpublickey(s_700)) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),getpublickey(s_700))) else fail-any) else fail-any)) in
        {330}let hs_711: handshakestate = (if not-caught-fail(v_708) then (if not-caught-fail(v_710) then handshakestatepack(v_710,s_700,e_701,rs_702,re_703,empty,false) else fail-any) else fail-any) in
        {331}insert statestore(bob,charlie,statepack_a(hs_711))
    ) | (
        {360}get statestore(=bob,=charlie,statepack_a(hs_712: handshakestate)) in
        {332}in(pub, message_a_713: bitstring);
        {333}let v_714: bitstring = catch-fail(handshakestateunpack(hs_712)) in
        {334}let v_715: bitstring = catch-fail(deconcat3(message_a_713)) in
        {335}let v_716: bool = catch-fail(true) in
        {336}let v_717: key = catch-fail(1-proj-3-tuple(v_715)) in
        {337}let v_718: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_714))) in
        {338}let v_719: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_714)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then symmetricstatepack(1-proj-3-tuple(v_718),2-proj-3-tuple(v_718),hash(3-proj-3-tuple(v_718),v_717)) else fail-any) else fail-any)) in
        {339}let v_720: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_714))) in
        {340}let v_721: bitstring = catch-fail(symmetricstateunpack(v_719)) in
        {341}let v_722: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_721),(if success?(2-proj-7-tuple(v_714)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_717) else fail-any) else fail-any))) in
        {342}let v_723: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_721),(if success?(2-proj-7-tuple(v_714)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_717) else fail-any) else fail-any))) in
        {343}let v_724: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_721),(if success?(2-proj-7-tuple(v_714)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_717) else fail-any) else fail-any))) in
        {344}let v_725: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_714)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_717) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_721))) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then (v_722,v_723,v_724) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_726: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_714)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-2-tuple(v_720))))) then dhexp(2-proj-2-tuple(v_720),v_717) else fail-any) else fail-any)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_725)) then cipherstatepack(2-proj-3-tuple(v_725),minnonce) else fail-any),1-proj-3-tuple(v_725),3-proj-3-tuple(v_721)) else fail-any) else fail-any) else fail-any)) in
        {346}let v_727: bitstring = catch-fail(symmetricstateunpack(v_726)) in
        {347}let v_728: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {348}let v_729: aead = catch-fail(decrypt(1-proj-2-tuple(v_728),2-proj-2-tuple(v_728),3-proj-3-tuple(v_727),3-proj-3-tuple(v_715))) in
        {349}let v_730: bitstring = catch-fail(aeadunpack(v_729)) in
        {350}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {351}let v_732: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_728))) && success?(1-proj-3-tuple(v_727))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then cipherstatepack(1-proj-2-tuple(v_731),increment_nonce(2-proj-2-tuple(v_728))) else fail-any) else fail-any)) in
        {352}let v_733: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_715)) && (success?(3-proj-3-tuple(v_727)) && success?(1-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_732) then (v_732,3-proj-3-tuple(v_730),1-proj-3-tuple(v_730)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_734: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) in
        {354}let v_735: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_715)) && success?(symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),3-proj-3-tuple(v_715))) else fail-any) else fail-any)) in
        {355}let v_736: bitstring = catch-fail((if success?(3-proj-3-tuple(v_715)) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {356}let v_737: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_736),2-proj-7-tuple(v_714),3-proj-7-tuple(v_714),4-proj-7-tuple(v_714),v_717,6-proj-7-tuple(v_714),7-proj-7-tuple(v_714))) in
        {357}let (hs_738: handshakestate,re_739: key,plaintext_a_740: bitstring,valid_741: bool) = (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-7-tuple(v_714))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (if not-caught-fail(v_719) then (if not-caught-fail(v_726) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if (v_716 && 3-proj-3-tuple(v_736)) then (if not-caught-fail(v_737) then (v_737,getpublickey(3-proj-7-tuple(v_714)),2-proj-3-tuple(v_736),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {358}event RecvMsg(bob,charlie,stage_a,plaintext_a_740,valid_741);
        {359}insert statestore(bob,charlie,statepack_b(hs_738))
    ) | (
        {390}get statestore(=bob,=charlie,statepack_b(hs_742: handshakestate)) in
        {361}let v_743: bitstring = catch-fail(handshakestateunpack(hs_742)) in
        {362}let v_744: bitstring = catch-fail((empty,empty,empty)) in
        {363}let v_745: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {364}let v_746: keypair = catch-fail((if not-caught-fail(v_745) then keypairpack(v_745,key_e(bob,charlie)) else fail-any)) in
        {365}let v_747: bitstring = catch-fail(getpublickey(v_746)) in
        {366}let v_748: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_743))) in
        {367}let v_749: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_743)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack(1-proj-3-tuple(v_748),2-proj-3-tuple(v_748),hash(3-proj-3-tuple(v_748),v_747)) else fail-any) else fail-any)) in
        {368}let v_750: bitstring = catch-fail(keypairunpack(v_746)) in
        {369}let v_751: bitstring = catch-fail(symmetricstateunpack(v_749)) in
        {370}let v_752: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_751),(if success?(5-proj-7-tuple(v_743)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),5-proj-7-tuple(v_743)) else fail-any) else fail-any))) in
        {371}let v_753: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_751),(if success?(5-proj-7-tuple(v_743)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),5-proj-7-tuple(v_743)) else fail-any) else fail-any))) in
        {372}let v_754: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_751),(if success?(5-proj-7-tuple(v_743)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),5-proj-7-tuple(v_743)) else fail-any) else fail-any))) in
        {373}let v_755: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_743)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),5-proj-7-tuple(v_743)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_751))) then (if not-caught-fail(v_752) then (if not-caught-fail(v_753) then (if not-caught-fail(v_754) then (v_752,v_753,v_754) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_756: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_743)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then dhexp(2-proj-2-tuple(v_750),5-proj-7-tuple(v_743)) else fail-any) else fail-any)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_755)) then cipherstatepack(2-proj-3-tuple(v_755),minnonce) else fail-any),1-proj-3-tuple(v_755),3-proj-3-tuple(v_751)) else fail-any) else fail-any) else fail-any)) in
        {375}let v_757: bitstring = catch-fail(symmetricstateunpack(v_756)) in
        {376}let v_758: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_757))) in
        {377}let v_759: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_758),2-proj-2-tuple(v_758),3-proj-3-tuple(v_757),msg_b(bob,charlie))) in
        {378}let v_760: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_757))) in
        {379}let v_761: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_758))) && success?(1-proj-3-tuple(v_757))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then cipherstatepack(1-proj-2-tuple(v_760),increment_nonce(2-proj-2-tuple(v_758))) else fail-any) else fail-any)) in
        {380}let v_762: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_757)) && success?(1-proj-3-tuple(v_757))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_761) then (v_761,v_759) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_763: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_762),2-proj-3-tuple(v_757),3-proj-3-tuple(v_757)))) in
        {382}let v_764: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_762)) && success?(symmetricstatepack(1-proj-2-tuple(v_762),2-proj-3-tuple(v_757),3-proj-3-tuple(v_757)))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_763),hash(3-proj-3-tuple(v_763),2-proj-2-tuple(v_762))) else fail-any) else fail-any)) in
        {383}let v_765: bitstring = catch-fail((if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_764) then (v_764,2-proj-2-tuple(v_762)) else fail-any) else fail-any) else fail-any)) in
        {384}let v_766: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_765),2-proj-7-tuple(v_743),v_746,4-proj-7-tuple(v_743),5-proj-7-tuple(v_743),6-proj-7-tuple(v_743),7-proj-7-tuple(v_743))) in
        {385}let v_767: bitstring = catch-fail(concat3(v_747,2-proj-3-tuple(v_744),2-proj-2-tuple(v_765))) in
        {386}let (hs_768: handshakestate,re_769: key,message_b_770: bitstring) = (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-7-tuple(v_743))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (if not-caught-fail(v_749) then (if not-caught-fail(v_756) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (v_766,5-proj-7-tuple(v_743),v_767) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {387}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {388}insert statestore(bob,charlie,statepack_c(hs_768));
        {389}out(pub, message_b_770)
    ) | (
        {418}get statestore(=bob,=charlie,statepack_c(hs_771: handshakestate)) in
        {391}in(pub, message_c_772: bitstring);
        {392}let v_773: bitstring = catch-fail(handshakestateunpack(hs_771)) in
        {393}let v_774: bitstring = catch-fail(deconcat3(message_c_772)) in
        {394}let v_775: bool = catch-fail(true) in
        {395}let v_776: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_773))) in
        {396}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {397}let v_778: aead = catch-fail(decrypt(1-proj-2-tuple(v_777),2-proj-2-tuple(v_777),3-proj-3-tuple(v_776),3-proj-3-tuple(v_774))) in
        {398}let v_779: bitstring = catch-fail(aeadunpack(v_778)) in
        {399}let v_780: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {400}let v_781: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_777))) && success?(1-proj-3-tuple(v_776))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then cipherstatepack(1-proj-2-tuple(v_780),increment_nonce(2-proj-2-tuple(v_777))) else fail-any) else fail-any)) in
        {401}let v_782: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_774)) && (success?(3-proj-3-tuple(v_776)) && success?(1-proj-3-tuple(v_776)))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then (if not-caught-fail(v_778) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,3-proj-3-tuple(v_779),1-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_783: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) in
        {403}let v_784: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_774)) && success?(symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then symmetricstatepack(1-proj-3-tuple(v_783),2-proj-3-tuple(v_783),hash(3-proj-3-tuple(v_783),3-proj-3-tuple(v_774))) else fail-any) else fail-any)) in
        {404}let v_785: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_774)) && success?(1-proj-7-tuple(v_773))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_784) then (v_784,2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {405}let v_786: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_785),2-proj-7-tuple(v_773),3-proj-7-tuple(v_773),4-proj-7-tuple(v_773),5-proj-7-tuple(v_773),6-proj-7-tuple(v_773),7-proj-7-tuple(v_773))) in
        {406}let v_787: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_785))) in
        {407}let v_788: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_787),zero)) in
        {408}let v_789: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_787),zero)) in
        {409}let v_790: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_787),zero)) in
        {410}let v_791: bitstring = catch-fail((if success?(2-proj-3-tuple(v_787)) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (v_788,v_789,v_790) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_792: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_791)) then cipherstatepack(1-proj-3-tuple(v_791),minnonce) else fail-any)) in
        {412}let v_793: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_791)) then cipherstatepack(2-proj-3-tuple(v_791),minnonce) else fail-any)) in
        {413}let v_794: bitstring = catch-fail((if success?(1-proj-3-tuple(v_785)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (1-proj-3-tuple(v_785),v_792,v_793) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let (hs_795: handshakestate,re_796: key,plaintext_c_797: bitstring,valid_798: bool,cs1_799: cipherstate,cs2_800: cipherstate) = (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-7-tuple(v_773))))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (v_775 && 3-proj-3-tuple(v_785)) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (v_786,getpublickey(3-proj-7-tuple(v_773)),2-proj-3-tuple(v_785),true,2-proj-3-tuple(v_794),3-proj-3-tuple(v_794)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {415}event RecvMsg(bob,charlie,stage_c,plaintext_c_797,valid_798);
        {416}insert statestore(bob,charlie,statepack_d(hs_795));
        {417}event RecvEnd(valid_798)
    ) | (
        {419}event LeakS(phase0,bob);
        {420}out(pub, key_s(bob))
    ) | (
        {421}phase 1;
        {422}event LeakS(phase1,bob);
        {423}out(pub, key_s(bob))
    )
) | (
    {424}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 130 rules in the queue.
400 rules inserted. The rule base contains 389 rules. 31 rules in the queue.
600 rules inserted. The rule base contains 576 rules. 174 rules in the queue.
800 rules inserted. The rule base contains 766 rules. 124 rules in the queue.
1000 rules inserted. The rule base contains 961 rules. 154 rules in the queue.
1200 rules inserted. The rule base contains 1134 rules. 144 rules in the queue.
1400 rules inserted. The rule base contains 1251 rules. 127 rules in the queue.
1600 rules inserted. The rule base contains 1343 rules. 122 rules in the queue.
1800 rules inserted. The rule base contains 1529 rules. 142 rules in the queue.
2000 rules inserted. The rule base contains 1652 rules. 186 rules in the queue.
2200 rules inserted. The rule base contains 1811 rules. 192 rules in the queue.
2400 rules inserted. The rule base contains 1954 rules. 156 rules in the queue.
2600 rules inserted. The rule base contains 2074 rules. 132 rules in the queue.
2800 rules inserted. The rule base contains 2185 rules. 148 rules in the queue.
3000 rules inserted. The rule base contains 2325 rules. 144 rules in the queue.
3200 rules inserted. The rule base contains 2418 rules. 76 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {44}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {212}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. The event LeakS(phase0,bob) may be executed at {312}.
So the message key_s(bob) may be sent on channel pub at output {313}.
mess(pub,key_s(bob)).

19. By 1, the attacker may have the channel pub.
By 18, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

20. By 19, the attacker may know key_s(bob).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
attacker(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

21. By 12, the attacker may know hash(somename,empty).
By 20, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
So the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {44}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

9. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

10. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

11. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

12. By 10, the attacker may have the channel pub in phase 1.
By 11, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

13. By 12, the attacker may know key_s(bob) in phase 1.
By 9, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 13, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 12, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

22. By 16, the attacker may know hash(somename,empty) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {44}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

9. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

10. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

11. The event LeakS(phase1,bob) may be executed at {315}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {316}.
mess_p1(pub,key_s(bob)).

12. By 10, the attacker may have the channel pub in phase 1.
By 11, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

13. By 12, the attacker may know key_s(bob) in phase 1.
By 9, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 13, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 12, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

22. By 16, the attacker may know hash(somename,empty) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {43}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {331}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {44}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {360}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {332}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {390}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {387}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {389}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {74}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {46}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {72}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {43}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {331}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {44}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {360}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {332}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {390}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {387}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {389}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {74}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {46}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {72}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {43}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {331}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {45}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {42}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {44}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {360}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {332}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {390}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {387}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {389}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {74}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {46}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {72}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
