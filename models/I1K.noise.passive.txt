File "I1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "I1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "I1K.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 308, character 6:
Warning: identifier s rebound.
File "I1K.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1K.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 310, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 318, character 6:
Warning: identifier e rebound.
File "I1K.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 362, characters 48-53:
Warning: identifier valid1 rebound.
File "I1K.noise.passive.pv", line 363, characters 6-7:
Warning: identifier rs rebound.
File "I1K.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 374, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 377, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 378, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 380, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 388, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 584, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 577, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 569, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 374, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 377, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 378, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 380, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "I1K.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 308, character 6:
Warning: identifier s rebound.
File "I1K.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "I1K.noise.passive.pv", line 310, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 310, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 311, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 642, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 634, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 627, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 388, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 619, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 318, character 6:
Warning: identifier e rebound.
File "I1K.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ne rebound.
File "I1K.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "I1K.noise.passive.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 612, characters 8-9:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "I1K.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 362, characters 48-53:
Warning: identifier valid1 rebound.
File "I1K.noise.passive.pv", line 363, characters 6-7:
Warning: identifier rs rebound.
File "I1K.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "I1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "I1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "I1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "I1K.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_529: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_529));
    (
        {4}let e_530: keypair = keypairpack(empty,empty) in
        {5}let v_531: key = catch-fail(dhexp(key_s(bob),g)) in
        {6}let rs_532: key = getpublickey((if not-caught-fail(v_531) then keypairpack(v_531,key_s(bob)) else fail-any)) in
        {7}let re_533: key = empty in
        {8}let v_534: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_535: key = catch-fail(v_534) in
        {10}let v_536: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_537: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any))) in
        {12}let v_538: symmetricstate = catch-fail((if success?((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then symmetricstatepack(1-proj-3-tuple(v_537),2-proj-3-tuple(v_537),hash(3-proj-3-tuple(v_537),empty)) else fail-any) else fail-any)) in
        {13}let v_539: bitstring = catch-fail(symmetricstateunpack(v_538)) in
        {14}let v_540: symmetricstate = catch-fail((if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),rs_532)) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_538) then (if not-caught-fail(v_540) then handshakestatepack(v_540,s_529,e_530,rs_532,re_533,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {57}get statestore(=alice,=bob,statepack_a(hs_541: handshakestate)) in
        {17}let v_542: bitstring = catch-fail(handshakestateunpack(hs_541)) in
        {18}let v_543: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_544: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_545: keypair = catch-fail((if not-caught-fail(v_544) then keypairpack(v_544,key_e(alice,bob)) else fail-any)) in
        {21}let v_546: bitstring = catch-fail(getpublickey(v_545)) in
        {22}let v_547: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_542))) in
        {23}let v_548: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_542)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),v_546)) else fail-any) else fail-any)) in
        {24}let v_549: bitstring = catch-fail(keypairunpack(v_545)) in
        {25}let v_550: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {26}let v_551: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_550),(if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any))) in
        {27}let v_552: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_550),(if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any))) in
        {28}let v_553: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_550),(if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any))) in
        {29}let v_554: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_550))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (v_551,v_552,v_553) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_555: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_542)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),4-proj-7-tuple(v_542)) else fail-any) else fail-any)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_554)) then cipherstatepack(2-proj-3-tuple(v_554),minnonce) else fail-any),1-proj-3-tuple(v_554),3-proj-3-tuple(v_550)) else fail-any) else fail-any) else fail-any)) in
        {31}let v_556: key = catch-fail(dhexp(key_s(alice),g)) in
        {32}let v_557: keypair = catch-fail((if not-caught-fail(v_556) then keypairpack(v_556,key_s(alice)) else fail-any)) in
        {33}let v_558: bitstring = catch-fail(symmetricstateunpack(v_555)) in
        {34}let v_559: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_558))) in
        {35}let v_560: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_559),2-proj-2-tuple(v_559),3-proj-3-tuple(v_558),getpublickey(v_557))) in
        {36}let v_561: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_558))) in
        {37}let v_562: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_559))) && success?(1-proj-3-tuple(v_558))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-2-tuple(v_561))))) then cipherstatepack(1-proj-2-tuple(v_561),increment_nonce(2-proj-2-tuple(v_559))) else fail-any) else fail-any)) in
        {38}let v_563: bitstring = catch-fail((if (success?(getpublickey(v_557)) && (success?(3-proj-3-tuple(v_558)) && success?(1-proj-3-tuple(v_558)))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then (if not-caught-fail(v_560) then (if not-caught-fail(v_562) then (v_562,v_560) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {39}let v_564: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_563),2-proj-3-tuple(v_558),3-proj-3-tuple(v_558)))) in
        {40}let v_565: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_563)) && success?(symmetricstatepack(1-proj-2-tuple(v_563),2-proj-3-tuple(v_558),3-proj-3-tuple(v_558)))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack(1-proj-3-tuple(v_564),2-proj-3-tuple(v_564),hash(3-proj-3-tuple(v_564),2-proj-2-tuple(v_563))) else fail-any) else fail-any)) in
        {41}let v_566: bitstring = catch-fail((if success?(getpublickey(v_557)) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then (if not-caught-fail(v_565) then (v_565,2-proj-2-tuple(v_563)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_566))) in
        {43}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {44}let v_569: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_568),2-proj-2-tuple(v_568),3-proj-3-tuple(v_567),msg_a(alice,bob))) in
        {45}let v_570: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {46}let v_571: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_568))) && success?(1-proj-3-tuple(v_567))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then cipherstatepack(1-proj-2-tuple(v_570),increment_nonce(2-proj-2-tuple(v_568))) else fail-any) else fail-any)) in
        {47}let v_572: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_567)) && success?(1-proj-3-tuple(v_567))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then (if not-caught-fail(v_569) then (if not-caught-fail(v_571) then (v_571,v_569) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {48}let v_573: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_572),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) in
        {49}let v_574: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_572)) && success?(symmetricstatepack(1-proj-2-tuple(v_572),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {50}let v_575: bitstring = catch-fail((if success?(1-proj-2-tuple(v_566)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_574) then (v_574,2-proj-2-tuple(v_572)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {51}let v_576: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_575),v_557,v_545,4-proj-7-tuple(v_542),5-proj-7-tuple(v_542),6-proj-7-tuple(v_542),7-proj-7-tuple(v_542))) in
        {52}let v_577: bitstring = catch-fail(concat3(v_546,2-proj-2-tuple(v_566),2-proj-2-tuple(v_575))) in
        {53}let (hs_578: handshakestate,re_579: key,message_a: bitstring) = (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-7-tuple(v_542))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (if not-caught-fail(v_555) then (if not-caught-fail(v_557) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (v_576,5-proj-7-tuple(v_542),v_577) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {54}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {55}insert statestore(alice,bob,statepack_b(hs_578));
        {56}out(pub, message_a)
    ) | (
        {86}get statestore(=alice,=bob,statepack_b(hs_580: handshakestate)) in
        {58}in(pub, message_b: bitstring);
        {59}let v_581: bitstring = catch-fail(handshakestateunpack(hs_580)) in
        {60}let v_582: bitstring = catch-fail(deconcat3(message_b)) in
        {61}let v_583: bool = catch-fail(true) in
        {62}let v_584: key = catch-fail(1-proj-3-tuple(v_582)) in
        {63}let v_585: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_581))) in
        {64}let v_586: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_581)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack(1-proj-3-tuple(v_585),2-proj-3-tuple(v_585),hash(3-proj-3-tuple(v_585),v_584)) else fail-any) else fail-any)) in
        {65}let v_587: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_581))) in
        {66}let v_588: bitstring = catch-fail(symmetricstateunpack(v_586)) in
        {67}let v_589: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any))) in
        {68}let v_590: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any))) in
        {69}let v_591: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any))) in
        {70}let v_592: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_588))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then (v_589,v_590,v_591) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_593: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_581)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_584) else fail-any) else fail-any)) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_592)) then cipherstatepack(2-proj-3-tuple(v_592),minnonce) else fail-any),1-proj-3-tuple(v_592),3-proj-3-tuple(v_588)) else fail-any) else fail-any) else fail-any)) in
        {72}let v_594: bitstring = catch-fail(symmetricstateunpack(v_593)) in
        {73}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {74}let v_596: aead = catch-fail(decrypt(1-proj-2-tuple(v_595),2-proj-2-tuple(v_595),3-proj-3-tuple(v_594),3-proj-3-tuple(v_582))) in
        {75}let v_597: bitstring = catch-fail(aeadunpack(v_596)) in
        {76}let v_598: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {77}let v_599: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_595))) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then cipherstatepack(1-proj-2-tuple(v_598),increment_nonce(2-proj-2-tuple(v_595))) else fail-any) else fail-any)) in
        {78}let v_600: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_582)) && (success?(3-proj-3-tuple(v_594)) && success?(1-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,3-proj-3-tuple(v_597),1-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_601: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) in
        {80}let v_602: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_582)) && success?(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack(1-proj-3-tuple(v_601),2-proj-3-tuple(v_601),hash(3-proj-3-tuple(v_601),3-proj-3-tuple(v_582))) else fail-any) else fail-any)) in
        {81}let v_603: bitstring = catch-fail((if success?(3-proj-3-tuple(v_582)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if not-caught-fail(v_602) then (v_602,2-proj-3-tuple(v_600),3-proj-3-tuple(v_600)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {82}let v_604: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_603),2-proj-7-tuple(v_581),3-proj-7-tuple(v_581),4-proj-7-tuple(v_581),v_584,6-proj-7-tuple(v_581),7-proj-7-tuple(v_581))) in
        {83}let (hs_605: handshakestate,re_606: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-7-tuple(v_581))))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (if not-caught-fail(v_586) then (if not-caught-fail(v_593) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (v_583 && 3-proj-3-tuple(v_603)) then (if not-caught-fail(v_604) then (v_604,getpublickey(3-proj-7-tuple(v_581)),2-proj-3-tuple(v_603),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {84}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {85}insert statestore(alice,bob,statepack_c(hs_605))
    ) | (
        {111}get statestore(=alice,=bob,statepack_c(hs_607: handshakestate)) in
        {87}let v_608: bitstring = catch-fail(handshakestateunpack(hs_607)) in
        {88}let v_609: bitstring = catch-fail((empty,empty,empty)) in
        {89}let v_610: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_608))) in
        {90}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_608))) in
        {91}let v_612: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_611),(if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any))) in
        {92}let v_613: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_611),(if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any))) in
        {93}let v_614: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_611),(if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any))) in
        {94}let v_615: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_611))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (v_612,v_613,v_614) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_616: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_608)) && success?(2-proj-7-tuple(v_608))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_608)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_615)) then cipherstatepack(2-proj-3-tuple(v_615),minnonce) else fail-any),1-proj-3-tuple(v_615),3-proj-3-tuple(v_611)) else fail-any) else fail-any) else fail-any)) in
        {96}let v_617: bitstring = catch-fail(symmetricstateunpack(v_616)) in
        {97}let v_618: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {98}let v_619: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_618),2-proj-2-tuple(v_618),3-proj-3-tuple(v_617),msg_c(alice,bob))) in
        {99}let v_620: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {100}let v_621: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_618))) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then cipherstatepack(1-proj-2-tuple(v_620),increment_nonce(2-proj-2-tuple(v_618))) else fail-any) else fail-any)) in
        {101}let v_622: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (v_621,v_619) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_623: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) in
        {103}let v_624: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_622)) && success?(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {104}let v_625: bitstring = catch-fail((if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_624) then (v_624,2-proj-2-tuple(v_622)) else fail-any) else fail-any) else fail-any)) in
        {105}let v_626: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_625),2-proj-7-tuple(v_608),3-proj-7-tuple(v_608),4-proj-7-tuple(v_608),5-proj-7-tuple(v_608),6-proj-7-tuple(v_608),7-proj-7-tuple(v_608))) in
        {106}let v_627: bitstring = catch-fail(concat3(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),2-proj-2-tuple(v_625))) in
        {107}let (hs_628: handshakestate,re_629: key,message_c: bitstring) = (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-7-tuple(v_608))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if not-caught-fail(v_616) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_626,5-proj-7-tuple(v_608),v_627) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {108}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {109}insert statestore(alice,bob,statepack_d(hs_628));
        {110}out(pub, message_c)
    ) | (
        {130}get statestore(=alice,=bob,statepack_d(hs_630: handshakestate)) in
        {112}in(pub, message_d: bitstring);
        {113}let v_631: bitstring = catch-fail(handshakestateunpack(hs_630)) in
        {114}let v_632: bitstring = catch-fail(deconcat3(message_d)) in
        {115}let v_633: bool = catch-fail(true) in
        {116}let v_634: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_631))) in
        {117}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {118}let v_636: aead = catch-fail(decrypt(1-proj-2-tuple(v_635),2-proj-2-tuple(v_635),3-proj-3-tuple(v_634),3-proj-3-tuple(v_632))) in
        {119}let v_637: bitstring = catch-fail(aeadunpack(v_636)) in
        {120}let v_638: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {121}let v_639: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_635))) && success?(1-proj-3-tuple(v_634))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then cipherstatepack(1-proj-2-tuple(v_638),increment_nonce(2-proj-2-tuple(v_635))) else fail-any) else fail-any)) in
        {122}let v_640: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && (success?(3-proj-3-tuple(v_634)) && success?(1-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_636) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_639) then (v_639,3-proj-3-tuple(v_637),1-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_641: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) in
        {124}let v_642: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_641),hash(3-proj-3-tuple(v_641),3-proj-3-tuple(v_632))) else fail-any) else fail-any)) in
        {125}let v_643: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(1-proj-7-tuple(v_631))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if not-caught-fail(v_642) then (v_642,2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_644: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_643),2-proj-7-tuple(v_631),3-proj-7-tuple(v_631),4-proj-7-tuple(v_631),5-proj-7-tuple(v_631),6-proj-7-tuple(v_631),7-proj-7-tuple(v_631))) in
        {127}let (hs_645: handshakestate,re_646: key,plaintext_d: bitstring,valid_647: bool) = (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-7-tuple(v_631))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_633) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (v_633 && 3-proj-3-tuple(v_643)) then (if not-caught-fail(v_644) then (v_644,getpublickey(3-proj-7-tuple(v_631)),2-proj-3-tuple(v_643),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {128}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_647);
        {129}insert statestore(alice,bob,statepack_e(hs_645))
    ) | (
        {156}get statestore(=alice,=bob,statepack_e(hs_648: handshakestate)) in
        {131}let v_649: bitstring = catch-fail(handshakestateunpack(hs_648)) in
        {132}let v_650: bitstring = catch-fail((empty,empty,empty)) in
        {133}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_649))) in
        {134}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {135}let v_653: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_652),2-proj-2-tuple(v_652),3-proj-3-tuple(v_651),msg_e(alice,bob))) in
        {136}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {137}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_652))) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {138}let v_656: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_651)) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_653) then (if not-caught-fail(v_655) then (v_655,v_653) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) in
        {140}let v_658: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_656)) && success?(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),2-proj-2-tuple(v_656))) else fail-any) else fail-any)) in
        {141}let v_659: bitstring = catch-fail((if success?(1-proj-7-tuple(v_649)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-2-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {142}let v_660: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_659),2-proj-7-tuple(v_649),3-proj-7-tuple(v_649),4-proj-7-tuple(v_649),5-proj-7-tuple(v_649),6-proj-7-tuple(v_649),7-proj-7-tuple(v_649))) in
        {143}let v_661: bitstring = catch-fail(concat3(1-proj-3-tuple(v_650),2-proj-3-tuple(v_650),2-proj-2-tuple(v_659))) in
        {144}let v_662: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_659))) in
        {145}let v_663: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_662),zero)) in
        {146}let v_664: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_662),zero)) in
        {147}let v_665: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_662),zero)) in
        {148}let v_666: bitstring = catch-fail((if success?(2-proj-3-tuple(v_662)) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (v_663,v_664,v_665) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {149}let v_667: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_666)) then cipherstatepack(1-proj-3-tuple(v_666),minnonce) else fail-any)) in
        {150}let v_668: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_666)) then cipherstatepack(2-proj-3-tuple(v_666),minnonce) else fail-any)) in
        {151}let v_669: bitstring = catch-fail((if success?(1-proj-2-tuple(v_659)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (1-proj-2-tuple(v_659),v_667,v_668) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {152}let (hs_670: handshakestate,re_671: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-7-tuple(v_649))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_661) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (v_660,5-proj-7-tuple(v_649),v_661,2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {153}event SendMsg(alice,bob,stage_e,msg_e(alice,bob),true);
        {154}insert statestore(alice,bob,statepack_f(hs_670));
        {155}out(pub, message_e)
    ) | (
        {157}event LeakS(phase0,alice);
        {158}out(pub, key_s(alice))
    ) | (
        {159}phase 1;
        {160}event LeakS(phase1,alice);
        {161}out(pub, key_s(alice))
    )
) | (
    {162}let s_672: keypair = keypairpack(empty,empty) in
    {163}out(pub, getpublickey(s_672));
    (
        {164}let e_673: keypair = keypairpack(empty,empty) in
        {165}let v_674: key = catch-fail(dhexp(key_s(charlie),g)) in
        {166}let rs_675: key = getpublickey((if not-caught-fail(v_674) then keypairpack(v_674,key_s(charlie)) else fail-any)) in
        {167}let re_676: key = empty in
        {168}let v_677: bitstring = catch-fail(hash(somename,empty)) in
        {169}let v_678: key = catch-fail(v_677) in
        {170}let v_679: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {171}let v_680: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then symmetricstatepack(v_679,v_678,v_677) else fail-any) else fail-any) else fail-any))) in
        {172}let v_681: symmetricstate = catch-fail((if success?((if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then symmetricstatepack(v_679,v_678,v_677) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then symmetricstatepack(1-proj-3-tuple(v_680),2-proj-3-tuple(v_680),hash(3-proj-3-tuple(v_680),empty)) else fail-any) else fail-any)) in
        {173}let v_682: bitstring = catch-fail(symmetricstateunpack(v_681)) in
        {174}let v_683: symmetricstate = catch-fail((if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),rs_675)) else fail-any)) in
        {175}let hs_684: handshakestate = (if not-caught-fail(v_681) then (if not-caught-fail(v_683) then handshakestatepack(v_683,s_672,e_673,rs_675,re_676,empty,true) else fail-any) else fail-any) in
        {176}insert statestore(alice,charlie,statepack_a(hs_684))
    ) | (
        {217}get statestore(=alice,=charlie,statepack_a(hs_685: handshakestate)) in
        {177}let v_686: bitstring = catch-fail(handshakestateunpack(hs_685)) in
        {178}let v_687: bitstring = catch-fail((empty,empty,empty)) in
        {179}let v_688: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {180}let v_689: keypair = catch-fail((if not-caught-fail(v_688) then keypairpack(v_688,key_e(alice,charlie)) else fail-any)) in
        {181}let v_690: bitstring = catch-fail(getpublickey(v_689)) in
        {182}let v_691: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_686))) in
        {183}let v_692: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_686)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then symmetricstatepack(1-proj-3-tuple(v_691),2-proj-3-tuple(v_691),hash(3-proj-3-tuple(v_691),v_690)) else fail-any) else fail-any)) in
        {184}let v_693: bitstring = catch-fail(keypairunpack(v_689)) in
        {185}let v_694: bitstring = catch-fail(symmetricstateunpack(v_692)) in
        {186}let v_695: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_694),(if success?(4-proj-7-tuple(v_686)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then dhexp(2-proj-2-tuple(v_693),4-proj-7-tuple(v_686)) else fail-any) else fail-any))) in
        {187}let v_696: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_694),(if success?(4-proj-7-tuple(v_686)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then dhexp(2-proj-2-tuple(v_693),4-proj-7-tuple(v_686)) else fail-any) else fail-any))) in
        {188}let v_697: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_694),(if success?(4-proj-7-tuple(v_686)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then dhexp(2-proj-2-tuple(v_693),4-proj-7-tuple(v_686)) else fail-any) else fail-any))) in
        {189}let v_698: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_686)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then dhexp(2-proj-2-tuple(v_693),4-proj-7-tuple(v_686)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_694))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (v_695,v_696,v_697) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_699: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_686)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then dhexp(2-proj-2-tuple(v_693),4-proj-7-tuple(v_686)) else fail-any) else fail-any)) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_698)) then cipherstatepack(2-proj-3-tuple(v_698),minnonce) else fail-any),1-proj-3-tuple(v_698),3-proj-3-tuple(v_694)) else fail-any) else fail-any) else fail-any)) in
        {191}let v_700: key = catch-fail(dhexp(key_s(alice),g)) in
        {192}let v_701: keypair = catch-fail((if not-caught-fail(v_700) then keypairpack(v_700,key_s(alice)) else fail-any)) in
        {193}let v_702: bitstring = catch-fail(symmetricstateunpack(v_699)) in
        {194}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {195}let v_704: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_703),2-proj-2-tuple(v_703),3-proj-3-tuple(v_702),getpublickey(v_701))) in
        {196}let v_705: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {197}let v_706: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_703))) && success?(1-proj-3-tuple(v_702))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then cipherstatepack(1-proj-2-tuple(v_705),increment_nonce(2-proj-2-tuple(v_703))) else fail-any) else fail-any)) in
        {198}let v_707: bitstring = catch-fail((if (success?(getpublickey(v_701)) && (success?(3-proj-3-tuple(v_702)) && success?(1-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then (if not-caught-fail(v_704) then (if not-caught-fail(v_706) then (v_706,v_704) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_708: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_707),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) in
        {200}let v_709: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_707)) && success?(symmetricstatepack(1-proj-2-tuple(v_707),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_708),hash(3-proj-3-tuple(v_708),2-proj-2-tuple(v_707))) else fail-any) else fail-any)) in
        {201}let v_710: bitstring = catch-fail((if success?(getpublickey(v_701)) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-2-tuple(v_707))))) then (if not-caught-fail(v_709) then (v_709,2-proj-2-tuple(v_707)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_711: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_710))) in
        {203}let v_712: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_711))) in
        {204}let v_713: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_712),2-proj-2-tuple(v_712),3-proj-3-tuple(v_711),msg_a(alice,charlie))) in
        {205}let v_714: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_711))) in
        {206}let v_715: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_712))) && success?(1-proj-3-tuple(v_711))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then cipherstatepack(1-proj-2-tuple(v_714),increment_nonce(2-proj-2-tuple(v_712))) else fail-any) else fail-any)) in
        {207}let v_716: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_711)) && success?(1-proj-3-tuple(v_711))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-2-tuple(v_712))))) then (if not-caught-fail(v_713) then (if not-caught-fail(v_715) then (v_715,v_713) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_717: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_716),2-proj-3-tuple(v_711),3-proj-3-tuple(v_711)))) in
        {209}let v_718: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_716)) && success?(symmetricstatepack(1-proj-2-tuple(v_716),2-proj-3-tuple(v_711),3-proj-3-tuple(v_711)))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then symmetricstatepack(1-proj-3-tuple(v_717),2-proj-3-tuple(v_717),hash(3-proj-3-tuple(v_717),2-proj-2-tuple(v_716))) else fail-any) else fail-any)) in
        {210}let v_719: bitstring = catch-fail((if success?(1-proj-2-tuple(v_710)) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then (if not-caught-fail(v_718) then (v_718,2-proj-2-tuple(v_716)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {211}let v_720: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_719),v_701,v_689,4-proj-7-tuple(v_686),5-proj-7-tuple(v_686),6-proj-7-tuple(v_686),7-proj-7-tuple(v_686))) in
        {212}let v_721: bitstring = catch-fail(concat3(v_690,2-proj-2-tuple(v_710),2-proj-2-tuple(v_719))) in
        {213}let (hs_722: handshakestate,re_723: key,message_a_724: bitstring) = (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-7-tuple(v_686))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then (if not-caught-fail(v_699) then (if not-caught-fail(v_701) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-2-tuple(v_710))))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (v_720,5-proj-7-tuple(v_686),v_721) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {214}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {215}insert statestore(alice,charlie,statepack_b(hs_722));
        {216}out(pub, message_a_724)
    ) | (
        {246}get statestore(=alice,=charlie,statepack_b(hs_725: handshakestate)) in
        {218}in(pub, message_b_726: bitstring);
        {219}let v_727: bitstring = catch-fail(handshakestateunpack(hs_725)) in
        {220}let v_728: bitstring = catch-fail(deconcat3(message_b_726)) in
        {221}let v_729: bool = catch-fail(true) in
        {222}let v_730: key = catch-fail(1-proj-3-tuple(v_728)) in
        {223}let v_731: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_727))) in
        {224}let v_732: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_727)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then symmetricstatepack(1-proj-3-tuple(v_731),2-proj-3-tuple(v_731),hash(3-proj-3-tuple(v_731),v_730)) else fail-any) else fail-any)) in
        {225}let v_733: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_727))) in
        {226}let v_734: bitstring = catch-fail(symmetricstateunpack(v_732)) in
        {227}let v_735: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_734),(if success?(3-proj-7-tuple(v_727)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then dhexp(2-proj-2-tuple(v_733),v_730) else fail-any) else fail-any))) in
        {228}let v_736: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_734),(if success?(3-proj-7-tuple(v_727)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then dhexp(2-proj-2-tuple(v_733),v_730) else fail-any) else fail-any))) in
        {229}let v_737: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_734),(if success?(3-proj-7-tuple(v_727)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then dhexp(2-proj-2-tuple(v_733),v_730) else fail-any) else fail-any))) in
        {230}let v_738: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_727)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then dhexp(2-proj-2-tuple(v_733),v_730) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_734))) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (if not-caught-fail(v_737) then (v_735,v_736,v_737) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {231}let v_739: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_727)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then dhexp(2-proj-2-tuple(v_733),v_730) else fail-any) else fail-any)) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_738)) then cipherstatepack(2-proj-3-tuple(v_738),minnonce) else fail-any),1-proj-3-tuple(v_738),3-proj-3-tuple(v_734)) else fail-any) else fail-any) else fail-any)) in
        {232}let v_740: bitstring = catch-fail(symmetricstateunpack(v_739)) in
        {233}let v_741: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_740))) in
        {234}let v_742: aead = catch-fail(decrypt(1-proj-2-tuple(v_741),2-proj-2-tuple(v_741),3-proj-3-tuple(v_740),3-proj-3-tuple(v_728))) in
        {235}let v_743: bitstring = catch-fail(aeadunpack(v_742)) in
        {236}let v_744: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_740))) in
        {237}let v_745: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_741))) && success?(1-proj-3-tuple(v_740))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-2-tuple(v_744))))) then cipherstatepack(1-proj-2-tuple(v_744),increment_nonce(2-proj-2-tuple(v_741))) else fail-any) else fail-any)) in
        {238}let v_746: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_728)) && (success?(3-proj-3-tuple(v_740)) && success?(1-proj-3-tuple(v_740)))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then (if not-caught-fail(v_742) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then (if not-caught-fail(v_745) then (v_745,3-proj-3-tuple(v_743),1-proj-3-tuple(v_743)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_747: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_746),2-proj-3-tuple(v_740),3-proj-3-tuple(v_740)))) in
        {240}let v_748: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_728)) && success?(symmetricstatepack(1-proj-3-tuple(v_746),2-proj-3-tuple(v_740),3-proj-3-tuple(v_740)))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then symmetricstatepack(1-proj-3-tuple(v_747),2-proj-3-tuple(v_747),hash(3-proj-3-tuple(v_747),3-proj-3-tuple(v_728))) else fail-any) else fail-any)) in
        {241}let v_749: bitstring = catch-fail((if success?(3-proj-3-tuple(v_728)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if not-caught-fail(v_748) then (v_748,2-proj-3-tuple(v_746),3-proj-3-tuple(v_746)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {242}let v_750: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_749),2-proj-7-tuple(v_727),3-proj-7-tuple(v_727),4-proj-7-tuple(v_727),v_730,6-proj-7-tuple(v_727),7-proj-7-tuple(v_727))) in
        {243}let (hs_751: handshakestate,re_752: key,plaintext_b_753: bitstring,valid_754: bool) = (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-7-tuple(v_727))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then (if not-caught-fail(v_729) then (if not-caught-fail(v_730) then (if not-caught-fail(v_732) then (if not-caught-fail(v_739) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if (v_729 && 3-proj-3-tuple(v_749)) then (if not-caught-fail(v_750) then (v_750,getpublickey(3-proj-7-tuple(v_727)),2-proj-3-tuple(v_749),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {244}event RecvMsg(alice,charlie,stage_b,plaintext_b_753,valid_754);
        {245}insert statestore(alice,charlie,statepack_c(hs_751))
    ) | (
        {271}get statestore(=alice,=charlie,statepack_c(hs_755: handshakestate)) in
        {247}let v_756: bitstring = catch-fail(handshakestateunpack(hs_755)) in
        {248}let v_757: bitstring = catch-fail((empty,empty,empty)) in
        {249}let v_758: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_756))) in
        {250}let v_759: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_756))) in
        {251}let v_760: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_759),(if (success?(5-proj-7-tuple(v_756)) && success?(2-proj-7-tuple(v_756))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_756)) else fail-any) else fail-any))) in
        {252}let v_761: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_759),(if (success?(5-proj-7-tuple(v_756)) && success?(2-proj-7-tuple(v_756))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_756)) else fail-any) else fail-any))) in
        {253}let v_762: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_759),(if (success?(5-proj-7-tuple(v_756)) && success?(2-proj-7-tuple(v_756))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_756)) else fail-any) else fail-any))) in
        {254}let v_763: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_756)) && success?(2-proj-7-tuple(v_756))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_756)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_759))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_760,v_761,v_762) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_764: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_756)) && success?(2-proj-7-tuple(v_756))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_756)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_756))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_763)) then cipherstatepack(2-proj-3-tuple(v_763),minnonce) else fail-any),1-proj-3-tuple(v_763),3-proj-3-tuple(v_759)) else fail-any) else fail-any) else fail-any)) in
        {256}let v_765: bitstring = catch-fail(symmetricstateunpack(v_764)) in
        {257}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {258}let v_767: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_766),2-proj-2-tuple(v_766),3-proj-3-tuple(v_765),msg_c(alice,charlie))) in
        {259}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {260}let v_769: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_766))) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then cipherstatepack(1-proj-2-tuple(v_768),increment_nonce(2-proj-2-tuple(v_766))) else fail-any) else fail-any)) in
        {261}let v_770: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_765)) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_767) then (if not-caught-fail(v_769) then (v_769,v_767) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_771: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_770),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) in
        {263}let v_772: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_770)) && success?(symmetricstatepack(1-proj-2-tuple(v_770),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_771),hash(3-proj-3-tuple(v_771),2-proj-2-tuple(v_770))) else fail-any) else fail-any)) in
        {264}let v_773: bitstring = catch-fail((if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then (if not-caught-fail(v_772) then (v_772,2-proj-2-tuple(v_770)) else fail-any) else fail-any) else fail-any)) in
        {265}let v_774: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_773),2-proj-7-tuple(v_756),3-proj-7-tuple(v_756),4-proj-7-tuple(v_756),5-proj-7-tuple(v_756),6-proj-7-tuple(v_756),7-proj-7-tuple(v_756))) in
        {266}let v_775: bitstring = catch-fail(concat3(1-proj-3-tuple(v_757),2-proj-3-tuple(v_757),2-proj-2-tuple(v_773))) in
        {267}let (hs_776: handshakestate,re_777: key,message_c_778: bitstring) = (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-7-tuple(v_756))))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if not-caught-fail(v_764) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (v_774,5-proj-7-tuple(v_756),v_775) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {268}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {269}insert statestore(alice,charlie,statepack_d(hs_776));
        {270}out(pub, message_c_778)
    ) | (
        {290}get statestore(=alice,=charlie,statepack_d(hs_779: handshakestate)) in
        {272}in(pub, message_d_780: bitstring);
        {273}let v_781: bitstring = catch-fail(handshakestateunpack(hs_779)) in
        {274}let v_782: bitstring = catch-fail(deconcat3(message_d_780)) in
        {275}let v_783: bool = catch-fail(true) in
        {276}let v_784: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_781))) in
        {277}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {278}let v_786: aead = catch-fail(decrypt(1-proj-2-tuple(v_785),2-proj-2-tuple(v_785),3-proj-3-tuple(v_784),3-proj-3-tuple(v_782))) in
        {279}let v_787: bitstring = catch-fail(aeadunpack(v_786)) in
        {280}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {281}let v_789: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_785))) && success?(1-proj-3-tuple(v_784))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then cipherstatepack(1-proj-2-tuple(v_788),increment_nonce(2-proj-2-tuple(v_785))) else fail-any) else fail-any)) in
        {282}let v_790: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && (success?(3-proj-3-tuple(v_784)) && success?(1-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,3-proj-3-tuple(v_787),1-proj-3-tuple(v_787)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_791: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) in
        {284}let v_792: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_791),hash(3-proj-3-tuple(v_791),3-proj-3-tuple(v_782))) else fail-any) else fail-any)) in
        {285}let v_793: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(1-proj-7-tuple(v_781))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_792) then (v_792,2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_794: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_793),2-proj-7-tuple(v_781),3-proj-7-tuple(v_781),4-proj-7-tuple(v_781),5-proj-7-tuple(v_781),6-proj-7-tuple(v_781),7-proj-7-tuple(v_781))) in
        {287}let (hs_795: handshakestate,re_796: key,plaintext_d_797: bitstring,valid_798: bool) = (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-7-tuple(v_781))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (v_783 && 3-proj-3-tuple(v_793)) then (if not-caught-fail(v_794) then (v_794,getpublickey(3-proj-7-tuple(v_781)),2-proj-3-tuple(v_793),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {288}event RecvMsg(alice,charlie,stage_d,plaintext_d_797,valid_798);
        {289}insert statestore(alice,charlie,statepack_e(hs_795))
    ) | (
        {316}get statestore(=alice,=charlie,statepack_e(hs_799: handshakestate)) in
        {291}let v_800: bitstring = catch-fail(handshakestateunpack(hs_799)) in
        {292}let v_801: bitstring = catch-fail((empty,empty,empty)) in
        {293}let v_802: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_800))) in
        {294}let v_803: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {295}let v_804: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_803),2-proj-2-tuple(v_803),3-proj-3-tuple(v_802),msg_e(alice,charlie))) in
        {296}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {297}let v_806: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_803))) && success?(1-proj-3-tuple(v_802))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then cipherstatepack(1-proj-2-tuple(v_805),increment_nonce(2-proj-2-tuple(v_803))) else fail-any) else fail-any)) in
        {298}let v_807: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_802)) && success?(1-proj-3-tuple(v_802))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-2-tuple(v_803))))) then (if not-caught-fail(v_804) then (if not-caught-fail(v_806) then (v_806,v_804) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {299}let v_808: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_807),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) in
        {300}let v_809: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_807)) && success?(symmetricstatepack(1-proj-2-tuple(v_807),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),2-proj-2-tuple(v_807))) else fail-any) else fail-any)) in
        {301}let v_810: bitstring = catch-fail((if success?(1-proj-7-tuple(v_800)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then (if not-caught-fail(v_809) then (v_809,2-proj-2-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {302}let v_811: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_810),2-proj-7-tuple(v_800),3-proj-7-tuple(v_800),4-proj-7-tuple(v_800),5-proj-7-tuple(v_800),6-proj-7-tuple(v_800),7-proj-7-tuple(v_800))) in
        {303}let v_812: bitstring = catch-fail(concat3(1-proj-3-tuple(v_801),2-proj-3-tuple(v_801),2-proj-2-tuple(v_810))) in
        {304}let v_813: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_810))) in
        {305}let v_814: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_813),zero)) in
        {306}let v_815: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_813),zero)) in
        {307}let v_816: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_813),zero)) in
        {308}let v_817: bitstring = catch-fail((if success?(2-proj-3-tuple(v_813)) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (if not-caught-fail(v_816) then (v_814,v_815,v_816) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {309}let v_818: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_817)) then cipherstatepack(1-proj-3-tuple(v_817),minnonce) else fail-any)) in
        {310}let v_819: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_817)) then cipherstatepack(2-proj-3-tuple(v_817),minnonce) else fail-any)) in
        {311}let v_820: bitstring = catch-fail((if success?(1-proj-2-tuple(v_810)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if not-caught-fail(v_818) then (if not-caught-fail(v_819) then (1-proj-2-tuple(v_810),v_818,v_819) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {312}let (hs_821: handshakestate,re_822: key,message_e_823: bitstring,cs1_824: cipherstate,cs2_825: cipherstate) = (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-7-tuple(v_800))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_811) then (if not-caught-fail(v_812) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (v_811,5-proj-7-tuple(v_800),v_812,2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {313}event SendMsg(alice,charlie,stage_e,msg_e(alice,charlie),true);
        {314}insert statestore(alice,charlie,statepack_f(hs_821));
        {315}out(pub, message_e_823)
    ) | (
        {317}event LeakS(phase0,alice);
        {318}out(pub, key_s(alice))
    ) | (
        {319}phase 1;
        {320}event LeakS(phase1,alice);
        {321}out(pub, key_s(alice))
    )
) | (
    {322}let v_826: key = catch-fail(dhexp(key_s(bob),g)) in
    {323}let s_827: keypair = (if not-caught-fail(v_826) then keypairpack(v_826,key_s(bob)) else fail-any) in
    {324}out(pub, getpublickey(s_827));
    (
        {325}let e_828: keypair = keypairpack(empty,empty) in
        {326}let rs_829: key = empty in
        {327}let re_830: key = empty in
        {328}let v_831: bitstring = catch-fail(hash(somename,empty)) in
        {329}let v_832: key = catch-fail(v_831) in
        {330}let v_833: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {331}let v_834: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_831) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then symmetricstatepack(v_833,v_832,v_831) else fail-any) else fail-any) else fail-any))) in
        {332}let v_835: symmetricstate = catch-fail((if success?((if not-caught-fail(v_831) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then symmetricstatepack(v_833,v_832,v_831) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_834),hash(3-proj-3-tuple(v_834),empty)) else fail-any) else fail-any)) in
        {333}let v_836: bitstring = catch-fail(symmetricstateunpack(v_835)) in
        {334}let v_837: symmetricstate = catch-fail((if success?(getpublickey(s_827)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then symmetricstatepack(1-proj-3-tuple(v_836),2-proj-3-tuple(v_836),hash(3-proj-3-tuple(v_836),getpublickey(s_827))) else fail-any) else fail-any)) in
        {335}let hs_838: handshakestate = (if not-caught-fail(v_835) then (if not-caught-fail(v_837) then handshakestatepack(v_837,s_827,e_828,rs_829,re_830,empty,false) else fail-any) else fail-any) in
        {336}insert statestore(bob,alice,statepack_a(hs_838))
    ) | (
        {377}get statestore(=bob,=alice,statepack_a(hs_839: handshakestate)) in
        {337}in(pub, message_a_840: bitstring);
        {338}let v_841: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {339}let v_842: bitstring = catch-fail(deconcat3(message_a_840)) in
        {340}let v_843: bool = catch-fail(true) in
        {341}let v_844: key = catch-fail(1-proj-3-tuple(v_842)) in
        {342}let v_845: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_841))) in
        {343}let v_846: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_841)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),v_844)) else fail-any) else fail-any)) in
        {344}let v_847: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_841))) in
        {345}let v_848: bitstring = catch-fail(symmetricstateunpack(v_846)) in
        {346}let v_849: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_848),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any))) in
        {347}let v_850: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_848),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any))) in
        {348}let v_851: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_848),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any))) in
        {349}let v_852: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_848))) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (v_849,v_850,v_851) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {350}let v_853: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_852)) then cipherstatepack(2-proj-3-tuple(v_852),minnonce) else fail-any),1-proj-3-tuple(v_852),3-proj-3-tuple(v_848)) else fail-any) else fail-any) else fail-any)) in
        {351}let v_854: bitstring = catch-fail(symmetricstateunpack(v_853)) in
        {352}let v_855: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_854))) in
        {353}let v_856: aead = catch-fail(decrypt(1-proj-2-tuple(v_855),2-proj-2-tuple(v_855),3-proj-3-tuple(v_854),2-proj-3-tuple(v_842))) in
        {354}let v_857: bitstring = catch-fail(aeadunpack(v_856)) in
        {355}let v_858: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_854))) in
        {356}let v_859: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_855))) && success?(1-proj-3-tuple(v_854))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then cipherstatepack(1-proj-2-tuple(v_858),increment_nonce(2-proj-2-tuple(v_855))) else fail-any) else fail-any)) in
        {357}let v_860: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_842)) && (success?(3-proj-3-tuple(v_854)) && success?(1-proj-3-tuple(v_854)))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then (if not-caught-fail(v_856) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_859) then (v_859,3-proj-3-tuple(v_857),1-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_861: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)))) in
        {359}let v_862: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_842)) && success?(symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack(1-proj-3-tuple(v_861),2-proj-3-tuple(v_861),hash(3-proj-3-tuple(v_861),2-proj-3-tuple(v_842))) else fail-any) else fail-any)) in
        {360}let v_863: bitstring = catch-fail((if success?(2-proj-3-tuple(v_842)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if not-caught-fail(v_862) then (v_862,2-proj-3-tuple(v_860),3-proj-3-tuple(v_860)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let v_864: key = catch-fail(2-proj-3-tuple(v_863)) in
        {362}let v_865: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_863))) in
        {363}let v_866: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_865))) in
        {364}let v_867: aead = catch-fail(decrypt(1-proj-2-tuple(v_866),2-proj-2-tuple(v_866),3-proj-3-tuple(v_865),3-proj-3-tuple(v_842))) in
        {365}let v_868: bitstring = catch-fail(aeadunpack(v_867)) in
        {366}let v_869: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_865))) in
        {367}let v_870: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_866))) && success?(1-proj-3-tuple(v_865))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then cipherstatepack(1-proj-2-tuple(v_869),increment_nonce(2-proj-2-tuple(v_866))) else fail-any) else fail-any)) in
        {368}let v_871: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && (success?(3-proj-3-tuple(v_865)) && success?(1-proj-3-tuple(v_865)))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then (if not-caught-fail(v_867) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if not-caught-fail(v_870) then (v_870,3-proj-3-tuple(v_868),1-proj-3-tuple(v_868)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_872: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_871),2-proj-3-tuple(v_865),3-proj-3-tuple(v_865)))) in
        {370}let v_873: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(symmetricstatepack(1-proj-3-tuple(v_871),2-proj-3-tuple(v_865),3-proj-3-tuple(v_865)))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack(1-proj-3-tuple(v_872),2-proj-3-tuple(v_872),hash(3-proj-3-tuple(v_872),3-proj-3-tuple(v_842))) else fail-any) else fail-any)) in
        {371}let v_874: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_863))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if not-caught-fail(v_873) then (v_873,2-proj-3-tuple(v_871),3-proj-3-tuple(v_871)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_875: key = catch-fail(dhexp(key_s(alice),g)) in
        {373}let v_876: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_874),2-proj-7-tuple(v_841),3-proj-7-tuple(v_841),v_864,v_844,6-proj-7-tuple(v_841),7-proj-7-tuple(v_841))) in
        {374}let (hs_877: handshakestate,re_878: key,plaintext_a: bitstring,valid_879: bool) = (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-7-tuple(v_841))))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (if not-caught-fail(v_853) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if not-caught-fail(v_864) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if ((3-proj-3-tuple(v_863) && 3-proj-3-tuple(v_874)) && (v_864 = getpublickey((if not-caught-fail(v_875) then keypairpack(v_875,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_876) then (v_876,getpublickey(3-proj-7-tuple(v_841)),2-proj-3-tuple(v_874),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {375}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_879);
        {376}insert statestore(bob,alice,statepack_b(hs_877))
    ) | (
        {407}get statestore(=bob,=alice,statepack_b(hs_880: handshakestate)) in
        {378}let v_881: bitstring = catch-fail(handshakestateunpack(hs_880)) in
        {379}let v_882: bitstring = catch-fail((empty,empty,empty)) in
        {380}let v_883: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {381}let v_884: keypair = catch-fail((if not-caught-fail(v_883) then keypairpack(v_883,key_e(bob,alice)) else fail-any)) in
        {382}let v_885: bitstring = catch-fail(getpublickey(v_884)) in
        {383}let v_886: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_881))) in
        {384}let v_887: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_881)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then symmetricstatepack(1-proj-3-tuple(v_886),2-proj-3-tuple(v_886),hash(3-proj-3-tuple(v_886),v_885)) else fail-any) else fail-any)) in
        {385}let v_888: bitstring = catch-fail(keypairunpack(v_884)) in
        {386}let v_889: bitstring = catch-fail(symmetricstateunpack(v_887)) in
        {387}let v_890: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_889),(if success?(5-proj-7-tuple(v_881)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_881)) else fail-any) else fail-any))) in
        {388}let v_891: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_889),(if success?(5-proj-7-tuple(v_881)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_881)) else fail-any) else fail-any))) in
        {389}let v_892: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_889),(if success?(5-proj-7-tuple(v_881)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_881)) else fail-any) else fail-any))) in
        {390}let v_893: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_881)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_881)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_889))) then (if not-caught-fail(v_890) then (if not-caught-fail(v_891) then (if not-caught-fail(v_892) then (v_890,v_891,v_892) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {391}let v_894: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_881)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),5-proj-7-tuple(v_881)) else fail-any) else fail-any)) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_893)) then cipherstatepack(2-proj-3-tuple(v_893),minnonce) else fail-any),1-proj-3-tuple(v_893),3-proj-3-tuple(v_889)) else fail-any) else fail-any) else fail-any)) in
        {392}let v_895: bitstring = catch-fail(symmetricstateunpack(v_894)) in
        {393}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {394}let v_897: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_896),2-proj-2-tuple(v_896),3-proj-3-tuple(v_895),msg_b(bob,alice))) in
        {395}let v_898: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {396}let v_899: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_896))) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then cipherstatepack(1-proj-2-tuple(v_898),increment_nonce(2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {397}let v_900: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_895)) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_899) then (v_899,v_897) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {398}let v_901: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_900),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) in
        {399}let v_902: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_900)) && success?(symmetricstatepack(1-proj-2-tuple(v_900),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_901),hash(3-proj-3-tuple(v_901),2-proj-2-tuple(v_900))) else fail-any) else fail-any)) in
        {400}let v_903: bitstring = catch-fail((if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then (if not-caught-fail(v_902) then (v_902,2-proj-2-tuple(v_900)) else fail-any) else fail-any) else fail-any)) in
        {401}let v_904: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_903),2-proj-7-tuple(v_881),v_884,4-proj-7-tuple(v_881),5-proj-7-tuple(v_881),6-proj-7-tuple(v_881),7-proj-7-tuple(v_881))) in
        {402}let v_905: bitstring = catch-fail(concat3(v_885,2-proj-3-tuple(v_882),2-proj-2-tuple(v_903))) in
        {403}let (hs_906: handshakestate,re_907: key,message_b_908: bitstring) = (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-7-tuple(v_881))))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if not-caught-fail(v_884) then (if not-caught-fail(v_885) then (if not-caught-fail(v_887) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if not-caught-fail(v_904) then (if not-caught-fail(v_905) then (v_904,5-proj-7-tuple(v_881),v_905) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {404}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {405}insert statestore(bob,alice,statepack_c(hs_906));
        {406}out(pub, message_b_908)
    ) | (
        {433}get statestore(=bob,=alice,statepack_c(hs_909: handshakestate)) in
        {408}in(pub, message_c_910: bitstring);
        {409}let v_911: bitstring = catch-fail(handshakestateunpack(hs_909)) in
        {410}let v_912: bitstring = catch-fail(deconcat3(message_c_910)) in
        {411}let v_913: bool = catch-fail(true) in
        {412}let v_914: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_911))) in
        {413}let v_915: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_911))) in
        {414}let v_916: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_915),(if (success?(4-proj-7-tuple(v_911)) && success?(3-proj-7-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_911)) else fail-any) else fail-any))) in
        {415}let v_917: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_915),(if (success?(4-proj-7-tuple(v_911)) && success?(3-proj-7-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_911)) else fail-any) else fail-any))) in
        {416}let v_918: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_915),(if (success?(4-proj-7-tuple(v_911)) && success?(3-proj-7-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_911)) else fail-any) else fail-any))) in
        {417}let v_919: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_911)) && success?(3-proj-7-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_911)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_915))) then (if not-caught-fail(v_916) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (v_916,v_917,v_918) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_920: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_911)) && success?(3-proj-7-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),4-proj-7-tuple(v_911)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_911))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_919)) then cipherstatepack(2-proj-3-tuple(v_919),minnonce) else fail-any),1-proj-3-tuple(v_919),3-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any)) in
        {419}let v_921: bitstring = catch-fail(symmetricstateunpack(v_920)) in
        {420}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {421}let v_923: aead = catch-fail(decrypt(1-proj-2-tuple(v_922),2-proj-2-tuple(v_922),3-proj-3-tuple(v_921),3-proj-3-tuple(v_912))) in
        {422}let v_924: bitstring = catch-fail(aeadunpack(v_923)) in
        {423}let v_925: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {424}let v_926: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_922))) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-2-tuple(v_925))))) then cipherstatepack(1-proj-2-tuple(v_925),increment_nonce(2-proj-2-tuple(v_922))) else fail-any) else fail-any)) in
        {425}let v_927: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_912)) && (success?(3-proj-3-tuple(v_921)) && success?(1-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then (if not-caught-fail(v_923) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if not-caught-fail(v_926) then (v_926,3-proj-3-tuple(v_924),1-proj-3-tuple(v_924)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {426}let v_928: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) in
        {427}let v_929: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_912)) && success?(symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then symmetricstatepack(1-proj-3-tuple(v_928),2-proj-3-tuple(v_928),hash(3-proj-3-tuple(v_928),3-proj-3-tuple(v_912))) else fail-any) else fail-any)) in
        {428}let v_930: bitstring = catch-fail((if success?(3-proj-3-tuple(v_912)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if not-caught-fail(v_929) then (v_929,2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {429}let v_931: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_930),2-proj-7-tuple(v_911),3-proj-7-tuple(v_911),4-proj-7-tuple(v_911),5-proj-7-tuple(v_911),6-proj-7-tuple(v_911),7-proj-7-tuple(v_911))) in
        {430}let (hs_932: handshakestate,re_933: key,plaintext_c: bitstring,valid_934: bool) = (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-7-tuple(v_911))))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then (if not-caught-fail(v_913) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if (v_913 && 3-proj-3-tuple(v_930)) then (if not-caught-fail(v_931) then (v_931,getpublickey(3-proj-7-tuple(v_911)),2-proj-3-tuple(v_930),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {431}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_934);
        {432}insert statestore(bob,alice,statepack_d(hs_932))
    ) | (
        {451}get statestore(=bob,=alice,statepack_d(hs_935: handshakestate)) in
        {434}let v_936: bitstring = catch-fail(handshakestateunpack(hs_935)) in
        {435}let v_937: bitstring = catch-fail((empty,empty,empty)) in
        {436}let v_938: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_936))) in
        {437}let v_939: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_938))) in
        {438}let v_940: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_939),2-proj-2-tuple(v_939),3-proj-3-tuple(v_938),msg_d(bob,alice))) in
        {439}let v_941: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_938))) in
        {440}let v_942: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_939))) && success?(1-proj-3-tuple(v_938))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then cipherstatepack(1-proj-2-tuple(v_941),increment_nonce(2-proj-2-tuple(v_939))) else fail-any) else fail-any)) in
        {441}let v_943: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_938)) && success?(1-proj-3-tuple(v_938))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_942) then (v_942,v_940) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {442}let v_944: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_943),2-proj-3-tuple(v_938),3-proj-3-tuple(v_938)))) in
        {443}let v_945: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_943)) && success?(symmetricstatepack(1-proj-2-tuple(v_943),2-proj-3-tuple(v_938),3-proj-3-tuple(v_938)))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then symmetricstatepack(1-proj-3-tuple(v_944),2-proj-3-tuple(v_944),hash(3-proj-3-tuple(v_944),2-proj-2-tuple(v_943))) else fail-any) else fail-any)) in
        {444}let v_946: bitstring = catch-fail((if success?(1-proj-7-tuple(v_936)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then (if not-caught-fail(v_945) then (v_945,2-proj-2-tuple(v_943)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_947: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_946),2-proj-7-tuple(v_936),3-proj-7-tuple(v_936),4-proj-7-tuple(v_936),5-proj-7-tuple(v_936),6-proj-7-tuple(v_936),7-proj-7-tuple(v_936))) in
        {446}let v_948: bitstring = catch-fail(concat3(1-proj-3-tuple(v_937),2-proj-3-tuple(v_937),2-proj-2-tuple(v_946))) in
        {447}let (hs_949: handshakestate,re_950: key,message_d_951: bitstring) = (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-7-tuple(v_936))))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then (if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (v_947,5-proj-7-tuple(v_936),v_948) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {448}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {449}insert statestore(bob,alice,statepack_e(hs_949));
        {450}out(pub, message_d_951)
    ) | (
        {479}get statestore(=bob,=alice,statepack_e(hs_952: handshakestate)) in
        {452}in(pub, message_e_953: bitstring);
        {453}let v_954: bitstring = catch-fail(handshakestateunpack(hs_952)) in
        {454}let v_955: bitstring = catch-fail(deconcat3(message_e_953)) in
        {455}let v_956: bool = catch-fail(true) in
        {456}let v_957: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_954))) in
        {457}let v_958: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_957))) in
        {458}let v_959: aead = catch-fail(decrypt(1-proj-2-tuple(v_958),2-proj-2-tuple(v_958),3-proj-3-tuple(v_957),3-proj-3-tuple(v_955))) in
        {459}let v_960: bitstring = catch-fail(aeadunpack(v_959)) in
        {460}let v_961: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_957))) in
        {461}let v_962: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_958))) && success?(1-proj-3-tuple(v_957))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then cipherstatepack(1-proj-2-tuple(v_961),increment_nonce(2-proj-2-tuple(v_958))) else fail-any) else fail-any)) in
        {462}let v_963: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_955)) && (success?(3-proj-3-tuple(v_957)) && success?(1-proj-3-tuple(v_957)))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then (if not-caught-fail(v_959) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if not-caught-fail(v_962) then (v_962,3-proj-3-tuple(v_960),1-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let v_964: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_963),2-proj-3-tuple(v_957),3-proj-3-tuple(v_957)))) in
        {464}let v_965: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_955)) && success?(symmetricstatepack(1-proj-3-tuple(v_963),2-proj-3-tuple(v_957),3-proj-3-tuple(v_957)))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_964),hash(3-proj-3-tuple(v_964),3-proj-3-tuple(v_955))) else fail-any) else fail-any)) in
        {465}let v_966: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_955)) && success?(1-proj-7-tuple(v_954))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if not-caught-fail(v_965) then (v_965,2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {466}let v_967: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_966),2-proj-7-tuple(v_954),3-proj-7-tuple(v_954),4-proj-7-tuple(v_954),5-proj-7-tuple(v_954),6-proj-7-tuple(v_954),7-proj-7-tuple(v_954))) in
        {467}let v_968: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_966))) in
        {468}let v_969: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_968),zero)) in
        {469}let v_970: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_968),zero)) in
        {470}let v_971: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_968),zero)) in
        {471}let v_972: bitstring = catch-fail((if success?(2-proj-3-tuple(v_968)) then (if not-caught-fail(v_969) then (if not-caught-fail(v_970) then (if not-caught-fail(v_971) then (v_969,v_970,v_971) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {472}let v_973: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_972)) then cipherstatepack(1-proj-3-tuple(v_972),minnonce) else fail-any)) in
        {473}let v_974: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_972)) then cipherstatepack(2-proj-3-tuple(v_972),minnonce) else fail-any)) in
        {474}let v_975: bitstring = catch-fail((if success?(1-proj-3-tuple(v_966)) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_973) then (if not-caught-fail(v_974) then (1-proj-3-tuple(v_966),v_973,v_974) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {475}let (hs_976: handshakestate,re_977: key,plaintext_e: bitstring,valid_978: bool,cs1_979: cipherstate,cs2_980: cipherstate) = (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-7-tuple(v_954))))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if (v_956 && 3-proj-3-tuple(v_966)) then (if not-caught-fail(v_967) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (v_967,getpublickey(3-proj-7-tuple(v_954)),2-proj-3-tuple(v_966),true,2-proj-3-tuple(v_975),3-proj-3-tuple(v_975)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {476}event RecvMsg(bob,alice,stage_e,plaintext_e,valid_978);
        {477}insert statestore(bob,alice,statepack_f(hs_976));
        {478}event RecvEnd(valid_978)
    ) | (
        {480}event LeakS(phase0,bob);
        {481}out(pub, key_s(bob))
    ) | (
        {482}phase 1;
        {483}event LeakS(phase1,bob);
        {484}out(pub, key_s(bob))
    )
) | (
    {485}let v_981: key = catch-fail(dhexp(key_s(bob),g)) in
    {486}let s_982: keypair = (if not-caught-fail(v_981) then keypairpack(v_981,key_s(bob)) else fail-any) in
    {487}out(pub, getpublickey(s_982));
    (
        {488}let e_983: keypair = keypairpack(empty,empty) in
        {489}let rs_984: key = empty in
        {490}let re_985: key = empty in
        {491}let v_986: bitstring = catch-fail(hash(somename,empty)) in
        {492}let v_987: key = catch-fail(v_986) in
        {493}let v_988: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {494}let v_989: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then symmetricstatepack(v_988,v_987,v_986) else fail-any) else fail-any) else fail-any))) in
        {495}let v_990: symmetricstate = catch-fail((if success?((if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then symmetricstatepack(v_988,v_987,v_986) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_989),hash(3-proj-3-tuple(v_989),empty)) else fail-any) else fail-any)) in
        {496}let v_991: bitstring = catch-fail(symmetricstateunpack(v_990)) in
        {497}let v_992: symmetricstate = catch-fail((if success?(getpublickey(s_982)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-3-tuple(v_991))))) then symmetricstatepack(1-proj-3-tuple(v_991),2-proj-3-tuple(v_991),hash(3-proj-3-tuple(v_991),getpublickey(s_982))) else fail-any) else fail-any)) in
        {498}let hs_993: handshakestate = (if not-caught-fail(v_990) then (if not-caught-fail(v_992) then handshakestatepack(v_992,s_982,e_983,rs_984,re_985,empty,false) else fail-any) else fail-any) in
        {499}insert statestore(bob,charlie,statepack_a(hs_993))
    ) | (
        {540}get statestore(=bob,=charlie,statepack_a(hs_994: handshakestate)) in
        {500}in(pub, message_a_995: bitstring);
        {501}let v_996: bitstring = catch-fail(handshakestateunpack(hs_994)) in
        {502}let v_997: bitstring = catch-fail(deconcat3(message_a_995)) in
        {503}let v_998: bool = catch-fail(true) in
        {504}let v_999: key = catch-fail(1-proj-3-tuple(v_997)) in
        {505}let v_1000: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_996))) in
        {506}let v_1001: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_996)) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then symmetricstatepack(1-proj-3-tuple(v_1000),2-proj-3-tuple(v_1000),hash(3-proj-3-tuple(v_1000),v_999)) else fail-any) else fail-any)) in
        {507}let v_1002: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_996))) in
        {508}let v_1003: bitstring = catch-fail(symmetricstateunpack(v_1001)) in
        {509}let v_1004: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1003),(if success?(2-proj-7-tuple(v_996)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),v_999) else fail-any) else fail-any))) in
        {510}let v_1005: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1003),(if success?(2-proj-7-tuple(v_996)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),v_999) else fail-any) else fail-any))) in
        {511}let v_1006: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1003),(if success?(2-proj-7-tuple(v_996)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),v_999) else fail-any) else fail-any))) in
        {512}let v_1007: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_996)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),v_999) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1003))) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1006) then (v_1004,v_1005,v_1006) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {513}let v_1008: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_996)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then dhexp(2-proj-2-tuple(v_1002),v_999) else fail-any) else fail-any)) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1007)) then cipherstatepack(2-proj-3-tuple(v_1007),minnonce) else fail-any),1-proj-3-tuple(v_1007),3-proj-3-tuple(v_1003)) else fail-any) else fail-any) else fail-any)) in
        {514}let v_1009: bitstring = catch-fail(symmetricstateunpack(v_1008)) in
        {515}let v_1010: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1009))) in
        {516}let v_1011: aead = catch-fail(decrypt(1-proj-2-tuple(v_1010),2-proj-2-tuple(v_1010),3-proj-3-tuple(v_1009),2-proj-3-tuple(v_997))) in
        {517}let v_1012: bitstring = catch-fail(aeadunpack(v_1011)) in
        {518}let v_1013: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1009))) in
        {519}let v_1014: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1010))) && success?(1-proj-3-tuple(v_1009))) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-2-tuple(v_1013))))) then cipherstatepack(1-proj-2-tuple(v_1013),increment_nonce(2-proj-2-tuple(v_1010))) else fail-any) else fail-any)) in
        {520}let v_1015: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_997)) && (success?(3-proj-3-tuple(v_1009)) && success?(1-proj-3-tuple(v_1009)))) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then (if not-caught-fail(v_1011) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-3-tuple(v_1012))))) then (if not-caught-fail(v_1014) then (v_1014,3-proj-3-tuple(v_1012),1-proj-3-tuple(v_1012)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {521}let v_1016: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1015),2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)))) in
        {522}let v_1017: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_997)) && success?(symmetricstatepack(1-proj-3-tuple(v_1015),2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-3-tuple(v_1016))))) then symmetricstatepack(1-proj-3-tuple(v_1016),2-proj-3-tuple(v_1016),hash(3-proj-3-tuple(v_1016),2-proj-3-tuple(v_997))) else fail-any) else fail-any)) in
        {523}let v_1018: bitstring = catch-fail((if success?(2-proj-3-tuple(v_997)) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then (if not-caught-fail(v_1017) then (v_1017,2-proj-3-tuple(v_1015),3-proj-3-tuple(v_1015)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {524}let v_1019: key = catch-fail(2-proj-3-tuple(v_1018)) in
        {525}let v_1020: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1018))) in
        {526}let v_1021: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1020))) in
        {527}let v_1022: aead = catch-fail(decrypt(1-proj-2-tuple(v_1021),2-proj-2-tuple(v_1021),3-proj-3-tuple(v_1020),3-proj-3-tuple(v_997))) in
        {528}let v_1023: bitstring = catch-fail(aeadunpack(v_1022)) in
        {529}let v_1024: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1020))) in
        {530}let v_1025: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1021))) && success?(1-proj-3-tuple(v_1020))) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-2-tuple(v_1024))))) then cipherstatepack(1-proj-2-tuple(v_1024),increment_nonce(2-proj-2-tuple(v_1021))) else fail-any) else fail-any)) in
        {531}let v_1026: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_997)) && (success?(3-proj-3-tuple(v_1020)) && success?(1-proj-3-tuple(v_1020)))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then (if not-caught-fail(v_1022) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-3-tuple(v_1023))))) then (if not-caught-fail(v_1025) then (v_1025,3-proj-3-tuple(v_1023),1-proj-3-tuple(v_1023)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1027: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1026),2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)))) in
        {533}let v_1028: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_997)) && success?(symmetricstatepack(1-proj-3-tuple(v_1026),2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)))) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-3-tuple(v_1027))))) then symmetricstatepack(1-proj-3-tuple(v_1027),2-proj-3-tuple(v_1027),hash(3-proj-3-tuple(v_1027),3-proj-3-tuple(v_997))) else fail-any) else fail-any)) in
        {534}let v_1029: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_997)) && success?(1-proj-3-tuple(v_1018))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then (if not-caught-fail(v_1028) then (v_1028,2-proj-3-tuple(v_1026),3-proj-3-tuple(v_1026)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1030: key = catch-fail(dhexp(key_s(charlie),g)) in
        {536}let v_1031: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1029),2-proj-7-tuple(v_996),3-proj-7-tuple(v_996),v_1019,v_999,6-proj-7-tuple(v_996),7-proj-7-tuple(v_996))) in
        {537}let (hs_1032: handshakestate,re_1033: key,plaintext_a_1034: bitstring,valid_1035: bool) = (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-7-tuple(v_996))))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then (if not-caught-fail(v_998) then (if not-caught-fail(v_999) then (if not-caught-fail(v_1001) then (if not-caught-fail(v_1008) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-3-tuple(v_1018))))) then (if not-caught-fail(v_1019) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then (if ((3-proj-3-tuple(v_1018) && 3-proj-3-tuple(v_1029)) && (v_1019 = getpublickey((if not-caught-fail(v_1030) then keypairpack(v_1030,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1031) then (v_1031,getpublickey(3-proj-7-tuple(v_996)),2-proj-3-tuple(v_1029),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {538}event RecvMsg(bob,charlie,stage_a,plaintext_a_1034,valid_1035);
        {539}insert statestore(bob,charlie,statepack_b(hs_1032))
    ) | (
        {570}get statestore(=bob,=charlie,statepack_b(hs_1036: handshakestate)) in
        {541}let v_1037: bitstring = catch-fail(handshakestateunpack(hs_1036)) in
        {542}let v_1038: bitstring = catch-fail((empty,empty,empty)) in
        {543}let v_1039: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {544}let v_1040: keypair = catch-fail((if not-caught-fail(v_1039) then keypairpack(v_1039,key_e(bob,charlie)) else fail-any)) in
        {545}let v_1041: bitstring = catch-fail(getpublickey(v_1040)) in
        {546}let v_1042: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1037))) in
        {547}let v_1043: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1037)) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then symmetricstatepack(1-proj-3-tuple(v_1042),2-proj-3-tuple(v_1042),hash(3-proj-3-tuple(v_1042),v_1041)) else fail-any) else fail-any)) in
        {548}let v_1044: bitstring = catch-fail(keypairunpack(v_1040)) in
        {549}let v_1045: bitstring = catch-fail(symmetricstateunpack(v_1043)) in
        {550}let v_1046: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1045),(if success?(5-proj-7-tuple(v_1037)) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then dhexp(2-proj-2-tuple(v_1044),5-proj-7-tuple(v_1037)) else fail-any) else fail-any))) in
        {551}let v_1047: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1045),(if success?(5-proj-7-tuple(v_1037)) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then dhexp(2-proj-2-tuple(v_1044),5-proj-7-tuple(v_1037)) else fail-any) else fail-any))) in
        {552}let v_1048: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1045),(if success?(5-proj-7-tuple(v_1037)) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then dhexp(2-proj-2-tuple(v_1044),5-proj-7-tuple(v_1037)) else fail-any) else fail-any))) in
        {553}let v_1049: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1037)) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then dhexp(2-proj-2-tuple(v_1044),5-proj-7-tuple(v_1037)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1045))) then (if not-caught-fail(v_1046) then (if not-caught-fail(v_1047) then (if not-caught-fail(v_1048) then (v_1046,v_1047,v_1048) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {554}let v_1050: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1037)) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then dhexp(2-proj-2-tuple(v_1044),5-proj-7-tuple(v_1037)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1049)) then cipherstatepack(2-proj-3-tuple(v_1049),minnonce) else fail-any),1-proj-3-tuple(v_1049),3-proj-3-tuple(v_1045)) else fail-any) else fail-any) else fail-any)) in
        {555}let v_1051: bitstring = catch-fail(symmetricstateunpack(v_1050)) in
        {556}let v_1052: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1051))) in
        {557}let v_1053: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1052),2-proj-2-tuple(v_1052),3-proj-3-tuple(v_1051),msg_b(bob,charlie))) in
        {558}let v_1054: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1051))) in
        {559}let v_1055: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1052))) && success?(1-proj-3-tuple(v_1051))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then cipherstatepack(1-proj-2-tuple(v_1054),increment_nonce(2-proj-2-tuple(v_1052))) else fail-any) else fail-any)) in
        {560}let v_1056: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1051)) && success?(1-proj-3-tuple(v_1051))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then (if not-caught-fail(v_1053) then (if not-caught-fail(v_1055) then (v_1055,v_1053) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1057: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1056),2-proj-3-tuple(v_1051),3-proj-3-tuple(v_1051)))) in
        {562}let v_1058: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1056)) && success?(symmetricstatepack(1-proj-2-tuple(v_1056),2-proj-3-tuple(v_1051),3-proj-3-tuple(v_1051)))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack(1-proj-3-tuple(v_1057),2-proj-3-tuple(v_1057),hash(3-proj-3-tuple(v_1057),2-proj-2-tuple(v_1056))) else fail-any) else fail-any)) in
        {563}let v_1059: bitstring = catch-fail((if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then (if not-caught-fail(v_1058) then (v_1058,2-proj-2-tuple(v_1056)) else fail-any) else fail-any) else fail-any)) in
        {564}let v_1060: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1059),2-proj-7-tuple(v_1037),v_1040,4-proj-7-tuple(v_1037),5-proj-7-tuple(v_1037),6-proj-7-tuple(v_1037),7-proj-7-tuple(v_1037))) in
        {565}let v_1061: bitstring = catch-fail(concat3(v_1041,2-proj-3-tuple(v_1038),2-proj-2-tuple(v_1059))) in
        {566}let (hs_1062: handshakestate,re_1063: key,message_b_1064: bitstring) = (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-7-tuple(v_1037))))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then (if not-caught-fail(v_1040) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1043) then (if not-caught-fail(v_1050) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then (if not-caught-fail(v_1060) then (if not-caught-fail(v_1061) then (v_1060,5-proj-7-tuple(v_1037),v_1061) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {567}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {568}insert statestore(bob,charlie,statepack_c(hs_1062));
        {569}out(pub, message_b_1064)
    ) | (
        {596}get statestore(=bob,=charlie,statepack_c(hs_1065: handshakestate)) in
        {571}in(pub, message_c_1066: bitstring);
        {572}let v_1067: bitstring = catch-fail(handshakestateunpack(hs_1065)) in
        {573}let v_1068: bitstring = catch-fail(deconcat3(message_c_1066)) in
        {574}let v_1069: bool = catch-fail(true) in
        {575}let v_1070: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1067))) in
        {576}let v_1071: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1067))) in
        {577}let v_1072: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1071),(if (success?(4-proj-7-tuple(v_1067)) && success?(3-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1067)) else fail-any) else fail-any))) in
        {578}let v_1073: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1071),(if (success?(4-proj-7-tuple(v_1067)) && success?(3-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1067)) else fail-any) else fail-any))) in
        {579}let v_1074: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1071),(if (success?(4-proj-7-tuple(v_1067)) && success?(3-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1067)) else fail-any) else fail-any))) in
        {580}let v_1075: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1067)) && success?(3-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1067)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1071))) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1073) then (if not-caught-fail(v_1074) then (v_1072,v_1073,v_1074) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {581}let v_1076: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1067)) && success?(3-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-2-tuple(v_1070))))) then dhexp(2-proj-2-tuple(v_1070),4-proj-7-tuple(v_1067)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1067))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-3-tuple(v_1071))))) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-3-tuple(v_1075))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1075)) then cipherstatepack(2-proj-3-tuple(v_1075),minnonce) else fail-any),1-proj-3-tuple(v_1075),3-proj-3-tuple(v_1071)) else fail-any) else fail-any) else fail-any)) in
        {582}let v_1077: bitstring = catch-fail(symmetricstateunpack(v_1076)) in
        {583}let v_1078: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1077))) in
        {584}let v_1079: aead = catch-fail(decrypt(1-proj-2-tuple(v_1078),2-proj-2-tuple(v_1078),3-proj-3-tuple(v_1077),3-proj-3-tuple(v_1068))) in
        {585}let v_1080: bitstring = catch-fail(aeadunpack(v_1079)) in
        {586}let v_1081: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1077))) in
        {587}let v_1082: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1078))) && success?(1-proj-3-tuple(v_1077))) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-2-tuple(v_1081))))) then cipherstatepack(1-proj-2-tuple(v_1081),increment_nonce(2-proj-2-tuple(v_1078))) else fail-any) else fail-any)) in
        {588}let v_1083: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1068)) && (success?(3-proj-3-tuple(v_1077)) && success?(1-proj-3-tuple(v_1077)))) then (if (not-caught-fail(v_1078) && success?(is-true(success?(1-proj-2-tuple(v_1078))))) then (if not-caught-fail(v_1079) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if not-caught-fail(v_1082) then (v_1082,3-proj-3-tuple(v_1080),1-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {589}let v_1084: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)))) in
        {590}let v_1085: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1068)) && success?(symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1077),3-proj-3-tuple(v_1077)))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then symmetricstatepack(1-proj-3-tuple(v_1084),2-proj-3-tuple(v_1084),hash(3-proj-3-tuple(v_1084),3-proj-3-tuple(v_1068))) else fail-any) else fail-any)) in
        {591}let v_1086: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1068)) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if not-caught-fail(v_1085) then (v_1085,2-proj-3-tuple(v_1083),3-proj-3-tuple(v_1083)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {592}let v_1087: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1086),2-proj-7-tuple(v_1067),3-proj-7-tuple(v_1067),4-proj-7-tuple(v_1067),5-proj-7-tuple(v_1067),6-proj-7-tuple(v_1067),7-proj-7-tuple(v_1067))) in
        {593}let (hs_1088: handshakestate,re_1089: key,plaintext_c_1090: bitstring,valid_1091: bool) = (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-7-tuple(v_1067))))) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if not-caught-fail(v_1069) then (if not-caught-fail(v_1076) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if (v_1069 && 3-proj-3-tuple(v_1086)) then (if not-caught-fail(v_1087) then (v_1087,getpublickey(3-proj-7-tuple(v_1067)),2-proj-3-tuple(v_1086),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {594}event RecvMsg(bob,charlie,stage_c,plaintext_c_1090,valid_1091);
        {595}insert statestore(bob,charlie,statepack_d(hs_1088))
    ) | (
        {614}get statestore(=bob,=charlie,statepack_d(hs_1092: handshakestate)) in
        {597}let v_1093: bitstring = catch-fail(handshakestateunpack(hs_1092)) in
        {598}let v_1094: bitstring = catch-fail((empty,empty,empty)) in
        {599}let v_1095: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1093))) in
        {600}let v_1096: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1095))) in
        {601}let v_1097: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1096),2-proj-2-tuple(v_1096),3-proj-3-tuple(v_1095),msg_d(bob,charlie))) in
        {602}let v_1098: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1095))) in
        {603}let v_1099: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1096))) && success?(1-proj-3-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then cipherstatepack(1-proj-2-tuple(v_1098),increment_nonce(2-proj-2-tuple(v_1096))) else fail-any) else fail-any)) in
        {604}let v_1100: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1095)) && success?(1-proj-3-tuple(v_1095))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1099) then (v_1099,v_1097) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1101: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1100),2-proj-3-tuple(v_1095),3-proj-3-tuple(v_1095)))) in
        {606}let v_1102: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1100)) && success?(symmetricstatepack(1-proj-2-tuple(v_1100),2-proj-3-tuple(v_1095),3-proj-3-tuple(v_1095)))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then symmetricstatepack(1-proj-3-tuple(v_1101),2-proj-3-tuple(v_1101),hash(3-proj-3-tuple(v_1101),2-proj-2-tuple(v_1100))) else fail-any) else fail-any)) in
        {607}let v_1103: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1093)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-2-tuple(v_1100))))) then (if not-caught-fail(v_1102) then (v_1102,2-proj-2-tuple(v_1100)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1104: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1103),2-proj-7-tuple(v_1093),3-proj-7-tuple(v_1093),4-proj-7-tuple(v_1093),5-proj-7-tuple(v_1093),6-proj-7-tuple(v_1093),7-proj-7-tuple(v_1093))) in
        {609}let v_1105: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1094),2-proj-3-tuple(v_1094),2-proj-2-tuple(v_1103))) in
        {610}let (hs_1106: handshakestate,re_1107: key,message_d_1108: bitstring) = (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-7-tuple(v_1093))))) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-2-tuple(v_1103))))) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1105) then (v_1104,5-proj-7-tuple(v_1093),v_1105) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {611}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {612}insert statestore(bob,charlie,statepack_e(hs_1106));
        {613}out(pub, message_d_1108)
    ) | (
        {642}get statestore(=bob,=charlie,statepack_e(hs_1109: handshakestate)) in
        {615}in(pub, message_e_1110: bitstring);
        {616}let v_1111: bitstring = catch-fail(handshakestateunpack(hs_1109)) in
        {617}let v_1112: bitstring = catch-fail(deconcat3(message_e_1110)) in
        {618}let v_1113: bool = catch-fail(true) in
        {619}let v_1114: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1111))) in
        {620}let v_1115: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1114))) in
        {621}let v_1116: aead = catch-fail(decrypt(1-proj-2-tuple(v_1115),2-proj-2-tuple(v_1115),3-proj-3-tuple(v_1114),3-proj-3-tuple(v_1112))) in
        {622}let v_1117: bitstring = catch-fail(aeadunpack(v_1116)) in
        {623}let v_1118: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1114))) in
        {624}let v_1119: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1115))) && success?(1-proj-3-tuple(v_1114))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-2-tuple(v_1118))))) then cipherstatepack(1-proj-2-tuple(v_1118),increment_nonce(2-proj-2-tuple(v_1115))) else fail-any) else fail-any)) in
        {625}let v_1120: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && (success?(3-proj-3-tuple(v_1114)) && success?(1-proj-3-tuple(v_1114)))) then (if (not-caught-fail(v_1115) && success?(is-true(success?(1-proj-2-tuple(v_1115))))) then (if not-caught-fail(v_1116) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-3-tuple(v_1117))))) then (if not-caught-fail(v_1119) then (v_1119,3-proj-3-tuple(v_1117),1-proj-3-tuple(v_1117)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1121: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1120),2-proj-3-tuple(v_1114),3-proj-3-tuple(v_1114)))) in
        {627}let v_1122: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && success?(symmetricstatepack(1-proj-3-tuple(v_1120),2-proj-3-tuple(v_1114),3-proj-3-tuple(v_1114)))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then symmetricstatepack(1-proj-3-tuple(v_1121),2-proj-3-tuple(v_1121),hash(3-proj-3-tuple(v_1121),3-proj-3-tuple(v_1112))) else fail-any) else fail-any)) in
        {628}let v_1123: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && success?(1-proj-7-tuple(v_1111))) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-3-tuple(v_1120))))) then (if not-caught-fail(v_1122) then (v_1122,2-proj-3-tuple(v_1120),3-proj-3-tuple(v_1120)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1124: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1123),2-proj-7-tuple(v_1111),3-proj-7-tuple(v_1111),4-proj-7-tuple(v_1111),5-proj-7-tuple(v_1111),6-proj-7-tuple(v_1111),7-proj-7-tuple(v_1111))) in
        {630}let v_1125: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1123))) in
        {631}let v_1126: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1125),zero)) in
        {632}let v_1127: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1125),zero)) in
        {633}let v_1128: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1125),zero)) in
        {634}let v_1129: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1125)) then (if not-caught-fail(v_1126) then (if not-caught-fail(v_1127) then (if not-caught-fail(v_1128) then (v_1126,v_1127,v_1128) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {635}let v_1130: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1129)) then cipherstatepack(1-proj-3-tuple(v_1129),minnonce) else fail-any)) in
        {636}let v_1131: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1129)) then cipherstatepack(2-proj-3-tuple(v_1129),minnonce) else fail-any)) in
        {637}let v_1132: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1123)) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then (if not-caught-fail(v_1130) then (if not-caught-fail(v_1131) then (1-proj-3-tuple(v_1123),v_1130,v_1131) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {638}let (hs_1133: handshakestate,re_1134: key,plaintext_e_1135: bitstring,valid_1136: bool,cs1_1137: cipherstate,cs2_1138: cipherstate) = (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-7-tuple(v_1111))))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if not-caught-fail(v_1113) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (v_1113 && 3-proj-3-tuple(v_1123)) then (if not-caught-fail(v_1124) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-3-tuple(v_1132))))) then (v_1124,getpublickey(3-proj-7-tuple(v_1111)),2-proj-3-tuple(v_1123),true,2-proj-3-tuple(v_1132),3-proj-3-tuple(v_1132)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {639}event RecvMsg(bob,charlie,stage_e,plaintext_e_1135,valid_1136);
        {640}insert statestore(bob,charlie,statepack_f(hs_1133));
        {641}event RecvEnd(valid_1136)
    ) | (
        {643}event LeakS(phase0,bob);
        {644}out(pub, key_s(bob))
    ) | (
        {645}phase 1;
        {646}event LeakS(phase1,bob);
        {647}out(pub, key_s(bob))
    )
) | (
    {648}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 163 rules in the queue.
400 rules inserted. The rule base contains 388 rules. 34 rules in the queue.
600 rules inserted. The rule base contains 573 rules. 99 rules in the queue.
800 rules inserted. The rule base contains 755 rules. 245 rules in the queue.
1000 rules inserted. The rule base contains 943 rules. 303 rules in the queue.
1200 rules inserted. The rule base contains 1119 rules. 278 rules in the queue.
1400 rules inserted. The rule base contains 1306 rules. 393 rules in the queue.
1600 rules inserted. The rule base contains 1479 rules. 410 rules in the queue.
1800 rules inserted. The rule base contains 1632 rules. 391 rules in the queue.
2000 rules inserted. The rule base contains 1795 rules. 396 rules in the queue.
2200 rules inserted. The rule base contains 1967 rules. 422 rules in the queue.
2400 rules inserted. The rule base contains 2098 rules. 375 rules in the queue.
2600 rules inserted. The rule base contains 2208 rules. 314 rules in the queue.
2800 rules inserted. The rule base contains 2356 rules. 298 rules in the queue.
3000 rules inserted. The rule base contains 2488 rules. 303 rules in the queue.
3200 rules inserted. The rule base contains 2536 rules. 306 rules in the queue.
3400 rules inserted. The rule base contains 2685 rules. 330 rules in the queue.
3600 rules inserted. The rule base contains 2762 rules. 308 rules in the queue.
3800 rules inserted. The rule base contains 2848 rules. 270 rules in the queue.
4000 rules inserted. The rule base contains 2926 rules. 268 rules in the queue.
4200 rules inserted. The rule base contains 3064 rules. 299 rules in the queue.
4400 rules inserted. The rule base contains 3156 rules. 261 rules in the queue.
4600 rules inserted. The rule base contains 3307 rules. 258 rules in the queue.
4800 rules inserted. The rule base contains 3454 rules. 263 rules in the queue.
5000 rules inserted. The rule base contains 3574 rules. 250 rules in the queue.
5200 rules inserted. The rule base contains 3703 rules. 229 rules in the queue.
5400 rules inserted. The rule base contains 3849 rules. 248 rules in the queue.
5600 rules inserted. The rule base contains 4015 rules. 289 rules in the queue.
5800 rules inserted. The rule base contains 4174 rules. 336 rules in the queue.
6000 rules inserted. The rule base contains 4340 rules. 350 rules in the queue.
6200 rules inserted. The rule base contains 4464 rules. 389 rules in the queue.
6400 rules inserted. The rule base contains 4616 rules. 380 rules in the queue.
6600 rules inserted. The rule base contains 4750 rules. 395 rules in the queue.
6800 rules inserted. The rule base contains 4882 rules. 368 rules in the queue.
7000 rules inserted. The rule base contains 5027 rules. 359 rules in the queue.
7200 rules inserted. The rule base contains 5132 rules. 354 rules in the queue.
7400 rules inserted. The rule base contains 5276 rules. 361 rules in the queue.
7600 rules inserted. The rule base contains 5407 rules. 356 rules in the queue.
7800 rules inserted. The rule base contains 5550 rules. 382 rules in the queue.
8000 rules inserted. The rule base contains 5652 rules. 348 rules in the queue.
8200 rules inserted. The rule base contains 5751 rules. 340 rules in the queue.
8400 rules inserted. The rule base contains 5868 rules. 318 rules in the queue.
8600 rules inserted. The rule base contains 5956 rules. 304 rules in the queue.
8800 rules inserted. The rule base contains 6061 rules. 283 rules in the queue.
9000 rules inserted. The rule base contains 6177 rules. 260 rules in the queue.
9200 rules inserted. The rule base contains 6282 rules. 254 rules in the queue.
9400 rules inserted. The rule base contains 6359 rules. 203 rules in the queue.
9600 rules inserted. The rule base contains 6427 rules. 184 rules in the queue.
9800 rules inserted. The rule base contains 6506 rules. 114 rules in the queue.
10000 rules inserted. The rule base contains 6526 rules. 53 rules in the queue.
10200 rules inserted. The rule base contains 6535 rules. 38 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {57}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {54}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {56}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {324}.
mess(pub,dhexp(key_s(bob),g)).

10. By 1, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. By 8, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {483}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {484}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

26. By 13, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {57}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {54}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {56}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {324}.
mess(pub,dhexp(key_s(bob),g)).

10. By 1, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. By 8, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {483}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {484}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

26. By 13, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {57}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {54}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {56}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. The message dhexp(key_s(bob),g) may be sent on channel pub at output {324}.
mess(pub,dhexp(key_s(bob),g)).

10. By 1, the attacker may have the channel pub.
By 9, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

11. Using the function empty the attacker may obtain empty.
attacker(empty).

12. Using the function somename the attacker may obtain somename.
attacker(somename).

13. By 12, the attacker may know somename.
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

14. By 13, the attacker may know hash(somename,empty).
By 11, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

15. By 14, the attacker may know hash(hash(somename,empty),empty).
By 10, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

16. By 15, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

19. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

20. By 19, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

21. By 8, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

22. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

23. The event LeakS(phase1,bob) may be executed at {483}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {484}.
mess_p1(pub,key_s(bob)).

24. By 22, the attacker may have the channel pub in phase 1.
By 23, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

25. By 24, the attacker may know key_s(bob) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

26. By 13, the attacker may know hash(somename,empty).
So the attacker may know hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

27. By 26, the attacker may know hash(somename,empty) in phase 1.
By 25, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know increment_nonce(minnonce) in phase 1.
By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

29. By 28, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
