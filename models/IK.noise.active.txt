File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 235, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 236, character 36:
Warning: identifier h rebound.
File "IK.noise.active.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 277, character 6:
Warning: identifier e rebound.
File "IK.noise.active.pv", line 278, characters 6-7:
Warning: identifier ne rebound.
File "IK.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 282, character 6:
Warning: identifier s rebound.
File "IK.noise.active.pv", line 283, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 283, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IK.noise.active.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 285, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 285, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.active.pv", line 286, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 293, character 6:
Warning: identifier e rebound.
File "IK.noise.active.pv", line 294, characters 6-7:
Warning: identifier ne rebound.
File "IK.noise.active.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 299, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.active.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.active.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.active.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 325, characters 6-7:
Warning: identifier re rebound.
File "IK.noise.active.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 329, characters 48-53:
Warning: identifier valid1 rebound.
File "IK.noise.active.pv", line 330, characters 6-7:
Warning: identifier rs rebound.
File "IK.noise.active.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 334, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 342, characters 6-7:
Warning: identifier re rebound.
File "IK.noise.active.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 517, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 519, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 509, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 510, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.active.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 502, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 342, characters 6-7:
Warning: identifier re rebound.
File "IK.noise.active.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 345, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 346, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 347, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 349, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 494, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 277, character 6:
Warning: identifier e rebound.
File "IK.noise.active.pv", line 278, characters 6-7:
Warning: identifier ne rebound.
File "IK.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 282, character 6:
Warning: identifier s rebound.
File "IK.noise.active.pv", line 283, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 283, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IK.noise.active.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 285, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 285, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.active.pv", line 286, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 570, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 571, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.active.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 561, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 563, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 293, character 6:
Warning: identifier e rebound.
File "IK.noise.active.pv", line 294, characters 6-7:
Warning: identifier ne rebound.
File "IK.noise.active.pv", line 295, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 299, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 299, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IK.noise.active.pv", line 300, characters 6-7:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 245, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 246, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 547, characters 8-9:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 325, characters 6-7:
Warning: identifier re rebound.
File "IK.noise.active.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 329, characters 48-53:
Warning: identifier valid1 rebound.
File "IK.noise.active.pv", line 330, characters 6-7:
Warning: identifier rs rebound.
File "IK.noise.active.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 334, characters 7-8:
Warning: identifier hs rebound.
File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "IK.noise.active.pv", line 251, characters 7-8:
Warning: identifier cs rebound.
File "IK.noise.active.pv", line 252, characters 6-7:
Warning: identifier ss rebound.
File "IK.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_544: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_544));
    (
        {6}let e_545: keypair = keypairpack(empty,empty) in
        {7}let v_546: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {8}let rs_547: key = getpublickey((if not-caught-fail(v_546) then keypairpack(validkey(v_546),key_s(bob)) else fail-any)) in
        {9}let re_548: key = empty in
        {10}let v_549: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_550: key = catch-fail(v_549) in
        {12}let v_551: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_552: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (if not-caught-fail(v_551) then symmetricstatepack(v_551,v_550,v_549) else fail-any) else fail-any) else fail-any))) in
        {14}let v_553: symmetricstate = catch-fail((if success?((if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (if not-caught-fail(v_551) then symmetricstatepack(v_551,v_550,v_549) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then symmetricstatepack(1-proj-3-tuple(v_552),2-proj-3-tuple(v_552),hash(3-proj-3-tuple(v_552),empty)) else fail-any) else fail-any)) in
        {15}let v_554: bitstring = catch-fail(symmetricstateunpack(v_553)) in
        {16}let v_555: symmetricstate = catch-fail((if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then symmetricstatepack(1-proj-3-tuple(v_554),2-proj-3-tuple(v_554),hash(3-proj-3-tuple(v_554),rs_547)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_553) then (if not-caught-fail(v_555) then handshakestatepack(v_555,s_544,e_545,rs_547,re_548,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {66}get statestore(=alice,=bob,=sid,statepack_a(hs_556: handshakestate)) in
        {19}let v_557: bitstring = catch-fail(handshakestateunpack(hs_556)) in
        {20}let v_558: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_559: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {22}let v_560: keypair = catch-fail((if not-caught-fail(v_559) then keypairpack(validkey(v_559),key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_561: bitstring = catch-fail(getpublickey(v_560)) in
        {24}let v_562: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_557))) in
        {25}let v_563: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_557)) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack(1-proj-3-tuple(v_562),2-proj-3-tuple(v_562),hash(3-proj-3-tuple(v_562),v_561)) else fail-any) else fail-any)) in
        {26}let v_564: bitstring = catch-fail(keypairunpack(v_560)) in
        {27}let v_565: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {28}let v_566: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_565),(if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_557)) else fail-any) else fail-any))) in
        {29}let v_567: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_565),(if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_557)) else fail-any) else fail-any))) in
        {30}let v_568: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_565),(if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_557)) else fail-any) else fail-any))) in
        {31}let v_569: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_557)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_565))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then (v_566,v_567,v_568) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_570: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),4-proj-7-tuple(v_557)) else fail-any) else fail-any)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_569)) then cipherstatepack(2-proj-3-tuple(v_569),minnonce) else fail-any),1-proj-3-tuple(v_569),3-proj-3-tuple(v_565)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_571: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {34}let v_572: keypair = catch-fail((if not-caught-fail(v_571) then keypairpack(validkey(v_571),key_s(alice)) else fail-any)) in
        {35}let v_573: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {36}let v_574: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {37}let v_575: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_574),2-proj-2-tuple(v_574),3-proj-3-tuple(v_573),getpublickey(v_572))) in
        {38}let v_576: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {39}let v_577: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_574))) && success?(1-proj-3-tuple(v_573))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then cipherstatepack(1-proj-2-tuple(v_576),increment_nonce(2-proj-2-tuple(v_574))) else fail-any) else fail-any)) in
        {40}let v_578: bitstring = catch-fail((if (success?(getpublickey(v_572)) && (success?(3-proj-3-tuple(v_573)) && success?(1-proj-3-tuple(v_573)))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_577) then (v_577,v_575) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_579: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_578),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) in
        {42}let v_580: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_578)) && success?(symmetricstatepack(1-proj-2-tuple(v_578),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_579),hash(3-proj-3-tuple(v_579),2-proj-2-tuple(v_578))) else fail-any) else fail-any)) in
        {43}let v_581: bitstring = catch-fail((if success?(getpublickey(v_572)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-2-tuple(v_578))))) then (if not-caught-fail(v_580) then (v_580,2-proj-2-tuple(v_578)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {44}let v_582: bitstring = catch-fail(keypairunpack(v_572)) in
        {45}let v_583: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_581))) in
        {46}let v_584: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_583),(if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),4-proj-7-tuple(v_557)) else fail-any) else fail-any))) in
        {47}let v_585: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_583),(if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),4-proj-7-tuple(v_557)) else fail-any) else fail-any))) in
        {48}let v_586: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_583),(if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),4-proj-7-tuple(v_557)) else fail-any) else fail-any))) in
        {49}let v_587: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),4-proj-7-tuple(v_557)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_583))) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_584,v_585,v_586) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_588: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_557)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then dhexp(2-proj-2-tuple(v_582),4-proj-7-tuple(v_557)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_581))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_587)) then cipherstatepack(2-proj-3-tuple(v_587),minnonce) else fail-any),1-proj-3-tuple(v_587),3-proj-3-tuple(v_583)) else fail-any) else fail-any) else fail-any)) in
        {51}let v_589: bitstring = catch-fail(symmetricstateunpack(v_588)) in
        {52}let v_590: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_589))) in
        {53}let v_591: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_590),2-proj-2-tuple(v_590),3-proj-3-tuple(v_589),msg_a(alice,bob,sid))) in
        {54}let v_592: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_589))) in
        {55}let v_593: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_590))) && success?(1-proj-3-tuple(v_589))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then cipherstatepack(1-proj-2-tuple(v_592),increment_nonce(2-proj-2-tuple(v_590))) else fail-any) else fail-any)) in
        {56}let v_594: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_589)) && success?(1-proj-3-tuple(v_589))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_593) then (v_593,v_591) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {57}let v_595: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_594),2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)))) in
        {58}let v_596: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_594)) && success?(symmetricstatepack(1-proj-2-tuple(v_594),2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack(1-proj-3-tuple(v_595),2-proj-3-tuple(v_595),hash(3-proj-3-tuple(v_595),2-proj-2-tuple(v_594))) else fail-any) else fail-any)) in
        {59}let v_597: bitstring = catch-fail((if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then (if not-caught-fail(v_596) then (v_596,2-proj-2-tuple(v_594)) else fail-any) else fail-any) else fail-any)) in
        {60}let v_598: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_597),v_572,v_560,4-proj-7-tuple(v_557),5-proj-7-tuple(v_557),6-proj-7-tuple(v_557),7-proj-7-tuple(v_557))) in
        {61}let v_599: bitstring = catch-fail(concat3(v_561,2-proj-2-tuple(v_581),2-proj-2-tuple(v_597))) in
        {62}let (hs_600: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-7-tuple(v_557))))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (if not-caught-fail(v_563) then (if not-caught-fail(v_570) then (if not-caught-fail(v_572) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_588) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (v_598,v_599) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {63}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {64}insert statestore(alice,bob,sid,statepack_b(hs_600));
        {65}out(pub, message_a)
    ) | (
        {110}get statestore(=alice,=bob,=sid,statepack_b(hs_601: handshakestate)) in
        {67}in(pub, message_b: bitstring);
        {68}let v_602: bitstring = catch-fail(handshakestateunpack(hs_601)) in
        {69}let v_603: bitstring = catch-fail(deconcat3(message_b)) in
        {70}let v_604: bool = catch-fail(true) in
        {71}let v_605: key = catch-fail(1-proj-3-tuple(v_603)) in
        {72}let v_606: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_602))) in
        {73}let v_607: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_602)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then symmetricstatepack(1-proj-3-tuple(v_606),2-proj-3-tuple(v_606),hash(3-proj-3-tuple(v_606),v_605)) else fail-any) else fail-any)) in
        {74}let v_608: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_602))) in
        {75}let v_609: bitstring = catch-fail(symmetricstateunpack(v_607)) in
        {76}let v_610: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_609),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_605) else fail-any) else fail-any))) in
        {77}let v_611: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_609),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_605) else fail-any) else fail-any))) in
        {78}let v_612: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_609),(if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_605) else fail-any) else fail-any))) in
        {79}let v_613: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_605) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_609))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (v_610,v_611,v_612) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_614: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_602)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_605) else fail-any) else fail-any)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_613)) then cipherstatepack(2-proj-3-tuple(v_613),minnonce) else fail-any),1-proj-3-tuple(v_613),3-proj-3-tuple(v_609)) else fail-any) else fail-any) else fail-any)) in
        {81}let v_615: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_602))) in
        {82}let v_616: bitstring = catch-fail(symmetricstateunpack(v_614)) in
        {83}let v_617: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_616),(if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),v_605) else fail-any) else fail-any))) in
        {84}let v_618: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_616),(if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),v_605) else fail-any) else fail-any))) in
        {85}let v_619: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_616),(if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),v_605) else fail-any) else fail-any))) in
        {86}let v_620: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),v_605) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_616))) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (v_617,v_618,v_619) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_621: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_602)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then dhexp(2-proj-2-tuple(v_615),v_605) else fail-any) else fail-any)) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_620)) then cipherstatepack(2-proj-3-tuple(v_620),minnonce) else fail-any),1-proj-3-tuple(v_620),3-proj-3-tuple(v_616)) else fail-any) else fail-any) else fail-any)) in
        {88}let v_622: bitstring = catch-fail(symmetricstateunpack(v_621)) in
        {89}let v_623: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_622))) in
        {90}let v_624: aead = catch-fail(decrypt(1-proj-2-tuple(v_623),2-proj-2-tuple(v_623),3-proj-3-tuple(v_622),3-proj-3-tuple(v_603))) in
        {91}let v_625: bitstring = catch-fail(aeadunpack(v_624)) in
        {92}let v_626: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_622))) in
        {93}let v_627: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_623))) && success?(1-proj-3-tuple(v_622))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then cipherstatepack(1-proj-2-tuple(v_626),increment_nonce(2-proj-2-tuple(v_623))) else fail-any) else fail-any)) in
        {94}let v_628: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_603)) && (success?(3-proj-3-tuple(v_622)) && success?(1-proj-3-tuple(v_622)))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then (if not-caught-fail(v_624) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then (if not-caught-fail(v_627) then (v_627,3-proj-3-tuple(v_625),1-proj-3-tuple(v_625)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_629: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)))) in
        {96}let v_630: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_603)) && success?(symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_622),3-proj-3-tuple(v_622)))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then symmetricstatepack(1-proj-3-tuple(v_629),2-proj-3-tuple(v_629),hash(3-proj-3-tuple(v_629),3-proj-3-tuple(v_603))) else fail-any) else fail-any)) in
        {97}let v_631: bitstring = catch-fail((if success?(3-proj-3-tuple(v_603)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if not-caught-fail(v_630) then (v_630,2-proj-3-tuple(v_628),3-proj-3-tuple(v_628)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_632: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_631),2-proj-7-tuple(v_602),3-proj-7-tuple(v_602),4-proj-7-tuple(v_602),v_605,6-proj-7-tuple(v_602),7-proj-7-tuple(v_602))) in
        {99}let v_633: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_631))) in
        {100}let v_634: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_633),zero)) in
        {101}let v_635: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_633),zero)) in
        {102}let v_636: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_633),zero)) in
        {103}let v_637: bitstring = catch-fail((if success?(2-proj-3-tuple(v_633)) then (if not-caught-fail(v_634) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (v_634,v_635,v_636) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_638: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_637)) then cipherstatepack(1-proj-3-tuple(v_637),minnonce) else fail-any)) in
        {105}let v_639: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_637)) then cipherstatepack(2-proj-3-tuple(v_637),minnonce) else fail-any)) in
        {106}let v_640: bitstring = catch-fail((if success?(1-proj-3-tuple(v_631)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (1-proj-3-tuple(v_631),v_638,v_639) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let (hs_641: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-7-tuple(v_602))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_607) then (if not-caught-fail(v_614) then (if not-caught-fail(v_621) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if (v_604 && 3-proj-3-tuple(v_631)) then (if not-caught-fail(v_632) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (v_632,2-proj-3-tuple(v_631),true,2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {108}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {109}insert statestore(alice,bob,sid,statepack_c(hs_641,cs1,cs2))
    ) | (
        {111}!
        {130}get statestore(=alice,=bob,=sid,statepack_c(hs_642: handshakestate,cs1_643: cipherstate,cs2_644: cipherstate)) in
        {112}let hs_645: handshakestate = handshakestatesetcs(hs_642,cs1_643) in
        {113}let v_646: bitstring = catch-fail(handshakestateunpack(hs_645)) in
        {114}let v_647: bitstring = catch-fail((empty,empty,empty)) in
        {115}let v_648: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_646))) in
        {116}let v_649: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_648))) in
        {117}let v_650: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_649),2-proj-2-tuple(v_649),3-proj-3-tuple(v_648),msg_c(alice,bob,sid))) in
        {118}let v_651: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_648))) in
        {119}let v_652: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_649))) && success?(1-proj-3-tuple(v_648))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then cipherstatepack(1-proj-2-tuple(v_651),increment_nonce(2-proj-2-tuple(v_649))) else fail-any) else fail-any)) in
        {120}let v_653: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_648)) && success?(1-proj-3-tuple(v_648))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then (if not-caught-fail(v_650) then (if not-caught-fail(v_652) then (v_652,v_650) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {121}let v_654: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_653),2-proj-3-tuple(v_648),3-proj-3-tuple(v_648)))) in
        {122}let v_655: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_653)) && success?(symmetricstatepack(1-proj-2-tuple(v_653),2-proj-3-tuple(v_648),3-proj-3-tuple(v_648)))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then symmetricstatepack(1-proj-3-tuple(v_654),2-proj-3-tuple(v_654),hash(3-proj-3-tuple(v_654),2-proj-2-tuple(v_653))) else fail-any) else fail-any)) in
        {123}let v_656: bitstring = catch-fail((if success?(1-proj-7-tuple(v_646)) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_655) then (v_655,2-proj-2-tuple(v_653)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_657: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_656),2-proj-7-tuple(v_646),3-proj-7-tuple(v_646),4-proj-7-tuple(v_646),5-proj-7-tuple(v_646),6-proj-7-tuple(v_646),7-proj-7-tuple(v_646))) in
        {125}let v_658: bitstring = catch-fail(concat3(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),2-proj-2-tuple(v_656))) in
        {126}let (hs_659: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-7-tuple(v_646))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then (if not-caught-fail(v_657) then (if not-caught-fail(v_658) then (v_657,v_658) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {127}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {128}insert statestore(alice,bob,sid,statepack_d(hs_659,handshakestategetcs(hs_659),cs2_644));
        {129}out(pub, message_c)
    ) | (
        {131}!
        {151}get statestore(=alice,=bob,=sid,statepack_d(hs_660: handshakestate,cs1_661: cipherstate,cs2_662: cipherstate)) in
        {132}let hs_663: handshakestate = handshakestatesetcs(hs_660,cs2_662) in
        {133}in(pub, message_d: bitstring);
        {134}let v_664: bitstring = catch-fail(handshakestateunpack(hs_663)) in
        {135}let v_665: bitstring = catch-fail(deconcat3(message_d)) in
        {136}let v_666: bool = catch-fail(true) in
        {137}let v_667: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_664))) in
        {138}let v_668: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_667))) in
        {139}let v_669: aead = catch-fail(decrypt(1-proj-2-tuple(v_668),2-proj-2-tuple(v_668),3-proj-3-tuple(v_667),3-proj-3-tuple(v_665))) in
        {140}let v_670: bitstring = catch-fail(aeadunpack(v_669)) in
        {141}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_667))) in
        {142}let v_672: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_668))) && success?(1-proj-3-tuple(v_667))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then cipherstatepack(1-proj-2-tuple(v_671),increment_nonce(2-proj-2-tuple(v_668))) else fail-any) else fail-any)) in
        {143}let v_673: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_665)) && (success?(3-proj-3-tuple(v_667)) && success?(1-proj-3-tuple(v_667)))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then (if not-caught-fail(v_669) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if not-caught-fail(v_672) then (v_672,3-proj-3-tuple(v_670),1-proj-3-tuple(v_670)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let v_674: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)))) in
        {145}let v_675: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_665)) && success?(symmetricstatepack(1-proj-3-tuple(v_673),2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),3-proj-3-tuple(v_665))) else fail-any) else fail-any)) in
        {146}let v_676: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_665)) && success?(1-proj-7-tuple(v_664))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if not-caught-fail(v_675) then (v_675,2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {147}let v_677: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_676),2-proj-7-tuple(v_664),3-proj-7-tuple(v_664),4-proj-7-tuple(v_664),5-proj-7-tuple(v_664),6-proj-7-tuple(v_664),7-proj-7-tuple(v_664))) in
        {148}let (hs_678: handshakestate,plaintext_d: bitstring,valid_679: bool) = (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-7-tuple(v_664))))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if not-caught-fail(v_666) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if (v_666 && 3-proj-3-tuple(v_676)) then (if not-caught-fail(v_677) then (v_677,2-proj-3-tuple(v_676),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {149}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {150}event RecvEnd(valid_679)
    ) | (
        {152}event LeakS(phase0,alice);
        {153}out(pub, key_s(alice))
    ) | (
        {154}phase 1;
        {155}event LeakS(phase1,alice);
        {156}out(pub, key_s(alice))
    )
) | (
    {157}let s_680: keypair = keypairpack(empty,empty) in
    {158}out(pub, getpublickey(s_680));
    (
        {159}let e_681: keypair = keypairpack(empty,empty) in
        {160}let v_682: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {161}let rs_683: key = getpublickey((if not-caught-fail(v_682) then keypairpack(validkey(v_682),key_s(charlie)) else fail-any)) in
        {162}let re_684: key = empty in
        {163}let v_685: bitstring = catch-fail(hash(somename,empty)) in
        {164}let v_686: key = catch-fail(v_685) in
        {165}let v_687: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {166}let v_688: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (if not-caught-fail(v_687) then symmetricstatepack(v_687,v_686,v_685) else fail-any) else fail-any) else fail-any))) in
        {167}let v_689: symmetricstate = catch-fail((if success?((if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (if not-caught-fail(v_687) then symmetricstatepack(v_687,v_686,v_685) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then symmetricstatepack(1-proj-3-tuple(v_688),2-proj-3-tuple(v_688),hash(3-proj-3-tuple(v_688),empty)) else fail-any) else fail-any)) in
        {168}let v_690: bitstring = catch-fail(symmetricstateunpack(v_689)) in
        {169}let v_691: symmetricstate = catch-fail((if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then symmetricstatepack(1-proj-3-tuple(v_690),2-proj-3-tuple(v_690),hash(3-proj-3-tuple(v_690),rs_683)) else fail-any)) in
        {170}let hs_692: handshakestate = (if not-caught-fail(v_689) then (if not-caught-fail(v_691) then handshakestatepack(v_691,s_680,e_681,rs_683,re_684,empty,true) else fail-any) else fail-any) in
        {171}insert statestore(alice,charlie,sid,statepack_a(hs_692))
    ) | (
        {219}get statestore(=alice,=charlie,=sid,statepack_a(hs_693: handshakestate)) in
        {172}let v_694: bitstring = catch-fail(handshakestateunpack(hs_693)) in
        {173}let v_695: bitstring = catch-fail((empty,empty,empty)) in
        {174}let v_696: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {175}let v_697: keypair = catch-fail((if not-caught-fail(v_696) then keypairpack(validkey(v_696),key_e(alice,charlie,sid)) else fail-any)) in
        {176}let v_698: bitstring = catch-fail(getpublickey(v_697)) in
        {177}let v_699: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_694))) in
        {178}let v_700: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_694)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),hash(3-proj-3-tuple(v_699),v_698)) else fail-any) else fail-any)) in
        {179}let v_701: bitstring = catch-fail(keypairunpack(v_697)) in
        {180}let v_702: bitstring = catch-fail(symmetricstateunpack(v_700)) in
        {181}let v_703: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_702),(if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),4-proj-7-tuple(v_694)) else fail-any) else fail-any))) in
        {182}let v_704: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_702),(if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),4-proj-7-tuple(v_694)) else fail-any) else fail-any))) in
        {183}let v_705: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_702),(if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),4-proj-7-tuple(v_694)) else fail-any) else fail-any))) in
        {184}let v_706: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),4-proj-7-tuple(v_694)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_702))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (v_703,v_704,v_705) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {185}let v_707: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),4-proj-7-tuple(v_694)) else fail-any) else fail-any)) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_706)) then cipherstatepack(2-proj-3-tuple(v_706),minnonce) else fail-any),1-proj-3-tuple(v_706),3-proj-3-tuple(v_702)) else fail-any) else fail-any) else fail-any)) in
        {186}let v_708: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {187}let v_709: keypair = catch-fail((if not-caught-fail(v_708) then keypairpack(validkey(v_708),key_s(alice)) else fail-any)) in
        {188}let v_710: bitstring = catch-fail(symmetricstateunpack(v_707)) in
        {189}let v_711: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_710))) in
        {190}let v_712: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_711),2-proj-2-tuple(v_711),3-proj-3-tuple(v_710),getpublickey(v_709))) in
        {191}let v_713: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_710))) in
        {192}let v_714: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_711))) && success?(1-proj-3-tuple(v_710))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then cipherstatepack(1-proj-2-tuple(v_713),increment_nonce(2-proj-2-tuple(v_711))) else fail-any) else fail-any)) in
        {193}let v_715: bitstring = catch-fail((if (success?(getpublickey(v_709)) && (success?(3-proj-3-tuple(v_710)) && success?(1-proj-3-tuple(v_710)))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_714) then (v_714,v_712) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_716: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_715),2-proj-3-tuple(v_710),3-proj-3-tuple(v_710)))) in
        {195}let v_717: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_715)) && success?(symmetricstatepack(1-proj-2-tuple(v_715),2-proj-3-tuple(v_710),3-proj-3-tuple(v_710)))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then symmetricstatepack(1-proj-3-tuple(v_716),2-proj-3-tuple(v_716),hash(3-proj-3-tuple(v_716),2-proj-2-tuple(v_715))) else fail-any) else fail-any)) in
        {196}let v_718: bitstring = catch-fail((if success?(getpublickey(v_709)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then (if not-caught-fail(v_717) then (v_717,2-proj-2-tuple(v_715)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_719: bitstring = catch-fail(keypairunpack(v_709)) in
        {198}let v_720: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_718))) in
        {199}let v_721: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_720),(if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_694)) else fail-any) else fail-any))) in
        {200}let v_722: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_720),(if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_694)) else fail-any) else fail-any))) in
        {201}let v_723: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_720),(if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_694)) else fail-any) else fail-any))) in
        {202}let v_724: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_694)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_720))) then (if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (v_721,v_722,v_723) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let v_725: symmetricstate = catch-fail((if (success?((if success?(4-proj-7-tuple(v_694)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),4-proj-7-tuple(v_694)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_718))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_724)) then cipherstatepack(2-proj-3-tuple(v_724),minnonce) else fail-any),1-proj-3-tuple(v_724),3-proj-3-tuple(v_720)) else fail-any) else fail-any) else fail-any)) in
        {204}let v_726: bitstring = catch-fail(symmetricstateunpack(v_725)) in
        {205}let v_727: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {206}let v_728: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_727),2-proj-2-tuple(v_727),3-proj-3-tuple(v_726),msg_a(alice,charlie,sid))) in
        {207}let v_729: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {208}let v_730: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_727))) && success?(1-proj-3-tuple(v_726))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-2-tuple(v_729))))) then cipherstatepack(1-proj-2-tuple(v_729),increment_nonce(2-proj-2-tuple(v_727))) else fail-any) else fail-any)) in
        {209}let v_731: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_726)) && success?(1-proj-3-tuple(v_726))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then (if not-caught-fail(v_728) then (if not-caught-fail(v_730) then (v_730,v_728) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {210}let v_732: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_731),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) in
        {211}let v_733: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_731)) && success?(symmetricstatepack(1-proj-2-tuple(v_731),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_732),hash(3-proj-3-tuple(v_732),2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {212}let v_734: bitstring = catch-fail((if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_733) then (v_733,2-proj-2-tuple(v_731)) else fail-any) else fail-any) else fail-any)) in
        {213}let v_735: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_734),v_709,v_697,4-proj-7-tuple(v_694),5-proj-7-tuple(v_694),6-proj-7-tuple(v_694),7-proj-7-tuple(v_694))) in
        {214}let v_736: bitstring = catch-fail(concat3(v_698,2-proj-2-tuple(v_718),2-proj-2-tuple(v_734))) in
        {215}let (hs_737: handshakestate,message_a_738: bitstring) = (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-7-tuple(v_694))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (if not-caught-fail(v_700) then (if not-caught-fail(v_707) then (if not-caught-fail(v_709) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then (if not-caught-fail(v_725) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then (v_735,v_736) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {216}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {217}insert statestore(alice,charlie,sid,statepack_b(hs_737));
        {218}out(pub, message_a_738)
    ) | (
        {263}get statestore(=alice,=charlie,=sid,statepack_b(hs_739: handshakestate)) in
        {220}in(pub, message_b_740: bitstring);
        {221}let v_741: bitstring = catch-fail(handshakestateunpack(hs_739)) in
        {222}let v_742: bitstring = catch-fail(deconcat3(message_b_740)) in
        {223}let v_743: bool = catch-fail(true) in
        {224}let v_744: key = catch-fail(1-proj-3-tuple(v_742)) in
        {225}let v_745: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_741))) in
        {226}let v_746: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_741)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then symmetricstatepack(1-proj-3-tuple(v_745),2-proj-3-tuple(v_745),hash(3-proj-3-tuple(v_745),v_744)) else fail-any) else fail-any)) in
        {227}let v_747: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_741))) in
        {228}let v_748: bitstring = catch-fail(symmetricstateunpack(v_746)) in
        {229}let v_749: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_748),(if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any))) in
        {230}let v_750: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_748),(if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any))) in
        {231}let v_751: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_748),(if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any))) in
        {232}let v_752: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_748))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (v_749,v_750,v_751) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_753: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_752)) then cipherstatepack(2-proj-3-tuple(v_752),minnonce) else fail-any),1-proj-3-tuple(v_752),3-proj-3-tuple(v_748)) else fail-any) else fail-any) else fail-any)) in
        {234}let v_754: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_741))) in
        {235}let v_755: bitstring = catch-fail(symmetricstateunpack(v_753)) in
        {236}let v_756: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_755),(if success?(2-proj-7-tuple(v_741)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_744) else fail-any) else fail-any))) in
        {237}let v_757: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_755),(if success?(2-proj-7-tuple(v_741)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_744) else fail-any) else fail-any))) in
        {238}let v_758: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_755),(if success?(2-proj-7-tuple(v_741)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_744) else fail-any) else fail-any))) in
        {239}let v_759: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_741)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_744) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_755))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (v_756,v_757,v_758) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {240}let v_760: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_741)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),v_744) else fail-any) else fail-any)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_759)) then cipherstatepack(2-proj-3-tuple(v_759),minnonce) else fail-any),1-proj-3-tuple(v_759),3-proj-3-tuple(v_755)) else fail-any) else fail-any) else fail-any)) in
        {241}let v_761: bitstring = catch-fail(symmetricstateunpack(v_760)) in
        {242}let v_762: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {243}let v_763: aead = catch-fail(decrypt(1-proj-2-tuple(v_762),2-proj-2-tuple(v_762),3-proj-3-tuple(v_761),3-proj-3-tuple(v_742))) in
        {244}let v_764: bitstring = catch-fail(aeadunpack(v_763)) in
        {245}let v_765: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {246}let v_766: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_762))) && success?(1-proj-3-tuple(v_761))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then cipherstatepack(1-proj-2-tuple(v_765),increment_nonce(2-proj-2-tuple(v_762))) else fail-any) else fail-any)) in
        {247}let v_767: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_742)) && (success?(3-proj-3-tuple(v_761)) && success?(1-proj-3-tuple(v_761)))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_763) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if not-caught-fail(v_766) then (v_766,3-proj-3-tuple(v_764),1-proj-3-tuple(v_764)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let v_768: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_767),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) in
        {249}let v_769: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_742)) && success?(symmetricstatepack(1-proj-3-tuple(v_767),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then symmetricstatepack(1-proj-3-tuple(v_768),2-proj-3-tuple(v_768),hash(3-proj-3-tuple(v_768),3-proj-3-tuple(v_742))) else fail-any) else fail-any)) in
        {250}let v_770: bitstring = catch-fail((if success?(3-proj-3-tuple(v_742)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_769) then (v_769,2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_771: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_770),2-proj-7-tuple(v_741),3-proj-7-tuple(v_741),4-proj-7-tuple(v_741),v_744,6-proj-7-tuple(v_741),7-proj-7-tuple(v_741))) in
        {252}let v_772: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_770))) in
        {253}let v_773: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_772),zero)) in
        {254}let v_774: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_772),zero)) in
        {255}let v_775: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_772),zero)) in
        {256}let v_776: bitstring = catch-fail((if success?(2-proj-3-tuple(v_772)) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (v_773,v_774,v_775) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {257}let v_777: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_776)) then cipherstatepack(1-proj-3-tuple(v_776),minnonce) else fail-any)) in
        {258}let v_778: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_776)) then cipherstatepack(2-proj-3-tuple(v_776),minnonce) else fail-any)) in
        {259}let v_779: bitstring = catch-fail((if success?(1-proj-3-tuple(v_770)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (1-proj-3-tuple(v_770),v_777,v_778) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {260}let (hs_780: handshakestate,plaintext_b_781: bitstring,valid_782: bool,cs1_783: cipherstate,cs2_784: cipherstate) = (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-7-tuple(v_741))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if not-caught-fail(v_743) then (if not-caught-fail(v_744) then (if not-caught-fail(v_746) then (if not-caught-fail(v_753) then (if not-caught-fail(v_760) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if (v_743 && 3-proj-3-tuple(v_770)) then (if not-caught-fail(v_771) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (v_771,2-proj-3-tuple(v_770),true,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {261}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_781);
        {262}insert statestore(alice,charlie,sid,statepack_c(hs_780,cs1_783,cs2_784))
    ) | (
        {264}!
        {283}get statestore(=alice,=charlie,=sid,statepack_c(hs_785: handshakestate,cs1_786: cipherstate,cs2_787: cipherstate)) in
        {265}let hs_788: handshakestate = handshakestatesetcs(hs_785,cs1_786) in
        {266}let v_789: bitstring = catch-fail(handshakestateunpack(hs_788)) in
        {267}let v_790: bitstring = catch-fail((empty,empty,empty)) in
        {268}let v_791: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_789))) in
        {269}let v_792: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {270}let v_793: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_792),2-proj-2-tuple(v_792),3-proj-3-tuple(v_791),msg_c(alice,charlie,sid))) in
        {271}let v_794: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_791))) in
        {272}let v_795: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_792))) && success?(1-proj-3-tuple(v_791))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then cipherstatepack(1-proj-2-tuple(v_794),increment_nonce(2-proj-2-tuple(v_792))) else fail-any) else fail-any)) in
        {273}let v_796: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_791)) && success?(1-proj-3-tuple(v_791))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then (if not-caught-fail(v_793) then (if not-caught-fail(v_795) then (v_795,v_793) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {274}let v_797: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_796),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) in
        {275}let v_798: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_796)) && success?(symmetricstatepack(1-proj-2-tuple(v_796),2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),hash(3-proj-3-tuple(v_797),2-proj-2-tuple(v_796))) else fail-any) else fail-any)) in
        {276}let v_799: bitstring = catch-fail((if success?(1-proj-7-tuple(v_789)) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then (if not-caught-fail(v_798) then (v_798,2-proj-2-tuple(v_796)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_800: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_799),2-proj-7-tuple(v_789),3-proj-7-tuple(v_789),4-proj-7-tuple(v_789),5-proj-7-tuple(v_789),6-proj-7-tuple(v_789),7-proj-7-tuple(v_789))) in
        {278}let v_801: bitstring = catch-fail(concat3(1-proj-3-tuple(v_790),2-proj-3-tuple(v_790),2-proj-2-tuple(v_799))) in
        {279}let (hs_802: handshakestate,message_c_803: bitstring) = (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-7-tuple(v_789))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-2-tuple(v_799))))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_801) then (v_800,v_801) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {280}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {281}insert statestore(alice,charlie,sid,statepack_d(hs_802,handshakestategetcs(hs_802),cs2_787));
        {282}out(pub, message_c_803)
    ) | (
        {284}!
        {304}get statestore(=alice,=charlie,=sid,statepack_d(hs_804: handshakestate,cs1_805: cipherstate,cs2_806: cipherstate)) in
        {285}let hs_807: handshakestate = handshakestatesetcs(hs_804,cs2_806) in
        {286}in(pub, message_d_808: bitstring);
        {287}let v_809: bitstring = catch-fail(handshakestateunpack(hs_807)) in
        {288}let v_810: bitstring = catch-fail(deconcat3(message_d_808)) in
        {289}let v_811: bool = catch-fail(true) in
        {290}let v_812: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_809))) in
        {291}let v_813: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_812))) in
        {292}let v_814: aead = catch-fail(decrypt(1-proj-2-tuple(v_813),2-proj-2-tuple(v_813),3-proj-3-tuple(v_812),3-proj-3-tuple(v_810))) in
        {293}let v_815: bitstring = catch-fail(aeadunpack(v_814)) in
        {294}let v_816: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_812))) in
        {295}let v_817: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_813))) && success?(1-proj-3-tuple(v_812))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then cipherstatepack(1-proj-2-tuple(v_816),increment_nonce(2-proj-2-tuple(v_813))) else fail-any) else fail-any)) in
        {296}let v_818: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_810)) && (success?(3-proj-3-tuple(v_812)) && success?(1-proj-3-tuple(v_812)))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_814) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if not-caught-fail(v_817) then (v_817,3-proj-3-tuple(v_815),1-proj-3-tuple(v_815)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {297}let v_819: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)))) in
        {298}let v_820: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_810)) && success?(symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),3-proj-3-tuple(v_810))) else fail-any) else fail-any)) in
        {299}let v_821: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_810)) && success?(1-proj-7-tuple(v_809))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if not-caught-fail(v_820) then (v_820,2-proj-3-tuple(v_818),3-proj-3-tuple(v_818)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_822: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_821),2-proj-7-tuple(v_809),3-proj-7-tuple(v_809),4-proj-7-tuple(v_809),5-proj-7-tuple(v_809),6-proj-7-tuple(v_809),7-proj-7-tuple(v_809))) in
        {301}let (hs_823: handshakestate,plaintext_d_824: bitstring,valid_825: bool) = (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-7-tuple(v_809))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (v_811 && 3-proj-3-tuple(v_821)) then (if not-caught-fail(v_822) then (v_822,2-proj-3-tuple(v_821),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {302}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_824);
        {303}event RecvEnd(valid_825)
    ) | (
        {305}event LeakS(phase0,alice);
        {306}out(pub, key_s(alice))
    ) | (
        {307}phase 1;
        {308}event LeakS(phase1,alice);
        {309}out(pub, key_s(alice))
    )
) | (
    {310}let v_826: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {311}let s_827: keypair = (if not-caught-fail(v_826) then keypairpack(validkey(v_826),key_s(bob)) else fail-any) in
    {312}out(pub, getpublickey(s_827));
    (
        {313}let e_828: keypair = keypairpack(empty,empty) in
        {314}let rs_829: key = empty in
        {315}let re_830: key = empty in
        {316}let v_831: bitstring = catch-fail(hash(somename,empty)) in
        {317}let v_832: key = catch-fail(v_831) in
        {318}let v_833: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {319}let v_834: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_831) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then symmetricstatepack(v_833,v_832,v_831) else fail-any) else fail-any) else fail-any))) in
        {320}let v_835: symmetricstate = catch-fail((if success?((if not-caught-fail(v_831) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then symmetricstatepack(v_833,v_832,v_831) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_834),hash(3-proj-3-tuple(v_834),empty)) else fail-any) else fail-any)) in
        {321}let v_836: bitstring = catch-fail(symmetricstateunpack(v_835)) in
        {322}let v_837: symmetricstate = catch-fail((if success?(getpublickey(s_827)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then symmetricstatepack(1-proj-3-tuple(v_836),2-proj-3-tuple(v_836),hash(3-proj-3-tuple(v_836),getpublickey(s_827))) else fail-any) else fail-any)) in
        {323}let hs_838: handshakestate = (if not-caught-fail(v_835) then (if not-caught-fail(v_837) then handshakestatepack(v_837,s_827,e_828,rs_829,re_830,empty,false) else fail-any) else fail-any) in
        {324}insert statestore(bob,alice,sid,statepack_a(hs_838))
    ) | (
        {372}get statestore(=bob,=alice,=sid,statepack_a(hs_839: handshakestate)) in
        {325}in(pub, message_a_840: bitstring);
        {326}let v_841: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {327}let v_842: bitstring = catch-fail(deconcat3(message_a_840)) in
        {328}let v_843: bool = catch-fail(true) in
        {329}let v_844: key = catch-fail(1-proj-3-tuple(v_842)) in
        {330}let v_845: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_841))) in
        {331}let v_846: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_841)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),v_844)) else fail-any) else fail-any)) in
        {332}let v_847: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_841))) in
        {333}let v_848: bitstring = catch-fail(symmetricstateunpack(v_846)) in
        {334}let v_849: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_848),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any))) in
        {335}let v_850: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_848),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any))) in
        {336}let v_851: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_848),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any))) in
        {337}let v_852: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_848))) then (if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (v_849,v_850,v_851) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {338}let v_853: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then dhexp(2-proj-2-tuple(v_847),v_844) else fail-any) else fail-any)) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_852)) then cipherstatepack(2-proj-3-tuple(v_852),minnonce) else fail-any),1-proj-3-tuple(v_852),3-proj-3-tuple(v_848)) else fail-any) else fail-any) else fail-any)) in
        {339}let v_854: bitstring = catch-fail(symmetricstateunpack(v_853)) in
        {340}let v_855: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_854))) in
        {341}let v_856: aead = catch-fail(decrypt(1-proj-2-tuple(v_855),2-proj-2-tuple(v_855),3-proj-3-tuple(v_854),2-proj-3-tuple(v_842))) in
        {342}let v_857: bitstring = catch-fail(aeadunpack(v_856)) in
        {343}let v_858: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_854))) in
        {344}let v_859: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_855))) && success?(1-proj-3-tuple(v_854))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then cipherstatepack(1-proj-2-tuple(v_858),increment_nonce(2-proj-2-tuple(v_855))) else fail-any) else fail-any)) in
        {345}let v_860: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_842)) && (success?(3-proj-3-tuple(v_854)) && success?(1-proj-3-tuple(v_854)))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then (if not-caught-fail(v_856) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_859) then (v_859,3-proj-3-tuple(v_857),1-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {346}let v_861: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)))) in
        {347}let v_862: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_842)) && success?(symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack(1-proj-3-tuple(v_861),2-proj-3-tuple(v_861),hash(3-proj-3-tuple(v_861),2-proj-3-tuple(v_842))) else fail-any) else fail-any)) in
        {348}let v_863: bitstring = catch-fail((if success?(2-proj-3-tuple(v_842)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if not-caught-fail(v_862) then (v_862,2-proj-3-tuple(v_860),3-proj-3-tuple(v_860)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {349}let v_864: key = catch-fail(2-proj-3-tuple(v_863)) in
        {350}let v_865: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_841))) in
        {351}let v_866: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_863))) in
        {352}let v_867: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_866),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),v_864) else fail-any) else fail-any))) in
        {353}let v_868: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_866),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),v_864) else fail-any) else fail-any))) in
        {354}let v_869: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_866),(if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),v_864) else fail-any) else fail-any))) in
        {355}let v_870: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),v_864) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_866))) then (if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (if not-caught-fail(v_869) then (v_867,v_868,v_869) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {356}let v_871: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_841)) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then dhexp(2-proj-2-tuple(v_865),v_864) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_863))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_870)) then cipherstatepack(2-proj-3-tuple(v_870),minnonce) else fail-any),1-proj-3-tuple(v_870),3-proj-3-tuple(v_866)) else fail-any) else fail-any) else fail-any)) in
        {357}let v_872: bitstring = catch-fail(symmetricstateunpack(v_871)) in
        {358}let v_873: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_872))) in
        {359}let v_874: aead = catch-fail(decrypt(1-proj-2-tuple(v_873),2-proj-2-tuple(v_873),3-proj-3-tuple(v_872),3-proj-3-tuple(v_842))) in
        {360}let v_875: bitstring = catch-fail(aeadunpack(v_874)) in
        {361}let v_876: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_872))) in
        {362}let v_877: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_873))) && success?(1-proj-3-tuple(v_872))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then cipherstatepack(1-proj-2-tuple(v_876),increment_nonce(2-proj-2-tuple(v_873))) else fail-any) else fail-any)) in
        {363}let v_878: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && (success?(3-proj-3-tuple(v_872)) && success?(1-proj-3-tuple(v_872)))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then (if not-caught-fail(v_874) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if not-caught-fail(v_877) then (v_877,3-proj-3-tuple(v_875),1-proj-3-tuple(v_875)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {364}let v_879: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_878),2-proj-3-tuple(v_872),3-proj-3-tuple(v_872)))) in
        {365}let v_880: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(symmetricstatepack(1-proj-3-tuple(v_878),2-proj-3-tuple(v_872),3-proj-3-tuple(v_872)))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack(1-proj-3-tuple(v_879),2-proj-3-tuple(v_879),hash(3-proj-3-tuple(v_879),3-proj-3-tuple(v_842))) else fail-any) else fail-any)) in
        {366}let v_881: bitstring = catch-fail((if success?(3-proj-3-tuple(v_842)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then (if not-caught-fail(v_880) then (v_880,2-proj-3-tuple(v_878),3-proj-3-tuple(v_878)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {367}let v_882: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {368}let v_883: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_881),2-proj-7-tuple(v_841),3-proj-7-tuple(v_841),v_864,v_844,6-proj-7-tuple(v_841),7-proj-7-tuple(v_841))) in
        {369}let (hs_884: handshakestate,plaintext_a: bitstring,valid_885: bool) = (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-7-tuple(v_841))))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (if not-caught-fail(v_853) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if not-caught-fail(v_864) then (if not-caught-fail(v_871) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if ((3-proj-3-tuple(v_863) && 3-proj-3-tuple(v_881)) && (v_864 = getpublickey((if not-caught-fail(v_882) then keypairpack(validkey(v_882),key_s(alice)) else fail-any)))) then (if not-caught-fail(v_883) then (v_883,2-proj-3-tuple(v_881),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {370}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {371}insert statestore(bob,alice,sid,statepack_b(hs_884))
    ) | (
        {417}get statestore(=bob,=alice,=sid,statepack_b(hs_886: handshakestate)) in
        {373}let v_887: bitstring = catch-fail(handshakestateunpack(hs_886)) in
        {374}let v_888: bitstring = catch-fail((empty,empty,empty)) in
        {375}let v_889: key = catch-fail(dhexp(key_e(bob,alice,sid),validkey(g))) in
        {376}let v_890: keypair = catch-fail((if not-caught-fail(v_889) then keypairpack(validkey(v_889),key_e(bob,alice,sid)) else fail-any)) in
        {377}let v_891: bitstring = catch-fail(getpublickey(v_890)) in
        {378}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_887))) in
        {379}let v_893: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_887)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_892),hash(3-proj-3-tuple(v_892),v_891)) else fail-any) else fail-any)) in
        {380}let v_894: bitstring = catch-fail(keypairunpack(v_890)) in
        {381}let v_895: bitstring = catch-fail(symmetricstateunpack(v_893)) in
        {382}let v_896: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_895),(if success?(5-proj-7-tuple(v_887)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_887)) else fail-any) else fail-any))) in
        {383}let v_897: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_895),(if success?(5-proj-7-tuple(v_887)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_887)) else fail-any) else fail-any))) in
        {384}let v_898: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_895),(if success?(5-proj-7-tuple(v_887)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_887)) else fail-any) else fail-any))) in
        {385}let v_899: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_887)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_887)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_895))) then (if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (v_896,v_897,v_898) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {386}let v_900: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_887)) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then dhexp(2-proj-2-tuple(v_894),5-proj-7-tuple(v_887)) else fail-any) else fail-any)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_899)) then cipherstatepack(2-proj-3-tuple(v_899),minnonce) else fail-any),1-proj-3-tuple(v_899),3-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any)) in
        {387}let v_901: bitstring = catch-fail(keypairunpack(v_890)) in
        {388}let v_902: bitstring = catch-fail(symmetricstateunpack(v_900)) in
        {389}let v_903: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_902),(if success?(4-proj-7-tuple(v_887)) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then dhexp(2-proj-2-tuple(v_901),4-proj-7-tuple(v_887)) else fail-any) else fail-any))) in
        {390}let v_904: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_902),(if success?(4-proj-7-tuple(v_887)) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then dhexp(2-proj-2-tuple(v_901),4-proj-7-tuple(v_887)) else fail-any) else fail-any))) in
        {391}let v_905: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_902),(if success?(4-proj-7-tuple(v_887)) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then dhexp(2-proj-2-tuple(v_901),4-proj-7-tuple(v_887)) else fail-any) else fail-any))) in
        {392}let v_906: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_887)) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then dhexp(2-proj-2-tuple(v_901),4-proj-7-tuple(v_887)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_902))) then (if not-caught-fail(v_903) then (if not-caught-fail(v_904) then (if not-caught-fail(v_905) then (v_903,v_904,v_905) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let v_907: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_887)) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then dhexp(2-proj-2-tuple(v_901),4-proj-7-tuple(v_887)) else fail-any) else fail-any)) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_906)) then cipherstatepack(2-proj-3-tuple(v_906),minnonce) else fail-any),1-proj-3-tuple(v_906),3-proj-3-tuple(v_902)) else fail-any) else fail-any) else fail-any)) in
        {394}let v_908: bitstring = catch-fail(symmetricstateunpack(v_907)) in
        {395}let v_909: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_908))) in
        {396}let v_910: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_909),2-proj-2-tuple(v_909),3-proj-3-tuple(v_908),msg_b(bob,alice,sid))) in
        {397}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_908))) in
        {398}let v_912: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_909))) && success?(1-proj-3-tuple(v_908))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then cipherstatepack(1-proj-2-tuple(v_911),increment_nonce(2-proj-2-tuple(v_909))) else fail-any) else fail-any)) in
        {399}let v_913: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(1-proj-3-tuple(v_908))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then (if not-caught-fail(v_910) then (if not-caught-fail(v_912) then (v_912,v_910) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let v_914: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_913),2-proj-3-tuple(v_908),3-proj-3-tuple(v_908)))) in
        {401}let v_915: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_913)) && success?(symmetricstatepack(1-proj-2-tuple(v_913),2-proj-3-tuple(v_908),3-proj-3-tuple(v_908)))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then symmetricstatepack(1-proj-3-tuple(v_914),2-proj-3-tuple(v_914),hash(3-proj-3-tuple(v_914),2-proj-2-tuple(v_913))) else fail-any) else fail-any)) in
        {402}let v_916: bitstring = catch-fail((if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,2-proj-2-tuple(v_913)) else fail-any) else fail-any) else fail-any)) in
        {403}let v_917: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_916),2-proj-7-tuple(v_887),v_890,4-proj-7-tuple(v_887),5-proj-7-tuple(v_887),6-proj-7-tuple(v_887),7-proj-7-tuple(v_887))) in
        {404}let v_918: bitstring = catch-fail(concat3(v_891,2-proj-3-tuple(v_888),2-proj-2-tuple(v_916))) in
        {405}let v_919: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_916))) in
        {406}let v_920: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_919),zero)) in
        {407}let v_921: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_919),zero)) in
        {408}let v_922: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_919),zero)) in
        {409}let v_923: bitstring = catch-fail((if success?(2-proj-3-tuple(v_919)) then (if not-caught-fail(v_920) then (if not-caught-fail(v_921) then (if not-caught-fail(v_922) then (v_920,v_921,v_922) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {410}let v_924: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_923)) then cipherstatepack(1-proj-3-tuple(v_923),minnonce) else fail-any)) in
        {411}let v_925: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_923)) then cipherstatepack(2-proj-3-tuple(v_923),minnonce) else fail-any)) in
        {412}let v_926: bitstring = catch-fail((if success?(1-proj-2-tuple(v_916)) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (1-proj-2-tuple(v_916),v_924,v_925) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {413}let (hs_927: handshakestate,message_b_928: bitstring,cs1_929: cipherstate,cs2_930: cipherstate) = (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-7-tuple(v_887))))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then (if not-caught-fail(v_890) then (if not-caught-fail(v_891) then (if not-caught-fail(v_893) then (if not-caught-fail(v_900) then (if not-caught-fail(v_907) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then (v_917,v_918,2-proj-3-tuple(v_926),3-proj-3-tuple(v_926)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {414}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {415}insert statestore(bob,alice,sid,statepack_c(hs_927,cs1_929,cs2_930));
        {416}out(pub, message_b_928)
    ) | (
        {418}!
        {438}get statestore(=bob,=alice,=sid,statepack_c(hs_931: handshakestate,cs1_932: cipherstate,cs2_933: cipherstate)) in
        {419}let hs_934: handshakestate = handshakestatesetcs(hs_931,cs1_932) in
        {420}in(pub, message_c_935: bitstring);
        {421}let v_936: bitstring = catch-fail(handshakestateunpack(hs_934)) in
        {422}let v_937: bitstring = catch-fail(deconcat3(message_c_935)) in
        {423}let v_938: bool = catch-fail(true) in
        {424}let v_939: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_936))) in
        {425}let v_940: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_939))) in
        {426}let v_941: aead = catch-fail(decrypt(1-proj-2-tuple(v_940),2-proj-2-tuple(v_940),3-proj-3-tuple(v_939),3-proj-3-tuple(v_937))) in
        {427}let v_942: bitstring = catch-fail(aeadunpack(v_941)) in
        {428}let v_943: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_939))) in
        {429}let v_944: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_940))) && success?(1-proj-3-tuple(v_939))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then cipherstatepack(1-proj-2-tuple(v_943),increment_nonce(2-proj-2-tuple(v_940))) else fail-any) else fail-any)) in
        {430}let v_945: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_937)) && (success?(3-proj-3-tuple(v_939)) && success?(1-proj-3-tuple(v_939)))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then (if not-caught-fail(v_941) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if not-caught-fail(v_944) then (v_944,3-proj-3-tuple(v_942),1-proj-3-tuple(v_942)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_946: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_945),2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)))) in
        {432}let v_947: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_937)) && success?(symmetricstatepack(1-proj-3-tuple(v_945),2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then symmetricstatepack(1-proj-3-tuple(v_946),2-proj-3-tuple(v_946),hash(3-proj-3-tuple(v_946),3-proj-3-tuple(v_937))) else fail-any) else fail-any)) in
        {433}let v_948: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_937)) && success?(1-proj-7-tuple(v_936))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if not-caught-fail(v_947) then (v_947,2-proj-3-tuple(v_945),3-proj-3-tuple(v_945)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_949: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_948),2-proj-7-tuple(v_936),3-proj-7-tuple(v_936),4-proj-7-tuple(v_936),5-proj-7-tuple(v_936),6-proj-7-tuple(v_936),7-proj-7-tuple(v_936))) in
        {435}let (hs_950: handshakestate,plaintext_c: bitstring,valid_951: bool) = (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-7-tuple(v_936))))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if not-caught-fail(v_938) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if (v_938 && 3-proj-3-tuple(v_948)) then (if not-caught-fail(v_949) then (v_949,2-proj-3-tuple(v_948),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {436}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {437}insert statestore(bob,alice,sid,statepack_d(hs_950,handshakestategetcs(hs_950),cs2_933))
    ) | (
        {439}!
        {457}get statestore(=bob,=alice,=sid,statepack_d(hs_952: handshakestate,cs1_953: cipherstate,cs2_954: cipherstate)) in
        {440}let hs_955: handshakestate = handshakestatesetcs(hs_952,cs2_954) in
        {441}let v_956: bitstring = catch-fail(handshakestateunpack(hs_955)) in
        {442}let v_957: bitstring = catch-fail((empty,empty,empty)) in
        {443}let v_958: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_956))) in
        {444}let v_959: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_958))) in
        {445}let v_960: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_959),2-proj-2-tuple(v_959),3-proj-3-tuple(v_958),msg_d(bob,alice,sid))) in
        {446}let v_961: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_958))) in
        {447}let v_962: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_959))) && success?(1-proj-3-tuple(v_958))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then cipherstatepack(1-proj-2-tuple(v_961),increment_nonce(2-proj-2-tuple(v_959))) else fail-any) else fail-any)) in
        {448}let v_963: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_958)) && success?(1-proj-3-tuple(v_958))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then (if not-caught-fail(v_960) then (if not-caught-fail(v_962) then (v_962,v_960) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {449}let v_964: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_963),2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)))) in
        {450}let v_965: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_963)) && success?(symmetricstatepack(1-proj-2-tuple(v_963),2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_964),hash(3-proj-3-tuple(v_964),2-proj-2-tuple(v_963))) else fail-any) else fail-any)) in
        {451}let v_966: bitstring = catch-fail((if success?(1-proj-7-tuple(v_956)) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then (if not-caught-fail(v_965) then (v_965,2-proj-2-tuple(v_963)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {452}let v_967: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_966),2-proj-7-tuple(v_956),3-proj-7-tuple(v_956),4-proj-7-tuple(v_956),5-proj-7-tuple(v_956),6-proj-7-tuple(v_956),7-proj-7-tuple(v_956))) in
        {453}let v_968: bitstring = catch-fail(concat3(1-proj-3-tuple(v_957),2-proj-3-tuple(v_957),2-proj-2-tuple(v_966))) in
        {454}let (hs_969: handshakestate,message_d_970: bitstring) = (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-7-tuple(v_956))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (v_967,v_968) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {455}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {456}out(pub, message_d_970)
    ) | (
        {458}event LeakS(phase0,bob);
        {459}out(pub, key_s(bob))
    ) | (
        {460}phase 1;
        {461}event LeakS(phase1,bob);
        {462}out(pub, key_s(bob))
    )
) | (
    {463}let v_971: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {464}let s_972: keypair = (if not-caught-fail(v_971) then keypairpack(validkey(v_971),key_s(bob)) else fail-any) in
    {465}out(pub, getpublickey(s_972));
    (
        {466}let e_973: keypair = keypairpack(empty,empty) in
        {467}let rs_974: key = empty in
        {468}let re_975: key = empty in
        {469}let v_976: bitstring = catch-fail(hash(somename,empty)) in
        {470}let v_977: key = catch-fail(v_976) in
        {471}let v_978: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {472}let v_979: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (if not-caught-fail(v_978) then symmetricstatepack(v_978,v_977,v_976) else fail-any) else fail-any) else fail-any))) in
        {473}let v_980: symmetricstate = catch-fail((if success?((if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (if not-caught-fail(v_978) then symmetricstatepack(v_978,v_977,v_976) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then symmetricstatepack(1-proj-3-tuple(v_979),2-proj-3-tuple(v_979),hash(3-proj-3-tuple(v_979),empty)) else fail-any) else fail-any)) in
        {474}let v_981: bitstring = catch-fail(symmetricstateunpack(v_980)) in
        {475}let v_982: symmetricstate = catch-fail((if success?(getpublickey(s_972)) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then symmetricstatepack(1-proj-3-tuple(v_981),2-proj-3-tuple(v_981),hash(3-proj-3-tuple(v_981),getpublickey(s_972))) else fail-any) else fail-any)) in
        {476}let hs_983: handshakestate = (if not-caught-fail(v_980) then (if not-caught-fail(v_982) then handshakestatepack(v_982,s_972,e_973,rs_974,re_975,empty,false) else fail-any) else fail-any) in
        {477}insert statestore(bob,charlie,sid,statepack_a(hs_983))
    ) | (
        {525}get statestore(=bob,=charlie,=sid,statepack_a(hs_984: handshakestate)) in
        {478}in(pub, message_a_985: bitstring);
        {479}let v_986: bitstring = catch-fail(handshakestateunpack(hs_984)) in
        {480}let v_987: bitstring = catch-fail(deconcat3(message_a_985)) in
        {481}let v_988: bool = catch-fail(true) in
        {482}let v_989: key = catch-fail(1-proj-3-tuple(v_987)) in
        {483}let v_990: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_986))) in
        {484}let v_991: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_986)) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then symmetricstatepack(1-proj-3-tuple(v_990),2-proj-3-tuple(v_990),hash(3-proj-3-tuple(v_990),v_989)) else fail-any) else fail-any)) in
        {485}let v_992: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_986))) in
        {486}let v_993: bitstring = catch-fail(symmetricstateunpack(v_991)) in
        {487}let v_994: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_993),(if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),v_989) else fail-any) else fail-any))) in
        {488}let v_995: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_993),(if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),v_989) else fail-any) else fail-any))) in
        {489}let v_996: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_993),(if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),v_989) else fail-any) else fail-any))) in
        {490}let v_997: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),v_989) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_993))) then (if not-caught-fail(v_994) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (v_994,v_995,v_996) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {491}let v_998: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then dhexp(2-proj-2-tuple(v_992),v_989) else fail-any) else fail-any)) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-3-tuple(v_993))))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_997)) then cipherstatepack(2-proj-3-tuple(v_997),minnonce) else fail-any),1-proj-3-tuple(v_997),3-proj-3-tuple(v_993)) else fail-any) else fail-any) else fail-any)) in
        {492}let v_999: bitstring = catch-fail(symmetricstateunpack(v_998)) in
        {493}let v_1000: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_999))) in
        {494}let v_1001: aead = catch-fail(decrypt(1-proj-2-tuple(v_1000),2-proj-2-tuple(v_1000),3-proj-3-tuple(v_999),2-proj-3-tuple(v_987))) in
        {495}let v_1002: bitstring = catch-fail(aeadunpack(v_1001)) in
        {496}let v_1003: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_999))) in
        {497}let v_1004: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1000))) && success?(1-proj-3-tuple(v_999))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-2-tuple(v_1003))))) then cipherstatepack(1-proj-2-tuple(v_1003),increment_nonce(2-proj-2-tuple(v_1000))) else fail-any) else fail-any)) in
        {498}let v_1005: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_987)) && (success?(3-proj-3-tuple(v_999)) && success?(1-proj-3-tuple(v_999)))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-2-tuple(v_1000))))) then (if not-caught-fail(v_1001) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if not-caught-fail(v_1004) then (v_1004,3-proj-3-tuple(v_1002),1-proj-3-tuple(v_1002)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {499}let v_1006: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)))) in
        {500}let v_1007: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_987)) && success?(symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_999),3-proj-3-tuple(v_999)))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then symmetricstatepack(1-proj-3-tuple(v_1006),2-proj-3-tuple(v_1006),hash(3-proj-3-tuple(v_1006),2-proj-3-tuple(v_987))) else fail-any) else fail-any)) in
        {501}let v_1008: bitstring = catch-fail((if success?(2-proj-3-tuple(v_987)) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if not-caught-fail(v_1007) then (v_1007,2-proj-3-tuple(v_1005),3-proj-3-tuple(v_1005)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {502}let v_1009: key = catch-fail(2-proj-3-tuple(v_1008)) in
        {503}let v_1010: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_986))) in
        {504}let v_1011: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1008))) in
        {505}let v_1012: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1011),(if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1009) else fail-any) else fail-any))) in
        {506}let v_1013: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1011),(if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1009) else fail-any) else fail-any))) in
        {507}let v_1014: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1011),(if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1009) else fail-any) else fail-any))) in
        {508}let v_1015: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1009) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1011))) then (if not-caught-fail(v_1012) then (if not-caught-fail(v_1013) then (if not-caught-fail(v_1014) then (v_1012,v_1013,v_1014) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_1016: symmetricstate = catch-fail((if (success?((if success?(2-proj-7-tuple(v_986)) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-2-tuple(v_1010))))) then dhexp(2-proj-2-tuple(v_1010),v_1009) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_1008))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1015)) then cipherstatepack(2-proj-3-tuple(v_1015),minnonce) else fail-any),1-proj-3-tuple(v_1015),3-proj-3-tuple(v_1011)) else fail-any) else fail-any) else fail-any)) in
        {510}let v_1017: bitstring = catch-fail(symmetricstateunpack(v_1016)) in
        {511}let v_1018: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1017))) in
        {512}let v_1019: aead = catch-fail(decrypt(1-proj-2-tuple(v_1018),2-proj-2-tuple(v_1018),3-proj-3-tuple(v_1017),3-proj-3-tuple(v_987))) in
        {513}let v_1020: bitstring = catch-fail(aeadunpack(v_1019)) in
        {514}let v_1021: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1017))) in
        {515}let v_1022: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1018))) && success?(1-proj-3-tuple(v_1017))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then cipherstatepack(1-proj-2-tuple(v_1021),increment_nonce(2-proj-2-tuple(v_1018))) else fail-any) else fail-any)) in
        {516}let v_1023: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_987)) && (success?(3-proj-3-tuple(v_1017)) && success?(1-proj-3-tuple(v_1017)))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then (if not-caught-fail(v_1019) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if not-caught-fail(v_1022) then (v_1022,3-proj-3-tuple(v_1020),1-proj-3-tuple(v_1020)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {517}let v_1024: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1023),2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)))) in
        {518}let v_1025: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_987)) && success?(symmetricstatepack(1-proj-3-tuple(v_1023),2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)))) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-3-tuple(v_1024))))) then symmetricstatepack(1-proj-3-tuple(v_1024),2-proj-3-tuple(v_1024),hash(3-proj-3-tuple(v_1024),3-proj-3-tuple(v_987))) else fail-any) else fail-any)) in
        {519}let v_1026: bitstring = catch-fail((if success?(3-proj-3-tuple(v_987)) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-3-tuple(v_1023))))) then (if not-caught-fail(v_1025) then (v_1025,2-proj-3-tuple(v_1023),3-proj-3-tuple(v_1023)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {520}let v_1027: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {521}let v_1028: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1026),2-proj-7-tuple(v_986),3-proj-7-tuple(v_986),v_1009,v_989,6-proj-7-tuple(v_986),7-proj-7-tuple(v_986))) in
        {522}let (hs_1029: handshakestate,plaintext_a_1030: bitstring,valid_1031: bool) = (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-7-tuple(v_986))))) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-3-tuple(v_987))))) then (if not-caught-fail(v_988) then (if not-caught-fail(v_989) then (if not-caught-fail(v_991) then (if not-caught-fail(v_998) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if not-caught-fail(v_1009) then (if not-caught-fail(v_1016) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then (if ((3-proj-3-tuple(v_1008) && 3-proj-3-tuple(v_1026)) && (v_1009 = getpublickey((if not-caught-fail(v_1027) then keypairpack(validkey(v_1027),key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1028) then (v_1028,2-proj-3-tuple(v_1026),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {523}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_1030);
        {524}insert statestore(bob,charlie,sid,statepack_b(hs_1029))
    ) | (
        {570}get statestore(=bob,=charlie,=sid,statepack_b(hs_1032: handshakestate)) in
        {526}let v_1033: bitstring = catch-fail(handshakestateunpack(hs_1032)) in
        {527}let v_1034: bitstring = catch-fail((empty,empty,empty)) in
        {528}let v_1035: key = catch-fail(dhexp(key_e(bob,charlie,sid),validkey(g))) in
        {529}let v_1036: keypair = catch-fail((if not-caught-fail(v_1035) then keypairpack(validkey(v_1035),key_e(bob,charlie,sid)) else fail-any)) in
        {530}let v_1037: bitstring = catch-fail(getpublickey(v_1036)) in
        {531}let v_1038: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1033))) in
        {532}let v_1039: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then symmetricstatepack(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1038),hash(3-proj-3-tuple(v_1038),v_1037)) else fail-any) else fail-any)) in
        {533}let v_1040: bitstring = catch-fail(keypairunpack(v_1036)) in
        {534}let v_1041: bitstring = catch-fail(symmetricstateunpack(v_1039)) in
        {535}let v_1042: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1041),(if success?(5-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then dhexp(2-proj-2-tuple(v_1040),5-proj-7-tuple(v_1033)) else fail-any) else fail-any))) in
        {536}let v_1043: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1041),(if success?(5-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then dhexp(2-proj-2-tuple(v_1040),5-proj-7-tuple(v_1033)) else fail-any) else fail-any))) in
        {537}let v_1044: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1041),(if success?(5-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then dhexp(2-proj-2-tuple(v_1040),5-proj-7-tuple(v_1033)) else fail-any) else fail-any))) in
        {538}let v_1045: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then dhexp(2-proj-2-tuple(v_1040),5-proj-7-tuple(v_1033)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1041))) then (if not-caught-fail(v_1042) then (if not-caught-fail(v_1043) then (if not-caught-fail(v_1044) then (v_1042,v_1043,v_1044) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {539}let v_1046: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then dhexp(2-proj-2-tuple(v_1040),5-proj-7-tuple(v_1033)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1045)) then cipherstatepack(2-proj-3-tuple(v_1045),minnonce) else fail-any),1-proj-3-tuple(v_1045),3-proj-3-tuple(v_1041)) else fail-any) else fail-any) else fail-any)) in
        {540}let v_1047: bitstring = catch-fail(keypairunpack(v_1036)) in
        {541}let v_1048: bitstring = catch-fail(symmetricstateunpack(v_1046)) in
        {542}let v_1049: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1048),(if success?(4-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then dhexp(2-proj-2-tuple(v_1047),4-proj-7-tuple(v_1033)) else fail-any) else fail-any))) in
        {543}let v_1050: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1048),(if success?(4-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then dhexp(2-proj-2-tuple(v_1047),4-proj-7-tuple(v_1033)) else fail-any) else fail-any))) in
        {544}let v_1051: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1048),(if success?(4-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then dhexp(2-proj-2-tuple(v_1047),4-proj-7-tuple(v_1033)) else fail-any) else fail-any))) in
        {545}let v_1052: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then dhexp(2-proj-2-tuple(v_1047),4-proj-7-tuple(v_1033)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1048))) then (if not-caught-fail(v_1049) then (if not-caught-fail(v_1050) then (if not-caught-fail(v_1051) then (v_1049,v_1050,v_1051) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {546}let v_1053: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1033)) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then dhexp(2-proj-2-tuple(v_1047),4-proj-7-tuple(v_1033)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-3-tuple(v_1052))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1052)) then cipherstatepack(2-proj-3-tuple(v_1052),minnonce) else fail-any),1-proj-3-tuple(v_1052),3-proj-3-tuple(v_1048)) else fail-any) else fail-any) else fail-any)) in
        {547}let v_1054: bitstring = catch-fail(symmetricstateunpack(v_1053)) in
        {548}let v_1055: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1054))) in
        {549}let v_1056: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1055),2-proj-2-tuple(v_1055),3-proj-3-tuple(v_1054),msg_b(bob,charlie,sid))) in
        {550}let v_1057: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1054))) in
        {551}let v_1058: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1055))) && success?(1-proj-3-tuple(v_1054))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then cipherstatepack(1-proj-2-tuple(v_1057),increment_nonce(2-proj-2-tuple(v_1055))) else fail-any) else fail-any)) in
        {552}let v_1059: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1054)) && success?(1-proj-3-tuple(v_1054))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-2-tuple(v_1055))))) then (if not-caught-fail(v_1056) then (if not-caught-fail(v_1058) then (v_1058,v_1056) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {553}let v_1060: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1059),2-proj-3-tuple(v_1054),3-proj-3-tuple(v_1054)))) in
        {554}let v_1061: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1059)) && success?(symmetricstatepack(1-proj-2-tuple(v_1059),2-proj-3-tuple(v_1054),3-proj-3-tuple(v_1054)))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then symmetricstatepack(1-proj-3-tuple(v_1060),2-proj-3-tuple(v_1060),hash(3-proj-3-tuple(v_1060),2-proj-2-tuple(v_1059))) else fail-any) else fail-any)) in
        {555}let v_1062: bitstring = catch-fail((if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then (if not-caught-fail(v_1061) then (v_1061,2-proj-2-tuple(v_1059)) else fail-any) else fail-any) else fail-any)) in
        {556}let v_1063: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1062),2-proj-7-tuple(v_1033),v_1036,4-proj-7-tuple(v_1033),5-proj-7-tuple(v_1033),6-proj-7-tuple(v_1033),7-proj-7-tuple(v_1033))) in
        {557}let v_1064: bitstring = catch-fail(concat3(v_1037,2-proj-3-tuple(v_1034),2-proj-2-tuple(v_1062))) in
        {558}let v_1065: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1062))) in
        {559}let v_1066: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1065),zero)) in
        {560}let v_1067: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1065),zero)) in
        {561}let v_1068: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1065),zero)) in
        {562}let v_1069: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1065)) then (if not-caught-fail(v_1066) then (if not-caught-fail(v_1067) then (if not-caught-fail(v_1068) then (v_1066,v_1067,v_1068) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {563}let v_1070: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1069)) then cipherstatepack(1-proj-3-tuple(v_1069),minnonce) else fail-any)) in
        {564}let v_1071: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1069)) then cipherstatepack(2-proj-3-tuple(v_1069),minnonce) else fail-any)) in
        {565}let v_1072: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1062)) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1071) then (1-proj-2-tuple(v_1062),v_1070,v_1071) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {566}let (hs_1073: handshakestate,message_b_1074: bitstring,cs1_1075: cipherstate,cs2_1076: cipherstate) = (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-7-tuple(v_1033))))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-3-tuple(v_1034))))) then (if not-caught-fail(v_1036) then (if not-caught-fail(v_1037) then (if not-caught-fail(v_1039) then (if not-caught-fail(v_1046) then (if not-caught-fail(v_1053) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-2-tuple(v_1062))))) then (if not-caught-fail(v_1063) then (if not-caught-fail(v_1064) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then (v_1063,v_1064,2-proj-3-tuple(v_1072),3-proj-3-tuple(v_1072)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {567}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {568}insert statestore(bob,charlie,sid,statepack_c(hs_1073,cs1_1075,cs2_1076));
        {569}out(pub, message_b_1074)
    ) | (
        {571}!
        {591}get statestore(=bob,=charlie,=sid,statepack_c(hs_1077: handshakestate,cs1_1078: cipherstate,cs2_1079: cipherstate)) in
        {572}let hs_1080: handshakestate = handshakestatesetcs(hs_1077,cs1_1078) in
        {573}in(pub, message_c_1081: bitstring);
        {574}let v_1082: bitstring = catch-fail(handshakestateunpack(hs_1080)) in
        {575}let v_1083: bitstring = catch-fail(deconcat3(message_c_1081)) in
        {576}let v_1084: bool = catch-fail(true) in
        {577}let v_1085: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1082))) in
        {578}let v_1086: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1085))) in
        {579}let v_1087: aead = catch-fail(decrypt(1-proj-2-tuple(v_1086),2-proj-2-tuple(v_1086),3-proj-3-tuple(v_1085),3-proj-3-tuple(v_1083))) in
        {580}let v_1088: bitstring = catch-fail(aeadunpack(v_1087)) in
        {581}let v_1089: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1085))) in
        {582}let v_1090: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1086))) && success?(1-proj-3-tuple(v_1085))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-2-tuple(v_1089))))) then cipherstatepack(1-proj-2-tuple(v_1089),increment_nonce(2-proj-2-tuple(v_1086))) else fail-any) else fail-any)) in
        {583}let v_1091: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1083)) && (success?(3-proj-3-tuple(v_1085)) && success?(1-proj-3-tuple(v_1085)))) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-2-tuple(v_1086))))) then (if not-caught-fail(v_1087) then (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-3-tuple(v_1088))))) then (if not-caught-fail(v_1090) then (v_1090,3-proj-3-tuple(v_1088),1-proj-3-tuple(v_1088)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {584}let v_1092: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)))) in
        {585}let v_1093: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1083)) && success?(symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1085),3-proj-3-tuple(v_1085)))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1092),hash(3-proj-3-tuple(v_1092),3-proj-3-tuple(v_1083))) else fail-any) else fail-any)) in
        {586}let v_1094: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1083)) && success?(1-proj-7-tuple(v_1082))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then (if (not-caught-fail(v_1091) && success?(is-true(success?(1-proj-3-tuple(v_1091))))) then (if not-caught-fail(v_1093) then (v_1093,2-proj-3-tuple(v_1091),3-proj-3-tuple(v_1091)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {587}let v_1095: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1094),2-proj-7-tuple(v_1082),3-proj-7-tuple(v_1082),4-proj-7-tuple(v_1082),5-proj-7-tuple(v_1082),6-proj-7-tuple(v_1082),7-proj-7-tuple(v_1082))) in
        {588}let (hs_1096: handshakestate,plaintext_c_1097: bitstring,valid_1098: bool) = (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-7-tuple(v_1082))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if not-caught-fail(v_1084) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if (v_1084 && 3-proj-3-tuple(v_1094)) then (if not-caught-fail(v_1095) then (v_1095,2-proj-3-tuple(v_1094),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {589}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_1097);
        {590}insert statestore(bob,charlie,sid,statepack_d(hs_1096,handshakestategetcs(hs_1096),cs2_1079))
    ) | (
        {592}!
        {610}get statestore(=bob,=charlie,=sid,statepack_d(hs_1099: handshakestate,cs1_1100: cipherstate,cs2_1101: cipherstate)) in
        {593}let hs_1102: handshakestate = handshakestatesetcs(hs_1099,cs2_1101) in
        {594}let v_1103: bitstring = catch-fail(handshakestateunpack(hs_1102)) in
        {595}let v_1104: bitstring = catch-fail((empty,empty,empty)) in
        {596}let v_1105: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1103))) in
        {597}let v_1106: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1105))) in
        {598}let v_1107: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1106),2-proj-2-tuple(v_1106),3-proj-3-tuple(v_1105),msg_d(bob,charlie,sid))) in
        {599}let v_1108: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1105))) in
        {600}let v_1109: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1106))) && success?(1-proj-3-tuple(v_1105))) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then cipherstatepack(1-proj-2-tuple(v_1108),increment_nonce(2-proj-2-tuple(v_1106))) else fail-any) else fail-any)) in
        {601}let v_1110: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1105)) && success?(1-proj-3-tuple(v_1105))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-2-tuple(v_1106))))) then (if not-caught-fail(v_1107) then (if not-caught-fail(v_1109) then (v_1109,v_1107) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {602}let v_1111: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1110),2-proj-3-tuple(v_1105),3-proj-3-tuple(v_1105)))) in
        {603}let v_1112: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1110)) && success?(symmetricstatepack(1-proj-2-tuple(v_1110),2-proj-3-tuple(v_1105),3-proj-3-tuple(v_1105)))) then (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-3-tuple(v_1111))))) then symmetricstatepack(1-proj-3-tuple(v_1111),2-proj-3-tuple(v_1111),hash(3-proj-3-tuple(v_1111),2-proj-2-tuple(v_1110))) else fail-any) else fail-any)) in
        {604}let v_1113: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1103)) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-3-tuple(v_1105))))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-2-tuple(v_1110))))) then (if not-caught-fail(v_1112) then (v_1112,2-proj-2-tuple(v_1110)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1114: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1113),2-proj-7-tuple(v_1103),3-proj-7-tuple(v_1103),4-proj-7-tuple(v_1103),5-proj-7-tuple(v_1103),6-proj-7-tuple(v_1103),7-proj-7-tuple(v_1103))) in
        {606}let v_1115: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1104),2-proj-3-tuple(v_1104),2-proj-2-tuple(v_1113))) in
        {607}let (hs_1116: handshakestate,message_d_1117: bitstring) = (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-7-tuple(v_1103))))) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-3-tuple(v_1104))))) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-2-tuple(v_1113))))) then (if not-caught-fail(v_1114) then (if not-caught-fail(v_1115) then (v_1114,v_1115) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {608}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {609}out(pub, message_d_1117)
    ) | (
        {611}event LeakS(phase0,bob);
        {612}out(pub, key_s(bob))
    ) | (
        {613}phase 1;
        {614}event LeakS(phase1,bob);
        {615}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1235,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1235,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1235,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1235,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1235,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1235,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1235,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1235,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 241 rules in the queue.
400 rules inserted. The rule base contains 399 rules. 180 rules in the queue.
600 rules inserted. The rule base contains 589 rules. 301 rules in the queue.
800 rules inserted. The rule base contains 768 rules. 551 rules in the queue.
1000 rules inserted. The rule base contains 967 rules. 755 rules in the queue.
1200 rules inserted. The rule base contains 1167 rules. 768 rules in the queue.
1400 rules inserted. The rule base contains 1367 rules. 784 rules in the queue.
1600 rules inserted. The rule base contains 1567 rules. 1150 rules in the queue.
1800 rules inserted. The rule base contains 1767 rules. 1339 rules in the queue.
2000 rules inserted. The rule base contains 1967 rules. 1345 rules in the queue.
2200 rules inserted. The rule base contains 2163 rules. 1329 rules in the queue.
2400 rules inserted. The rule base contains 2349 rules. 1270 rules in the queue.
2600 rules inserted. The rule base contains 2531 rules. 1198 rules in the queue.
2800 rules inserted. The rule base contains 2713 rules. 1123 rules in the queue.
3000 rules inserted. The rule base contains 2895 rules. 1048 rules in the queue.
3200 rules inserted. The rule base contains 2910 rules. 1004 rules in the queue.
3400 rules inserted. The rule base contains 2931 rules. 970 rules in the queue.
3600 rules inserted. The rule base contains 3118 rules. 1045 rules in the queue.
3800 rules inserted. The rule base contains 3310 rules. 1174 rules in the queue.
4000 rules inserted. The rule base contains 3506 rules. 1280 rules in the queue.
4200 rules inserted. The rule base contains 3690 rules. 1268 rules in the queue.
4400 rules inserted. The rule base contains 3890 rules. 1268 rules in the queue.
4600 rules inserted. The rule base contains 4090 rules. 1339 rules in the queue.
4800 rules inserted. The rule base contains 4290 rules. 1419 rules in the queue.
5000 rules inserted. The rule base contains 4490 rules. 1504 rules in the queue.
5200 rules inserted. The rule base contains 4690 rules. 1588 rules in the queue.
5400 rules inserted. The rule base contains 4726 rules. 1584 rules in the queue.
5600 rules inserted. The rule base contains 4762 rules. 1571 rules in the queue.
5800 rules inserted. The rule base contains 4920 rules. 1579 rules in the queue.
6000 rules inserted. The rule base contains 5059 rules. 1579 rules in the queue.
6200 rules inserted. The rule base contains 5199 rules. 1577 rules in the queue.
6400 rules inserted. The rule base contains 5338 rules. 1577 rules in the queue.
6600 rules inserted. The rule base contains 5478 rules. 1577 rules in the queue.
6800 rules inserted. The rule base contains 5640 rules. 1576 rules in the queue.
7000 rules inserted. The rule base contains 5837 rules. 1588 rules in the queue.
7200 rules inserted. The rule base contains 6035 rules. 1594 rules in the queue.
7400 rules inserted. The rule base contains 6221 rules. 1605 rules in the queue.
