File "Npsk0.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 227, character 36:
Warning: identifier h rebound.
File "Npsk0.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 237, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 257, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "Npsk0.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "Npsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 274, characters 7-8:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 274, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "Npsk0.noise.passive.pv", line 275, characters 6-7:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 285, characters 6-7:
Warning: identifier re rebound.
File "Npsk0.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 289, characters 7-8:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 291, characters 7-8:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 363, characters 8-9:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 268, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 269, character 6:
Warning: identifier e rebound.
File "Npsk0.noise.passive.pv", line 270, characters 6-7:
Warning: identifier ne rebound.
File "Npsk0.noise.passive.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 274, characters 7-8:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 274, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "Npsk0.noise.passive.pv", line 275, characters 6-7:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 227, character 36:
Warning: identifier h rebound.
File "Npsk0.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 237, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 257, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 389, characters 8-9:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 284, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 285, characters 6-7:
Warning: identifier re rebound.
File "Npsk0.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 289, characters 7-8:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 291, characters 7-8:
Warning: identifier hs rebound.
File "Npsk0.noise.passive.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 227, character 36:
Warning: identifier h rebound.
File "Npsk0.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Npsk0.noise.passive.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "Npsk0.noise.passive.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "Npsk0.noise.passive.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_377: keypair = keypairpack(empty,empty) in
    (
        {5}let e_378: keypair = keypairpack(empty,empty) in
        {6}let v_379: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {7}let rs_380: key = getpublickey((if not-caught-fail(v_379) then keypairpack(validkey(v_379),key_s(bob)) else fail-any)) in
        {8}let re_381: key = empty in
        {9}let v_382: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_383: key = catch-fail(v_382) in
        {11}let v_384: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_385: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_382) then (if not-caught-fail(v_383) then (if not-caught-fail(v_384) then symmetricstatepack(v_384,v_383,v_382) else fail-any) else fail-any) else fail-any))) in
        {13}let v_386: symmetricstate = catch-fail((if success?((if not-caught-fail(v_382) then (if not-caught-fail(v_383) then (if not-caught-fail(v_384) then symmetricstatepack(v_384,v_383,v_382) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_385) && success?(is-true(success?(1-proj-3-tuple(v_385))))) then symmetricstatepack(1-proj-3-tuple(v_385),2-proj-3-tuple(v_385),hash(3-proj-3-tuple(v_385),empty)) else fail-any) else fail-any)) in
        {14}let v_387: bitstring = catch-fail(symmetricstateunpack(v_386)) in
        {15}let v_388: symmetricstate = catch-fail((if (not-caught-fail(v_387) && success?(is-true(success?(1-proj-3-tuple(v_387))))) then symmetricstatepack(1-proj-3-tuple(v_387),2-proj-3-tuple(v_387),hash(3-proj-3-tuple(v_387),rs_380)) else fail-any)) in
        {16}let hs: handshakestate = (if not-caught-fail(v_386) then (if not-caught-fail(v_388) then handshakestatepack(v_388,s_377,e_378,rs_380,re_381,key_psk(alice,bob),true) else fail-any) else fail-any) in
        {17}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {68}get statestore(=alice,=bob,=sid,statepack_a(hs_389: handshakestate)) in
        {18}let v_390: bitstring = catch-fail(handshakestateunpack(hs_389)) in
        {19}let v_391: bitstring = catch-fail((empty,empty,empty)) in
        {20}let v_392: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_390))) in
        {21}let v_393: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_392),6-proj-7-tuple(v_390))) in
        {22}let v_394: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_392),6-proj-7-tuple(v_390))) in
        {23}let v_395: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_392),6-proj-7-tuple(v_390))) in
        {24}let v_396: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_390)) && success?(2-proj-3-tuple(v_392))) then (if not-caught-fail(v_393) then (if not-caught-fail(v_394) then (if not-caught-fail(v_395) then (v_393,v_394,v_395) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {25}let v_397: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_392),1-proj-3-tuple(v_396),3-proj-3-tuple(v_392)))) in
        {26}let v_398: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_396)) && success?(symmetricstatepack(1-proj-3-tuple(v_392),1-proj-3-tuple(v_396),3-proj-3-tuple(v_392)))) then (if (not-caught-fail(v_397) && success?(is-true(success?(1-proj-3-tuple(v_397))))) then symmetricstatepack(1-proj-3-tuple(v_397),2-proj-3-tuple(v_397),hash(3-proj-3-tuple(v_397),2-proj-3-tuple(v_396))) else fail-any) else fail-any))) in
        {27}let v_399: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_390)) && success?(1-proj-7-tuple(v_390))) then (if (not-caught-fail(v_392) && success?(is-true(success?(1-proj-3-tuple(v_392))))) then (if (not-caught-fail(v_396) && success?(is-true(success?(1-proj-3-tuple(v_396))))) then (if (not-caught-fail(v_398) && success?(is-true(success?(1-proj-3-tuple(v_398))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_396)) then cipherstatepack(3-proj-3-tuple(v_396),minnonce) else fail-any),1-proj-3-tuple(v_396),3-proj-3-tuple(v_398)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {28}let v_400: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {29}let v_401: keypair = catch-fail((if not-caught-fail(v_400) then keypairpack(validkey(v_400),key_e(alice,bob,sid)) else fail-any)) in
        {30}let v_402: bitstring = catch-fail(getpublickey(v_401)) in
        {31}let v_403: bitstring = catch-fail(symmetricstateunpack(v_399)) in
        {32}let v_404: symmetricstate = catch-fail((if (not-caught-fail(v_403) && success?(is-true(success?(1-proj-3-tuple(v_403))))) then symmetricstatepack(1-proj-3-tuple(v_403),2-proj-3-tuple(v_403),hash(3-proj-3-tuple(v_403),v_402)) else fail-any)) in
        {33}let v_405: bitstring = catch-fail(symmetricstateunpack(v_404)) in
        {34}let v_406: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_405),getpublickey(v_401))) in
        {35}let v_407: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_405),getpublickey(v_401))) in
        {36}let v_408: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_405),getpublickey(v_401))) in
        {37}let v_409: bitstring = catch-fail((if (success?(getpublickey(v_401)) && success?(2-proj-3-tuple(v_405))) then (if not-caught-fail(v_406) then (if not-caught-fail(v_407) then (if not-caught-fail(v_408) then (v_406,v_407,v_408) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_410: symmetricstate = catch-fail((if success?(getpublickey(v_401)) then (if (not-caught-fail(v_405) && success?(is-true(success?(1-proj-3-tuple(v_405))))) then (if (not-caught-fail(v_409) && success?(is-true(success?(1-proj-3-tuple(v_409))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_409)) then cipherstatepack(2-proj-3-tuple(v_409),minnonce) else fail-any),1-proj-3-tuple(v_409),3-proj-3-tuple(v_405)) else fail-any) else fail-any) else fail-any)) in
        {39}let v_411: bitstring = catch-fail(keypairunpack(v_401)) in
        {40}let v_412: bitstring = catch-fail(symmetricstateunpack(v_410)) in
        {41}let v_413: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_412),(if success?(4-proj-7-tuple(v_390)) then (if (not-caught-fail(v_411) && success?(is-true(success?(1-proj-2-tuple(v_411))))) then dhexp(2-proj-2-tuple(v_411),4-proj-7-tuple(v_390)) else fail-any) else fail-any))) in
        {42}let v_414: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_412),(if success?(4-proj-7-tuple(v_390)) then (if (not-caught-fail(v_411) && success?(is-true(success?(1-proj-2-tuple(v_411))))) then dhexp(2-proj-2-tuple(v_411),4-proj-7-tuple(v_390)) else fail-any) else fail-any))) in
        {43}let v_415: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_412),(if success?(4-proj-7-tuple(v_390)) then (if (not-caught-fail(v_411) && success?(is-true(success?(1-proj-2-tuple(v_411))))) then dhexp(2-proj-2-tuple(v_411),4-proj-7-tuple(v_390)) else fail-any) else fail-any))) in
        {44}let v_416: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_390)) then (if (not-caught-fail(v_411) && success?(is-true(success?(1-proj-2-tuple(v_411))))) then dhexp(2-proj-2-tuple(v_411),4-proj-7-tuple(v_390)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_412))) then (if not-caught-fail(v_413) then (if not-caught-fail(v_414) then (if not-caught-fail(v_415) then (v_413,v_414,v_415) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {45}let v_417: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_390)) then (if (not-caught-fail(v_411) && success?(is-true(success?(1-proj-2-tuple(v_411))))) then dhexp(2-proj-2-tuple(v_411),4-proj-7-tuple(v_390)) else fail-any) else fail-any)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-3-tuple(v_412))))) then (if (not-caught-fail(v_416) && success?(is-true(success?(1-proj-3-tuple(v_416))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_416)) then cipherstatepack(2-proj-3-tuple(v_416),minnonce) else fail-any),1-proj-3-tuple(v_416),3-proj-3-tuple(v_412)) else fail-any) else fail-any) else fail-any)) in
        {46}let v_418: bitstring = catch-fail(symmetricstateunpack(v_417)) in
        {47}let v_419: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_418))) in
        {48}let v_420: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_419),2-proj-2-tuple(v_419),3-proj-3-tuple(v_418),msg_a(alice,bob,sid))) in
        {49}let v_421: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_418))) in
        {50}let v_422: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_419))) && success?(1-proj-3-tuple(v_418))) then (if (not-caught-fail(v_421) && success?(is-true(success?(1-proj-2-tuple(v_421))))) then cipherstatepack(1-proj-2-tuple(v_421),increment_nonce(2-proj-2-tuple(v_419))) else fail-any) else fail-any)) in
        {51}let v_423: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_418)) && success?(1-proj-3-tuple(v_418))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-2-tuple(v_419))))) then (if not-caught-fail(v_420) then (if not-caught-fail(v_422) then (v_422,v_420) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {52}let v_424: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_423),2-proj-3-tuple(v_418),3-proj-3-tuple(v_418)))) in
        {53}let v_425: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_423)) && success?(symmetricstatepack(1-proj-2-tuple(v_423),2-proj-3-tuple(v_418),3-proj-3-tuple(v_418)))) then (if (not-caught-fail(v_424) && success?(is-true(success?(1-proj-3-tuple(v_424))))) then symmetricstatepack(1-proj-3-tuple(v_424),2-proj-3-tuple(v_424),hash(3-proj-3-tuple(v_424),2-proj-2-tuple(v_423))) else fail-any) else fail-any)) in
        {54}let v_426: bitstring = catch-fail((if (not-caught-fail(v_418) && success?(is-true(success?(1-proj-3-tuple(v_418))))) then (if (not-caught-fail(v_423) && success?(is-true(success?(1-proj-2-tuple(v_423))))) then (if not-caught-fail(v_425) then (v_425,2-proj-2-tuple(v_423)) else fail-any) else fail-any) else fail-any)) in
        {55}let v_427: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_426),2-proj-7-tuple(v_390),v_401,4-proj-7-tuple(v_390),5-proj-7-tuple(v_390),6-proj-7-tuple(v_390),7-proj-7-tuple(v_390))) in
        {56}let v_428: bitstring = catch-fail(concat3(v_402,2-proj-3-tuple(v_391),2-proj-2-tuple(v_426))) in
        {57}let v_429: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_426))) in
        {58}let v_430: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_429),zero)) in
        {59}let v_431: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_429),zero)) in
        {60}let v_432: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_429),zero)) in
        {61}let v_433: bitstring = catch-fail((if success?(2-proj-3-tuple(v_429)) then (if not-caught-fail(v_430) then (if not-caught-fail(v_431) then (if not-caught-fail(v_432) then (v_430,v_431,v_432) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_434: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_433)) then cipherstatepack(1-proj-3-tuple(v_433),minnonce) else fail-any)) in
        {63}let v_435: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_433)) then cipherstatepack(2-proj-3-tuple(v_433),minnonce) else fail-any)) in
        {64}let v_436: bitstring = catch-fail((if success?(1-proj-2-tuple(v_426)) then (if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-3-tuple(v_429))))) then (if (not-caught-fail(v_433) && success?(is-true(success?(1-proj-3-tuple(v_433))))) then (if not-caught-fail(v_434) then (if not-caught-fail(v_435) then (1-proj-2-tuple(v_426),v_434,v_435) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let (hs_437: handshakestate,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_390) && success?(is-true(success?(1-proj-7-tuple(v_390))))) then (if (not-caught-fail(v_391) && success?(is-true(success?(1-proj-3-tuple(v_391))))) then (if not-caught-fail(v_399) then (if not-caught-fail(v_401) then (if not-caught-fail(v_402) then (if not-caught-fail(v_404) then (if not-caught-fail(v_410) then (if not-caught-fail(v_417) then (if (not-caught-fail(v_426) && success?(is-true(success?(1-proj-2-tuple(v_426))))) then (if not-caught-fail(v_427) then (if not-caught-fail(v_428) then (if (not-caught-fail(v_436) && success?(is-true(success?(1-proj-3-tuple(v_436))))) then (v_427,v_428,2-proj-3-tuple(v_436),3-proj-3-tuple(v_436)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {66}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {67}out(pub, message_a)
    ) | (
        {69}event LeakPsk(phase0,alice,bob);
        {70}out(pub, key_psk(alice,bob))
    ) | (
        {71}phase 1;
        {72}event LeakPsk(phase1,alice,bob);
        {73}out(pub, key_psk(alice,bob))
    ) | (
        0
    )
) | (
    {74}let s_438: keypair = keypairpack(empty,empty) in
    (
        {75}let e_439: keypair = keypairpack(empty,empty) in
        {76}let v_440: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {77}let rs_441: key = getpublickey((if not-caught-fail(v_440) then keypairpack(validkey(v_440),key_s(charlie)) else fail-any)) in
        {78}let re_442: key = empty in
        {79}let v_443: bitstring = catch-fail(hash(somename,empty)) in
        {80}let v_444: key = catch-fail(v_443) in
        {81}let v_445: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {82}let v_446: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_443) then (if not-caught-fail(v_444) then (if not-caught-fail(v_445) then symmetricstatepack(v_445,v_444,v_443) else fail-any) else fail-any) else fail-any))) in
        {83}let v_447: symmetricstate = catch-fail((if success?((if not-caught-fail(v_443) then (if not-caught-fail(v_444) then (if not-caught-fail(v_445) then symmetricstatepack(v_445,v_444,v_443) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-3-tuple(v_446))))) then symmetricstatepack(1-proj-3-tuple(v_446),2-proj-3-tuple(v_446),hash(3-proj-3-tuple(v_446),empty)) else fail-any) else fail-any)) in
        {84}let v_448: bitstring = catch-fail(symmetricstateunpack(v_447)) in
        {85}let v_449: symmetricstate = catch-fail((if (not-caught-fail(v_448) && success?(is-true(success?(1-proj-3-tuple(v_448))))) then symmetricstatepack(1-proj-3-tuple(v_448),2-proj-3-tuple(v_448),hash(3-proj-3-tuple(v_448),rs_441)) else fail-any)) in
        {86}let hs_450: handshakestate = (if not-caught-fail(v_447) then (if not-caught-fail(v_449) then handshakestatepack(v_449,s_438,e_439,rs_441,re_442,key_psk(alice,charlie),true) else fail-any) else fail-any) in
        {87}insert statestore(alice,charlie,sid,statepack_a(hs_450))
    ) | (
        {138}get statestore(=alice,=charlie,=sid,statepack_a(hs_451: handshakestate)) in
        {88}let v_452: bitstring = catch-fail(handshakestateunpack(hs_451)) in
        {89}let v_453: bitstring = catch-fail((empty,empty,empty)) in
        {90}let v_454: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_452))) in
        {91}let v_455: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_454),6-proj-7-tuple(v_452))) in
        {92}let v_456: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_454),6-proj-7-tuple(v_452))) in
        {93}let v_457: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_454),6-proj-7-tuple(v_452))) in
        {94}let v_458: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_452)) && success?(2-proj-3-tuple(v_454))) then (if not-caught-fail(v_455) then (if not-caught-fail(v_456) then (if not-caught-fail(v_457) then (v_455,v_456,v_457) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_459: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_454),1-proj-3-tuple(v_458),3-proj-3-tuple(v_454)))) in
        {96}let v_460: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_458)) && success?(symmetricstatepack(1-proj-3-tuple(v_454),1-proj-3-tuple(v_458),3-proj-3-tuple(v_454)))) then (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-3-tuple(v_459))))) then symmetricstatepack(1-proj-3-tuple(v_459),2-proj-3-tuple(v_459),hash(3-proj-3-tuple(v_459),2-proj-3-tuple(v_458))) else fail-any) else fail-any))) in
        {97}let v_461: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_452)) && success?(1-proj-7-tuple(v_452))) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-3-tuple(v_454))))) then (if (not-caught-fail(v_458) && success?(is-true(success?(1-proj-3-tuple(v_458))))) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-3-tuple(v_460))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_458)) then cipherstatepack(3-proj-3-tuple(v_458),minnonce) else fail-any),1-proj-3-tuple(v_458),3-proj-3-tuple(v_460)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_462: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {99}let v_463: keypair = catch-fail((if not-caught-fail(v_462) then keypairpack(validkey(v_462),key_e(alice,charlie,sid)) else fail-any)) in
        {100}let v_464: bitstring = catch-fail(getpublickey(v_463)) in
        {101}let v_465: bitstring = catch-fail(symmetricstateunpack(v_461)) in
        {102}let v_466: symmetricstate = catch-fail((if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-3-tuple(v_465))))) then symmetricstatepack(1-proj-3-tuple(v_465),2-proj-3-tuple(v_465),hash(3-proj-3-tuple(v_465),v_464)) else fail-any)) in
        {103}let v_467: bitstring = catch-fail(symmetricstateunpack(v_466)) in
        {104}let v_468: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_467),getpublickey(v_463))) in
        {105}let v_469: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_467),getpublickey(v_463))) in
        {106}let v_470: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_467),getpublickey(v_463))) in
        {107}let v_471: bitstring = catch-fail((if (success?(getpublickey(v_463)) && success?(2-proj-3-tuple(v_467))) then (if not-caught-fail(v_468) then (if not-caught-fail(v_469) then (if not-caught-fail(v_470) then (v_468,v_469,v_470) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_472: symmetricstate = catch-fail((if success?(getpublickey(v_463)) then (if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-3-tuple(v_467))))) then (if (not-caught-fail(v_471) && success?(is-true(success?(1-proj-3-tuple(v_471))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_471)) then cipherstatepack(2-proj-3-tuple(v_471),minnonce) else fail-any),1-proj-3-tuple(v_471),3-proj-3-tuple(v_467)) else fail-any) else fail-any) else fail-any)) in
        {109}let v_473: bitstring = catch-fail(keypairunpack(v_463)) in
        {110}let v_474: bitstring = catch-fail(symmetricstateunpack(v_472)) in
        {111}let v_475: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_474),(if success?(4-proj-7-tuple(v_452)) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-2-tuple(v_473))))) then dhexp(2-proj-2-tuple(v_473),4-proj-7-tuple(v_452)) else fail-any) else fail-any))) in
        {112}let v_476: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_474),(if success?(4-proj-7-tuple(v_452)) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-2-tuple(v_473))))) then dhexp(2-proj-2-tuple(v_473),4-proj-7-tuple(v_452)) else fail-any) else fail-any))) in
        {113}let v_477: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_474),(if success?(4-proj-7-tuple(v_452)) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-2-tuple(v_473))))) then dhexp(2-proj-2-tuple(v_473),4-proj-7-tuple(v_452)) else fail-any) else fail-any))) in
        {114}let v_478: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_452)) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-2-tuple(v_473))))) then dhexp(2-proj-2-tuple(v_473),4-proj-7-tuple(v_452)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_474))) then (if not-caught-fail(v_475) then (if not-caught-fail(v_476) then (if not-caught-fail(v_477) then (v_475,v_476,v_477) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_479: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_452)) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-2-tuple(v_473))))) then dhexp(2-proj-2-tuple(v_473),4-proj-7-tuple(v_452)) else fail-any) else fail-any)) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-3-tuple(v_474))))) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-3-tuple(v_478))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_478)) then cipherstatepack(2-proj-3-tuple(v_478),minnonce) else fail-any),1-proj-3-tuple(v_478),3-proj-3-tuple(v_474)) else fail-any) else fail-any) else fail-any)) in
        {116}let v_480: bitstring = catch-fail(symmetricstateunpack(v_479)) in
        {117}let v_481: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_480))) in
        {118}let v_482: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_481),2-proj-2-tuple(v_481),3-proj-3-tuple(v_480),msg_a(alice,charlie,sid))) in
        {119}let v_483: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_480))) in
        {120}let v_484: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_481))) && success?(1-proj-3-tuple(v_480))) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-2-tuple(v_483))))) then cipherstatepack(1-proj-2-tuple(v_483),increment_nonce(2-proj-2-tuple(v_481))) else fail-any) else fail-any)) in
        {121}let v_485: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_480)) && success?(1-proj-3-tuple(v_480))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-2-tuple(v_481))))) then (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then (v_484,v_482) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_486: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_485),2-proj-3-tuple(v_480),3-proj-3-tuple(v_480)))) in
        {123}let v_487: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_485)) && success?(symmetricstatepack(1-proj-2-tuple(v_485),2-proj-3-tuple(v_480),3-proj-3-tuple(v_480)))) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-3-tuple(v_486))))) then symmetricstatepack(1-proj-3-tuple(v_486),2-proj-3-tuple(v_486),hash(3-proj-3-tuple(v_486),2-proj-2-tuple(v_485))) else fail-any) else fail-any)) in
        {124}let v_488: bitstring = catch-fail((if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-3-tuple(v_480))))) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-2-tuple(v_485))))) then (if not-caught-fail(v_487) then (v_487,2-proj-2-tuple(v_485)) else fail-any) else fail-any) else fail-any)) in
        {125}let v_489: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_488),2-proj-7-tuple(v_452),v_463,4-proj-7-tuple(v_452),5-proj-7-tuple(v_452),6-proj-7-tuple(v_452),7-proj-7-tuple(v_452))) in
        {126}let v_490: bitstring = catch-fail(concat3(v_464,2-proj-3-tuple(v_453),2-proj-2-tuple(v_488))) in
        {127}let v_491: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_488))) in
        {128}let v_492: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_491),zero)) in
        {129}let v_493: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_491),zero)) in
        {130}let v_494: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_491),zero)) in
        {131}let v_495: bitstring = catch-fail((if success?(2-proj-3-tuple(v_491)) then (if not-caught-fail(v_492) then (if not-caught-fail(v_493) then (if not-caught-fail(v_494) then (v_492,v_493,v_494) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_496: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_495)) then cipherstatepack(1-proj-3-tuple(v_495),minnonce) else fail-any)) in
        {133}let v_497: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_495)) then cipherstatepack(2-proj-3-tuple(v_495),minnonce) else fail-any)) in
        {134}let v_498: bitstring = catch-fail((if success?(1-proj-2-tuple(v_488)) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-3-tuple(v_495))))) then (if not-caught-fail(v_496) then (if not-caught-fail(v_497) then (1-proj-2-tuple(v_488),v_496,v_497) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let (hs_499: handshakestate,message_a_500: bitstring,cs1_501: cipherstate,cs2_502: cipherstate) = (if (not-caught-fail(v_452) && success?(is-true(success?(1-proj-7-tuple(v_452))))) then (if (not-caught-fail(v_453) && success?(is-true(success?(1-proj-3-tuple(v_453))))) then (if not-caught-fail(v_461) then (if not-caught-fail(v_463) then (if not-caught-fail(v_464) then (if not-caught-fail(v_466) then (if not-caught-fail(v_472) then (if not-caught-fail(v_479) then (if (not-caught-fail(v_488) && success?(is-true(success?(1-proj-2-tuple(v_488))))) then (if not-caught-fail(v_489) then (if not-caught-fail(v_490) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-3-tuple(v_498))))) then (v_489,v_490,2-proj-3-tuple(v_498),3-proj-3-tuple(v_498)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {136}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {137}out(pub, message_a_500)
    ) | (
        {139}event LeakPsk(phase0,alice,charlie);
        {140}out(pub, key_psk(alice,charlie))
    ) | (
        {141}phase 1;
        {142}event LeakPsk(phase1,alice,charlie);
        {143}out(pub, key_psk(alice,charlie))
    ) | (
        0
    )
) | (
    {144}let v_503: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {145}let s_504: keypair = (if not-caught-fail(v_503) then keypairpack(validkey(v_503),key_s(bob)) else fail-any) in
    {146}out(pub, getpublickey(s_504));
    (
        {147}let e_505: keypair = keypairpack(empty,empty) in
        {148}let rs_506: key = empty in
        {149}let re_507: key = empty in
        {150}let v_508: bitstring = catch-fail(hash(somename,empty)) in
        {151}let v_509: key = catch-fail(v_508) in
        {152}let v_510: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {153}let v_511: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (if not-caught-fail(v_510) then symmetricstatepack(v_510,v_509,v_508) else fail-any) else fail-any) else fail-any))) in
        {154}let v_512: symmetricstate = catch-fail((if success?((if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (if not-caught-fail(v_510) then symmetricstatepack(v_510,v_509,v_508) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-3-tuple(v_511))))) then symmetricstatepack(1-proj-3-tuple(v_511),2-proj-3-tuple(v_511),hash(3-proj-3-tuple(v_511),empty)) else fail-any) else fail-any)) in
        {155}let v_513: bitstring = catch-fail(symmetricstateunpack(v_512)) in
        {156}let v_514: symmetricstate = catch-fail((if success?(getpublickey(s_504)) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-3-tuple(v_513))))) then symmetricstatepack(1-proj-3-tuple(v_513),2-proj-3-tuple(v_513),hash(3-proj-3-tuple(v_513),getpublickey(s_504))) else fail-any) else fail-any)) in
        {157}let hs_515: handshakestate = (if not-caught-fail(v_512) then (if not-caught-fail(v_514) then handshakestatepack(v_514,s_504,e_505,rs_506,re_507,key_psk(alice,bob),false) else fail-any) else fail-any) in
        {158}insert statestore(bob,alice,sid,statepack_a(hs_515))
    ) | (
        {209}get statestore(=bob,=alice,=sid,statepack_a(hs_516: handshakestate)) in
        {159}in(pub, message_a_517: bitstring);
        {160}let v_518: bitstring = catch-fail(handshakestateunpack(hs_516)) in
        {161}let v_519: bitstring = catch-fail(deconcat3(message_a_517)) in
        {162}let v_520: bool = catch-fail(true) in
        {163}let v_521: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_518))) in
        {164}let v_522: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_521),6-proj-7-tuple(v_518))) in
        {165}let v_523: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_521),6-proj-7-tuple(v_518))) in
        {166}let v_524: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_521),6-proj-7-tuple(v_518))) in
        {167}let v_525: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_518)) && success?(2-proj-3-tuple(v_521))) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then (v_522,v_523,v_524) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {168}let v_526: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_521),1-proj-3-tuple(v_525),3-proj-3-tuple(v_521)))) in
        {169}let v_527: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_525)) && success?(symmetricstatepack(1-proj-3-tuple(v_521),1-proj-3-tuple(v_525),3-proj-3-tuple(v_521)))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then symmetricstatepack(1-proj-3-tuple(v_526),2-proj-3-tuple(v_526),hash(3-proj-3-tuple(v_526),2-proj-3-tuple(v_525))) else fail-any) else fail-any))) in
        {170}let v_528: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_518)) && success?(1-proj-7-tuple(v_518))) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_525)) then cipherstatepack(3-proj-3-tuple(v_525),minnonce) else fail-any),1-proj-3-tuple(v_525),3-proj-3-tuple(v_527)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {171}let v_529: key = catch-fail(1-proj-3-tuple(v_519)) in
        {172}let v_530: bitstring = catch-fail(symmetricstateunpack(v_528)) in
        {173}let v_531: symmetricstate = catch-fail((if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then symmetricstatepack(1-proj-3-tuple(v_530),2-proj-3-tuple(v_530),hash(3-proj-3-tuple(v_530),v_529)) else fail-any)) in
        {174}let v_532: bitstring = catch-fail(symmetricstateunpack(v_531)) in
        {175}let v_533: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_532),v_529)) in
        {176}let v_534: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_532),v_529)) in
        {177}let v_535: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_532),v_529)) in
        {178}let v_536: bitstring = catch-fail((if success?(2-proj-3-tuple(v_532)) then (if not-caught-fail(v_533) then (if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (v_533,v_534,v_535) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {179}let v_537: symmetricstate = catch-fail((if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_536)) then cipherstatepack(2-proj-3-tuple(v_536),minnonce) else fail-any),1-proj-3-tuple(v_536),3-proj-3-tuple(v_532)) else fail-any) else fail-any)) in
        {180}let v_538: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_518))) in
        {181}let v_539: bitstring = catch-fail(symmetricstateunpack(v_537)) in
        {182}let v_540: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_539),(if success?(2-proj-7-tuple(v_518)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_529) else fail-any) else fail-any))) in
        {183}let v_541: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_539),(if success?(2-proj-7-tuple(v_518)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_529) else fail-any) else fail-any))) in
        {184}let v_542: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_539),(if success?(2-proj-7-tuple(v_518)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_529) else fail-any) else fail-any))) in
        {185}let v_543: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_518)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_529) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_539))) then (if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then (v_540,v_541,v_542) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {186}let v_544: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_518)) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then dhexp(2-proj-2-tuple(v_538),v_529) else fail-any) else fail-any)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_543)) then cipherstatepack(2-proj-3-tuple(v_543),minnonce) else fail-any),1-proj-3-tuple(v_543),3-proj-3-tuple(v_539)) else fail-any) else fail-any) else fail-any)) in
        {187}let v_545: bitstring = catch-fail(symmetricstateunpack(v_544)) in
        {188}let v_546: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_545))) in
        {189}let v_547: aead = catch-fail(decrypt(1-proj-2-tuple(v_546),2-proj-2-tuple(v_546),3-proj-3-tuple(v_545),3-proj-3-tuple(v_519))) in
        {190}let v_548: bitstring = catch-fail(aeadunpack(v_547)) in
        {191}let v_549: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_545))) in
        {192}let v_550: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_546))) && success?(1-proj-3-tuple(v_545))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then cipherstatepack(1-proj-2-tuple(v_549),increment_nonce(2-proj-2-tuple(v_546))) else fail-any) else fail-any)) in
        {193}let v_551: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_519)) && (success?(3-proj-3-tuple(v_545)) && success?(1-proj-3-tuple(v_545)))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then (if not-caught-fail(v_547) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then (if not-caught-fail(v_550) then (v_550,3-proj-3-tuple(v_548),1-proj-3-tuple(v_548)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_552: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_551),2-proj-3-tuple(v_545),3-proj-3-tuple(v_545)))) in
        {195}let v_553: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_519)) && success?(symmetricstatepack(1-proj-3-tuple(v_551),2-proj-3-tuple(v_545),3-proj-3-tuple(v_545)))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then symmetricstatepack(1-proj-3-tuple(v_552),2-proj-3-tuple(v_552),hash(3-proj-3-tuple(v_552),3-proj-3-tuple(v_519))) else fail-any) else fail-any)) in
        {196}let v_554: bitstring = catch-fail((if success?(3-proj-3-tuple(v_519)) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if not-caught-fail(v_553) then (v_553,2-proj-3-tuple(v_551),3-proj-3-tuple(v_551)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_555: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_554),2-proj-7-tuple(v_518),3-proj-7-tuple(v_518),4-proj-7-tuple(v_518),v_529,6-proj-7-tuple(v_518),7-proj-7-tuple(v_518))) in
        {198}let v_556: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_554))) in
        {199}let v_557: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_556),zero)) in
        {200}let v_558: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_556),zero)) in
        {201}let v_559: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_556),zero)) in
        {202}let v_560: bitstring = catch-fail((if success?(2-proj-3-tuple(v_556)) then (if not-caught-fail(v_557) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (v_557,v_558,v_559) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let v_561: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_560)) then cipherstatepack(1-proj-3-tuple(v_560),minnonce) else fail-any)) in
        {204}let v_562: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_560)) then cipherstatepack(2-proj-3-tuple(v_560),minnonce) else fail-any)) in
        {205}let v_563: bitstring = catch-fail((if success?(1-proj-3-tuple(v_554)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (1-proj-3-tuple(v_554),v_561,v_562) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let (hs_564: handshakestate,plaintext_a: bitstring,valid: bool,cs1_565: cipherstate,cs2_566: cipherstate) = (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-7-tuple(v_518))))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then (if not-caught-fail(v_520) then (if not-caught-fail(v_528) then (if not-caught-fail(v_529) then (if not-caught-fail(v_531) then (if not-caught-fail(v_537) then (if not-caught-fail(v_544) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then (if (v_520 && 3-proj-3-tuple(v_554)) then (if not-caught-fail(v_555) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (v_555,2-proj-3-tuple(v_554),true,2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {207}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {208}event RecvEnd(valid)
    ) | (
        {210}event LeakPsk(phase0,alice,bob);
        {211}out(pub, key_psk(alice,bob))
    ) | (
        {212}phase 1;
        {213}event LeakPsk(phase1,alice,bob);
        {214}out(pub, key_psk(alice,bob))
    ) | (
        {215}event LeakS(phase0,bob);
        {216}out(pub, key_s(bob))
    ) | (
        {217}phase 1;
        {218}event LeakS(phase1,bob);
        {219}out(pub, key_s(bob))
    )
) | (
    {220}let v_567: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {221}let s_568: keypair = (if not-caught-fail(v_567) then keypairpack(validkey(v_567),key_s(bob)) else fail-any) in
    {222}out(pub, getpublickey(s_568));
    (
        {223}let e_569: keypair = keypairpack(empty,empty) in
        {224}let rs_570: key = empty in
        {225}let re_571: key = empty in
        {226}let v_572: bitstring = catch-fail(hash(somename,empty)) in
        {227}let v_573: key = catch-fail(v_572) in
        {228}let v_574: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {229}let v_575: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (if not-caught-fail(v_574) then symmetricstatepack(v_574,v_573,v_572) else fail-any) else fail-any) else fail-any))) in
        {230}let v_576: symmetricstate = catch-fail((if success?((if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (if not-caught-fail(v_574) then symmetricstatepack(v_574,v_573,v_572) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then symmetricstatepack(1-proj-3-tuple(v_575),2-proj-3-tuple(v_575),hash(3-proj-3-tuple(v_575),empty)) else fail-any) else fail-any)) in
        {231}let v_577: bitstring = catch-fail(symmetricstateunpack(v_576)) in
        {232}let v_578: symmetricstate = catch-fail((if success?(getpublickey(s_568)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_577),hash(3-proj-3-tuple(v_577),getpublickey(s_568))) else fail-any) else fail-any)) in
        {233}let hs_579: handshakestate = (if not-caught-fail(v_576) then (if not-caught-fail(v_578) then handshakestatepack(v_578,s_568,e_569,rs_570,re_571,key_psk(charlie,bob),false) else fail-any) else fail-any) in
        {234}insert statestore(bob,charlie,sid,statepack_a(hs_579))
    ) | (
        {285}get statestore(=bob,=charlie,=sid,statepack_a(hs_580: handshakestate)) in
        {235}in(pub, message_a_581: bitstring);
        {236}let v_582: bitstring = catch-fail(handshakestateunpack(hs_580)) in
        {237}let v_583: bitstring = catch-fail(deconcat3(message_a_581)) in
        {238}let v_584: bool = catch-fail(true) in
        {239}let v_585: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_582))) in
        {240}let v_586: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_585),6-proj-7-tuple(v_582))) in
        {241}let v_587: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_585),6-proj-7-tuple(v_582))) in
        {242}let v_588: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_585),6-proj-7-tuple(v_582))) in
        {243}let v_589: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_582)) && success?(2-proj-3-tuple(v_585))) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (v_586,v_587,v_588) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_590: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_585),1-proj-3-tuple(v_589),3-proj-3-tuple(v_585)))) in
        {245}let v_591: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_589)) && success?(symmetricstatepack(1-proj-3-tuple(v_585),1-proj-3-tuple(v_589),3-proj-3-tuple(v_585)))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_590),hash(3-proj-3-tuple(v_590),2-proj-3-tuple(v_589))) else fail-any) else fail-any))) in
        {246}let v_592: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_582)) && success?(1-proj-7-tuple(v_582))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_589)) then cipherstatepack(3-proj-3-tuple(v_589),minnonce) else fail-any),1-proj-3-tuple(v_589),3-proj-3-tuple(v_591)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_593: key = catch-fail(1-proj-3-tuple(v_583)) in
        {248}let v_594: bitstring = catch-fail(symmetricstateunpack(v_592)) in
        {249}let v_595: symmetricstate = catch-fail((if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),v_593)) else fail-any)) in
        {250}let v_596: bitstring = catch-fail(symmetricstateunpack(v_595)) in
        {251}let v_597: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_596),v_593)) in
        {252}let v_598: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_596),v_593)) in
        {253}let v_599: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_596),v_593)) in
        {254}let v_600: bitstring = catch-fail((if success?(2-proj-3-tuple(v_596)) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then (if not-caught-fail(v_599) then (v_597,v_598,v_599) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_601: symmetricstate = catch-fail((if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_600)) then cipherstatepack(2-proj-3-tuple(v_600),minnonce) else fail-any),1-proj-3-tuple(v_600),3-proj-3-tuple(v_596)) else fail-any) else fail-any)) in
        {256}let v_602: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_582))) in
        {257}let v_603: bitstring = catch-fail(symmetricstateunpack(v_601)) in
        {258}let v_604: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_603),(if success?(2-proj-7-tuple(v_582)) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),v_593) else fail-any) else fail-any))) in
        {259}let v_605: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_603),(if success?(2-proj-7-tuple(v_582)) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),v_593) else fail-any) else fail-any))) in
        {260}let v_606: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_603),(if success?(2-proj-7-tuple(v_582)) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),v_593) else fail-any) else fail-any))) in
        {261}let v_607: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_582)) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),v_593) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_603))) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then (v_604,v_605,v_606) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_608: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_582)) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then dhexp(2-proj-2-tuple(v_602),v_593) else fail-any) else fail-any)) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_607)) then cipherstatepack(2-proj-3-tuple(v_607),minnonce) else fail-any),1-proj-3-tuple(v_607),3-proj-3-tuple(v_603)) else fail-any) else fail-any) else fail-any)) in
        {263}let v_609: bitstring = catch-fail(symmetricstateunpack(v_608)) in
        {264}let v_610: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_609))) in
        {265}let v_611: aead = catch-fail(decrypt(1-proj-2-tuple(v_610),2-proj-2-tuple(v_610),3-proj-3-tuple(v_609),3-proj-3-tuple(v_583))) in
        {266}let v_612: bitstring = catch-fail(aeadunpack(v_611)) in
        {267}let v_613: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_609))) in
        {268}let v_614: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_610))) && success?(1-proj-3-tuple(v_609))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then cipherstatepack(1-proj-2-tuple(v_613),increment_nonce(2-proj-2-tuple(v_610))) else fail-any) else fail-any)) in
        {269}let v_615: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_583)) && (success?(3-proj-3-tuple(v_609)) && success?(1-proj-3-tuple(v_609)))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then (if not-caught-fail(v_611) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if not-caught-fail(v_614) then (v_614,3-proj-3-tuple(v_612),1-proj-3-tuple(v_612)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_616: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_615),2-proj-3-tuple(v_609),3-proj-3-tuple(v_609)))) in
        {271}let v_617: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_583)) && success?(symmetricstatepack(1-proj-3-tuple(v_615),2-proj-3-tuple(v_609),3-proj-3-tuple(v_609)))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack(1-proj-3-tuple(v_616),2-proj-3-tuple(v_616),hash(3-proj-3-tuple(v_616),3-proj-3-tuple(v_583))) else fail-any) else fail-any)) in
        {272}let v_618: bitstring = catch-fail((if success?(3-proj-3-tuple(v_583)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if not-caught-fail(v_617) then (v_617,2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_619: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_618),2-proj-7-tuple(v_582),3-proj-7-tuple(v_582),4-proj-7-tuple(v_582),v_593,6-proj-7-tuple(v_582),7-proj-7-tuple(v_582))) in
        {274}let v_620: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_618))) in
        {275}let v_621: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_620),zero)) in
        {276}let v_622: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_620),zero)) in
        {277}let v_623: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_620),zero)) in
        {278}let v_624: bitstring = catch-fail((if success?(2-proj-3-tuple(v_620)) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (if not-caught-fail(v_623) then (v_621,v_622,v_623) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {279}let v_625: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_624)) then cipherstatepack(1-proj-3-tuple(v_624),minnonce) else fail-any)) in
        {280}let v_626: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_624)) then cipherstatepack(2-proj-3-tuple(v_624),minnonce) else fail-any)) in
        {281}let v_627: bitstring = catch-fail((if success?(1-proj-3-tuple(v_618)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (1-proj-3-tuple(v_618),v_625,v_626) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {282}let (hs_628: handshakestate,plaintext_a_629: bitstring,valid_630: bool,cs1_631: cipherstate,cs2_632: cipherstate) = (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-7-tuple(v_582))))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if not-caught-fail(v_584) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (if not-caught-fail(v_595) then (if not-caught-fail(v_601) then (if not-caught-fail(v_608) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (v_584 && 3-proj-3-tuple(v_618)) then (if not-caught-fail(v_619) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (v_619,2-proj-3-tuple(v_618),true,2-proj-3-tuple(v_627),3-proj-3-tuple(v_627)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {283}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_629);
        {284}event RecvEnd(valid_630)
    ) | (
        {286}event LeakPsk(phase0,charlie,bob);
        {287}out(pub, key_psk(charlie,bob))
    ) | (
        {288}phase 1;
        {289}event LeakPsk(phase1,charlie,bob);
        {290}out(pub, key_psk(charlie,bob))
    ) | (
        {291}event LeakS(phase0,bob);
        {292}out(pub, key_s(bob))
    ) | (
        {293}phase 1;
        {294}event LeakS(phase1,bob);
        {295}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_750,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_750,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 38 rules in the queue.
400 rules inserted. The rule base contains 378 rules. 43 rules in the queue.
600 rules inserted. The rule base contains 531 rules. 75 rules in the queue.
800 rules inserted. The rule base contains 553 rules. 13 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775175]),msg_a(alice,bob,sid[!1 = @sid_30775175]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30775176]),msg_a(alice,bob,sid[!1 = @sid_30775175])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_750,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775184]),msg_a(alice,bob,sid[!1 = @sid_30775184]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30775185]),msg_a(alice,bob,sid[!1 = @sid_30775184])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_750,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_750,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775194]),msg_a(alice,bob,sid[!1 = @sid_30775194]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30775195]),msg_a(alice,bob,sid[!1 = @sid_30775194])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_750,stagepack_a(sid_a),m)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775204]),msg_a(alice,bob,sid[!1 = @sid_30775204]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30775205]),msg_a(alice,bob,sid[!1 = @sid_30775204])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakPsk(phase0,alice,bob)) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775213]),msg_a(alice,bob,sid[!1 = @sid_30775213]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_30775214]),msg_a(alice,bob,sid[!1 = @sid_30775213])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775221]),msg_a(alice,bob,sid[!1 = @sid_30775221]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775221]))
Abbreviations:
sid_30775333 = sid[!1 = @sid_30775309]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30775333,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_30775333,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30775333,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stagepack_a(sid_30775333),msg_a(alice,bob,sid_30775333)) may be executed at {66}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333))) may be sent on channel pub at output {67}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {72}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {73}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {146}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {215}.
So the message key_s(bob) may be sent on channel pub at output {216}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775333),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775333),g))),msg_a(alice,bob,sid_30775333)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30775333) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30775333)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775335]),msg_a(alice,bob,sid[!1 = @sid_30775335]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775335]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775337]),msg_a(alice,bob,sid[!1 = @sid_30775337]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775337]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775339]),msg_a(alice,bob,sid[!1 = @sid_30775339]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775339]))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775342]),msg_a(alice,bob,sid[!1 = @sid_30775342]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775342]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775358]),msg_a(alice,bob,sid[!1 = @sid_30775358]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775358]))
Abbreviations:
sid_30775470 = sid[!1 = @sid_30775446]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30775470,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_30775470,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30775470,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stagepack_a(sid_30775470),msg_a(alice,bob,sid_30775470)) may be executed at {66}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470))) may be sent on channel pub at output {67}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {72}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {73}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {146}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {215}.
So the message key_s(bob) may be sent on channel pub at output {216}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775470),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775470),g))),msg_a(alice,bob,sid_30775470)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30775470) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30775470)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775472]),msg_a(alice,bob,sid[!1 = @sid_30775472]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_30775472]))
Abbreviations:
sid_30775584 = sid[!1 = @sid_30775560]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_30775584,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_30775584,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30775584,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stagepack_a(sid_30775584),msg_a(alice,bob,sid_30775584)) may be executed at {66}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584))) may be sent on channel pub at output {67}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {72}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {73}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {146}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
So the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(bob),g))).

19. By 14, the attacker may know hash(somename,empty) in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

20. By 19, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 18, the attacker may know validkey(dhexp_real(key_s(bob),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)))).

23. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

24. The event LeakS(phase0,bob) may be executed at {215}.
So the message key_s(bob) may be sent on channel pub at output {216}.
mess(pub,key_s(bob)).

25. By 1, the attacker may have the channel pub.
By 24, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

26. By 25, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

27. By 26, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))).

28. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

29. By 28, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g)))).

30. By 29, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))) in phase 1.
By 27, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g)))).

31. By 30, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))) in phase 1.
By 23, the attacker may know minnonce in phase 1.
By 22, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775584),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584))).

32. By 31, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775584),g))),msg_a(alice,bob,sid_30775584)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_30775584) in phase 1.
attacker_p1(msg_a(alice,bob,sid_30775584)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_30775585]),msg_a(alice,bob,sid[!1 = @sid_30775585]))) -> end(RecvEnd(true))
Abbreviations:
sid_30775613 = sid[!1 = @sid_30775589]
sid_30775614 = sid[!1 = @sid_30775606]

1. The entry statestore(bob,alice,sid_30775614,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) may be inserted in a table at insert {158}.
table(statestore(bob,alice,sid_30775614,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false)))).

2. The entry statestore(alice,bob,sid_30775613,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {17}.
table(statestore(alice,bob,sid_30775613,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_30775613,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(empty,empty),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {68}.
The event SendMsg(alice,bob,stagepack_a(sid_30775613),msg_a(alice,bob,sid_30775613)) may be executed at {66}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775613),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775613),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775613),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775613),g))),msg_a(alice,bob,sid_30775613))) may be sent on channel pub at output {67}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775613),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775613),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775613),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775613),g))),msg_a(alice,bob,sid_30775613)))).

4. The entry statestore(bob,alice,sid_30775614,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),empty,empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {209}.
The message concat3(validkey(dhexp_real(key_e(alice,bob,sid_30775613),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_30775613),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_30775613),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_30775613),g))),msg_a(alice,bob,sid_30775613))) that may be sent on channel pub by 3 may be received at input {159}.
So event RecvEnd(true) may be executed at {208}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
