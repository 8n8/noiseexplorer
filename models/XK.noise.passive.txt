File "XK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XK.noise.passive.pv", line 274, character 7 - line 274, character 8:
Warning: identifier ck rebound.
File "XK.noise.passive.pv", line 275, character 7 - line 275, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 275, character 36 - line 275, character 36:
Warning: identifier h rebound.
File "XK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 305, character 6 - line 305, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 310, character 6 - line 310, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 316, character 6 - line 316, character 6:
Warning: identifier e rebound.
File "XK.noise.passive.pv", line 317, character 6 - line 317, character 7:
Warning: identifier ne rebound.
File "XK.noise.passive.pv", line 318, character 6 - line 318, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 320, character 6 - line 320, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 321, character 7 - line 321, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 321, character 26 - line 321, character 36:
Warning: identifier ciphertext2 rebound.
File "XK.noise.passive.pv", line 322, character 6 - line 322, character 7:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 329, character 6 - line 329, character 6:
Warning: identifier e rebound.
File "XK.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ne rebound.
File "XK.noise.passive.pv", line 331, character 6 - line 331, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 334, character 7 - line 334, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 334, character 26 - line 334, character 36:
Warning: identifier ciphertext2 rebound.
File "XK.noise.passive.pv", line 335, character 6 - line 335, character 7:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 342, character 6 - line 342, character 6:
Warning: identifier s rebound.
File "XK.noise.passive.pv", line 343, character 7 - line 343, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 343, character 26 - line 343, character 36:
Warning: identifier ciphertext1 rebound.
File "XK.noise.passive.pv", line 344, character 6 - line 344, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 345, character 7 - line 345, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 345, character 26 - line 345, character 36:
Warning: identifier ciphertext2 rebound.
File "XK.noise.passive.pv", line 346, character 6 - line 346, character 7:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 353, character 7 - line 353, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 353, character 26 - line 353, character 36:
Warning: identifier ciphertext2 rebound.
File "XK.noise.passive.pv", line 354, character 6 - line 354, character 7:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 363, character 6 - line 363, character 7:
Warning: identifier re rebound.
File "XK.noise.passive.pv", line 364, character 6 - line 364, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 366, character 6 - line 366, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 367, character 7 - line 367, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 369, character 7 - line 369, character 8:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 377, character 6 - line 377, character 7:
Warning: identifier re rebound.
File "XK.noise.passive.pv", line 378, character 6 - line 378, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 380, character 6 - line 380, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 381, character 7 - line 381, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 383, character 7 - line 383, character 8:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 391, character 7 - line 391, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 391, character 48 - line 391, character 53:
Warning: identifier valid1 rebound.
File "XK.noise.passive.pv", line 392, character 6 - line 392, character 7:
Warning: identifier rs rebound.
File "XK.noise.passive.pv", line 393, character 6 - line 393, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 394, character 7 - line 394, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 396, character 7 - line 396, character 8:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 404, character 7 - line 404, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 406, character 7 - line 406, character 8:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 554, character 8 - line 554, character 9:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 404, character 7 - line 404, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 406, character 7 - line 406, character 8:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 546, character 8 - line 546, character 9:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 342, character 6 - line 342, character 6:
Warning: identifier s rebound.
File "XK.noise.passive.pv", line 343, character 7 - line 343, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 343, character 26 - line 343, character 36:
Warning: identifier ciphertext1 rebound.
File "XK.noise.passive.pv", line 344, character 6 - line 344, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 345, character 7 - line 345, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 345, character 26 - line 345, character 36:
Warning: identifier ciphertext2 rebound.
File "XK.noise.passive.pv", line 346, character 6 - line 346, character 7:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 539, character 8 - line 539, character 9:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 377, character 6 - line 377, character 7:
Warning: identifier re rebound.
File "XK.noise.passive.pv", line 378, character 6 - line 378, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 380, character 6 - line 380, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 381, character 7 - line 381, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 383, character 7 - line 383, character 8:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 531, character 8 - line 531, character 9:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 316, character 6 - line 316, character 6:
Warning: identifier e rebound.
File "XK.noise.passive.pv", line 317, character 6 - line 317, character 7:
Warning: identifier ne rebound.
File "XK.noise.passive.pv", line 318, character 6 - line 318, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 320, character 6 - line 320, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 321, character 7 - line 321, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 321, character 26 - line 321, character 36:
Warning: identifier ciphertext2 rebound.
File "XK.noise.passive.pv", line 322, character 6 - line 322, character 7:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 305, character 6 - line 305, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 604, character 8 - line 604, character 9:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 353, character 7 - line 353, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 353, character 26 - line 353, character 36:
Warning: identifier ciphertext2 rebound.
File "XK.noise.passive.pv", line 354, character 6 - line 354, character 7:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 597, character 8 - line 597, character 9:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 391, character 7 - line 391, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 391, character 48 - line 391, character 53:
Warning: identifier valid1 rebound.
File "XK.noise.passive.pv", line 392, character 6 - line 392, character 7:
Warning: identifier rs rebound.
File "XK.noise.passive.pv", line 393, character 6 - line 393, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 394, character 7 - line 394, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 396, character 7 - line 396, character 8:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 589, character 8 - line 589, character 9:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 329, character 6 - line 329, character 6:
Warning: identifier e rebound.
File "XK.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ne rebound.
File "XK.noise.passive.pv", line 331, character 6 - line 331, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 334, character 7 - line 334, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 334, character 26 - line 334, character 36:
Warning: identifier ciphertext2 rebound.
File "XK.noise.passive.pv", line 335, character 6 - line 335, character 7:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XK.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 582, character 8 - line 582, character 9:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 363, character 6 - line 363, character 7:
Warning: identifier re rebound.
File "XK.noise.passive.pv", line 364, character 6 - line 364, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 366, character 6 - line 366, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 367, character 7 - line 367, character 8:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 369, character 7 - line 369, character 8:
Warning: identifier hs rebound.
File "XK.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XK.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XK.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XK.noise.passive.pv", line 310, character 6 - line 310, character 7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_570: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_570));
    (
        {4}let e_571: keypair = keypairpack(empty,empty) in
        {5}let v_572: key = catch-fail(dhexp(key_s(bob),g)) in
        {6}let rs_573: key = getpublickey((if not-caught-fail(v_572) then keypairpack(v_572,key_s(bob)) else fail-any)) in
        {7}let re_574: key = empty in
        {8}let v_575: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_576: key = catch-fail(v_575) in
        {10}let v_577: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_578: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then symmetricstatepack(v_577,v_576,v_575) else fail-any) else fail-any) else fail-any))) in
        {12}let v_579: symmetricstate = catch-fail((if success?((if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then symmetricstatepack(v_577,v_576,v_575) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then symmetricstatepack(1-proj-3-tuple(v_578),2-proj-3-tuple(v_578),hash(3-proj-3-tuple(v_578),empty)) else fail-any) else fail-any)) in
        {13}let v_580: bitstring = catch-fail(symmetricstateunpack(v_579)) in
        {14}let v_581: symmetricstate = catch-fail((if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_580),hash(3-proj-3-tuple(v_580),rs_573)) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_579) then (if not-caught-fail(v_581) then handshakestatepack(v_581,s_570,e_571,rs_573,re_574,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {46}get statestore(=alice,=bob,statepack_a(hs_582: handshakestate)) in
        {17}let v_583: bitstring = catch-fail(handshakestateunpack(hs_582)) in
        {18}let v_584: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_585: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_586: keypair = catch-fail((if not-caught-fail(v_585) then keypairpack(v_585,key_e(alice,bob)) else fail-any)) in
        {21}let v_587: bitstring = catch-fail(getpublickey(v_586)) in
        {22}let v_588: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_583))) in
        {23}let v_589: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_583)) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then symmetricstatepack(1-proj-3-tuple(v_588),2-proj-3-tuple(v_588),hash(3-proj-3-tuple(v_588),v_587)) else fail-any) else fail-any)) in
        {24}let v_590: bitstring = catch-fail(keypairunpack(v_586)) in
        {25}let v_591: bitstring = catch-fail(symmetricstateunpack(v_589)) in
        {26}let v_592: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_591),(if success?(4-proj-7-tuple(v_583)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),4-proj-7-tuple(v_583)) else fail-any) else fail-any))) in
        {27}let v_593: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_591),(if success?(4-proj-7-tuple(v_583)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),4-proj-7-tuple(v_583)) else fail-any) else fail-any))) in
        {28}let v_594: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_591),(if success?(4-proj-7-tuple(v_583)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),4-proj-7-tuple(v_583)) else fail-any) else fail-any))) in
        {29}let v_595: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_583)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),4-proj-7-tuple(v_583)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_591))) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (v_592,v_593,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_596: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_583)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then dhexp(2-proj-2-tuple(v_590),4-proj-7-tuple(v_583)) else fail-any) else fail-any)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-3-tuple(v_595))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_595)) then cipherstatepack(2-proj-3-tuple(v_595),minnonce) else fail-any),1-proj-3-tuple(v_595),3-proj-3-tuple(v_591)) else fail-any) else fail-any) else fail-any)) in
        {31}let v_597: bitstring = catch-fail(symmetricstateunpack(v_596)) in
        {32}let v_598: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_597))) in
        {33}let v_599: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_598),2-proj-2-tuple(v_598),3-proj-3-tuple(v_597),msg_a(alice,bob))) in
        {34}let v_600: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_597))) in
        {35}let v_601: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_598))) && success?(1-proj-3-tuple(v_597))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then cipherstatepack(1-proj-2-tuple(v_600),increment_nonce(2-proj-2-tuple(v_598))) else fail-any) else fail-any)) in
        {36}let v_602: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_597)) && success?(1-proj-3-tuple(v_597))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then (if not-caught-fail(v_599) then (if not-caught-fail(v_601) then (v_601,v_599) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_603: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_602),2-proj-3-tuple(v_597),3-proj-3-tuple(v_597)))) in
        {38}let v_604: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_602)) && success?(symmetricstatepack(1-proj-2-tuple(v_602),2-proj-3-tuple(v_597),3-proj-3-tuple(v_597)))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_603),hash(3-proj-3-tuple(v_603),2-proj-2-tuple(v_602))) else fail-any) else fail-any)) in
        {39}let v_605: bitstring = catch-fail((if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if not-caught-fail(v_604) then (v_604,2-proj-2-tuple(v_602)) else fail-any) else fail-any) else fail-any)) in
        {40}let v_606: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_605),2-proj-7-tuple(v_583),v_586,4-proj-7-tuple(v_583),5-proj-7-tuple(v_583),6-proj-7-tuple(v_583),7-proj-7-tuple(v_583))) in
        {41}let v_607: bitstring = catch-fail(concat3(v_587,2-proj-3-tuple(v_584),2-proj-2-tuple(v_605))) in
        {42}let (hs_608: handshakestate,re_609: key,message_a: bitstring) = (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-7-tuple(v_583))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (if not-caught-fail(v_589) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then (if not-caught-fail(v_606) then (if not-caught-fail(v_607) then (v_606,5-proj-7-tuple(v_583),v_607) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {43}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {44}insert statestore(alice,bob,statepack_b(hs_608));
        {45}out(pub, message_a)
    ) | (
        {75}get statestore(=alice,=bob,statepack_b(hs_610: handshakestate)) in
        {47}in(pub, message_b: bitstring);
        {48}let v_611: bitstring = catch-fail(handshakestateunpack(hs_610)) in
        {49}let v_612: bitstring = catch-fail(deconcat3(message_b)) in
        {50}let v_613: bool = catch-fail(true) in
        {51}let v_614: key = catch-fail(1-proj-3-tuple(v_612)) in
        {52}let v_615: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_611))) in
        {53}let v_616: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_611)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then symmetricstatepack(1-proj-3-tuple(v_615),2-proj-3-tuple(v_615),hash(3-proj-3-tuple(v_615),v_614)) else fail-any) else fail-any)) in
        {54}let v_617: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_611))) in
        {55}let v_618: bitstring = catch-fail(symmetricstateunpack(v_616)) in
        {56}let v_619: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_618),(if success?(3-proj-7-tuple(v_611)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_614) else fail-any) else fail-any))) in
        {57}let v_620: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_618),(if success?(3-proj-7-tuple(v_611)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_614) else fail-any) else fail-any))) in
        {58}let v_621: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_618),(if success?(3-proj-7-tuple(v_611)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_614) else fail-any) else fail-any))) in
        {59}let v_622: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_611)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_614) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_618))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (v_619,v_620,v_621) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_623: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_611)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),v_614) else fail-any) else fail-any)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_622)) then cipherstatepack(2-proj-3-tuple(v_622),minnonce) else fail-any),1-proj-3-tuple(v_622),3-proj-3-tuple(v_618)) else fail-any) else fail-any) else fail-any)) in
        {61}let v_624: bitstring = catch-fail(symmetricstateunpack(v_623)) in
        {62}let v_625: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_624))) in
        {63}let v_626: aead = catch-fail(decrypt(1-proj-2-tuple(v_625),2-proj-2-tuple(v_625),3-proj-3-tuple(v_624),3-proj-3-tuple(v_612))) in
        {64}let v_627: bitstring = catch-fail(aeadunpack(v_626)) in
        {65}let v_628: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_624))) in
        {66}let v_629: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_625))) && success?(1-proj-3-tuple(v_624))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-2-tuple(v_628))))) then cipherstatepack(1-proj-2-tuple(v_628),increment_nonce(2-proj-2-tuple(v_625))) else fail-any) else fail-any)) in
        {67}let v_630: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_612)) && (success?(3-proj-3-tuple(v_624)) && success?(1-proj-3-tuple(v_624)))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then (if not-caught-fail(v_626) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if not-caught-fail(v_629) then (v_629,3-proj-3-tuple(v_627),1-proj-3-tuple(v_627)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_631: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_630),2-proj-3-tuple(v_624),3-proj-3-tuple(v_624)))) in
        {69}let v_632: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_612)) && success?(symmetricstatepack(1-proj-3-tuple(v_630),2-proj-3-tuple(v_624),3-proj-3-tuple(v_624)))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then symmetricstatepack(1-proj-3-tuple(v_631),2-proj-3-tuple(v_631),hash(3-proj-3-tuple(v_631),3-proj-3-tuple(v_612))) else fail-any) else fail-any)) in
        {70}let v_633: bitstring = catch-fail((if success?(3-proj-3-tuple(v_612)) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if not-caught-fail(v_632) then (v_632,2-proj-3-tuple(v_630),3-proj-3-tuple(v_630)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_634: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_633),2-proj-7-tuple(v_611),3-proj-7-tuple(v_611),4-proj-7-tuple(v_611),v_614,6-proj-7-tuple(v_611),7-proj-7-tuple(v_611))) in
        {72}let (hs_635: handshakestate,re_636: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-7-tuple(v_611))))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (if not-caught-fail(v_616) then (if not-caught-fail(v_623) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if (v_613 && 3-proj-3-tuple(v_633)) then (if not-caught-fail(v_634) then (v_634,getpublickey(3-proj-7-tuple(v_611)),2-proj-3-tuple(v_633),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {73}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {74}insert statestore(alice,bob,statepack_c(hs_635))
    ) | (
        {111}get statestore(=alice,=bob,statepack_c(hs_637: handshakestate)) in
        {76}let v_638: bitstring = catch-fail(handshakestateunpack(hs_637)) in
        {77}let v_639: bitstring = catch-fail((empty,empty,empty)) in
        {78}let v_640: key = catch-fail(dhexp(key_s(alice),g)) in
        {79}let v_641: keypair = catch-fail((if not-caught-fail(v_640) then keypairpack(v_640,key_s(alice)) else fail-any)) in
        {80}let v_642: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_638))) in
        {81}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {82}let v_644: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_643),2-proj-2-tuple(v_643),3-proj-3-tuple(v_642),getpublickey(v_641))) in
        {83}let v_645: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_642))) in
        {84}let v_646: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_643))) && success?(1-proj-3-tuple(v_642))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then cipherstatepack(1-proj-2-tuple(v_645),increment_nonce(2-proj-2-tuple(v_643))) else fail-any) else fail-any)) in
        {85}let v_647: bitstring = catch-fail((if (success?(getpublickey(v_641)) && (success?(3-proj-3-tuple(v_642)) && success?(1-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then (if not-caught-fail(v_644) then (if not-caught-fail(v_646) then (v_646,v_644) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_648: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) in
        {87}let v_649: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_647)) && success?(symmetricstatepack(1-proj-2-tuple(v_647),2-proj-3-tuple(v_642),3-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_648),hash(3-proj-3-tuple(v_648),2-proj-2-tuple(v_647))) else fail-any) else fail-any)) in
        {88}let v_650: bitstring = catch-fail((if (success?(getpublickey(v_641)) && success?(1-proj-7-tuple(v_638))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-2-tuple(v_647))))) then (if not-caught-fail(v_649) then (v_649,2-proj-2-tuple(v_647)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_651: bitstring = catch-fail(keypairunpack(v_641)) in
        {90}let v_652: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_650))) in
        {91}let v_653: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_652),(if success?(5-proj-7-tuple(v_638)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then dhexp(2-proj-2-tuple(v_651),5-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
        {92}let v_654: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_652),(if success?(5-proj-7-tuple(v_638)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then dhexp(2-proj-2-tuple(v_651),5-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
        {93}let v_655: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_652),(if success?(5-proj-7-tuple(v_638)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then dhexp(2-proj-2-tuple(v_651),5-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
        {94}let v_656: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_638)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then dhexp(2-proj-2-tuple(v_651),5-proj-7-tuple(v_638)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_652))) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then (v_653,v_654,v_655) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_657: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_638)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then dhexp(2-proj-2-tuple(v_651),5-proj-7-tuple(v_638)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_650))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_656)) then cipherstatepack(2-proj-3-tuple(v_656),minnonce) else fail-any),1-proj-3-tuple(v_656),3-proj-3-tuple(v_652)) else fail-any) else fail-any) else fail-any)) in
        {96}let v_658: bitstring = catch-fail(symmetricstateunpack(v_657)) in
        {97}let v_659: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_658))) in
        {98}let v_660: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_659),2-proj-2-tuple(v_659),3-proj-3-tuple(v_658),msg_c(alice,bob))) in
        {99}let v_661: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_658))) in
        {100}let v_662: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_659))) && success?(1-proj-3-tuple(v_658))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then cipherstatepack(1-proj-2-tuple(v_661),increment_nonce(2-proj-2-tuple(v_659))) else fail-any) else fail-any)) in
        {101}let v_663: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_658)) && success?(1-proj-3-tuple(v_658))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_662) then (v_662,v_660) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_664: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_663),2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)))) in
        {103}let v_665: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_663)) && success?(symmetricstatepack(1-proj-2-tuple(v_663),2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then symmetricstatepack(1-proj-3-tuple(v_664),2-proj-3-tuple(v_664),hash(3-proj-3-tuple(v_664),2-proj-2-tuple(v_663))) else fail-any) else fail-any)) in
        {104}let v_666: bitstring = catch-fail((if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-2-tuple(v_663))))) then (if not-caught-fail(v_665) then (v_665,2-proj-2-tuple(v_663)) else fail-any) else fail-any) else fail-any)) in
        {105}let v_667: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_666),v_641,3-proj-7-tuple(v_638),4-proj-7-tuple(v_638),5-proj-7-tuple(v_638),6-proj-7-tuple(v_638),7-proj-7-tuple(v_638))) in
        {106}let v_668: bitstring = catch-fail(concat3(1-proj-3-tuple(v_639),2-proj-2-tuple(v_650),2-proj-2-tuple(v_666))) in
        {107}let (hs_669: handshakestate,re_670: key,message_c: bitstring) = (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-7-tuple(v_638))))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_657) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (v_667,5-proj-7-tuple(v_638),v_668) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {108}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {109}insert statestore(alice,bob,statepack_d(hs_669));
        {110}out(pub, message_c)
    ) | (
        {139}get statestore(=alice,=bob,statepack_d(hs_671: handshakestate)) in
        {112}in(pub, message_d: bitstring);
        {113}let v_672: bitstring = catch-fail(handshakestateunpack(hs_671)) in
        {114}let v_673: bitstring = catch-fail(deconcat3(message_d)) in
        {115}let v_674: bool = catch-fail(true) in
        {116}let v_675: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_672))) in
        {117}let v_676: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {118}let v_677: aead = catch-fail(decrypt(1-proj-2-tuple(v_676),2-proj-2-tuple(v_676),3-proj-3-tuple(v_675),3-proj-3-tuple(v_673))) in
        {119}let v_678: bitstring = catch-fail(aeadunpack(v_677)) in
        {120}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {121}let v_680: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_676))) && success?(1-proj-3-tuple(v_675))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then cipherstatepack(1-proj-2-tuple(v_679),increment_nonce(2-proj-2-tuple(v_676))) else fail-any) else fail-any)) in
        {122}let v_681: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_673)) && (success?(3-proj-3-tuple(v_675)) && success?(1-proj-3-tuple(v_675)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if not-caught-fail(v_680) then (v_680,3-proj-3-tuple(v_678),1-proj-3-tuple(v_678)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_682: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) in
        {124}let v_683: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_673)) && success?(symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),3-proj-3-tuple(v_673))) else fail-any) else fail-any)) in
        {125}let v_684: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_673)) && success?(1-proj-7-tuple(v_672))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if not-caught-fail(v_683) then (v_683,2-proj-3-tuple(v_681),3-proj-3-tuple(v_681)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_685: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_684),2-proj-7-tuple(v_672),3-proj-7-tuple(v_672),4-proj-7-tuple(v_672),5-proj-7-tuple(v_672),6-proj-7-tuple(v_672),7-proj-7-tuple(v_672))) in
        {127}let v_686: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_684))) in
        {128}let v_687: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_686),zero)) in
        {129}let v_688: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_686),zero)) in
        {130}let v_689: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_686),zero)) in
        {131}let v_690: bitstring = catch-fail((if success?(2-proj-3-tuple(v_686)) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (v_687,v_688,v_689) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_691: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_690)) then cipherstatepack(1-proj-3-tuple(v_690),minnonce) else fail-any)) in
        {133}let v_692: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_690)) then cipherstatepack(2-proj-3-tuple(v_690),minnonce) else fail-any)) in
        {134}let v_693: bitstring = catch-fail((if success?(1-proj-3-tuple(v_684)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (1-proj-3-tuple(v_684),v_691,v_692) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let (hs_694: handshakestate,re_695: key,plaintext_d: bitstring,valid_696: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-7-tuple(v_672))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if not-caught-fail(v_674) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if (v_674 && 3-proj-3-tuple(v_684)) then (if not-caught-fail(v_685) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (v_685,getpublickey(3-proj-7-tuple(v_672)),2-proj-3-tuple(v_684),true,2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {136}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_696);
        {137}insert statestore(alice,bob,statepack_e(hs_694));
        {138}event RecvEnd(valid_696)
    ) | (
        {140}event LeakS(phase0,alice);
        {141}out(pub, key_s(alice))
    ) | (
        {142}phase 1;
        {143}event LeakS(phase1,alice);
        {144}out(pub, key_s(alice))
    )
) | (
    {145}let s_697: keypair = keypairpack(empty,empty) in
    {146}out(pub, getpublickey(s_697));
    (
        {147}let e_698: keypair = keypairpack(empty,empty) in
        {148}let v_699: key = catch-fail(dhexp(key_s(charlie),g)) in
        {149}let rs_700: key = getpublickey((if not-caught-fail(v_699) then keypairpack(v_699,key_s(charlie)) else fail-any)) in
        {150}let re_701: key = empty in
        {151}let v_702: bitstring = catch-fail(hash(somename,empty)) in
        {152}let v_703: key = catch-fail(v_702) in
        {153}let v_704: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {154}let v_705: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then symmetricstatepack(v_704,v_703,v_702) else fail-any) else fail-any) else fail-any))) in
        {155}let v_706: symmetricstate = catch-fail((if success?((if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then symmetricstatepack(v_704,v_703,v_702) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then symmetricstatepack(1-proj-3-tuple(v_705),2-proj-3-tuple(v_705),hash(3-proj-3-tuple(v_705),empty)) else fail-any) else fail-any)) in
        {156}let v_707: bitstring = catch-fail(symmetricstateunpack(v_706)) in
        {157}let v_708: symmetricstate = catch-fail((if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),rs_700)) else fail-any)) in
        {158}let hs_709: handshakestate = (if not-caught-fail(v_706) then (if not-caught-fail(v_708) then handshakestatepack(v_708,s_697,e_698,rs_700,re_701,empty,true) else fail-any) else fail-any) in
        {159}insert statestore(alice,charlie,statepack_a(hs_709))
    ) | (
        {189}get statestore(=alice,=charlie,statepack_a(hs_710: handshakestate)) in
        {160}let v_711: bitstring = catch-fail(handshakestateunpack(hs_710)) in
        {161}let v_712: bitstring = catch-fail((empty,empty,empty)) in
        {162}let v_713: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {163}let v_714: keypair = catch-fail((if not-caught-fail(v_713) then keypairpack(v_713,key_e(alice,charlie)) else fail-any)) in
        {164}let v_715: bitstring = catch-fail(getpublickey(v_714)) in
        {165}let v_716: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_711))) in
        {166}let v_717: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_711)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then symmetricstatepack(1-proj-3-tuple(v_716),2-proj-3-tuple(v_716),hash(3-proj-3-tuple(v_716),v_715)) else fail-any) else fail-any)) in
        {167}let v_718: bitstring = catch-fail(keypairunpack(v_714)) in
        {168}let v_719: bitstring = catch-fail(symmetricstateunpack(v_717)) in
        {169}let v_720: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_719),(if success?(4-proj-7-tuple(v_711)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then dhexp(2-proj-2-tuple(v_718),4-proj-7-tuple(v_711)) else fail-any) else fail-any))) in
        {170}let v_721: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_719),(if success?(4-proj-7-tuple(v_711)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then dhexp(2-proj-2-tuple(v_718),4-proj-7-tuple(v_711)) else fail-any) else fail-any))) in
        {171}let v_722: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_719),(if success?(4-proj-7-tuple(v_711)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then dhexp(2-proj-2-tuple(v_718),4-proj-7-tuple(v_711)) else fail-any) else fail-any))) in
        {172}let v_723: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_711)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then dhexp(2-proj-2-tuple(v_718),4-proj-7-tuple(v_711)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_719))) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (v_720,v_721,v_722) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {173}let v_724: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_711)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then dhexp(2-proj-2-tuple(v_718),4-proj-7-tuple(v_711)) else fail-any) else fail-any)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_723)) then cipherstatepack(2-proj-3-tuple(v_723),minnonce) else fail-any),1-proj-3-tuple(v_723),3-proj-3-tuple(v_719)) else fail-any) else fail-any) else fail-any)) in
        {174}let v_725: bitstring = catch-fail(symmetricstateunpack(v_724)) in
        {175}let v_726: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_725))) in
        {176}let v_727: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_726),2-proj-2-tuple(v_726),3-proj-3-tuple(v_725),msg_a(alice,charlie))) in
        {177}let v_728: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_725))) in
        {178}let v_729: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_726))) && success?(1-proj-3-tuple(v_725))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then cipherstatepack(1-proj-2-tuple(v_728),increment_nonce(2-proj-2-tuple(v_726))) else fail-any) else fail-any)) in
        {179}let v_730: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_725)) && success?(1-proj-3-tuple(v_725))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then (if not-caught-fail(v_727) then (if not-caught-fail(v_729) then (v_729,v_727) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {180}let v_731: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_730),2-proj-3-tuple(v_725),3-proj-3-tuple(v_725)))) in
        {181}let v_732: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_730)) && success?(symmetricstatepack(1-proj-2-tuple(v_730),2-proj-3-tuple(v_725),3-proj-3-tuple(v_725)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then symmetricstatepack(1-proj-3-tuple(v_731),2-proj-3-tuple(v_731),hash(3-proj-3-tuple(v_731),2-proj-2-tuple(v_730))) else fail-any) else fail-any)) in
        {182}let v_733: bitstring = catch-fail((if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then (if not-caught-fail(v_732) then (v_732,2-proj-2-tuple(v_730)) else fail-any) else fail-any) else fail-any)) in
        {183}let v_734: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_733),2-proj-7-tuple(v_711),v_714,4-proj-7-tuple(v_711),5-proj-7-tuple(v_711),6-proj-7-tuple(v_711),7-proj-7-tuple(v_711))) in
        {184}let v_735: bitstring = catch-fail(concat3(v_715,2-proj-3-tuple(v_712),2-proj-2-tuple(v_733))) in
        {185}let (hs_736: handshakestate,re_737: key,message_a_738: bitstring) = (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-7-tuple(v_711))))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if not-caught-fail(v_714) then (if not-caught-fail(v_715) then (if not-caught-fail(v_717) then (if not-caught-fail(v_724) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then (if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (v_734,5-proj-7-tuple(v_711),v_735) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {186}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {187}insert statestore(alice,charlie,statepack_b(hs_736));
        {188}out(pub, message_a_738)
    ) | (
        {218}get statestore(=alice,=charlie,statepack_b(hs_739: handshakestate)) in
        {190}in(pub, message_b_740: bitstring);
        {191}let v_741: bitstring = catch-fail(handshakestateunpack(hs_739)) in
        {192}let v_742: bitstring = catch-fail(deconcat3(message_b_740)) in
        {193}let v_743: bool = catch-fail(true) in
        {194}let v_744: key = catch-fail(1-proj-3-tuple(v_742)) in
        {195}let v_745: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_741))) in
        {196}let v_746: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_741)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then symmetricstatepack(1-proj-3-tuple(v_745),2-proj-3-tuple(v_745),hash(3-proj-3-tuple(v_745),v_744)) else fail-any) else fail-any)) in
        {197}let v_747: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_741))) in
        {198}let v_748: bitstring = catch-fail(symmetricstateunpack(v_746)) in
        {199}let v_749: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_748),(if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any))) in
        {200}let v_750: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_748),(if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any))) in
        {201}let v_751: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_748),(if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any))) in
        {202}let v_752: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_748))) then (if not-caught-fail(v_749) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (v_749,v_750,v_751) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let v_753: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_741)) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then dhexp(2-proj-2-tuple(v_747),v_744) else fail-any) else fail-any)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_752)) then cipherstatepack(2-proj-3-tuple(v_752),minnonce) else fail-any),1-proj-3-tuple(v_752),3-proj-3-tuple(v_748)) else fail-any) else fail-any) else fail-any)) in
        {204}let v_754: bitstring = catch-fail(symmetricstateunpack(v_753)) in
        {205}let v_755: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_754))) in
        {206}let v_756: aead = catch-fail(decrypt(1-proj-2-tuple(v_755),2-proj-2-tuple(v_755),3-proj-3-tuple(v_754),3-proj-3-tuple(v_742))) in
        {207}let v_757: bitstring = catch-fail(aeadunpack(v_756)) in
        {208}let v_758: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_754))) in
        {209}let v_759: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_755))) && success?(1-proj-3-tuple(v_754))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then cipherstatepack(1-proj-2-tuple(v_758),increment_nonce(2-proj-2-tuple(v_755))) else fail-any) else fail-any)) in
        {210}let v_760: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_742)) && (success?(3-proj-3-tuple(v_754)) && success?(1-proj-3-tuple(v_754)))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then (if not-caught-fail(v_756) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if not-caught-fail(v_759) then (v_759,3-proj-3-tuple(v_757),1-proj-3-tuple(v_757)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {211}let v_761: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_760),2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)))) in
        {212}let v_762: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_742)) && success?(symmetricstatepack(1-proj-3-tuple(v_760),2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then symmetricstatepack(1-proj-3-tuple(v_761),2-proj-3-tuple(v_761),hash(3-proj-3-tuple(v_761),3-proj-3-tuple(v_742))) else fail-any) else fail-any)) in
        {213}let v_763: bitstring = catch-fail((if success?(3-proj-3-tuple(v_742)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then (if not-caught-fail(v_762) then (v_762,2-proj-3-tuple(v_760),3-proj-3-tuple(v_760)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {214}let v_764: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_763),2-proj-7-tuple(v_741),3-proj-7-tuple(v_741),4-proj-7-tuple(v_741),v_744,6-proj-7-tuple(v_741),7-proj-7-tuple(v_741))) in
        {215}let (hs_765: handshakestate,re_766: key,plaintext_b_767: bitstring,valid_768: bool) = (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-7-tuple(v_741))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if not-caught-fail(v_743) then (if not-caught-fail(v_744) then (if not-caught-fail(v_746) then (if not-caught-fail(v_753) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if (v_743 && 3-proj-3-tuple(v_763)) then (if not-caught-fail(v_764) then (v_764,getpublickey(3-proj-7-tuple(v_741)),2-proj-3-tuple(v_763),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {216}event RecvMsg(alice,charlie,stage_b,plaintext_b_767,valid_768);
        {217}insert statestore(alice,charlie,statepack_c(hs_765))
    ) | (
        {254}get statestore(=alice,=charlie,statepack_c(hs_769: handshakestate)) in
        {219}let v_770: bitstring = catch-fail(handshakestateunpack(hs_769)) in
        {220}let v_771: bitstring = catch-fail((empty,empty,empty)) in
        {221}let v_772: key = catch-fail(dhexp(key_s(alice),g)) in
        {222}let v_773: keypair = catch-fail((if not-caught-fail(v_772) then keypairpack(v_772,key_s(alice)) else fail-any)) in
        {223}let v_774: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_770))) in
        {224}let v_775: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_774))) in
        {225}let v_776: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_775),2-proj-2-tuple(v_775),3-proj-3-tuple(v_774),getpublickey(v_773))) in
        {226}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_774))) in
        {227}let v_778: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_775))) && success?(1-proj-3-tuple(v_774))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then cipherstatepack(1-proj-2-tuple(v_777),increment_nonce(2-proj-2-tuple(v_775))) else fail-any) else fail-any)) in
        {228}let v_779: bitstring = catch-fail((if (success?(getpublickey(v_773)) && (success?(3-proj-3-tuple(v_774)) && success?(1-proj-3-tuple(v_774)))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then (if not-caught-fail(v_776) then (if not-caught-fail(v_778) then (v_778,v_776) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {229}let v_780: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_779),2-proj-3-tuple(v_774),3-proj-3-tuple(v_774)))) in
        {230}let v_781: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_779)) && success?(symmetricstatepack(1-proj-2-tuple(v_779),2-proj-3-tuple(v_774),3-proj-3-tuple(v_774)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_780),hash(3-proj-3-tuple(v_780),2-proj-2-tuple(v_779))) else fail-any) else fail-any)) in
        {231}let v_782: bitstring = catch-fail((if (success?(getpublickey(v_773)) && success?(1-proj-7-tuple(v_770))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,2-proj-2-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_783: bitstring = catch-fail(keypairunpack(v_773)) in
        {233}let v_784: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_782))) in
        {234}let v_785: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_784),(if success?(5-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),5-proj-7-tuple(v_770)) else fail-any) else fail-any))) in
        {235}let v_786: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_784),(if success?(5-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),5-proj-7-tuple(v_770)) else fail-any) else fail-any))) in
        {236}let v_787: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_784),(if success?(5-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),5-proj-7-tuple(v_770)) else fail-any) else fail-any))) in
        {237}let v_788: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),5-proj-7-tuple(v_770)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_784))) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (v_785,v_786,v_787) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let v_789: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),5-proj-7-tuple(v_770)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_782))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_788)) then cipherstatepack(2-proj-3-tuple(v_788),minnonce) else fail-any),1-proj-3-tuple(v_788),3-proj-3-tuple(v_784)) else fail-any) else fail-any) else fail-any)) in
        {239}let v_790: bitstring = catch-fail(symmetricstateunpack(v_789)) in
        {240}let v_791: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_790))) in
        {241}let v_792: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_791),2-proj-2-tuple(v_791),3-proj-3-tuple(v_790),msg_c(alice,charlie))) in
        {242}let v_793: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_790))) in
        {243}let v_794: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_791))) && success?(1-proj-3-tuple(v_790))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-2-tuple(v_793))))) then cipherstatepack(1-proj-2-tuple(v_793),increment_nonce(2-proj-2-tuple(v_791))) else fail-any) else fail-any)) in
        {244}let v_795: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_790)) && success?(1-proj-3-tuple(v_790))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-2-tuple(v_791))))) then (if not-caught-fail(v_792) then (if not-caught-fail(v_794) then (v_794,v_792) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_796: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_795),2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)))) in
        {246}let v_797: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_795)) && success?(symmetricstatepack(1-proj-2-tuple(v_795),2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then symmetricstatepack(1-proj-3-tuple(v_796),2-proj-3-tuple(v_796),hash(3-proj-3-tuple(v_796),2-proj-2-tuple(v_795))) else fail-any) else fail-any)) in
        {247}let v_798: bitstring = catch-fail((if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then (if not-caught-fail(v_797) then (v_797,2-proj-2-tuple(v_795)) else fail-any) else fail-any) else fail-any)) in
        {248}let v_799: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_798),v_773,3-proj-7-tuple(v_770),4-proj-7-tuple(v_770),5-proj-7-tuple(v_770),6-proj-7-tuple(v_770),7-proj-7-tuple(v_770))) in
        {249}let v_800: bitstring = catch-fail(concat3(1-proj-3-tuple(v_771),2-proj-2-tuple(v_782),2-proj-2-tuple(v_798))) in
        {250}let (hs_801: handshakestate,re_802: key,message_c_803: bitstring) = (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-7-tuple(v_770))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_773) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then (if not-caught-fail(v_789) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-2-tuple(v_798))))) then (if not-caught-fail(v_799) then (if not-caught-fail(v_800) then (v_799,5-proj-7-tuple(v_770),v_800) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {251}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {252}insert statestore(alice,charlie,statepack_d(hs_801));
        {253}out(pub, message_c_803)
    ) | (
        {282}get statestore(=alice,=charlie,statepack_d(hs_804: handshakestate)) in
        {255}in(pub, message_d_805: bitstring);
        {256}let v_806: bitstring = catch-fail(handshakestateunpack(hs_804)) in
        {257}let v_807: bitstring = catch-fail(deconcat3(message_d_805)) in
        {258}let v_808: bool = catch-fail(true) in
        {259}let v_809: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_806))) in
        {260}let v_810: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_809))) in
        {261}let v_811: aead = catch-fail(decrypt(1-proj-2-tuple(v_810),2-proj-2-tuple(v_810),3-proj-3-tuple(v_809),3-proj-3-tuple(v_807))) in
        {262}let v_812: bitstring = catch-fail(aeadunpack(v_811)) in
        {263}let v_813: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_809))) in
        {264}let v_814: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_810))) && success?(1-proj-3-tuple(v_809))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then cipherstatepack(1-proj-2-tuple(v_813),increment_nonce(2-proj-2-tuple(v_810))) else fail-any) else fail-any)) in
        {265}let v_815: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_807)) && (success?(3-proj-3-tuple(v_809)) && success?(1-proj-3-tuple(v_809)))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if not-caught-fail(v_814) then (v_814,3-proj-3-tuple(v_812),1-proj-3-tuple(v_812)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_816: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)))) in
        {267}let v_817: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_807)) && success?(symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then symmetricstatepack(1-proj-3-tuple(v_816),2-proj-3-tuple(v_816),hash(3-proj-3-tuple(v_816),3-proj-3-tuple(v_807))) else fail-any) else fail-any)) in
        {268}let v_818: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_807)) && success?(1-proj-7-tuple(v_806))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if not-caught-fail(v_817) then (v_817,2-proj-3-tuple(v_815),3-proj-3-tuple(v_815)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_819: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_818),2-proj-7-tuple(v_806),3-proj-7-tuple(v_806),4-proj-7-tuple(v_806),5-proj-7-tuple(v_806),6-proj-7-tuple(v_806),7-proj-7-tuple(v_806))) in
        {270}let v_820: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_818))) in
        {271}let v_821: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_820),zero)) in
        {272}let v_822: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_820),zero)) in
        {273}let v_823: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_820),zero)) in
        {274}let v_824: bitstring = catch-fail((if success?(2-proj-3-tuple(v_820)) then (if not-caught-fail(v_821) then (if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (v_821,v_822,v_823) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {275}let v_825: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_824)) then cipherstatepack(1-proj-3-tuple(v_824),minnonce) else fail-any)) in
        {276}let v_826: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_824)) then cipherstatepack(2-proj-3-tuple(v_824),minnonce) else fail-any)) in
        {277}let v_827: bitstring = catch-fail((if success?(1-proj-3-tuple(v_818)) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then (1-proj-3-tuple(v_818),v_825,v_826) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {278}let (hs_828: handshakestate,re_829: key,plaintext_d_830: bitstring,valid_831: bool,cs1_832: cipherstate,cs2_833: cipherstate) = (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-7-tuple(v_806))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_808) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if (v_808 && 3-proj-3-tuple(v_818)) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (v_819,getpublickey(3-proj-7-tuple(v_806)),2-proj-3-tuple(v_818),true,2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {279}event RecvMsg(alice,charlie,stage_d,plaintext_d_830,valid_831);
        {280}insert statestore(alice,charlie,statepack_e(hs_828));
        {281}event RecvEnd(valid_831)
    ) | (
        {283}event LeakS(phase0,alice);
        {284}out(pub, key_s(alice))
    ) | (
        {285}phase 1;
        {286}event LeakS(phase1,alice);
        {287}out(pub, key_s(alice))
    )
) | (
    {288}let v_834: key = catch-fail(dhexp(key_s(bob),g)) in
    {289}let s_835: keypair = (if not-caught-fail(v_834) then keypairpack(v_834,key_s(bob)) else fail-any) in
    {290}out(pub, getpublickey(s_835));
    (
        {291}let e_836: keypair = keypairpack(empty,empty) in
        {292}let rs_837: key = empty in
        {293}let re_838: key = empty in
        {294}let v_839: bitstring = catch-fail(hash(somename,empty)) in
        {295}let v_840: key = catch-fail(v_839) in
        {296}let v_841: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {297}let v_842: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_839) then (if not-caught-fail(v_840) then (if not-caught-fail(v_841) then symmetricstatepack(v_841,v_840,v_839) else fail-any) else fail-any) else fail-any))) in
        {298}let v_843: symmetricstate = catch-fail((if success?((if not-caught-fail(v_839) then (if not-caught-fail(v_840) then (if not-caught-fail(v_841) then symmetricstatepack(v_841,v_840,v_839) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then symmetricstatepack(1-proj-3-tuple(v_842),2-proj-3-tuple(v_842),hash(3-proj-3-tuple(v_842),empty)) else fail-any) else fail-any)) in
        {299}let v_844: bitstring = catch-fail(symmetricstateunpack(v_843)) in
        {300}let v_845: symmetricstate = catch-fail((if success?(getpublickey(s_835)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then symmetricstatepack(1-proj-3-tuple(v_844),2-proj-3-tuple(v_844),hash(3-proj-3-tuple(v_844),getpublickey(s_835))) else fail-any) else fail-any)) in
        {301}let hs_846: handshakestate = (if not-caught-fail(v_843) then (if not-caught-fail(v_845) then handshakestatepack(v_845,s_835,e_836,rs_837,re_838,empty,false) else fail-any) else fail-any) in
        {302}insert statestore(bob,alice,statepack_a(hs_846))
    ) | (
        {331}get statestore(=bob,=alice,statepack_a(hs_847: handshakestate)) in
        {303}in(pub, message_a_848: bitstring);
        {304}let v_849: bitstring = catch-fail(handshakestateunpack(hs_847)) in
        {305}let v_850: bitstring = catch-fail(deconcat3(message_a_848)) in
        {306}let v_851: bool = catch-fail(true) in
        {307}let v_852: key = catch-fail(1-proj-3-tuple(v_850)) in
        {308}let v_853: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_849))) in
        {309}let v_854: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_849)) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_853),hash(3-proj-3-tuple(v_853),v_852)) else fail-any) else fail-any)) in
        {310}let v_855: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_849))) in
        {311}let v_856: bitstring = catch-fail(symmetricstateunpack(v_854)) in
        {312}let v_857: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_856),(if success?(2-proj-7-tuple(v_849)) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),v_852) else fail-any) else fail-any))) in
        {313}let v_858: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_856),(if success?(2-proj-7-tuple(v_849)) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),v_852) else fail-any) else fail-any))) in
        {314}let v_859: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_856),(if success?(2-proj-7-tuple(v_849)) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),v_852) else fail-any) else fail-any))) in
        {315}let v_860: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_849)) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),v_852) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_856))) then (if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (v_857,v_858,v_859) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_861: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_849)) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then dhexp(2-proj-2-tuple(v_855),v_852) else fail-any) else fail-any)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_860)) then cipherstatepack(2-proj-3-tuple(v_860),minnonce) else fail-any),1-proj-3-tuple(v_860),3-proj-3-tuple(v_856)) else fail-any) else fail-any) else fail-any)) in
        {317}let v_862: bitstring = catch-fail(symmetricstateunpack(v_861)) in
        {318}let v_863: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_862))) in
        {319}let v_864: aead = catch-fail(decrypt(1-proj-2-tuple(v_863),2-proj-2-tuple(v_863),3-proj-3-tuple(v_862),3-proj-3-tuple(v_850))) in
        {320}let v_865: bitstring = catch-fail(aeadunpack(v_864)) in
        {321}let v_866: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_862))) in
        {322}let v_867: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_863))) && success?(1-proj-3-tuple(v_862))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then cipherstatepack(1-proj-2-tuple(v_866),increment_nonce(2-proj-2-tuple(v_863))) else fail-any) else fail-any)) in
        {323}let v_868: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_850)) && (success?(3-proj-3-tuple(v_862)) && success?(1-proj-3-tuple(v_862)))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then (if not-caught-fail(v_864) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_867) then (v_867,3-proj-3-tuple(v_865),1-proj-3-tuple(v_865)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {324}let v_869: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_868),2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)))) in
        {325}let v_870: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_850)) && success?(symmetricstatepack(1-proj-3-tuple(v_868),2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_869),hash(3-proj-3-tuple(v_869),3-proj-3-tuple(v_850))) else fail-any) else fail-any)) in
        {326}let v_871: bitstring = catch-fail((if success?(3-proj-3-tuple(v_850)) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if not-caught-fail(v_870) then (v_870,2-proj-3-tuple(v_868),3-proj-3-tuple(v_868)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {327}let v_872: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_871),2-proj-7-tuple(v_849),3-proj-7-tuple(v_849),4-proj-7-tuple(v_849),v_852,6-proj-7-tuple(v_849),7-proj-7-tuple(v_849))) in
        {328}let (hs_873: handshakestate,re_874: key,plaintext_a: bitstring,valid_875: bool) = (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-7-tuple(v_849))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (if not-caught-fail(v_854) then (if not-caught-fail(v_861) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if (v_851 && 3-proj-3-tuple(v_871)) then (if not-caught-fail(v_872) then (v_872,getpublickey(3-proj-7-tuple(v_849)),2-proj-3-tuple(v_871),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {329}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_875);
        {330}insert statestore(bob,alice,statepack_b(hs_873))
    ) | (
        {361}get statestore(=bob,=alice,statepack_b(hs_876: handshakestate)) in
        {332}let v_877: bitstring = catch-fail(handshakestateunpack(hs_876)) in
        {333}let v_878: bitstring = catch-fail((empty,empty,empty)) in
        {334}let v_879: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {335}let v_880: keypair = catch-fail((if not-caught-fail(v_879) then keypairpack(v_879,key_e(bob,alice)) else fail-any)) in
        {336}let v_881: bitstring = catch-fail(getpublickey(v_880)) in
        {337}let v_882: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_877))) in
        {338}let v_883: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_877)) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_882),hash(3-proj-3-tuple(v_882),v_881)) else fail-any) else fail-any)) in
        {339}let v_884: bitstring = catch-fail(keypairunpack(v_880)) in
        {340}let v_885: bitstring = catch-fail(symmetricstateunpack(v_883)) in
        {341}let v_886: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_885),(if success?(5-proj-7-tuple(v_877)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_877)) else fail-any) else fail-any))) in
        {342}let v_887: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_885),(if success?(5-proj-7-tuple(v_877)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_877)) else fail-any) else fail-any))) in
        {343}let v_888: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_885),(if success?(5-proj-7-tuple(v_877)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_877)) else fail-any) else fail-any))) in
        {344}let v_889: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_877)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_877)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_885))) then (if not-caught-fail(v_886) then (if not-caught-fail(v_887) then (if not-caught-fail(v_888) then (v_886,v_887,v_888) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_890: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_877)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then dhexp(2-proj-2-tuple(v_884),5-proj-7-tuple(v_877)) else fail-any) else fail-any)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_889)) then cipherstatepack(2-proj-3-tuple(v_889),minnonce) else fail-any),1-proj-3-tuple(v_889),3-proj-3-tuple(v_885)) else fail-any) else fail-any) else fail-any)) in
        {346}let v_891: bitstring = catch-fail(symmetricstateunpack(v_890)) in
        {347}let v_892: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {348}let v_893: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_892),2-proj-2-tuple(v_892),3-proj-3-tuple(v_891),msg_b(bob,alice))) in
        {349}let v_894: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_891))) in
        {350}let v_895: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_892))) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then cipherstatepack(1-proj-2-tuple(v_894),increment_nonce(2-proj-2-tuple(v_892))) else fail-any) else fail-any)) in
        {351}let v_896: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_891)) && success?(1-proj-3-tuple(v_891))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then (if not-caught-fail(v_893) then (if not-caught-fail(v_895) then (v_895,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_897: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) in
        {353}let v_898: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_896)) && success?(symmetricstatepack(1-proj-2-tuple(v_896),2-proj-3-tuple(v_891),3-proj-3-tuple(v_891)))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_897),hash(3-proj-3-tuple(v_897),2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {354}let v_899: bitstring = catch-fail((if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_898) then (v_898,2-proj-2-tuple(v_896)) else fail-any) else fail-any) else fail-any)) in
        {355}let v_900: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_899),2-proj-7-tuple(v_877),v_880,4-proj-7-tuple(v_877),5-proj-7-tuple(v_877),6-proj-7-tuple(v_877),7-proj-7-tuple(v_877))) in
        {356}let v_901: bitstring = catch-fail(concat3(v_881,2-proj-3-tuple(v_878),2-proj-2-tuple(v_899))) in
        {357}let (hs_902: handshakestate,re_903: key,message_b_904: bitstring) = (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-7-tuple(v_877))))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then (if not-caught-fail(v_880) then (if not-caught-fail(v_881) then (if not-caught-fail(v_883) then (if not-caught-fail(v_890) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then (if not-caught-fail(v_900) then (if not-caught-fail(v_901) then (v_900,5-proj-7-tuple(v_877),v_901) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {358}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {359}insert statestore(bob,alice,statepack_c(hs_902));
        {360}out(pub, message_b_904)
    ) | (
        {399}get statestore(=bob,=alice,statepack_c(hs_905: handshakestate)) in
        {362}in(pub, message_c_906: bitstring);
        {363}let v_907: bitstring = catch-fail(handshakestateunpack(hs_905)) in
        {364}let v_908: bitstring = catch-fail(deconcat3(message_c_906)) in
        {365}let v_909: bool = catch-fail(true) in
        {366}let v_910: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {367}let v_911: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {368}let v_912: aead = catch-fail(decrypt(1-proj-2-tuple(v_911),2-proj-2-tuple(v_911),3-proj-3-tuple(v_910),2-proj-3-tuple(v_908))) in
        {369}let v_913: bitstring = catch-fail(aeadunpack(v_912)) in
        {370}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_910))) in
        {371}let v_915: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_911))) && success?(1-proj-3-tuple(v_910))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then cipherstatepack(1-proj-2-tuple(v_914),increment_nonce(2-proj-2-tuple(v_911))) else fail-any) else fail-any)) in
        {372}let v_916: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_910)) && success?(1-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-2-tuple(v_911))))) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if not-caught-fail(v_915) then (v_915,3-proj-3-tuple(v_913),1-proj-3-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {373}let v_917: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) in
        {374}let v_918: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then symmetricstatepack(1-proj-3-tuple(v_917),2-proj-3-tuple(v_917),hash(3-proj-3-tuple(v_917),2-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {375}let v_919: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_908)) && success?(1-proj-7-tuple(v_907))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then (if not-caught-fail(v_918) then (v_918,2-proj-3-tuple(v_916),3-proj-3-tuple(v_916)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {376}let v_920: key = catch-fail(2-proj-3-tuple(v_919)) in
        {377}let v_921: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_907))) in
        {378}let v_922: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_919))) in
        {379}let v_923: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_922),(if success?(3-proj-7-tuple(v_907)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),v_920) else fail-any) else fail-any))) in
        {380}let v_924: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_922),(if success?(3-proj-7-tuple(v_907)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),v_920) else fail-any) else fail-any))) in
        {381}let v_925: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_922),(if success?(3-proj-7-tuple(v_907)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),v_920) else fail-any) else fail-any))) in
        {382}let v_926: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_907)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),v_920) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_922))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (v_923,v_924,v_925) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {383}let v_927: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_907)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),v_920) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_919))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_926)) then cipherstatepack(2-proj-3-tuple(v_926),minnonce) else fail-any),1-proj-3-tuple(v_926),3-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any)) in
        {384}let v_928: bitstring = catch-fail(symmetricstateunpack(v_927)) in
        {385}let v_929: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_928))) in
        {386}let v_930: aead = catch-fail(decrypt(1-proj-2-tuple(v_929),2-proj-2-tuple(v_929),3-proj-3-tuple(v_928),3-proj-3-tuple(v_908))) in
        {387}let v_931: bitstring = catch-fail(aeadunpack(v_930)) in
        {388}let v_932: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_928))) in
        {389}let v_933: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_929))) && success?(1-proj-3-tuple(v_928))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then cipherstatepack(1-proj-2-tuple(v_932),increment_nonce(2-proj-2-tuple(v_929))) else fail-any) else fail-any)) in
        {390}let v_934: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_908)) && (success?(3-proj-3-tuple(v_928)) && success?(1-proj-3-tuple(v_928)))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_930) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if not-caught-fail(v_933) then (v_933,3-proj-3-tuple(v_931),1-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {391}let v_935: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)))) in
        {392}let v_936: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_908)) && success?(symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_935),hash(3-proj-3-tuple(v_935),3-proj-3-tuple(v_908))) else fail-any) else fail-any)) in
        {393}let v_937: bitstring = catch-fail((if success?(3-proj-3-tuple(v_908)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if not-caught-fail(v_936) then (v_936,2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {394}let v_938: key = catch-fail(dhexp(key_s(alice),g)) in
        {395}let v_939: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_937),2-proj-7-tuple(v_907),3-proj-7-tuple(v_907),v_920,5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {396}let (hs_940: handshakestate,re_941: key,plaintext_c: bitstring,valid_942: bool) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_909) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if not-caught-fail(v_920) then (if not-caught-fail(v_927) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if ((3-proj-3-tuple(v_919) && 3-proj-3-tuple(v_937)) && (v_920 = getpublickey((if not-caught-fail(v_938) then keypairpack(v_938,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_939) then (v_939,getpublickey(3-proj-7-tuple(v_907)),2-proj-3-tuple(v_937),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {397}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_942);
        {398}insert statestore(bob,alice,statepack_d(hs_940))
    ) | (
        {425}get statestore(=bob,=alice,statepack_d(hs_943: handshakestate)) in
        {400}let v_944: bitstring = catch-fail(handshakestateunpack(hs_943)) in
        {401}let v_945: bitstring = catch-fail((empty,empty,empty)) in
        {402}let v_946: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_944))) in
        {403}let v_947: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {404}let v_948: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_947),2-proj-2-tuple(v_947),3-proj-3-tuple(v_946),msg_d(bob,alice))) in
        {405}let v_949: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {406}let v_950: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_947))) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then cipherstatepack(1-proj-2-tuple(v_949),increment_nonce(2-proj-2-tuple(v_947))) else fail-any) else fail-any)) in
        {407}let v_951: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_946)) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_948) then (if not-caught-fail(v_950) then (v_950,v_948) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {408}let v_952: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_951),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) in
        {409}let v_953: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_951)) && success?(symmetricstatepack(1-proj-2-tuple(v_951),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_952),hash(3-proj-3-tuple(v_952),2-proj-2-tuple(v_951))) else fail-any) else fail-any)) in
        {410}let v_954: bitstring = catch-fail((if success?(1-proj-7-tuple(v_944)) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then (if not-caught-fail(v_953) then (v_953,2-proj-2-tuple(v_951)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_955: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_954),2-proj-7-tuple(v_944),3-proj-7-tuple(v_944),4-proj-7-tuple(v_944),5-proj-7-tuple(v_944),6-proj-7-tuple(v_944),7-proj-7-tuple(v_944))) in
        {412}let v_956: bitstring = catch-fail(concat3(1-proj-3-tuple(v_945),2-proj-3-tuple(v_945),2-proj-2-tuple(v_954))) in
        {413}let v_957: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_954))) in
        {414}let v_958: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_957),zero)) in
        {415}let v_959: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_957),zero)) in
        {416}let v_960: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_957),zero)) in
        {417}let v_961: bitstring = catch-fail((if success?(2-proj-3-tuple(v_957)) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (if not-caught-fail(v_960) then (v_958,v_959,v_960) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_962: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_961)) then cipherstatepack(1-proj-3-tuple(v_961),minnonce) else fail-any)) in
        {419}let v_963: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_961)) then cipherstatepack(2-proj-3-tuple(v_961),minnonce) else fail-any)) in
        {420}let v_964: bitstring = catch-fail((if success?(1-proj-2-tuple(v_954)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (1-proj-2-tuple(v_954),v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let (hs_965: handshakestate,re_966: key,message_d_967: bitstring,cs1_968: cipherstate,cs2_969: cipherstate) = (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-7-tuple(v_944))))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-2-tuple(v_954))))) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (v_955,5-proj-7-tuple(v_944),v_956,2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {422}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {423}insert statestore(bob,alice,statepack_e(hs_965));
        {424}out(pub, message_d_967)
    ) | (
        {426}event LeakS(phase0,bob);
        {427}out(pub, key_s(bob))
    ) | (
        {428}phase 1;
        {429}event LeakS(phase1,bob);
        {430}out(pub, key_s(bob))
    )
) | (
    {431}let v_970: key = catch-fail(dhexp(key_s(bob),g)) in
    {432}let s_971: keypair = (if not-caught-fail(v_970) then keypairpack(v_970,key_s(bob)) else fail-any) in
    {433}out(pub, getpublickey(s_971));
    (
        {434}let e_972: keypair = keypairpack(empty,empty) in
        {435}let rs_973: key = empty in
        {436}let re_974: key = empty in
        {437}let v_975: bitstring = catch-fail(hash(somename,empty)) in
        {438}let v_976: key = catch-fail(v_975) in
        {439}let v_977: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {440}let v_978: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_975) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then symmetricstatepack(v_977,v_976,v_975) else fail-any) else fail-any) else fail-any))) in
        {441}let v_979: symmetricstate = catch-fail((if success?((if not-caught-fail(v_975) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then symmetricstatepack(v_977,v_976,v_975) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then symmetricstatepack(1-proj-3-tuple(v_978),2-proj-3-tuple(v_978),hash(3-proj-3-tuple(v_978),empty)) else fail-any) else fail-any)) in
        {442}let v_980: bitstring = catch-fail(symmetricstateunpack(v_979)) in
        {443}let v_981: symmetricstate = catch-fail((if success?(getpublickey(s_971)) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-3-tuple(v_980))))) then symmetricstatepack(1-proj-3-tuple(v_980),2-proj-3-tuple(v_980),hash(3-proj-3-tuple(v_980),getpublickey(s_971))) else fail-any) else fail-any)) in
        {444}let hs_982: handshakestate = (if not-caught-fail(v_979) then (if not-caught-fail(v_981) then handshakestatepack(v_981,s_971,e_972,rs_973,re_974,empty,false) else fail-any) else fail-any) in
        {445}insert statestore(bob,charlie,statepack_a(hs_982))
    ) | (
        {474}get statestore(=bob,=charlie,statepack_a(hs_983: handshakestate)) in
        {446}in(pub, message_a_984: bitstring);
        {447}let v_985: bitstring = catch-fail(handshakestateunpack(hs_983)) in
        {448}let v_986: bitstring = catch-fail(deconcat3(message_a_984)) in
        {449}let v_987: bool = catch-fail(true) in
        {450}let v_988: key = catch-fail(1-proj-3-tuple(v_986)) in
        {451}let v_989: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_985))) in
        {452}let v_990: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_985)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_989),hash(3-proj-3-tuple(v_989),v_988)) else fail-any) else fail-any)) in
        {453}let v_991: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_985))) in
        {454}let v_992: bitstring = catch-fail(symmetricstateunpack(v_990)) in
        {455}let v_993: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_992),(if success?(2-proj-7-tuple(v_985)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),v_988) else fail-any) else fail-any))) in
        {456}let v_994: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_992),(if success?(2-proj-7-tuple(v_985)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),v_988) else fail-any) else fail-any))) in
        {457}let v_995: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_992),(if success?(2-proj-7-tuple(v_985)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),v_988) else fail-any) else fail-any))) in
        {458}let v_996: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_985)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),v_988) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_992))) then (if not-caught-fail(v_993) then (if not-caught-fail(v_994) then (if not-caught-fail(v_995) then (v_993,v_994,v_995) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_997: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_985)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then dhexp(2-proj-2-tuple(v_991),v_988) else fail-any) else fail-any)) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-3-tuple(v_996))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_996)) then cipherstatepack(2-proj-3-tuple(v_996),minnonce) else fail-any),1-proj-3-tuple(v_996),3-proj-3-tuple(v_992)) else fail-any) else fail-any) else fail-any)) in
        {460}let v_998: bitstring = catch-fail(symmetricstateunpack(v_997)) in
        {461}let v_999: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {462}let v_1000: aead = catch-fail(decrypt(1-proj-2-tuple(v_999),2-proj-2-tuple(v_999),3-proj-3-tuple(v_998),3-proj-3-tuple(v_986))) in
        {463}let v_1001: bitstring = catch-fail(aeadunpack(v_1000)) in
        {464}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_998))) in
        {465}let v_1003: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_999))) && success?(1-proj-3-tuple(v_998))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then cipherstatepack(1-proj-2-tuple(v_1002),increment_nonce(2-proj-2-tuple(v_999))) else fail-any) else fail-any)) in
        {466}let v_1004: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_986)) && (success?(3-proj-3-tuple(v_998)) && success?(1-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if not-caught-fail(v_1003) then (v_1003,3-proj-3-tuple(v_1001),1-proj-3-tuple(v_1001)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {467}let v_1005: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) in
        {468}let v_1006: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_986)) && success?(symmetricstatepack(1-proj-3-tuple(v_1004),2-proj-3-tuple(v_998),3-proj-3-tuple(v_998)))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then symmetricstatepack(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),hash(3-proj-3-tuple(v_1005),3-proj-3-tuple(v_986))) else fail-any) else fail-any)) in
        {469}let v_1007: bitstring = catch-fail((if success?(3-proj-3-tuple(v_986)) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,2-proj-3-tuple(v_1004),3-proj-3-tuple(v_1004)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {470}let v_1008: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1007),2-proj-7-tuple(v_985),3-proj-7-tuple(v_985),4-proj-7-tuple(v_985),v_988,6-proj-7-tuple(v_985),7-proj-7-tuple(v_985))) in
        {471}let (hs_1009: handshakestate,re_1010: key,plaintext_a_1011: bitstring,valid_1012: bool) = (if (not-caught-fail(v_985) && success?(is-true(success?(1-proj-7-tuple(v_985))))) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then (if not-caught-fail(v_990) then (if not-caught-fail(v_997) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if (v_987 && 3-proj-3-tuple(v_1007)) then (if not-caught-fail(v_1008) then (v_1008,getpublickey(3-proj-7-tuple(v_985)),2-proj-3-tuple(v_1007),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {472}event RecvMsg(bob,charlie,stage_a,plaintext_a_1011,valid_1012);
        {473}insert statestore(bob,charlie,statepack_b(hs_1009))
    ) | (
        {504}get statestore(=bob,=charlie,statepack_b(hs_1013: handshakestate)) in
        {475}let v_1014: bitstring = catch-fail(handshakestateunpack(hs_1013)) in
        {476}let v_1015: bitstring = catch-fail((empty,empty,empty)) in
        {477}let v_1016: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {478}let v_1017: keypair = catch-fail((if not-caught-fail(v_1016) then keypairpack(v_1016,key_e(bob,charlie)) else fail-any)) in
        {479}let v_1018: bitstring = catch-fail(getpublickey(v_1017)) in
        {480}let v_1019: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1014))) in
        {481}let v_1020: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then symmetricstatepack(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),hash(3-proj-3-tuple(v_1019),v_1018)) else fail-any) else fail-any)) in
        {482}let v_1021: bitstring = catch-fail(keypairunpack(v_1017)) in
        {483}let v_1022: bitstring = catch-fail(symmetricstateunpack(v_1020)) in
        {484}let v_1023: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1022),(if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {485}let v_1024: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1022),(if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {486}let v_1025: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1022),(if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any))) in
        {487}let v_1026: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1022))) then (if not-caught-fail(v_1023) then (if not-caught-fail(v_1024) then (if not-caught-fail(v_1025) then (v_1023,v_1024,v_1025) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {488}let v_1027: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1014)) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then dhexp(2-proj-2-tuple(v_1021),5-proj-7-tuple(v_1014)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1026)) then cipherstatepack(2-proj-3-tuple(v_1026),minnonce) else fail-any),1-proj-3-tuple(v_1026),3-proj-3-tuple(v_1022)) else fail-any) else fail-any) else fail-any)) in
        {489}let v_1028: bitstring = catch-fail(symmetricstateunpack(v_1027)) in
        {490}let v_1029: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1028))) in
        {491}let v_1030: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1029),2-proj-2-tuple(v_1029),3-proj-3-tuple(v_1028),msg_b(bob,charlie))) in
        {492}let v_1031: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1028))) in
        {493}let v_1032: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1029))) && success?(1-proj-3-tuple(v_1028))) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-2-tuple(v_1031))))) then cipherstatepack(1-proj-2-tuple(v_1031),increment_nonce(2-proj-2-tuple(v_1029))) else fail-any) else fail-any)) in
        {494}let v_1033: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && success?(1-proj-3-tuple(v_1028))) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-2-tuple(v_1029))))) then (if not-caught-fail(v_1030) then (if not-caught-fail(v_1032) then (v_1032,v_1030) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {495}let v_1034: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1033),2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)))) in
        {496}let v_1035: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1033)) && success?(symmetricstatepack(1-proj-2-tuple(v_1033),2-proj-3-tuple(v_1028),3-proj-3-tuple(v_1028)))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-3-tuple(v_1034))))) then symmetricstatepack(1-proj-3-tuple(v_1034),2-proj-3-tuple(v_1034),hash(3-proj-3-tuple(v_1034),2-proj-2-tuple(v_1033))) else fail-any) else fail-any)) in
        {497}let v_1036: bitstring = catch-fail((if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then (if not-caught-fail(v_1035) then (v_1035,2-proj-2-tuple(v_1033)) else fail-any) else fail-any) else fail-any)) in
        {498}let v_1037: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1036),2-proj-7-tuple(v_1014),v_1017,4-proj-7-tuple(v_1014),5-proj-7-tuple(v_1014),6-proj-7-tuple(v_1014),7-proj-7-tuple(v_1014))) in
        {499}let v_1038: bitstring = catch-fail(concat3(v_1018,2-proj-3-tuple(v_1015),2-proj-2-tuple(v_1036))) in
        {500}let (hs_1039: handshakestate,re_1040: key,message_b_1041: bitstring) = (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-7-tuple(v_1014))))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1018) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1027) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-2-tuple(v_1036))))) then (if not-caught-fail(v_1037) then (if not-caught-fail(v_1038) then (v_1037,5-proj-7-tuple(v_1014),v_1038) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {501}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {502}insert statestore(bob,charlie,statepack_c(hs_1039));
        {503}out(pub, message_b_1041)
    ) | (
        {542}get statestore(=bob,=charlie,statepack_c(hs_1042: handshakestate)) in
        {505}in(pub, message_c_1043: bitstring);
        {506}let v_1044: bitstring = catch-fail(handshakestateunpack(hs_1042)) in
        {507}let v_1045: bitstring = catch-fail(deconcat3(message_c_1043)) in
        {508}let v_1046: bool = catch-fail(true) in
        {509}let v_1047: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1044))) in
        {510}let v_1048: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1047))) in
        {511}let v_1049: aead = catch-fail(decrypt(1-proj-2-tuple(v_1048),2-proj-2-tuple(v_1048),3-proj-3-tuple(v_1047),2-proj-3-tuple(v_1045))) in
        {512}let v_1050: bitstring = catch-fail(aeadunpack(v_1049)) in
        {513}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1047))) in
        {514}let v_1052: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1048))) && success?(1-proj-3-tuple(v_1047))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then cipherstatepack(1-proj-2-tuple(v_1051),increment_nonce(2-proj-2-tuple(v_1048))) else fail-any) else fail-any)) in
        {515}let v_1053: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1045)) && (success?(3-proj-3-tuple(v_1047)) && success?(1-proj-3-tuple(v_1047)))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-2-tuple(v_1048))))) then (if not-caught-fail(v_1049) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if not-caught-fail(v_1052) then (v_1052,3-proj-3-tuple(v_1050),1-proj-3-tuple(v_1050)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {516}let v_1054: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1053),2-proj-3-tuple(v_1047),3-proj-3-tuple(v_1047)))) in
        {517}let v_1055: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1045)) && success?(symmetricstatepack(1-proj-3-tuple(v_1053),2-proj-3-tuple(v_1047),3-proj-3-tuple(v_1047)))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then symmetricstatepack(1-proj-3-tuple(v_1054),2-proj-3-tuple(v_1054),hash(3-proj-3-tuple(v_1054),2-proj-3-tuple(v_1045))) else fail-any) else fail-any)) in
        {518}let v_1056: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1045)) && success?(1-proj-7-tuple(v_1044))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if not-caught-fail(v_1055) then (v_1055,2-proj-3-tuple(v_1053),3-proj-3-tuple(v_1053)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {519}let v_1057: key = catch-fail(2-proj-3-tuple(v_1056)) in
        {520}let v_1058: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1044))) in
        {521}let v_1059: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1056))) in
        {522}let v_1060: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1059),(if success?(3-proj-7-tuple(v_1044)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),v_1057) else fail-any) else fail-any))) in
        {523}let v_1061: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1059),(if success?(3-proj-7-tuple(v_1044)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),v_1057) else fail-any) else fail-any))) in
        {524}let v_1062: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1059),(if success?(3-proj-7-tuple(v_1044)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),v_1057) else fail-any) else fail-any))) in
        {525}let v_1063: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_1044)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),v_1057) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1059))) then (if not-caught-fail(v_1060) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (v_1060,v_1061,v_1062) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {526}let v_1064: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_1044)) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then dhexp(2-proj-2-tuple(v_1058),v_1057) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_1056))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-3-tuple(v_1063))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1063)) then cipherstatepack(2-proj-3-tuple(v_1063),minnonce) else fail-any),1-proj-3-tuple(v_1063),3-proj-3-tuple(v_1059)) else fail-any) else fail-any) else fail-any)) in
        {527}let v_1065: bitstring = catch-fail(symmetricstateunpack(v_1064)) in
        {528}let v_1066: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1065))) in
        {529}let v_1067: aead = catch-fail(decrypt(1-proj-2-tuple(v_1066),2-proj-2-tuple(v_1066),3-proj-3-tuple(v_1065),3-proj-3-tuple(v_1045))) in
        {530}let v_1068: bitstring = catch-fail(aeadunpack(v_1067)) in
        {531}let v_1069: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1065))) in
        {532}let v_1070: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1066))) && success?(1-proj-3-tuple(v_1065))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then cipherstatepack(1-proj-2-tuple(v_1069),increment_nonce(2-proj-2-tuple(v_1066))) else fail-any) else fail-any)) in
        {533}let v_1071: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1045)) && (success?(3-proj-3-tuple(v_1065)) && success?(1-proj-3-tuple(v_1065)))) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-2-tuple(v_1066))))) then (if not-caught-fail(v_1067) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if not-caught-fail(v_1070) then (v_1070,3-proj-3-tuple(v_1068),1-proj-3-tuple(v_1068)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {534}let v_1072: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1071),2-proj-3-tuple(v_1065),3-proj-3-tuple(v_1065)))) in
        {535}let v_1073: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1045)) && success?(symmetricstatepack(1-proj-3-tuple(v_1071),2-proj-3-tuple(v_1065),3-proj-3-tuple(v_1065)))) then (if (not-caught-fail(v_1072) && success?(is-true(success?(1-proj-3-tuple(v_1072))))) then symmetricstatepack(1-proj-3-tuple(v_1072),2-proj-3-tuple(v_1072),hash(3-proj-3-tuple(v_1072),3-proj-3-tuple(v_1045))) else fail-any) else fail-any)) in
        {536}let v_1074: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1045)) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-3-tuple(v_1071))))) then (if not-caught-fail(v_1073) then (v_1073,2-proj-3-tuple(v_1071),3-proj-3-tuple(v_1071)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {537}let v_1075: key = catch-fail(dhexp(key_s(charlie),g)) in
        {538}let v_1076: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1074),2-proj-7-tuple(v_1044),3-proj-7-tuple(v_1044),v_1057,5-proj-7-tuple(v_1044),6-proj-7-tuple(v_1044),7-proj-7-tuple(v_1044))) in
        {539}let (hs_1077: handshakestate,re_1078: key,plaintext_c_1079: bitstring,valid_1080: bool) = (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-7-tuple(v_1044))))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then (if not-caught-fail(v_1046) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if not-caught-fail(v_1057) then (if not-caught-fail(v_1064) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then (if ((3-proj-3-tuple(v_1056) && 3-proj-3-tuple(v_1074)) && (v_1057 = getpublickey((if not-caught-fail(v_1075) then keypairpack(v_1075,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1076) then (v_1076,getpublickey(3-proj-7-tuple(v_1044)),2-proj-3-tuple(v_1074),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {540}event RecvMsg(bob,charlie,stage_c,plaintext_c_1079,valid_1080);
        {541}insert statestore(bob,charlie,statepack_d(hs_1077))
    ) | (
        {568}get statestore(=bob,=charlie,statepack_d(hs_1081: handshakestate)) in
        {543}let v_1082: bitstring = catch-fail(handshakestateunpack(hs_1081)) in
        {544}let v_1083: bitstring = catch-fail((empty,empty,empty)) in
        {545}let v_1084: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1082))) in
        {546}let v_1085: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1084))) in
        {547}let v_1086: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1085),2-proj-2-tuple(v_1085),3-proj-3-tuple(v_1084),msg_d(bob,charlie))) in
        {548}let v_1087: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1084))) in
        {549}let v_1088: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1085))) && success?(1-proj-3-tuple(v_1084))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-2-tuple(v_1087))))) then cipherstatepack(1-proj-2-tuple(v_1087),increment_nonce(2-proj-2-tuple(v_1085))) else fail-any) else fail-any)) in
        {550}let v_1089: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1084)) && success?(1-proj-3-tuple(v_1084))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then (if not-caught-fail(v_1086) then (if not-caught-fail(v_1088) then (v_1088,v_1086) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1090: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1089),2-proj-3-tuple(v_1084),3-proj-3-tuple(v_1084)))) in
        {552}let v_1091: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1089)) && success?(symmetricstatepack(1-proj-2-tuple(v_1089),2-proj-3-tuple(v_1084),3-proj-3-tuple(v_1084)))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then symmetricstatepack(1-proj-3-tuple(v_1090),2-proj-3-tuple(v_1090),hash(3-proj-3-tuple(v_1090),2-proj-2-tuple(v_1089))) else fail-any) else fail-any)) in
        {553}let v_1092: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1082)) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-2-tuple(v_1089))))) then (if not-caught-fail(v_1091) then (v_1091,2-proj-2-tuple(v_1089)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {554}let v_1093: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1092),2-proj-7-tuple(v_1082),3-proj-7-tuple(v_1082),4-proj-7-tuple(v_1082),5-proj-7-tuple(v_1082),6-proj-7-tuple(v_1082),7-proj-7-tuple(v_1082))) in
        {555}let v_1094: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1083),2-proj-2-tuple(v_1092))) in
        {556}let v_1095: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1092))) in
        {557}let v_1096: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1095),zero)) in
        {558}let v_1097: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1095),zero)) in
        {559}let v_1098: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1095),zero)) in
        {560}let v_1099: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1095)) then (if not-caught-fail(v_1096) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1098) then (v_1096,v_1097,v_1098) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1100: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1099)) then cipherstatepack(1-proj-3-tuple(v_1099),minnonce) else fail-any)) in
        {562}let v_1101: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1099)) then cipherstatepack(2-proj-3-tuple(v_1099),minnonce) else fail-any)) in
        {563}let v_1102: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1092)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then (if not-caught-fail(v_1100) then (if not-caught-fail(v_1101) then (1-proj-2-tuple(v_1092),v_1100,v_1101) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {564}let (hs_1103: handshakestate,re_1104: key,message_d_1105: bitstring,cs1_1106: cipherstate,cs2_1107: cipherstate) = (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-7-tuple(v_1082))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-2-tuple(v_1092))))) then (if not-caught-fail(v_1093) then (if not-caught-fail(v_1094) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-3-tuple(v_1102))))) then (v_1093,5-proj-7-tuple(v_1082),v_1094,2-proj-3-tuple(v_1102),3-proj-3-tuple(v_1102)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {565}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {566}insert statestore(bob,charlie,statepack_e(hs_1103));
        {567}out(pub, message_d_1105)
    ) | (
        {569}event LeakS(phase0,bob);
        {570}out(pub, key_s(bob))
    ) | (
        {571}phase 1;
        {572}event LeakS(phase1,bob);
        {573}out(pub, key_s(bob))
    )
) | (
    {574}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 177 rules in the queue.
400 rules inserted. The rule base contains 397 rules. 63 rules in the queue.
600 rules inserted. The rule base contains 578 rules. 167 rules in the queue.
800 rules inserted. The rule base contains 766 rules. 251 rules in the queue.
1000 rules inserted. The rule base contains 966 rules. 569 rules in the queue.
1200 rules inserted. The rule base contains 1153 rules. 629 rules in the queue.
1400 rules inserted. The rule base contains 1330 rules. 472 rules in the queue.
1600 rules inserted. The rule base contains 1505 rules. 356 rules in the queue.
1800 rules inserted. The rule base contains 1677 rules. 258 rules in the queue.
2000 rules inserted. The rule base contains 1865 rules. 434 rules in the queue.
2200 rules inserted. The rule base contains 2028 rules. 447 rules in the queue.
2400 rules inserted. The rule base contains 2203 rules. 465 rules in the queue.
2600 rules inserted. The rule base contains 2345 rules. 499 rules in the queue.
2800 rules inserted. The rule base contains 2485 rules. 500 rules in the queue.
3000 rules inserted. The rule base contains 2581 rules. 459 rules in the queue.
3200 rules inserted. The rule base contains 2653 rules. 399 rules in the queue.
3400 rules inserted. The rule base contains 2778 rules. 383 rules in the queue.
3600 rules inserted. The rule base contains 2954 rules. 390 rules in the queue.
3800 rules inserted. The rule base contains 3117 rules. 423 rules in the queue.
4000 rules inserted. The rule base contains 3205 rules. 458 rules in the queue.
4200 rules inserted. The rule base contains 3305 rules. 425 rules in the queue.
4400 rules inserted. The rule base contains 3391 rules. 375 rules in the queue.
4600 rules inserted. The rule base contains 3543 rules. 348 rules in the queue.
4800 rules inserted. The rule base contains 3702 rules. 369 rules in the queue.
5000 rules inserted. The rule base contains 3848 rules. 398 rules in the queue.
5200 rules inserted. The rule base contains 3980 rules. 392 rules in the queue.
5400 rules inserted. The rule base contains 4068 rules. 339 rules in the queue.
5600 rules inserted. The rule base contains 4189 rules. 308 rules in the queue.
5800 rules inserted. The rule base contains 4354 rules. 334 rules in the queue.
6000 rules inserted. The rule base contains 4480 rules. 374 rules in the queue.
6200 rules inserted. The rule base contains 4623 rules. 371 rules in the queue.
6400 rules inserted. The rule base contains 4803 rules. 355 rules in the queue.
6600 rules inserted. The rule base contains 4961 rules. 376 rules in the queue.
6800 rules inserted. The rule base contains 5132 rules. 386 rules in the queue.
7000 rules inserted. The rule base contains 5288 rules. 394 rules in the queue.
7200 rules inserted. The rule base contains 5450 rules. 398 rules in the queue.
7400 rules inserted. The rule base contains 5583 rules. 397 rules in the queue.
7600 rules inserted. The rule base contains 5731 rules. 419 rules in the queue.
7800 rules inserted. The rule base contains 5884 rules. 406 rules in the queue.
8000 rules inserted. The rule base contains 6046 rules. 432 rules in the queue.
8200 rules inserted. The rule base contains 6200 rules. 419 rules in the queue.
8400 rules inserted. The rule base contains 6348 rules. 390 rules in the queue.
8600 rules inserted. The rule base contains 6491 rules. 374 rules in the queue.
8800 rules inserted. The rule base contains 6634 rules. 329 rules in the queue.
9000 rules inserted. The rule base contains 6769 rules. 302 rules in the queue.
9200 rules inserted. The rule base contains 6871 rules. 241 rules in the queue.
9400 rules inserted. The rule base contains 7016 rules. 215 rules in the queue.
9600 rules inserted. The rule base contains 7115 rules. 210 rules in the queue.
9800 rules inserted. The rule base contains 7232 rules. 211 rules in the queue.
10000 rules inserted. The rule base contains 7325 rules. 158 rules in the queue.
10200 rules inserted. The rule base contains 7424 rules. 76 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1110,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {290}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. The event LeakS(phase0,bob) may be executed at {426}.
So the message key_s(bob) may be sent on channel pub at output {427}.
mess(pub,key_s(bob)).

19. By 1, the attacker may have the channel pub.
By 18, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

20. By 19, the attacker may know key_s(bob).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
attacker(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

21. By 12, the attacker may know hash(somename,empty).
By 20, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
So the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

9. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

10. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

11. The event LeakS(phase1,bob) may be executed at {429}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {430}.
mess_p1(pub,key_s(bob)).

12. By 10, the attacker may have the channel pub in phase 1.
By 11, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

13. By 12, the attacker may know key_s(bob) in phase 1.
By 9, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 13, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 12, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

22. By 16, the attacker may know hash(somename,empty) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

9. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

10. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

11. The event LeakS(phase1,bob) may be executed at {429}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {430}.
mess_p1(pub,key_s(bob)).

12. By 10, the attacker may have the channel pub in phase 1.
By 11, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

13. By 12, the attacker may know key_s(bob) in phase 1.
By 9, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 13, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 12, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

22. By 16, the attacker may know hash(somename,empty) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {44}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {445}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {474}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {446}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {473}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {504}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {501}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {503}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {47}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1110,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {44}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {445}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {474}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {446}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {473}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {504}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {501}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {503}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {47}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {44}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {445}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {474}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {446}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {473}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {504}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {501}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {503}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {47}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1110,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1110,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {44}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {302}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {331}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {303}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {330}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {361}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {358}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {360}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 7 may be received at input {47}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 8 may be read at get {111}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {108}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {109}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

10. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {302}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 11 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 10 may be read at get {331}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {303}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {330}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

14. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 13 may be read at get {361}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {358}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {359}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 15 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {44}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {302}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 18 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

20. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 17 may be read at get {331}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {303}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {330}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

21. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 20 may be read at get {361}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {358}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {360}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 16 may be read at get {75}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 21 may be received at input {47}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 22 may be read at get {111}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {108}.
So the message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) may be sent on channel pub at output {110}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))).

24. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 14 may be read at get {399}.
The message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {362}.
So the entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {398}.
table(statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

25. The entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 24 may be read at get {425}.
The event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true) may be executed at {422}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice))) may be sent on channel pub at output {424}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 9 may be read at get {139}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice))) that may be sent on channel pub by 25 may be received at input {112}.
So event RecvEnd(true) may be executed at {138}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
