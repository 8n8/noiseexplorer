File "KN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 274, character 7 - line 274, character 8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 275, character 7 - line 275, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 275, character 36 - line 275, character 36:
Warning: identifier h rebound.
File "KN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 305, character 6 - line 305, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 310, character 6 - line 310, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 316, character 6 - line 316, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 317, character 6 - line 317, character 7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 318, character 6 - line 318, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 320, character 7 - line 320, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 320, character 26 - line 320, character 36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 321, character 6 - line 321, character 7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 328, character 6 - line 328, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 329, character 6 - line 329, character 7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 332, character 6 - line 332, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 334, character 7 - line 334, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 334, character 26 - line 334, character 36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 335, character 6 - line 335, character 7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 342, character 7 - line 342, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 342, character 26 - line 342, character 36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 343, character 6 - line 343, character 7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 350, character 7 - line 350, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 350, character 26 - line 350, character 36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 351, character 6 - line 351, character 7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 360, character 6 - line 360, character 7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 361, character 6 - line 361, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 363, character 7 - line 363, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 365, character 7 - line 365, character 8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 373, character 6 - line 373, character 7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 374, character 6 - line 374, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 376, character 6 - line 376, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 377, character 6 - line 377, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 378, character 7 - line 378, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 380, character 7 - line 380, character 8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 388, character 7 - line 388, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 390, character 7 - line 390, character 8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 398, character 7 - line 398, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 400, character 7 - line 400, character 8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 548, character 8 - line 548, character 9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 398, character 7 - line 398, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 400, character 7 - line 400, character 8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 540, character 8 - line 540, character 9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 342, character 7 - line 342, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 342, character 26 - line 342, character 36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 343, character 6 - line 343, character 7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 533, character 8 - line 533, character 9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 373, character 6 - line 373, character 7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 374, character 6 - line 374, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 376, character 6 - line 376, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 377, character 6 - line 377, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 378, character 7 - line 378, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 380, character 7 - line 380, character 8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 525, character 8 - line 525, character 9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 316, character 6 - line 316, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 317, character 6 - line 317, character 7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 318, character 6 - line 318, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 320, character 7 - line 320, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 320, character 26 - line 320, character 36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 321, character 6 - line 321, character 7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 305, character 6 - line 305, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 598, character 8 - line 598, character 9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 350, character 7 - line 350, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 350, character 26 - line 350, character 36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 351, character 6 - line 351, character 7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 591, character 8 - line 591, character 9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 388, character 7 - line 388, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 390, character 7 - line 390, character 8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 583, character 8 - line 583, character 9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 328, character 6 - line 328, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 329, character 6 - line 329, character 7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 332, character 6 - line 332, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 334, character 7 - line 334, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 334, character 26 - line 334, character 36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 335, character 6 - line 335, character 7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 576, character 8 - line 576, character 9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 360, character 6 - line 360, character 7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 361, character 6 - line 361, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 363, character 7 - line 363, character 8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 365, character 7 - line 365, character 8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 310, character 6 - line 310, character 7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_524: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_525: keypair = (if not-caught-fail(v_524) then keypairpack(v_524,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_525));
    (
        {5}let e_526: keypair = keypairpack(empty,empty) in
        {6}let rs_527: key = empty in
        {7}let re_528: key = empty in
        {8}let v_529: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_530: key = catch-fail(v_529) in
        {10}let v_531: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_532: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (if not-caught-fail(v_531) then symmetricstatepack(v_531,v_530,v_529) else fail-any) else fail-any) else fail-any))) in
        {12}let v_533: symmetricstate = catch-fail((if success?((if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (if not-caught-fail(v_531) then symmetricstatepack(v_531,v_530,v_529) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then symmetricstatepack(1-proj-3-tuple(v_532),2-proj-3-tuple(v_532),hash(3-proj-3-tuple(v_532),empty)) else fail-any) else fail-any)) in
        {13}let v_534: bitstring = catch-fail(symmetricstateunpack(v_533)) in
        {14}let v_535: symmetricstate = catch-fail((if success?(getpublickey(s_525)) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then symmetricstatepack(1-proj-3-tuple(v_534),2-proj-3-tuple(v_534),hash(3-proj-3-tuple(v_534),getpublickey(s_525))) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_533) then (if not-caught-fail(v_535) then handshakestatepack(v_535,s_525,e_526,rs_527,re_528,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {39}get statestore(=alice,=bob,statepack_a(hs_536: handshakestate)) in
        {17}let v_537: bitstring = catch-fail(handshakestateunpack(hs_536)) in
        {18}let v_538: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_539: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_540: keypair = catch-fail((if not-caught-fail(v_539) then keypairpack(v_539,key_e(alice,bob)) else fail-any)) in
        {21}let v_541: bitstring = catch-fail(getpublickey(v_540)) in
        {22}let v_542: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_537))) in
        {23}let v_543: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_537)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-3-tuple(v_542))))) then symmetricstatepack(1-proj-3-tuple(v_542),2-proj-3-tuple(v_542),hash(3-proj-3-tuple(v_542),v_541)) else fail-any) else fail-any)) in
        {24}let v_544: bitstring = catch-fail(symmetricstateunpack(v_543)) in
        {25}let v_545: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_544))) in
        {26}let v_546: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_545),2-proj-2-tuple(v_545),3-proj-3-tuple(v_544),msg_a(alice,bob))) in
        {27}let v_547: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_544))) in
        {28}let v_548: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_545))) && success?(1-proj-3-tuple(v_544))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then cipherstatepack(1-proj-2-tuple(v_547),increment_nonce(2-proj-2-tuple(v_545))) else fail-any) else fail-any)) in
        {29}let v_549: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_544)) && success?(1-proj-3-tuple(v_544))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (v_548,v_546) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_550: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_549),2-proj-3-tuple(v_544),3-proj-3-tuple(v_544)))) in
        {31}let v_551: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_549)) && success?(symmetricstatepack(1-proj-2-tuple(v_549),2-proj-3-tuple(v_544),3-proj-3-tuple(v_544)))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then symmetricstatepack(1-proj-3-tuple(v_550),2-proj-3-tuple(v_550),hash(3-proj-3-tuple(v_550),2-proj-2-tuple(v_549))) else fail-any) else fail-any)) in
        {32}let v_552: bitstring = catch-fail((if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then (if not-caught-fail(v_551) then (v_551,2-proj-2-tuple(v_549)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_553: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_552),2-proj-7-tuple(v_537),v_540,4-proj-7-tuple(v_537),5-proj-7-tuple(v_537),6-proj-7-tuple(v_537),7-proj-7-tuple(v_537))) in
        {34}let v_554: bitstring = catch-fail(concat3(v_541,2-proj-3-tuple(v_538),2-proj-2-tuple(v_552))) in
        {35}let (hs_555: handshakestate,re_556: key,message_a: bitstring) = (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-7-tuple(v_537))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (if not-caught-fail(v_543) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then (if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (v_553,5-proj-7-tuple(v_537),v_554) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {36}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {37}insert statestore(alice,bob,statepack_b(hs_555));
        {38}out(pub, message_a)
    ) | (
        {75}get statestore(=alice,=bob,statepack_b(hs_557: handshakestate)) in
        {40}in(pub, message_b: bitstring);
        {41}let v_558: bitstring = catch-fail(handshakestateunpack(hs_557)) in
        {42}let v_559: bitstring = catch-fail(deconcat3(message_b)) in
        {43}let v_560: bool = catch-fail(true) in
        {44}let v_561: key = catch-fail(1-proj-3-tuple(v_559)) in
        {45}let v_562: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_558))) in
        {46}let v_563: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_558)) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then symmetricstatepack(1-proj-3-tuple(v_562),2-proj-3-tuple(v_562),hash(3-proj-3-tuple(v_562),v_561)) else fail-any) else fail-any)) in
        {47}let v_564: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_558))) in
        {48}let v_565: bitstring = catch-fail(symmetricstateunpack(v_563)) in
        {49}let v_566: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_565),(if success?(3-proj-7-tuple(v_558)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_561) else fail-any) else fail-any))) in
        {50}let v_567: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_565),(if success?(3-proj-7-tuple(v_558)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_561) else fail-any) else fail-any))) in
        {51}let v_568: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_565),(if success?(3-proj-7-tuple(v_558)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_561) else fail-any) else fail-any))) in
        {52}let v_569: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_558)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_561) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_565))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then (v_566,v_567,v_568) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_570: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_558)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),v_561) else fail-any) else fail-any)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_569)) then cipherstatepack(2-proj-3-tuple(v_569),minnonce) else fail-any),1-proj-3-tuple(v_569),3-proj-3-tuple(v_565)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_571: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_558))) in
        {55}let v_572: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {56}let v_573: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_572),(if success?(2-proj-7-tuple(v_558)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_561) else fail-any) else fail-any))) in
        {57}let v_574: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_572),(if success?(2-proj-7-tuple(v_558)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_561) else fail-any) else fail-any))) in
        {58}let v_575: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_572),(if success?(2-proj-7-tuple(v_558)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_561) else fail-any) else fail-any))) in
        {59}let v_576: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_558)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_561) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_572))) then (if not-caught-fail(v_573) then (if not-caught-fail(v_574) then (if not-caught-fail(v_575) then (v_573,v_574,v_575) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_577: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_558)) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then dhexp(2-proj-2-tuple(v_571),v_561) else fail-any) else fail-any)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_576)) then cipherstatepack(2-proj-3-tuple(v_576),minnonce) else fail-any),1-proj-3-tuple(v_576),3-proj-3-tuple(v_572)) else fail-any) else fail-any) else fail-any)) in
        {61}let v_578: bitstring = catch-fail(symmetricstateunpack(v_577)) in
        {62}let v_579: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_578))) in
        {63}let v_580: aead = catch-fail(decrypt(1-proj-2-tuple(v_579),2-proj-2-tuple(v_579),3-proj-3-tuple(v_578),3-proj-3-tuple(v_559))) in
        {64}let v_581: bitstring = catch-fail(aeadunpack(v_580)) in
        {65}let v_582: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_578))) in
        {66}let v_583: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_579))) && success?(1-proj-3-tuple(v_578))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then cipherstatepack(1-proj-2-tuple(v_582),increment_nonce(2-proj-2-tuple(v_579))) else fail-any) else fail-any)) in
        {67}let v_584: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_559)) && (success?(3-proj-3-tuple(v_578)) && success?(1-proj-3-tuple(v_578)))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then (if not-caught-fail(v_580) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if not-caught-fail(v_583) then (v_583,3-proj-3-tuple(v_581),1-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_585: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_584),2-proj-3-tuple(v_578),3-proj-3-tuple(v_578)))) in
        {69}let v_586: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_559)) && success?(symmetricstatepack(1-proj-3-tuple(v_584),2-proj-3-tuple(v_578),3-proj-3-tuple(v_578)))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack(1-proj-3-tuple(v_585),2-proj-3-tuple(v_585),hash(3-proj-3-tuple(v_585),3-proj-3-tuple(v_559))) else fail-any) else fail-any)) in
        {70}let v_587: bitstring = catch-fail((if success?(3-proj-3-tuple(v_559)) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if not-caught-fail(v_586) then (v_586,2-proj-3-tuple(v_584),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_588: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_587),2-proj-7-tuple(v_558),3-proj-7-tuple(v_558),4-proj-7-tuple(v_558),v_561,6-proj-7-tuple(v_558),7-proj-7-tuple(v_558))) in
        {72}let (hs_589: handshakestate,re_590: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-7-tuple(v_558))))) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (if not-caught-fail(v_563) then (if not-caught-fail(v_570) then (if not-caught-fail(v_577) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (v_560 && 3-proj-3-tuple(v_587)) then (if not-caught-fail(v_588) then (v_588,getpublickey(3-proj-7-tuple(v_558)),2-proj-3-tuple(v_587),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {73}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {74}insert statestore(alice,bob,statepack_c(hs_589))
    ) | (
        {93}get statestore(=alice,=bob,statepack_c(hs_591: handshakestate)) in
        {76}let v_592: bitstring = catch-fail(handshakestateunpack(hs_591)) in
        {77}let v_593: bitstring = catch-fail((empty,empty,empty)) in
        {78}let v_594: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_592))) in
        {79}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {80}let v_596: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_595),2-proj-2-tuple(v_595),3-proj-3-tuple(v_594),msg_c(alice,bob))) in
        {81}let v_597: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {82}let v_598: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_595))) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then cipherstatepack(1-proj-2-tuple(v_597),increment_nonce(2-proj-2-tuple(v_595))) else fail-any) else fail-any)) in
        {83}let v_599: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_594)) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if not-caught-fail(v_598) then (v_598,v_596) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_600: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_599),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) in
        {85}let v_601: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_599)) && success?(symmetricstatepack(1-proj-2-tuple(v_599),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_600),hash(3-proj-3-tuple(v_600),2-proj-2-tuple(v_599))) else fail-any) else fail-any)) in
        {86}let v_602: bitstring = catch-fail((if success?(1-proj-7-tuple(v_592)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-2-tuple(v_599))))) then (if not-caught-fail(v_601) then (v_601,2-proj-2-tuple(v_599)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_603: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_602),2-proj-7-tuple(v_592),3-proj-7-tuple(v_592),4-proj-7-tuple(v_592),5-proj-7-tuple(v_592),6-proj-7-tuple(v_592),7-proj-7-tuple(v_592))) in
        {88}let v_604: bitstring = catch-fail(concat3(1-proj-3-tuple(v_593),2-proj-3-tuple(v_593),2-proj-2-tuple(v_602))) in
        {89}let (hs_605: handshakestate,re_606: key,message_c: bitstring) = (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-7-tuple(v_592))))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (v_603,5-proj-7-tuple(v_592),v_604) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {90}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {91}insert statestore(alice,bob,statepack_d(hs_605));
        {92}out(pub, message_c)
    ) | (
        {121}get statestore(=alice,=bob,statepack_d(hs_607: handshakestate)) in
        {94}in(pub, message_d: bitstring);
        {95}let v_608: bitstring = catch-fail(handshakestateunpack(hs_607)) in
        {96}let v_609: bitstring = catch-fail(deconcat3(message_d)) in
        {97}let v_610: bool = catch-fail(true) in
        {98}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_608))) in
        {99}let v_612: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_611))) in
        {100}let v_613: aead = catch-fail(decrypt(1-proj-2-tuple(v_612),2-proj-2-tuple(v_612),3-proj-3-tuple(v_611),3-proj-3-tuple(v_609))) in
        {101}let v_614: bitstring = catch-fail(aeadunpack(v_613)) in
        {102}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_611))) in
        {103}let v_616: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_612))) && success?(1-proj-3-tuple(v_611))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then cipherstatepack(1-proj-2-tuple(v_615),increment_nonce(2-proj-2-tuple(v_612))) else fail-any) else fail-any)) in
        {104}let v_617: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_609)) && (success?(3-proj-3-tuple(v_611)) && success?(1-proj-3-tuple(v_611)))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-2-tuple(v_612))))) then (if not-caught-fail(v_613) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if not-caught-fail(v_616) then (v_616,3-proj-3-tuple(v_614),1-proj-3-tuple(v_614)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {105}let v_618: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_617),2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)))) in
        {106}let v_619: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_609)) && success?(symmetricstatepack(1-proj-3-tuple(v_617),2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),3-proj-3-tuple(v_609))) else fail-any) else fail-any)) in
        {107}let v_620: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_609)) && success?(1-proj-7-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if not-caught-fail(v_619) then (v_619,2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_621: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_620),2-proj-7-tuple(v_608),3-proj-7-tuple(v_608),4-proj-7-tuple(v_608),5-proj-7-tuple(v_608),6-proj-7-tuple(v_608),7-proj-7-tuple(v_608))) in
        {109}let v_622: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_620))) in
        {110}let v_623: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_622),zero)) in
        {111}let v_624: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_622),zero)) in
        {112}let v_625: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_622),zero)) in
        {113}let v_626: bitstring = catch-fail((if success?(2-proj-3-tuple(v_622)) then (if not-caught-fail(v_623) then (if not-caught-fail(v_624) then (if not-caught-fail(v_625) then (v_623,v_624,v_625) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_627: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_626)) then cipherstatepack(1-proj-3-tuple(v_626),minnonce) else fail-any)) in
        {115}let v_628: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_626)) then cipherstatepack(2-proj-3-tuple(v_626),minnonce) else fail-any)) in
        {116}let v_629: bitstring = catch-fail((if success?(1-proj-3-tuple(v_620)) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (1-proj-3-tuple(v_620),v_627,v_628) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let (hs_630: handshakestate,re_631: key,plaintext_d: bitstring,valid_632: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-7-tuple(v_608))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if not-caught-fail(v_610) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (v_610 && 3-proj-3-tuple(v_620)) then (if not-caught-fail(v_621) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (v_621,getpublickey(3-proj-7-tuple(v_608)),2-proj-3-tuple(v_620),true,2-proj-3-tuple(v_629),3-proj-3-tuple(v_629)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {118}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_632);
        {119}insert statestore(alice,bob,statepack_e(hs_630));
        {120}event RecvEnd(valid_632)
    ) | (
        {122}event LeakS(phase0,alice);
        {123}out(pub, key_s(alice))
    ) | (
        {124}phase 1;
        {125}event LeakS(phase1,alice);
        {126}out(pub, key_s(alice))
    )
) | (
    {127}let v_633: key = catch-fail(dhexp(key_s(alice),g)) in
    {128}let s_634: keypair = (if not-caught-fail(v_633) then keypairpack(v_633,key_s(alice)) else fail-any) in
    {129}out(pub, getpublickey(s_634));
    (
        {130}let e_635: keypair = keypairpack(empty,empty) in
        {131}let rs_636: key = empty in
        {132}let re_637: key = empty in
        {133}let v_638: bitstring = catch-fail(hash(somename,empty)) in
        {134}let v_639: key = catch-fail(v_638) in
        {135}let v_640: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {136}let v_641: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then symmetricstatepack(v_640,v_639,v_638) else fail-any) else fail-any) else fail-any))) in
        {137}let v_642: symmetricstate = catch-fail((if success?((if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then symmetricstatepack(v_640,v_639,v_638) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_641),hash(3-proj-3-tuple(v_641),empty)) else fail-any) else fail-any)) in
        {138}let v_643: bitstring = catch-fail(symmetricstateunpack(v_642)) in
        {139}let v_644: symmetricstate = catch-fail((if success?(getpublickey(s_634)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then symmetricstatepack(1-proj-3-tuple(v_643),2-proj-3-tuple(v_643),hash(3-proj-3-tuple(v_643),getpublickey(s_634))) else fail-any) else fail-any)) in
        {140}let hs_645: handshakestate = (if not-caught-fail(v_642) then (if not-caught-fail(v_644) then handshakestatepack(v_644,s_634,e_635,rs_636,re_637,empty,true) else fail-any) else fail-any) in
        {141}insert statestore(alice,charlie,statepack_a(hs_645))
    ) | (
        {164}get statestore(=alice,=charlie,statepack_a(hs_646: handshakestate)) in
        {142}let v_647: bitstring = catch-fail(handshakestateunpack(hs_646)) in
        {143}let v_648: bitstring = catch-fail((empty,empty,empty)) in
        {144}let v_649: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {145}let v_650: keypair = catch-fail((if not-caught-fail(v_649) then keypairpack(v_649,key_e(alice,charlie)) else fail-any)) in
        {146}let v_651: bitstring = catch-fail(getpublickey(v_650)) in
        {147}let v_652: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_647))) in
        {148}let v_653: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_647)) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then symmetricstatepack(1-proj-3-tuple(v_652),2-proj-3-tuple(v_652),hash(3-proj-3-tuple(v_652),v_651)) else fail-any) else fail-any)) in
        {149}let v_654: bitstring = catch-fail(symmetricstateunpack(v_653)) in
        {150}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_654))) in
        {151}let v_656: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_655),2-proj-2-tuple(v_655),3-proj-3-tuple(v_654),msg_a(alice,charlie))) in
        {152}let v_657: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_654))) in
        {153}let v_658: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_655))) && success?(1-proj-3-tuple(v_654))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then cipherstatepack(1-proj-2-tuple(v_657),increment_nonce(2-proj-2-tuple(v_655))) else fail-any) else fail-any)) in
        {154}let v_659: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_654)) && success?(1-proj-3-tuple(v_654))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_658) then (v_658,v_656) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {155}let v_660: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_659),2-proj-3-tuple(v_654),3-proj-3-tuple(v_654)))) in
        {156}let v_661: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_659)) && success?(symmetricstatepack(1-proj-2-tuple(v_659),2-proj-3-tuple(v_654),3-proj-3-tuple(v_654)))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then symmetricstatepack(1-proj-3-tuple(v_660),2-proj-3-tuple(v_660),hash(3-proj-3-tuple(v_660),2-proj-2-tuple(v_659))) else fail-any) else fail-any)) in
        {157}let v_662: bitstring = catch-fail((if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_661) then (v_661,2-proj-2-tuple(v_659)) else fail-any) else fail-any) else fail-any)) in
        {158}let v_663: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_662),2-proj-7-tuple(v_647),v_650,4-proj-7-tuple(v_647),5-proj-7-tuple(v_647),6-proj-7-tuple(v_647),7-proj-7-tuple(v_647))) in
        {159}let v_664: bitstring = catch-fail(concat3(v_651,2-proj-3-tuple(v_648),2-proj-2-tuple(v_662))) in
        {160}let (hs_665: handshakestate,re_666: key,message_a_667: bitstring) = (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-7-tuple(v_647))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if not-caught-fail(v_650) then (if not-caught-fail(v_651) then (if not-caught-fail(v_653) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (v_663,5-proj-7-tuple(v_647),v_664) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {161}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {162}insert statestore(alice,charlie,statepack_b(hs_665));
        {163}out(pub, message_a_667)
    ) | (
        {200}get statestore(=alice,=charlie,statepack_b(hs_668: handshakestate)) in
        {165}in(pub, message_b_669: bitstring);
        {166}let v_670: bitstring = catch-fail(handshakestateunpack(hs_668)) in
        {167}let v_671: bitstring = catch-fail(deconcat3(message_b_669)) in
        {168}let v_672: bool = catch-fail(true) in
        {169}let v_673: key = catch-fail(1-proj-3-tuple(v_671)) in
        {170}let v_674: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_670))) in
        {171}let v_675: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_670)) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),v_673)) else fail-any) else fail-any)) in
        {172}let v_676: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_670))) in
        {173}let v_677: bitstring = catch-fail(symmetricstateunpack(v_675)) in
        {174}let v_678: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_677),(if success?(3-proj-7-tuple(v_670)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_673) else fail-any) else fail-any))) in
        {175}let v_679: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_677),(if success?(3-proj-7-tuple(v_670)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_673) else fail-any) else fail-any))) in
        {176}let v_680: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_677),(if success?(3-proj-7-tuple(v_670)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_673) else fail-any) else fail-any))) in
        {177}let v_681: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_670)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_673) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_677))) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (v_678,v_679,v_680) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {178}let v_682: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_670)) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then dhexp(2-proj-2-tuple(v_676),v_673) else fail-any) else fail-any)) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_681)) then cipherstatepack(2-proj-3-tuple(v_681),minnonce) else fail-any),1-proj-3-tuple(v_681),3-proj-3-tuple(v_677)) else fail-any) else fail-any) else fail-any)) in
        {179}let v_683: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_670))) in
        {180}let v_684: bitstring = catch-fail(symmetricstateunpack(v_682)) in
        {181}let v_685: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_684),(if success?(2-proj-7-tuple(v_670)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),v_673) else fail-any) else fail-any))) in
        {182}let v_686: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_684),(if success?(2-proj-7-tuple(v_670)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),v_673) else fail-any) else fail-any))) in
        {183}let v_687: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_684),(if success?(2-proj-7-tuple(v_670)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),v_673) else fail-any) else fail-any))) in
        {184}let v_688: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_670)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),v_673) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_684))) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (if not-caught-fail(v_687) then (v_685,v_686,v_687) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {185}let v_689: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_670)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then dhexp(2-proj-2-tuple(v_683),v_673) else fail-any) else fail-any)) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_688)) then cipherstatepack(2-proj-3-tuple(v_688),minnonce) else fail-any),1-proj-3-tuple(v_688),3-proj-3-tuple(v_684)) else fail-any) else fail-any) else fail-any)) in
        {186}let v_690: bitstring = catch-fail(symmetricstateunpack(v_689)) in
        {187}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_690))) in
        {188}let v_692: aead = catch-fail(decrypt(1-proj-2-tuple(v_691),2-proj-2-tuple(v_691),3-proj-3-tuple(v_690),3-proj-3-tuple(v_671))) in
        {189}let v_693: bitstring = catch-fail(aeadunpack(v_692)) in
        {190}let v_694: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_690))) in
        {191}let v_695: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_691))) && success?(1-proj-3-tuple(v_690))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then cipherstatepack(1-proj-2-tuple(v_694),increment_nonce(2-proj-2-tuple(v_691))) else fail-any) else fail-any)) in
        {192}let v_696: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_671)) && (success?(3-proj-3-tuple(v_690)) && success?(1-proj-3-tuple(v_690)))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then (if not-caught-fail(v_692) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,3-proj-3-tuple(v_693),1-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {193}let v_697: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_690),3-proj-3-tuple(v_690)))) in
        {194}let v_698: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_671)) && success?(symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_690),3-proj-3-tuple(v_690)))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_697),hash(3-proj-3-tuple(v_697),3-proj-3-tuple(v_671))) else fail-any) else fail-any)) in
        {195}let v_699: bitstring = catch-fail((if success?(3-proj-3-tuple(v_671)) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if not-caught-fail(v_698) then (v_698,2-proj-3-tuple(v_696),3-proj-3-tuple(v_696)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {196}let v_700: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_699),2-proj-7-tuple(v_670),3-proj-7-tuple(v_670),4-proj-7-tuple(v_670),v_673,6-proj-7-tuple(v_670),7-proj-7-tuple(v_670))) in
        {197}let (hs_701: handshakestate,re_702: key,plaintext_b_703: bitstring,valid_704: bool) = (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-7-tuple(v_670))))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if not-caught-fail(v_672) then (if not-caught-fail(v_673) then (if not-caught-fail(v_675) then (if not-caught-fail(v_682) then (if not-caught-fail(v_689) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if (v_672 && 3-proj-3-tuple(v_699)) then (if not-caught-fail(v_700) then (v_700,getpublickey(3-proj-7-tuple(v_670)),2-proj-3-tuple(v_699),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {198}event RecvMsg(alice,charlie,stage_b,plaintext_b_703,valid_704);
        {199}insert statestore(alice,charlie,statepack_c(hs_701))
    ) | (
        {218}get statestore(=alice,=charlie,statepack_c(hs_705: handshakestate)) in
        {201}let v_706: bitstring = catch-fail(handshakestateunpack(hs_705)) in
        {202}let v_707: bitstring = catch-fail((empty,empty,empty)) in
        {203}let v_708: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_706))) in
        {204}let v_709: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_708))) in
        {205}let v_710: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_709),2-proj-2-tuple(v_709),3-proj-3-tuple(v_708),msg_c(alice,charlie))) in
        {206}let v_711: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_708))) in
        {207}let v_712: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_709))) && success?(1-proj-3-tuple(v_708))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then cipherstatepack(1-proj-2-tuple(v_711),increment_nonce(2-proj-2-tuple(v_709))) else fail-any) else fail-any)) in
        {208}let v_713: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_708)) && success?(1-proj-3-tuple(v_708))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_712) then (v_712,v_710) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_714: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_713),2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)))) in
        {210}let v_715: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_713)) && success?(symmetricstatepack(1-proj-2-tuple(v_713),2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then symmetricstatepack(1-proj-3-tuple(v_714),2-proj-3-tuple(v_714),hash(3-proj-3-tuple(v_714),2-proj-2-tuple(v_713))) else fail-any) else fail-any)) in
        {211}let v_716: bitstring = catch-fail((if success?(1-proj-7-tuple(v_706)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then (if not-caught-fail(v_715) then (v_715,2-proj-2-tuple(v_713)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_717: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_716),2-proj-7-tuple(v_706),3-proj-7-tuple(v_706),4-proj-7-tuple(v_706),5-proj-7-tuple(v_706),6-proj-7-tuple(v_706),7-proj-7-tuple(v_706))) in
        {213}let v_718: bitstring = catch-fail(concat3(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),2-proj-2-tuple(v_716))) in
        {214}let (hs_719: handshakestate,re_720: key,message_c_721: bitstring) = (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-7-tuple(v_706))))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (v_717,5-proj-7-tuple(v_706),v_718) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {215}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {216}insert statestore(alice,charlie,statepack_d(hs_719));
        {217}out(pub, message_c_721)
    ) | (
        {246}get statestore(=alice,=charlie,statepack_d(hs_722: handshakestate)) in
        {219}in(pub, message_d_723: bitstring);
        {220}let v_724: bitstring = catch-fail(handshakestateunpack(hs_722)) in
        {221}let v_725: bitstring = catch-fail(deconcat3(message_d_723)) in
        {222}let v_726: bool = catch-fail(true) in
        {223}let v_727: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_724))) in
        {224}let v_728: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {225}let v_729: aead = catch-fail(decrypt(1-proj-2-tuple(v_728),2-proj-2-tuple(v_728),3-proj-3-tuple(v_727),3-proj-3-tuple(v_725))) in
        {226}let v_730: bitstring = catch-fail(aeadunpack(v_729)) in
        {227}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_727))) in
        {228}let v_732: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_728))) && success?(1-proj-3-tuple(v_727))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then cipherstatepack(1-proj-2-tuple(v_731),increment_nonce(2-proj-2-tuple(v_728))) else fail-any) else fail-any)) in
        {229}let v_733: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_725)) && (success?(3-proj-3-tuple(v_727)) && success?(1-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-2-tuple(v_728))))) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_732) then (v_732,3-proj-3-tuple(v_730),1-proj-3-tuple(v_730)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_734: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) in
        {231}let v_735: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_725)) && success?(symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_727),3-proj-3-tuple(v_727)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),3-proj-3-tuple(v_725))) else fail-any) else fail-any)) in
        {232}let v_736: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_725)) && success?(1-proj-7-tuple(v_724))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_737: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_736),2-proj-7-tuple(v_724),3-proj-7-tuple(v_724),4-proj-7-tuple(v_724),5-proj-7-tuple(v_724),6-proj-7-tuple(v_724),7-proj-7-tuple(v_724))) in
        {234}let v_738: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_736))) in
        {235}let v_739: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_738),zero)) in
        {236}let v_740: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_738),zero)) in
        {237}let v_741: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_738),zero)) in
        {238}let v_742: bitstring = catch-fail((if success?(2-proj-3-tuple(v_738)) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (if not-caught-fail(v_741) then (v_739,v_740,v_741) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_743: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_742)) then cipherstatepack(1-proj-3-tuple(v_742),minnonce) else fail-any)) in
        {240}let v_744: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_742)) then cipherstatepack(2-proj-3-tuple(v_742),minnonce) else fail-any)) in
        {241}let v_745: bitstring = catch-fail((if success?(1-proj-3-tuple(v_736)) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if not-caught-fail(v_743) then (if not-caught-fail(v_744) then (1-proj-3-tuple(v_736),v_743,v_744) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {242}let (hs_746: handshakestate,re_747: key,plaintext_d_748: bitstring,valid_749: bool,cs1_750: cipherstate,cs2_751: cipherstate) = (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-7-tuple(v_724))))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if not-caught-fail(v_726) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if (v_726 && 3-proj-3-tuple(v_736)) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (v_737,getpublickey(3-proj-7-tuple(v_724)),2-proj-3-tuple(v_736),true,2-proj-3-tuple(v_745),3-proj-3-tuple(v_745)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {243}event RecvMsg(alice,charlie,stage_d,plaintext_d_748,valid_749);
        {244}insert statestore(alice,charlie,statepack_e(hs_746));
        {245}event RecvEnd(valid_749)
    ) | (
        {247}event LeakS(phase0,alice);
        {248}out(pub, key_s(alice))
    ) | (
        {249}phase 1;
        {250}event LeakS(phase1,alice);
        {251}out(pub, key_s(alice))
    )
) | (
    {252}let s_752: keypair = keypairpack(empty,empty) in
    (
        {253}let e_753: keypair = keypairpack(empty,empty) in
        {254}let v_754: key = catch-fail(dhexp(key_s(alice),g)) in
        {255}let rs_755: key = getpublickey((if not-caught-fail(v_754) then keypairpack(v_754,key_s(alice)) else fail-any)) in
        {256}let re_756: key = empty in
        {257}let v_757: bitstring = catch-fail(hash(somename,empty)) in
        {258}let v_758: key = catch-fail(v_757) in
        {259}let v_759: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {260}let v_760: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (if not-caught-fail(v_759) then symmetricstatepack(v_759,v_758,v_757) else fail-any) else fail-any) else fail-any))) in
        {261}let v_761: symmetricstate = catch-fail((if success?((if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (if not-caught-fail(v_759) then symmetricstatepack(v_759,v_758,v_757) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then symmetricstatepack(1-proj-3-tuple(v_760),2-proj-3-tuple(v_760),hash(3-proj-3-tuple(v_760),empty)) else fail-any) else fail-any)) in
        {262}let v_762: bitstring = catch-fail(symmetricstateunpack(v_761)) in
        {263}let v_763: symmetricstate = catch-fail((if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_762),hash(3-proj-3-tuple(v_762),rs_755)) else fail-any)) in
        {264}let hs_764: handshakestate = (if not-caught-fail(v_761) then (if not-caught-fail(v_763) then handshakestatepack(v_763,s_752,e_753,rs_755,re_756,empty,false) else fail-any) else fail-any) in
        {265}insert statestore(bob,alice,statepack_a(hs_764))
    ) | (
        {287}get statestore(=bob,=alice,statepack_a(hs_765: handshakestate)) in
        {266}in(pub, message_a_766: bitstring);
        {267}let v_767: bitstring = catch-fail(handshakestateunpack(hs_765)) in
        {268}let v_768: bitstring = catch-fail(deconcat3(message_a_766)) in
        {269}let v_769: bool = catch-fail(true) in
        {270}let v_770: key = catch-fail(1-proj-3-tuple(v_768)) in
        {271}let v_771: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_767))) in
        {272}let v_772: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_767)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_771),hash(3-proj-3-tuple(v_771),v_770)) else fail-any) else fail-any)) in
        {273}let v_773: bitstring = catch-fail(symmetricstateunpack(v_772)) in
        {274}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {275}let v_775: aead = catch-fail(decrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),3-proj-3-tuple(v_768))) in
        {276}let v_776: bitstring = catch-fail(aeadunpack(v_775)) in
        {277}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {278}let v_778: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then cipherstatepack(1-proj-2-tuple(v_777),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
        {279}let v_779: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_768)) && (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,3-proj-3-tuple(v_776),1-proj-3-tuple(v_776)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_780: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
        {281}let v_781: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_768)) && success?(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_780),hash(3-proj-3-tuple(v_780),3-proj-3-tuple(v_768))) else fail-any) else fail-any)) in
        {282}let v_782: bitstring = catch-fail((if success?(3-proj-3-tuple(v_768)) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_783: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_782),2-proj-7-tuple(v_767),3-proj-7-tuple(v_767),4-proj-7-tuple(v_767),v_770,6-proj-7-tuple(v_767),7-proj-7-tuple(v_767))) in
        {284}let (hs_784: handshakestate,re_785: key,plaintext_a: bitstring,valid_786: bool) = (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-7-tuple(v_767))))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (v_769 && 3-proj-3-tuple(v_782)) then (if not-caught-fail(v_783) then (v_783,getpublickey(3-proj-7-tuple(v_767)),2-proj-3-tuple(v_782),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {285}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_786);
        {286}insert statestore(bob,alice,statepack_b(hs_784))
    ) | (
        {324}get statestore(=bob,=alice,statepack_b(hs_787: handshakestate)) in
        {288}let v_788: bitstring = catch-fail(handshakestateunpack(hs_787)) in
        {289}let v_789: bitstring = catch-fail((empty,empty,empty)) in
        {290}let v_790: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {291}let v_791: keypair = catch-fail((if not-caught-fail(v_790) then keypairpack(v_790,key_e(bob,alice)) else fail-any)) in
        {292}let v_792: bitstring = catch-fail(getpublickey(v_791)) in
        {293}let v_793: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_788))) in
        {294}let v_794: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_788)) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_793),hash(3-proj-3-tuple(v_793),v_792)) else fail-any) else fail-any)) in
        {295}let v_795: bitstring = catch-fail(keypairunpack(v_791)) in
        {296}let v_796: bitstring = catch-fail(symmetricstateunpack(v_794)) in
        {297}let v_797: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_796),(if success?(5-proj-7-tuple(v_788)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_788)) else fail-any) else fail-any))) in
        {298}let v_798: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_796),(if success?(5-proj-7-tuple(v_788)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_788)) else fail-any) else fail-any))) in
        {299}let v_799: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_796),(if success?(5-proj-7-tuple(v_788)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_788)) else fail-any) else fail-any))) in
        {300}let v_800: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_788)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_788)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_796))) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then (v_797,v_798,v_799) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_801: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_788)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_788)) else fail-any) else fail-any)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_800)) then cipherstatepack(2-proj-3-tuple(v_800),minnonce) else fail-any),1-proj-3-tuple(v_800),3-proj-3-tuple(v_796)) else fail-any) else fail-any) else fail-any)) in
        {302}let v_802: bitstring = catch-fail(keypairunpack(v_791)) in
        {303}let v_803: bitstring = catch-fail(symmetricstateunpack(v_801)) in
        {304}let v_804: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_803),(if success?(4-proj-7-tuple(v_788)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then dhexp(2-proj-2-tuple(v_802),4-proj-7-tuple(v_788)) else fail-any) else fail-any))) in
        {305}let v_805: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_803),(if success?(4-proj-7-tuple(v_788)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then dhexp(2-proj-2-tuple(v_802),4-proj-7-tuple(v_788)) else fail-any) else fail-any))) in
        {306}let v_806: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_803),(if success?(4-proj-7-tuple(v_788)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then dhexp(2-proj-2-tuple(v_802),4-proj-7-tuple(v_788)) else fail-any) else fail-any))) in
        {307}let v_807: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_788)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then dhexp(2-proj-2-tuple(v_802),4-proj-7-tuple(v_788)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_803))) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (v_804,v_805,v_806) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {308}let v_808: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_788)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then dhexp(2-proj-2-tuple(v_802),4-proj-7-tuple(v_788)) else fail-any) else fail-any)) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_807)) then cipherstatepack(2-proj-3-tuple(v_807),minnonce) else fail-any),1-proj-3-tuple(v_807),3-proj-3-tuple(v_803)) else fail-any) else fail-any) else fail-any)) in
        {309}let v_809: bitstring = catch-fail(symmetricstateunpack(v_808)) in
        {310}let v_810: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_809))) in
        {311}let v_811: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_810),2-proj-2-tuple(v_810),3-proj-3-tuple(v_809),msg_b(bob,alice))) in
        {312}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_809))) in
        {313}let v_813: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_810))) && success?(1-proj-3-tuple(v_809))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then cipherstatepack(1-proj-2-tuple(v_812),increment_nonce(2-proj-2-tuple(v_810))) else fail-any) else fail-any)) in
        {314}let v_814: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_809)) && success?(1-proj-3-tuple(v_809))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_811) then (if not-caught-fail(v_813) then (v_813,v_811) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {315}let v_815: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_814),2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)))) in
        {316}let v_816: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_814)) && success?(symmetricstatepack(1-proj-2-tuple(v_814),2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),2-proj-2-tuple(v_814))) else fail-any) else fail-any)) in
        {317}let v_817: bitstring = catch-fail((if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then (if not-caught-fail(v_816) then (v_816,2-proj-2-tuple(v_814)) else fail-any) else fail-any) else fail-any)) in
        {318}let v_818: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_817),2-proj-7-tuple(v_788),v_791,4-proj-7-tuple(v_788),5-proj-7-tuple(v_788),6-proj-7-tuple(v_788),7-proj-7-tuple(v_788))) in
        {319}let v_819: bitstring = catch-fail(concat3(v_792,2-proj-3-tuple(v_789),2-proj-2-tuple(v_817))) in
        {320}let (hs_820: handshakestate,re_821: key,message_b_822: bitstring) = (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-7-tuple(v_788))))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (if not-caught-fail(v_794) then (if not-caught-fail(v_801) then (if not-caught-fail(v_808) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-2-tuple(v_817))))) then (if not-caught-fail(v_818) then (if not-caught-fail(v_819) then (v_818,5-proj-7-tuple(v_788),v_819) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {321}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {322}insert statestore(bob,alice,statepack_c(hs_820));
        {323}out(pub, message_b_822)
    ) | (
        {343}get statestore(=bob,=alice,statepack_c(hs_823: handshakestate)) in
        {325}in(pub, message_c_824: bitstring);
        {326}let v_825: bitstring = catch-fail(handshakestateunpack(hs_823)) in
        {327}let v_826: bitstring = catch-fail(deconcat3(message_c_824)) in
        {328}let v_827: bool = catch-fail(true) in
        {329}let v_828: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_825))) in
        {330}let v_829: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_828))) in
        {331}let v_830: aead = catch-fail(decrypt(1-proj-2-tuple(v_829),2-proj-2-tuple(v_829),3-proj-3-tuple(v_828),3-proj-3-tuple(v_826))) in
        {332}let v_831: bitstring = catch-fail(aeadunpack(v_830)) in
        {333}let v_832: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_828))) in
        {334}let v_833: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_829))) && success?(1-proj-3-tuple(v_828))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then cipherstatepack(1-proj-2-tuple(v_832),increment_nonce(2-proj-2-tuple(v_829))) else fail-any) else fail-any)) in
        {335}let v_834: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_826)) && (success?(3-proj-3-tuple(v_828)) && success?(1-proj-3-tuple(v_828)))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then (if not-caught-fail(v_830) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if not-caught-fail(v_833) then (v_833,3-proj-3-tuple(v_831),1-proj-3-tuple(v_831)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let v_835: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_828),3-proj-3-tuple(v_828)))) in
        {337}let v_836: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_826)) && success?(symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_828),3-proj-3-tuple(v_828)))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then symmetricstatepack(1-proj-3-tuple(v_835),2-proj-3-tuple(v_835),hash(3-proj-3-tuple(v_835),3-proj-3-tuple(v_826))) else fail-any) else fail-any)) in
        {338}let v_837: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_826)) && success?(1-proj-7-tuple(v_825))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then (if not-caught-fail(v_836) then (v_836,2-proj-3-tuple(v_834),3-proj-3-tuple(v_834)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {339}let v_838: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_837),2-proj-7-tuple(v_825),3-proj-7-tuple(v_825),4-proj-7-tuple(v_825),5-proj-7-tuple(v_825),6-proj-7-tuple(v_825),7-proj-7-tuple(v_825))) in
        {340}let (hs_839: handshakestate,re_840: key,plaintext_c: bitstring,valid_841: bool) = (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-7-tuple(v_825))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if not-caught-fail(v_827) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if (v_827 && 3-proj-3-tuple(v_837)) then (if not-caught-fail(v_838) then (v_838,getpublickey(3-proj-7-tuple(v_825)),2-proj-3-tuple(v_837),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {341}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_841);
        {342}insert statestore(bob,alice,statepack_d(hs_839))
    ) | (
        {369}get statestore(=bob,=alice,statepack_d(hs_842: handshakestate)) in
        {344}let v_843: bitstring = catch-fail(handshakestateunpack(hs_842)) in
        {345}let v_844: bitstring = catch-fail((empty,empty,empty)) in
        {346}let v_845: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_843))) in
        {347}let v_846: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {348}let v_847: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_846),2-proj-2-tuple(v_846),3-proj-3-tuple(v_845),msg_d(bob,alice))) in
        {349}let v_848: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_845))) in
        {350}let v_849: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_846))) && success?(1-proj-3-tuple(v_845))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then cipherstatepack(1-proj-2-tuple(v_848),increment_nonce(2-proj-2-tuple(v_846))) else fail-any) else fail-any)) in
        {351}let v_850: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_845)) && success?(1-proj-3-tuple(v_845))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then (if not-caught-fail(v_847) then (if not-caught-fail(v_849) then (v_849,v_847) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_851: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_850),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) in
        {353}let v_852: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_850)) && success?(symmetricstatepack(1-proj-2-tuple(v_850),2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then symmetricstatepack(1-proj-3-tuple(v_851),2-proj-3-tuple(v_851),hash(3-proj-3-tuple(v_851),2-proj-2-tuple(v_850))) else fail-any) else fail-any)) in
        {354}let v_853: bitstring = catch-fail((if success?(1-proj-7-tuple(v_843)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_852) then (v_852,2-proj-2-tuple(v_850)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_854: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_853),2-proj-7-tuple(v_843),3-proj-7-tuple(v_843),4-proj-7-tuple(v_843),5-proj-7-tuple(v_843),6-proj-7-tuple(v_843),7-proj-7-tuple(v_843))) in
        {356}let v_855: bitstring = catch-fail(concat3(1-proj-3-tuple(v_844),2-proj-3-tuple(v_844),2-proj-2-tuple(v_853))) in
        {357}let v_856: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_853))) in
        {358}let v_857: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_856),zero)) in
        {359}let v_858: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_856),zero)) in
        {360}let v_859: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_856),zero)) in
        {361}let v_860: bitstring = catch-fail((if success?(2-proj-3-tuple(v_856)) then (if not-caught-fail(v_857) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (v_857,v_858,v_859) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {362}let v_861: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_860)) then cipherstatepack(1-proj-3-tuple(v_860),minnonce) else fail-any)) in
        {363}let v_862: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_860)) then cipherstatepack(2-proj-3-tuple(v_860),minnonce) else fail-any)) in
        {364}let v_863: bitstring = catch-fail((if success?(1-proj-2-tuple(v_853)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if not-caught-fail(v_861) then (if not-caught-fail(v_862) then (1-proj-2-tuple(v_853),v_861,v_862) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {365}let (hs_864: handshakestate,re_865: key,message_d_866: bitstring,cs1_867: cipherstate,cs2_868: cipherstate) = (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-7-tuple(v_843))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then (if not-caught-fail(v_854) then (if not-caught-fail(v_855) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (v_854,5-proj-7-tuple(v_843),v_855,2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {366}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {367}insert statestore(bob,alice,statepack_e(hs_864));
        {368}out(pub, message_d_866)
    ) | (
        {370}event LeakS(phase0,bob);
        {371}out(pub, key_s(bob))
    ) | (
        {372}phase 1;
        {373}event LeakS(phase1,bob);
        {374}out(pub, key_s(bob))
    )
) | (
    {375}let s_869: keypair = keypairpack(empty,empty) in
    (
        {376}let e_870: keypair = keypairpack(empty,empty) in
        {377}let v_871: key = catch-fail(dhexp(key_s(charlie),g)) in
        {378}let rs_872: key = getpublickey((if not-caught-fail(v_871) then keypairpack(v_871,key_s(charlie)) else fail-any)) in
        {379}let re_873: key = empty in
        {380}let v_874: bitstring = catch-fail(hash(somename,empty)) in
        {381}let v_875: key = catch-fail(v_874) in
        {382}let v_876: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {383}let v_877: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then symmetricstatepack(v_876,v_875,v_874) else fail-any) else fail-any) else fail-any))) in
        {384}let v_878: symmetricstate = catch-fail((if success?((if not-caught-fail(v_874) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then symmetricstatepack(v_876,v_875,v_874) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then symmetricstatepack(1-proj-3-tuple(v_877),2-proj-3-tuple(v_877),hash(3-proj-3-tuple(v_877),empty)) else fail-any) else fail-any)) in
        {385}let v_879: bitstring = catch-fail(symmetricstateunpack(v_878)) in
        {386}let v_880: symmetricstate = catch-fail((if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack(1-proj-3-tuple(v_879),2-proj-3-tuple(v_879),hash(3-proj-3-tuple(v_879),rs_872)) else fail-any)) in
        {387}let hs_881: handshakestate = (if not-caught-fail(v_878) then (if not-caught-fail(v_880) then handshakestatepack(v_880,s_869,e_870,rs_872,re_873,empty,false) else fail-any) else fail-any) in
        {388}insert statestore(bob,charlie,statepack_a(hs_881))
    ) | (
        {410}get statestore(=bob,=charlie,statepack_a(hs_882: handshakestate)) in
        {389}in(pub, message_a_883: bitstring);
        {390}let v_884: bitstring = catch-fail(handshakestateunpack(hs_882)) in
        {391}let v_885: bitstring = catch-fail(deconcat3(message_a_883)) in
        {392}let v_886: bool = catch-fail(true) in
        {393}let v_887: key = catch-fail(1-proj-3-tuple(v_885)) in
        {394}let v_888: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_884))) in
        {395}let v_889: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_884)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then symmetricstatepack(1-proj-3-tuple(v_888),2-proj-3-tuple(v_888),hash(3-proj-3-tuple(v_888),v_887)) else fail-any) else fail-any)) in
        {396}let v_890: bitstring = catch-fail(symmetricstateunpack(v_889)) in
        {397}let v_891: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_890))) in
        {398}let v_892: aead = catch-fail(decrypt(1-proj-2-tuple(v_891),2-proj-2-tuple(v_891),3-proj-3-tuple(v_890),3-proj-3-tuple(v_885))) in
        {399}let v_893: bitstring = catch-fail(aeadunpack(v_892)) in
        {400}let v_894: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_890))) in
        {401}let v_895: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_891))) && success?(1-proj-3-tuple(v_890))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then cipherstatepack(1-proj-2-tuple(v_894),increment_nonce(2-proj-2-tuple(v_891))) else fail-any) else fail-any)) in
        {402}let v_896: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_885)) && (success?(3-proj-3-tuple(v_890)) && success?(1-proj-3-tuple(v_890)))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then (if not-caught-fail(v_892) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if not-caught-fail(v_895) then (v_895,3-proj-3-tuple(v_893),1-proj-3-tuple(v_893)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_897: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_896),2-proj-3-tuple(v_890),3-proj-3-tuple(v_890)))) in
        {404}let v_898: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_885)) && success?(symmetricstatepack(1-proj-3-tuple(v_896),2-proj-3-tuple(v_890),3-proj-3-tuple(v_890)))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack(1-proj-3-tuple(v_897),2-proj-3-tuple(v_897),hash(3-proj-3-tuple(v_897),3-proj-3-tuple(v_885))) else fail-any) else fail-any)) in
        {405}let v_899: bitstring = catch-fail((if success?(3-proj-3-tuple(v_885)) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if not-caught-fail(v_898) then (v_898,2-proj-3-tuple(v_896),3-proj-3-tuple(v_896)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let v_900: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_899),2-proj-7-tuple(v_884),3-proj-7-tuple(v_884),4-proj-7-tuple(v_884),v_887,6-proj-7-tuple(v_884),7-proj-7-tuple(v_884))) in
        {407}let (hs_901: handshakestate,re_902: key,plaintext_a_903: bitstring,valid_904: bool) = (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-7-tuple(v_884))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if not-caught-fail(v_886) then (if not-caught-fail(v_887) then (if not-caught-fail(v_889) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (if (v_886 && 3-proj-3-tuple(v_899)) then (if not-caught-fail(v_900) then (v_900,getpublickey(3-proj-7-tuple(v_884)),2-proj-3-tuple(v_899),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {408}event RecvMsg(bob,charlie,stage_a,plaintext_a_903,valid_904);
        {409}insert statestore(bob,charlie,statepack_b(hs_901))
    ) | (
        {447}get statestore(=bob,=charlie,statepack_b(hs_905: handshakestate)) in
        {411}let v_906: bitstring = catch-fail(handshakestateunpack(hs_905)) in
        {412}let v_907: bitstring = catch-fail((empty,empty,empty)) in
        {413}let v_908: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {414}let v_909: keypair = catch-fail((if not-caught-fail(v_908) then keypairpack(v_908,key_e(bob,charlie)) else fail-any)) in
        {415}let v_910: bitstring = catch-fail(getpublickey(v_909)) in
        {416}let v_911: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_906))) in
        {417}let v_912: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_906)) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then symmetricstatepack(1-proj-3-tuple(v_911),2-proj-3-tuple(v_911),hash(3-proj-3-tuple(v_911),v_910)) else fail-any) else fail-any)) in
        {418}let v_913: bitstring = catch-fail(keypairunpack(v_909)) in
        {419}let v_914: bitstring = catch-fail(symmetricstateunpack(v_912)) in
        {420}let v_915: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_914),(if success?(5-proj-7-tuple(v_906)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),5-proj-7-tuple(v_906)) else fail-any) else fail-any))) in
        {421}let v_916: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_914),(if success?(5-proj-7-tuple(v_906)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),5-proj-7-tuple(v_906)) else fail-any) else fail-any))) in
        {422}let v_917: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_914),(if success?(5-proj-7-tuple(v_906)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),5-proj-7-tuple(v_906)) else fail-any) else fail-any))) in
        {423}let v_918: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_906)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),5-proj-7-tuple(v_906)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_914))) then (if not-caught-fail(v_915) then (if not-caught-fail(v_916) then (if not-caught-fail(v_917) then (v_915,v_916,v_917) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_919: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_906)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),5-proj-7-tuple(v_906)) else fail-any) else fail-any)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_918)) then cipherstatepack(2-proj-3-tuple(v_918),minnonce) else fail-any),1-proj-3-tuple(v_918),3-proj-3-tuple(v_914)) else fail-any) else fail-any) else fail-any)) in
        {425}let v_920: bitstring = catch-fail(keypairunpack(v_909)) in
        {426}let v_921: bitstring = catch-fail(symmetricstateunpack(v_919)) in
        {427}let v_922: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_921),(if success?(4-proj-7-tuple(v_906)) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_906)) else fail-any) else fail-any))) in
        {428}let v_923: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_921),(if success?(4-proj-7-tuple(v_906)) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_906)) else fail-any) else fail-any))) in
        {429}let v_924: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_921),(if success?(4-proj-7-tuple(v_906)) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_906)) else fail-any) else fail-any))) in
        {430}let v_925: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_906)) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_906)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_921))) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (v_922,v_923,v_924) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_926: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_906)) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then dhexp(2-proj-2-tuple(v_920),4-proj-7-tuple(v_906)) else fail-any) else fail-any)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_925)) then cipherstatepack(2-proj-3-tuple(v_925),minnonce) else fail-any),1-proj-3-tuple(v_925),3-proj-3-tuple(v_921)) else fail-any) else fail-any) else fail-any)) in
        {432}let v_927: bitstring = catch-fail(symmetricstateunpack(v_926)) in
        {433}let v_928: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_927))) in
        {434}let v_929: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_928),2-proj-2-tuple(v_928),3-proj-3-tuple(v_927),msg_b(bob,charlie))) in
        {435}let v_930: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_927))) in
        {436}let v_931: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_928))) && success?(1-proj-3-tuple(v_927))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then cipherstatepack(1-proj-2-tuple(v_930),increment_nonce(2-proj-2-tuple(v_928))) else fail-any) else fail-any)) in
        {437}let v_932: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_927)) && success?(1-proj-3-tuple(v_927))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-2-tuple(v_928))))) then (if not-caught-fail(v_929) then (if not-caught-fail(v_931) then (v_931,v_929) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_933: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_932),2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)))) in
        {439}let v_934: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_932)) && success?(symmetricstatepack(1-proj-2-tuple(v_932),2-proj-3-tuple(v_927),3-proj-3-tuple(v_927)))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then symmetricstatepack(1-proj-3-tuple(v_933),2-proj-3-tuple(v_933),hash(3-proj-3-tuple(v_933),2-proj-2-tuple(v_932))) else fail-any) else fail-any)) in
        {440}let v_935: bitstring = catch-fail((if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then (if not-caught-fail(v_934) then (v_934,2-proj-2-tuple(v_932)) else fail-any) else fail-any) else fail-any)) in
        {441}let v_936: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_935),2-proj-7-tuple(v_906),v_909,4-proj-7-tuple(v_906),5-proj-7-tuple(v_906),6-proj-7-tuple(v_906),7-proj-7-tuple(v_906))) in
        {442}let v_937: bitstring = catch-fail(concat3(v_910,2-proj-3-tuple(v_907),2-proj-2-tuple(v_935))) in
        {443}let (hs_938: handshakestate,re_939: key,message_b_940: bitstring) = (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-7-tuple(v_906))))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (if not-caught-fail(v_912) then (if not-caught-fail(v_919) then (if not-caught-fail(v_926) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then (if not-caught-fail(v_936) then (if not-caught-fail(v_937) then (v_936,5-proj-7-tuple(v_906),v_937) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {444}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {445}insert statestore(bob,charlie,statepack_c(hs_938));
        {446}out(pub, message_b_940)
    ) | (
        {466}get statestore(=bob,=charlie,statepack_c(hs_941: handshakestate)) in
        {448}in(pub, message_c_942: bitstring);
        {449}let v_943: bitstring = catch-fail(handshakestateunpack(hs_941)) in
        {450}let v_944: bitstring = catch-fail(deconcat3(message_c_942)) in
        {451}let v_945: bool = catch-fail(true) in
        {452}let v_946: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_943))) in
        {453}let v_947: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {454}let v_948: aead = catch-fail(decrypt(1-proj-2-tuple(v_947),2-proj-2-tuple(v_947),3-proj-3-tuple(v_946),3-proj-3-tuple(v_944))) in
        {455}let v_949: bitstring = catch-fail(aeadunpack(v_948)) in
        {456}let v_950: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_946))) in
        {457}let v_951: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_947))) && success?(1-proj-3-tuple(v_946))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then cipherstatepack(1-proj-2-tuple(v_950),increment_nonce(2-proj-2-tuple(v_947))) else fail-any) else fail-any)) in
        {458}let v_952: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_944)) && (success?(3-proj-3-tuple(v_946)) && success?(1-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_948) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if not-caught-fail(v_951) then (v_951,3-proj-3-tuple(v_949),1-proj-3-tuple(v_949)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_953: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) in
        {460}let v_954: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_944)) && success?(symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_946),3-proj-3-tuple(v_946)))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then symmetricstatepack(1-proj-3-tuple(v_953),2-proj-3-tuple(v_953),hash(3-proj-3-tuple(v_953),3-proj-3-tuple(v_944))) else fail-any) else fail-any)) in
        {461}let v_955: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_944)) && success?(1-proj-7-tuple(v_943))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if not-caught-fail(v_954) then (v_954,2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {462}let v_956: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_955),2-proj-7-tuple(v_943),3-proj-7-tuple(v_943),4-proj-7-tuple(v_943),5-proj-7-tuple(v_943),6-proj-7-tuple(v_943),7-proj-7-tuple(v_943))) in
        {463}let (hs_957: handshakestate,re_958: key,plaintext_c_959: bitstring,valid_960: bool) = (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-7-tuple(v_943))))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if not-caught-fail(v_945) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (v_945 && 3-proj-3-tuple(v_955)) then (if not-caught-fail(v_956) then (v_956,getpublickey(3-proj-7-tuple(v_943)),2-proj-3-tuple(v_955),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {464}event RecvMsg(bob,charlie,stage_c,plaintext_c_959,valid_960);
        {465}insert statestore(bob,charlie,statepack_d(hs_957))
    ) | (
        {492}get statestore(=bob,=charlie,statepack_d(hs_961: handshakestate)) in
        {467}let v_962: bitstring = catch-fail(handshakestateunpack(hs_961)) in
        {468}let v_963: bitstring = catch-fail((empty,empty,empty)) in
        {469}let v_964: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_962))) in
        {470}let v_965: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_964))) in
        {471}let v_966: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_965),2-proj-2-tuple(v_965),3-proj-3-tuple(v_964),msg_d(bob,charlie))) in
        {472}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_964))) in
        {473}let v_968: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_965))) && success?(1-proj-3-tuple(v_964))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then cipherstatepack(1-proj-2-tuple(v_967),increment_nonce(2-proj-2-tuple(v_965))) else fail-any) else fail-any)) in
        {474}let v_969: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_964)) && success?(1-proj-3-tuple(v_964))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then (if not-caught-fail(v_966) then (if not-caught-fail(v_968) then (v_968,v_966) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {475}let v_970: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_969),2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)))) in
        {476}let v_971: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_969)) && success?(symmetricstatepack(1-proj-2-tuple(v_969),2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then symmetricstatepack(1-proj-3-tuple(v_970),2-proj-3-tuple(v_970),hash(3-proj-3-tuple(v_970),2-proj-2-tuple(v_969))) else fail-any) else fail-any)) in
        {477}let v_972: bitstring = catch-fail((if success?(1-proj-7-tuple(v_962)) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-2-tuple(v_969))))) then (if not-caught-fail(v_971) then (v_971,2-proj-2-tuple(v_969)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {478}let v_973: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_972),2-proj-7-tuple(v_962),3-proj-7-tuple(v_962),4-proj-7-tuple(v_962),5-proj-7-tuple(v_962),6-proj-7-tuple(v_962),7-proj-7-tuple(v_962))) in
        {479}let v_974: bitstring = catch-fail(concat3(1-proj-3-tuple(v_963),2-proj-3-tuple(v_963),2-proj-2-tuple(v_972))) in
        {480}let v_975: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_972))) in
        {481}let v_976: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_975),zero)) in
        {482}let v_977: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_975),zero)) in
        {483}let v_978: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_975),zero)) in
        {484}let v_979: bitstring = catch-fail((if success?(2-proj-3-tuple(v_975)) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (if not-caught-fail(v_978) then (v_976,v_977,v_978) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_980: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_979)) then cipherstatepack(1-proj-3-tuple(v_979),minnonce) else fail-any)) in
        {486}let v_981: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_979)) then cipherstatepack(2-proj-3-tuple(v_979),minnonce) else fail-any)) in
        {487}let v_982: bitstring = catch-fail((if success?(1-proj-2-tuple(v_972)) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (1-proj-2-tuple(v_972),v_980,v_981) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {488}let (hs_983: handshakestate,re_984: key,message_d_985: bitstring,cs1_986: cipherstate,cs2_987: cipherstate) = (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-7-tuple(v_962))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-2-tuple(v_972))))) then (if not-caught-fail(v_973) then (if not-caught-fail(v_974) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then (v_973,5-proj-7-tuple(v_962),v_974,2-proj-3-tuple(v_982),3-proj-3-tuple(v_982)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {489}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {490}insert statestore(bob,charlie,statepack_e(hs_983));
        {491}out(pub, message_d_985)
    ) | (
        {493}event LeakS(phase0,bob);
        {494}out(pub, key_s(bob))
    ) | (
        {495}phase 1;
        {496}event LeakS(phase1,bob);
        {497}out(pub, key_s(bob))
    )
) | (
    {498}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 168 rules in the queue.
400 rules inserted. The rule base contains 389 rules. 15 rules in the queue.
600 rules inserted. The rule base contains 576 rules. 84 rules in the queue.
800 rules inserted. The rule base contains 758 rules. 103 rules in the queue.
1000 rules inserted. The rule base contains 888 rules. 113 rules in the queue.
1200 rules inserted. The rule base contains 1008 rules. 121 rules in the queue.
1400 rules inserted. The rule base contains 1176 rules. 152 rules in the queue.
1600 rules inserted. The rule base contains 1349 rules. 216 rules in the queue.
1800 rules inserted. The rule base contains 1504 rules. 223 rules in the queue.
2000 rules inserted. The rule base contains 1630 rules. 193 rules in the queue.
2200 rules inserted. The rule base contains 1739 rules. 177 rules in the queue.
2400 rules inserted. The rule base contains 1887 rules. 185 rules in the queue.
2600 rules inserted. The rule base contains 2014 rules. 214 rules in the queue.
2800 rules inserted. The rule base contains 2147 rules. 211 rules in the queue.
3000 rules inserted. The rule base contains 2267 rules. 178 rules in the queue.
3200 rules inserted. The rule base contains 2382 rules. 144 rules in the queue.
3400 rules inserted. The rule base contains 2517 rules. 147 rules in the queue.
3600 rules inserted. The rule base contains 2640 rules. 116 rules in the queue.
3800 rules inserted. The rule base contains 2669 rules. 15 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {285}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {285}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {285}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {322}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {162}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {323}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {200}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {165}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {199}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {218}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {215}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {217}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {343}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {325}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {341}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {322}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {162}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {323}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {200}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {165}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {199}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {218}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {215}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {217}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {343}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {325}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {341}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {322}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {162}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {323}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {200}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {165}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {199}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {218}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {215}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {217}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {343}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {325}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {341}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 3 may be read at get {287}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {266}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {323}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 7 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 8 may be read at get {93}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {90}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {91}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

10. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 11 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 10 may be read at get {287}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {266}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

14. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 13 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {322}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 15 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 18 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

20. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 17 may be read at get {287}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {266}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

21. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 20 may be read at get {324}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {321}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {323}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 16 may be read at get {75}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 21 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 22 may be read at get {93}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {90}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {92}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))).

24. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 14 may be read at get {343}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {325}.
So the entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {342}.
table(statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

25. The entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 24 may be read at get {369}.
The event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true) may be executed at {366}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice))) may be sent on channel pub at output {368}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 9 may be read at get {121}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice))) that may be sent on channel pub by 25 may be received at input {94}.
So event RecvEnd(true) may be executed at {120}.
end(RecvEnd(true)).


