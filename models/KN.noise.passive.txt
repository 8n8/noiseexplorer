File "KN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "KN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 292, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 320, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 342, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 354, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 355, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 357, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 367, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 524, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 516, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 320, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 509, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 354, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 355, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 357, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 501, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 292, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 367, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "KN.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "KN.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KN.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "KN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "KN.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 342, characters 7-8:
Warning: identifier hs rebound.
File "KN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "KN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "KN.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let v_446: key = catch-fail(dhexp(key_s(me),g)) in
    {6}let s_447: keypair = (if not-caught-fail(v_446) then keypairpack(v_446,key_s(me)) else fail-any) in
    {7}out(pub, getpublickey(s_447));
    (
        {8}let e_448: keypair = keypairpack(empty,empty) in
        {9}let rs_449: key = empty in
        {10}let re_450: key = empty in
        {11}let v_451: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_452: key = catch-fail(v_451) in
        {13}let v_453: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_454: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_451) then (if not-caught-fail(v_452) then (if not-caught-fail(v_453) then symmetricstatepack(v_453,v_452,v_451) else fail-any) else fail-any) else fail-any))) in
        {15}let v_455: symmetricstate = catch-fail((if success?((if not-caught-fail(v_451) then (if not-caught-fail(v_452) then (if not-caught-fail(v_453) then symmetricstatepack(v_453,v_452,v_451) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-3-tuple(v_454))))) then symmetricstatepack(1-proj-3-tuple(v_454),2-proj-3-tuple(v_454),hash(3-proj-3-tuple(v_454),empty)) else fail-any) else fail-any)) in
        {16}let v_456: bitstring = catch-fail(symmetricstateunpack(v_455)) in
        {17}let v_457: symmetricstate = catch-fail((if success?(getpublickey(s_447)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-3-tuple(v_456))))) then symmetricstatepack(1-proj-3-tuple(v_456),2-proj-3-tuple(v_456),hash(3-proj-3-tuple(v_456),getpublickey(s_447))) else fail-any) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_455) then (if not-caught-fail(v_457) then handshakestatepack(v_457,s_447,e_448,rs_449,re_450,empty,true) else fail-any) else fail-any) in
        {19}insert statestore(me,them,statepack_a(hs))
    ) | (
        {43}get statestore(=me,=them,statepack_a(hs_458: handshakestate)) in
        {20}let v_459: bitstring = catch-fail(handshakestateunpack(hs_458)) in
        {21}let v_460: bitstring = catch-fail((empty,empty,empty)) in
        {22}new key_e[me,them]: key;
        {23}let v_461: key = catch-fail(dhexp(key_e,g)) in
        {24}let v_462: keypair = catch-fail((if not-caught-fail(v_461) then keypairpack(v_461,key_e) else fail-any)) in
        {25}let v_463: bitstring = catch-fail(getpublickey(v_462)) in
        {26}let v_464: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_459))) in
        {27}let v_465: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_459)) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-3-tuple(v_464))))) then symmetricstatepack(1-proj-3-tuple(v_464),2-proj-3-tuple(v_464),hash(3-proj-3-tuple(v_464),v_463)) else fail-any) else fail-any)) in
        {28}let v_466: bitstring = catch-fail(symmetricstateunpack(v_465)) in
        {29}let v_467: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_466))) in
        {30}let v_468: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_467),2-proj-2-tuple(v_467),3-proj-3-tuple(v_466),msg_a(me,them))) in
        {31}let v_469: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_466))) in
        {32}let v_470: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_467))) && success?(1-proj-3-tuple(v_466))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-2-tuple(v_469))))) then cipherstatepack(1-proj-2-tuple(v_469),increment_nonce(2-proj-2-tuple(v_467))) else fail-any) else fail-any)) in
        {33}let v_471: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_466)) && success?(1-proj-3-tuple(v_466))) then (if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-2-tuple(v_467))))) then (if not-caught-fail(v_468) then (if not-caught-fail(v_470) then (v_470,v_468) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_472: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_471),2-proj-3-tuple(v_466),3-proj-3-tuple(v_466)))) in
        {35}let v_473: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_471)) && success?(symmetricstatepack(1-proj-2-tuple(v_471),2-proj-3-tuple(v_466),3-proj-3-tuple(v_466)))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-3-tuple(v_472))))) then symmetricstatepack(1-proj-3-tuple(v_472),2-proj-3-tuple(v_472),hash(3-proj-3-tuple(v_472),2-proj-2-tuple(v_471))) else fail-any) else fail-any)) in
        {36}let v_474: bitstring = catch-fail((if (not-caught-fail(v_466) && success?(is-true(success?(1-proj-3-tuple(v_466))))) then (if (not-caught-fail(v_471) && success?(is-true(success?(1-proj-2-tuple(v_471))))) then (if not-caught-fail(v_473) then (v_473,2-proj-2-tuple(v_471)) else fail-any) else fail-any) else fail-any)) in
        {37}let v_475: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_474),2-proj-7-tuple(v_459),v_462,4-proj-7-tuple(v_459),5-proj-7-tuple(v_459),6-proj-7-tuple(v_459),7-proj-7-tuple(v_459))) in
        {38}let v_476: bitstring = catch-fail(concat3(v_463,2-proj-3-tuple(v_460),2-proj-2-tuple(v_474))) in
        {39}let (hs_477: handshakestate,re_478: key,message_a: bitstring) = (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-7-tuple(v_459))))) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-3-tuple(v_460))))) then (if not-caught-fail(v_462) then (if not-caught-fail(v_463) then (if not-caught-fail(v_465) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-2-tuple(v_474))))) then (if not-caught-fail(v_475) then (if not-caught-fail(v_476) then (v_475,5-proj-7-tuple(v_459),v_476) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {40}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {41}insert statestore(me,them,statepack_b(hs_477));
        {42}out(pub, message_a)
    ) | (
        {79}get statestore(=me,=them,statepack_b(hs_479: handshakestate)) in
        {44}in(pub, message_b: bitstring);
        {45}let v_480: bitstring = catch-fail(handshakestateunpack(hs_479)) in
        {46}let v_481: bitstring = catch-fail(deconcat3(message_b)) in
        {47}let v_482: bool = catch-fail(true) in
        {48}let v_483: key = catch-fail(1-proj-3-tuple(v_481)) in
        {49}let v_484: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_480))) in
        {50}let v_485: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_480)) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-3-tuple(v_484))))) then symmetricstatepack(1-proj-3-tuple(v_484),2-proj-3-tuple(v_484),hash(3-proj-3-tuple(v_484),v_483)) else fail-any) else fail-any)) in
        {51}let v_486: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_480))) in
        {52}let v_487: bitstring = catch-fail(symmetricstateunpack(v_485)) in
        {53}let v_488: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any))) in
        {54}let v_489: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any))) in
        {55}let v_490: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any))) in
        {56}let v_491: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_487))) then (if not-caught-fail(v_488) then (if not-caught-fail(v_489) then (if not-caught-fail(v_490) then (v_488,v_489,v_490) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {57}let v_492: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any)) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_491)) then cipherstatepack(2-proj-3-tuple(v_491),minnonce) else fail-any),1-proj-3-tuple(v_491),3-proj-3-tuple(v_487)) else fail-any) else fail-any) else fail-any)) in
        {58}let v_493: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_480))) in
        {59}let v_494: bitstring = catch-fail(symmetricstateunpack(v_492)) in
        {60}let v_495: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_494),(if success?(2-proj-7-tuple(v_480)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),v_483) else fail-any) else fail-any))) in
        {61}let v_496: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_494),(if success?(2-proj-7-tuple(v_480)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),v_483) else fail-any) else fail-any))) in
        {62}let v_497: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_494),(if success?(2-proj-7-tuple(v_480)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),v_483) else fail-any) else fail-any))) in
        {63}let v_498: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_480)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),v_483) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_494))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_496) then (if not-caught-fail(v_497) then (v_495,v_496,v_497) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let v_499: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_480)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),v_483) else fail-any) else fail-any)) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-3-tuple(v_494))))) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-3-tuple(v_498))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_498)) then cipherstatepack(2-proj-3-tuple(v_498),minnonce) else fail-any),1-proj-3-tuple(v_498),3-proj-3-tuple(v_494)) else fail-any) else fail-any) else fail-any)) in
        {65}let v_500: bitstring = catch-fail(symmetricstateunpack(v_499)) in
        {66}let v_501: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_500))) in
        {67}let v_502: aead = catch-fail(decrypt(1-proj-2-tuple(v_501),2-proj-2-tuple(v_501),3-proj-3-tuple(v_500),3-proj-3-tuple(v_481))) in
        {68}let v_503: bitstring = catch-fail(aeadunpack(v_502)) in
        {69}let v_504: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_500))) in
        {70}let v_505: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_501))) && success?(1-proj-3-tuple(v_500))) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-2-tuple(v_504))))) then cipherstatepack(1-proj-2-tuple(v_504),increment_nonce(2-proj-2-tuple(v_501))) else fail-any) else fail-any)) in
        {71}let v_506: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_481)) && (success?(3-proj-3-tuple(v_500)) && success?(1-proj-3-tuple(v_500)))) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-2-tuple(v_501))))) then (if not-caught-fail(v_502) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-3-tuple(v_503))))) then (if not-caught-fail(v_505) then (v_505,3-proj-3-tuple(v_503),1-proj-3-tuple(v_503)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_507: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_506),2-proj-3-tuple(v_500),3-proj-3-tuple(v_500)))) in
        {73}let v_508: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_481)) && success?(symmetricstatepack(1-proj-3-tuple(v_506),2-proj-3-tuple(v_500),3-proj-3-tuple(v_500)))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then symmetricstatepack(1-proj-3-tuple(v_507),2-proj-3-tuple(v_507),hash(3-proj-3-tuple(v_507),3-proj-3-tuple(v_481))) else fail-any) else fail-any)) in
        {74}let v_509: bitstring = catch-fail((if success?(3-proj-3-tuple(v_481)) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if not-caught-fail(v_508) then (v_508,2-proj-3-tuple(v_506),3-proj-3-tuple(v_506)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_510: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_509),2-proj-7-tuple(v_480),3-proj-7-tuple(v_480),4-proj-7-tuple(v_480),v_483,6-proj-7-tuple(v_480),7-proj-7-tuple(v_480))) in
        {76}let (hs_511: handshakestate,re_512: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-7-tuple(v_480))))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then (if not-caught-fail(v_482) then (if not-caught-fail(v_483) then (if not-caught-fail(v_485) then (if not-caught-fail(v_492) then (if not-caught-fail(v_499) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-3-tuple(v_509))))) then (if (v_482 && 3-proj-3-tuple(v_509)) then (if not-caught-fail(v_510) then (v_510,getpublickey(3-proj-7-tuple(v_480)),2-proj-3-tuple(v_509),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {77}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {78}insert statestore(me,them,statepack_c(hs_511))
    ) | (
        {80}!
        {98}get statestore(=me,=them,statepack_c(hs_513: handshakestate)) in
        {81}let v_514: bitstring = catch-fail(handshakestateunpack(hs_513)) in
        {82}let v_515: bitstring = catch-fail((empty,empty,empty)) in
        {83}let v_516: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_514))) in
        {84}let v_517: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_516))) in
        {85}let v_518: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_517),2-proj-2-tuple(v_517),3-proj-3-tuple(v_516),msg_c(me,them))) in
        {86}let v_519: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_516))) in
        {87}let v_520: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_517))) && success?(1-proj-3-tuple(v_516))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then cipherstatepack(1-proj-2-tuple(v_519),increment_nonce(2-proj-2-tuple(v_517))) else fail-any) else fail-any)) in
        {88}let v_521: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_516)) && success?(1-proj-3-tuple(v_516))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then (if not-caught-fail(v_518) then (if not-caught-fail(v_520) then (v_520,v_518) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_522: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_521),2-proj-3-tuple(v_516),3-proj-3-tuple(v_516)))) in
        {90}let v_523: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_521)) && success?(symmetricstatepack(1-proj-2-tuple(v_521),2-proj-3-tuple(v_516),3-proj-3-tuple(v_516)))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then symmetricstatepack(1-proj-3-tuple(v_522),2-proj-3-tuple(v_522),hash(3-proj-3-tuple(v_522),2-proj-2-tuple(v_521))) else fail-any) else fail-any)) in
        {91}let v_524: bitstring = catch-fail((if success?(1-proj-7-tuple(v_514)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-2-tuple(v_521))))) then (if not-caught-fail(v_523) then (v_523,2-proj-2-tuple(v_521)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_525: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_524),2-proj-7-tuple(v_514),3-proj-7-tuple(v_514),4-proj-7-tuple(v_514),5-proj-7-tuple(v_514),6-proj-7-tuple(v_514),7-proj-7-tuple(v_514))) in
        {93}let v_526: bitstring = catch-fail(concat3(1-proj-3-tuple(v_515),2-proj-3-tuple(v_515),2-proj-2-tuple(v_524))) in
        {94}let (hs_527: handshakestate,re_528: key,message_c: bitstring) = (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-7-tuple(v_514))))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then (if not-caught-fail(v_525) then (if not-caught-fail(v_526) then (v_525,5-proj-7-tuple(v_514),v_526) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {95}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {96}insert statestore(me,them,statepack_d(hs_527));
        {97}out(pub, message_c)
    ) | (
        {99}!
        {127}get statestore(=me,=them,statepack_d(hs_529: handshakestate)) in
        {100}in(pub, message_d: bitstring);
        {101}let v_530: bitstring = catch-fail(handshakestateunpack(hs_529)) in
        {102}let v_531: bitstring = catch-fail(deconcat3(message_d)) in
        {103}let v_532: bool = catch-fail(true) in
        {104}let v_533: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_530))) in
        {105}let v_534: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_533))) in
        {106}let v_535: aead = catch-fail(decrypt(1-proj-2-tuple(v_534),2-proj-2-tuple(v_534),3-proj-3-tuple(v_533),3-proj-3-tuple(v_531))) in
        {107}let v_536: bitstring = catch-fail(aeadunpack(v_535)) in
        {108}let v_537: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_533))) in
        {109}let v_538: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_534))) && success?(1-proj-3-tuple(v_533))) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-2-tuple(v_537))))) then cipherstatepack(1-proj-2-tuple(v_537),increment_nonce(2-proj-2-tuple(v_534))) else fail-any) else fail-any)) in
        {110}let v_539: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_531)) && (success?(3-proj-3-tuple(v_533)) && success?(1-proj-3-tuple(v_533)))) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-2-tuple(v_534))))) then (if not-caught-fail(v_535) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then (if not-caught-fail(v_538) then (v_538,3-proj-3-tuple(v_536),1-proj-3-tuple(v_536)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {111}let v_540: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_533),3-proj-3-tuple(v_533)))) in
        {112}let v_541: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_531)) && success?(symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_533),3-proj-3-tuple(v_533)))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_540),hash(3-proj-3-tuple(v_540),3-proj-3-tuple(v_531))) else fail-any) else fail-any)) in
        {113}let v_542: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_531)) && success?(1-proj-7-tuple(v_530))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if not-caught-fail(v_541) then (v_541,2-proj-3-tuple(v_539),3-proj-3-tuple(v_539)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_543: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_542),2-proj-7-tuple(v_530),3-proj-7-tuple(v_530),4-proj-7-tuple(v_530),5-proj-7-tuple(v_530),6-proj-7-tuple(v_530),7-proj-7-tuple(v_530))) in
        {115}let v_544: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_542))) in
        {116}let v_545: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_544),zero)) in
        {117}let v_546: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_544),zero)) in
        {118}let v_547: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_544),zero)) in
        {119}let v_548: bitstring = catch-fail((if success?(2-proj-3-tuple(v_544)) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (v_545,v_546,v_547) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {120}let v_549: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_548)) then cipherstatepack(1-proj-3-tuple(v_548),minnonce) else fail-any)) in
        {121}let v_550: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_548)) then cipherstatepack(2-proj-3-tuple(v_548),minnonce) else fail-any)) in
        {122}let v_551: bitstring = catch-fail((if success?(1-proj-3-tuple(v_542)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (1-proj-3-tuple(v_542),v_549,v_550) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let (hs_552: handshakestate,re_553: key,plaintext_d: bitstring,valid_554: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-7-tuple(v_530))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then (if not-caught-fail(v_532) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-3-tuple(v_542))))) then (if (v_532 && 3-proj-3-tuple(v_542)) then (if not-caught-fail(v_543) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (v_543,getpublickey(3-proj-7-tuple(v_530)),2-proj-3-tuple(v_542),true,2-proj-3-tuple(v_551),3-proj-3-tuple(v_551)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {124}event RecvMsg(me,them,stage_d,plaintext_d,valid_554);
        {125}insert statestore(me,them,statepack_e(hs_552));
        {126}event RecvEnd(valid_554)
    ) | (
        {128}event LeakS(phase0,me);
        {129}out(pub, key_s(me))
    ) | (
        {130}phase 1;
        {131}event LeakS(phase1,me);
        {132}out(pub, key_s(me))
    )
) | (
    {133}let them_555: principal = charlie in
    {134}let me_556: principal = alice in
    {135}let v_557: key = catch-fail(dhexp(key_s(me_556),g)) in
    {136}let s_558: keypair = (if not-caught-fail(v_557) then keypairpack(v_557,key_s(me_556)) else fail-any) in
    {137}out(pub, getpublickey(s_558));
    (
        {138}let e_559: keypair = keypairpack(empty,empty) in
        {139}let rs_560: key = empty in
        {140}let re_561: key = empty in
        {141}let v_562: bitstring = catch-fail(hash(somename,empty)) in
        {142}let v_563: key = catch-fail(v_562) in
        {143}let v_564: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {144}let v_565: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_562) then (if not-caught-fail(v_563) then (if not-caught-fail(v_564) then symmetricstatepack(v_564,v_563,v_562) else fail-any) else fail-any) else fail-any))) in
        {145}let v_566: symmetricstate = catch-fail((if success?((if not-caught-fail(v_562) then (if not-caught-fail(v_563) then (if not-caught-fail(v_564) then symmetricstatepack(v_564,v_563,v_562) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then symmetricstatepack(1-proj-3-tuple(v_565),2-proj-3-tuple(v_565),hash(3-proj-3-tuple(v_565),empty)) else fail-any) else fail-any)) in
        {146}let v_567: bitstring = catch-fail(symmetricstateunpack(v_566)) in
        {147}let v_568: symmetricstate = catch-fail((if success?(getpublickey(s_558)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then symmetricstatepack(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),hash(3-proj-3-tuple(v_567),getpublickey(s_558))) else fail-any) else fail-any)) in
        {148}let hs_569: handshakestate = (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then handshakestatepack(v_568,s_558,e_559,rs_560,re_561,empty,true) else fail-any) else fail-any) in
        {149}insert statestore(me_556,them_555,statepack_a(hs_569))
    ) | (
        {173}get statestore(=me_556,=them_555,statepack_a(hs_570: handshakestate)) in
        {150}let v_571: bitstring = catch-fail(handshakestateunpack(hs_570)) in
        {151}let v_572: bitstring = catch-fail((empty,empty,empty)) in
        {152}new key_e_573[me_556,them_555]: key;
        {153}let v_574: key = catch-fail(dhexp(key_e_573,g)) in
        {154}let v_575: keypair = catch-fail((if not-caught-fail(v_574) then keypairpack(v_574,key_e_573) else fail-any)) in
        {155}let v_576: bitstring = catch-fail(getpublickey(v_575)) in
        {156}let v_577: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_571))) in
        {157}let v_578: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_571)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_577),hash(3-proj-3-tuple(v_577),v_576)) else fail-any) else fail-any)) in
        {158}let v_579: bitstring = catch-fail(symmetricstateunpack(v_578)) in
        {159}let v_580: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_579))) in
        {160}let v_581: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_580),2-proj-2-tuple(v_580),3-proj-3-tuple(v_579),msg_a(me_556,them_555))) in
        {161}let v_582: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_579))) in
        {162}let v_583: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_580))) && success?(1-proj-3-tuple(v_579))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-2-tuple(v_582))))) then cipherstatepack(1-proj-2-tuple(v_582),increment_nonce(2-proj-2-tuple(v_580))) else fail-any) else fail-any)) in
        {163}let v_584: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_579)) && success?(1-proj-3-tuple(v_579))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then (if not-caught-fail(v_581) then (if not-caught-fail(v_583) then (v_583,v_581) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {164}let v_585: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_584),2-proj-3-tuple(v_579),3-proj-3-tuple(v_579)))) in
        {165}let v_586: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_584)) && success?(symmetricstatepack(1-proj-2-tuple(v_584),2-proj-3-tuple(v_579),3-proj-3-tuple(v_579)))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then symmetricstatepack(1-proj-3-tuple(v_585),2-proj-3-tuple(v_585),hash(3-proj-3-tuple(v_585),2-proj-2-tuple(v_584))) else fail-any) else fail-any)) in
        {166}let v_587: bitstring = catch-fail((if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_586) then (v_586,2-proj-2-tuple(v_584)) else fail-any) else fail-any) else fail-any)) in
        {167}let v_588: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_587),2-proj-7-tuple(v_571),v_575,4-proj-7-tuple(v_571),5-proj-7-tuple(v_571),6-proj-7-tuple(v_571),7-proj-7-tuple(v_571))) in
        {168}let v_589: bitstring = catch-fail(concat3(v_576,2-proj-3-tuple(v_572),2-proj-2-tuple(v_587))) in
        {169}let (hs_590: handshakestate,re_591: key,message_a_592: bitstring) = (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-7-tuple(v_571))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_578) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (v_588,5-proj-7-tuple(v_571),v_589) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {170}event SendMsg(me_556,them_555,stage_a,msg_a(me_556,them_555),true);
        {171}insert statestore(me_556,them_555,statepack_b(hs_590));
        {172}out(pub, message_a_592)
    ) | (
        {209}get statestore(=me_556,=them_555,statepack_b(hs_593: handshakestate)) in
        {174}in(pub, message_b_594: bitstring);
        {175}let v_595: bitstring = catch-fail(handshakestateunpack(hs_593)) in
        {176}let v_596: bitstring = catch-fail(deconcat3(message_b_594)) in
        {177}let v_597: bool = catch-fail(true) in
        {178}let v_598: key = catch-fail(1-proj-3-tuple(v_596)) in
        {179}let v_599: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_595))) in
        {180}let v_600: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_595)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then symmetricstatepack(1-proj-3-tuple(v_599),2-proj-3-tuple(v_599),hash(3-proj-3-tuple(v_599),v_598)) else fail-any) else fail-any)) in
        {181}let v_601: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_595))) in
        {182}let v_602: bitstring = catch-fail(symmetricstateunpack(v_600)) in
        {183}let v_603: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_602),(if success?(3-proj-7-tuple(v_595)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then dhexp(2-proj-2-tuple(v_601),v_598) else fail-any) else fail-any))) in
        {184}let v_604: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_602),(if success?(3-proj-7-tuple(v_595)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then dhexp(2-proj-2-tuple(v_601),v_598) else fail-any) else fail-any))) in
        {185}let v_605: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_602),(if success?(3-proj-7-tuple(v_595)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then dhexp(2-proj-2-tuple(v_601),v_598) else fail-any) else fail-any))) in
        {186}let v_606: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_595)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then dhexp(2-proj-2-tuple(v_601),v_598) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_602))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (v_603,v_604,v_605) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {187}let v_607: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_595)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then dhexp(2-proj-2-tuple(v_601),v_598) else fail-any) else fail-any)) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_606)) then cipherstatepack(2-proj-3-tuple(v_606),minnonce) else fail-any),1-proj-3-tuple(v_606),3-proj-3-tuple(v_602)) else fail-any) else fail-any) else fail-any)) in
        {188}let v_608: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_595))) in
        {189}let v_609: bitstring = catch-fail(symmetricstateunpack(v_607)) in
        {190}let v_610: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_609),(if success?(2-proj-7-tuple(v_595)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_598) else fail-any) else fail-any))) in
        {191}let v_611: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_609),(if success?(2-proj-7-tuple(v_595)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_598) else fail-any) else fail-any))) in
        {192}let v_612: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_609),(if success?(2-proj-7-tuple(v_595)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_598) else fail-any) else fail-any))) in
        {193}let v_613: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_595)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_598) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_609))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (v_610,v_611,v_612) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_614: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_595)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then dhexp(2-proj-2-tuple(v_608),v_598) else fail-any) else fail-any)) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_613)) then cipherstatepack(2-proj-3-tuple(v_613),minnonce) else fail-any),1-proj-3-tuple(v_613),3-proj-3-tuple(v_609)) else fail-any) else fail-any) else fail-any)) in
        {195}let v_615: bitstring = catch-fail(symmetricstateunpack(v_614)) in
        {196}let v_616: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_615))) in
        {197}let v_617: aead = catch-fail(decrypt(1-proj-2-tuple(v_616),2-proj-2-tuple(v_616),3-proj-3-tuple(v_615),3-proj-3-tuple(v_596))) in
        {198}let v_618: bitstring = catch-fail(aeadunpack(v_617)) in
        {199}let v_619: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_615))) in
        {200}let v_620: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_616))) && success?(1-proj-3-tuple(v_615))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then cipherstatepack(1-proj-2-tuple(v_619),increment_nonce(2-proj-2-tuple(v_616))) else fail-any) else fail-any)) in
        {201}let v_621: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_596)) && (success?(3-proj-3-tuple(v_615)) && success?(1-proj-3-tuple(v_615)))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if not-caught-fail(v_617) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if not-caught-fail(v_620) then (v_620,3-proj-3-tuple(v_618),1-proj-3-tuple(v_618)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_622: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_621),2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)))) in
        {203}let v_623: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_596)) && success?(symmetricstatepack(1-proj-3-tuple(v_621),2-proj-3-tuple(v_615),3-proj-3-tuple(v_615)))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then symmetricstatepack(1-proj-3-tuple(v_622),2-proj-3-tuple(v_622),hash(3-proj-3-tuple(v_622),3-proj-3-tuple(v_596))) else fail-any) else fail-any)) in
        {204}let v_624: bitstring = catch-fail((if success?(3-proj-3-tuple(v_596)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if not-caught-fail(v_623) then (v_623,2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_625: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_624),2-proj-7-tuple(v_595),3-proj-7-tuple(v_595),4-proj-7-tuple(v_595),v_598,6-proj-7-tuple(v_595),7-proj-7-tuple(v_595))) in
        {206}let (hs_626: handshakestate,re_627: key,plaintext_b_628: bitstring,valid_629: bool) = (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-7-tuple(v_595))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then (if not-caught-fail(v_600) then (if not-caught-fail(v_607) then (if not-caught-fail(v_614) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if (v_597 && 3-proj-3-tuple(v_624)) then (if not-caught-fail(v_625) then (v_625,getpublickey(3-proj-7-tuple(v_595)),2-proj-3-tuple(v_624),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {207}event RecvMsg(me_556,them_555,stage_b,plaintext_b_628,valid_629);
        {208}insert statestore(me_556,them_555,statepack_c(hs_626))
    ) | (
        {210}!
        {228}get statestore(=me_556,=them_555,statepack_c(hs_630: handshakestate)) in
        {211}let v_631: bitstring = catch-fail(handshakestateunpack(hs_630)) in
        {212}let v_632: bitstring = catch-fail((empty,empty,empty)) in
        {213}let v_633: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_631))) in
        {214}let v_634: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_633))) in
        {215}let v_635: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_634),2-proj-2-tuple(v_634),3-proj-3-tuple(v_633),msg_c(me_556,them_555))) in
        {216}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_633))) in
        {217}let v_637: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_634))) && success?(1-proj-3-tuple(v_633))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then cipherstatepack(1-proj-2-tuple(v_636),increment_nonce(2-proj-2-tuple(v_634))) else fail-any) else fail-any)) in
        {218}let v_638: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_633)) && success?(1-proj-3-tuple(v_633))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-2-tuple(v_634))))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_637) then (v_637,v_635) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_639: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_638),2-proj-3-tuple(v_633),3-proj-3-tuple(v_633)))) in
        {220}let v_640: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_638)) && success?(symmetricstatepack(1-proj-2-tuple(v_638),2-proj-3-tuple(v_633),3-proj-3-tuple(v_633)))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then symmetricstatepack(1-proj-3-tuple(v_639),2-proj-3-tuple(v_639),hash(3-proj-3-tuple(v_639),2-proj-2-tuple(v_638))) else fail-any) else fail-any)) in
        {221}let v_641: bitstring = catch-fail((if success?(1-proj-7-tuple(v_631)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,2-proj-2-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {222}let v_642: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_641),2-proj-7-tuple(v_631),3-proj-7-tuple(v_631),4-proj-7-tuple(v_631),5-proj-7-tuple(v_631),6-proj-7-tuple(v_631),7-proj-7-tuple(v_631))) in
        {223}let v_643: bitstring = catch-fail(concat3(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),2-proj-2-tuple(v_641))) in
        {224}let (hs_644: handshakestate,re_645: key,message_c_646: bitstring) = (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-7-tuple(v_631))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (v_642,5-proj-7-tuple(v_631),v_643) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {225}event SendMsg(me_556,them_555,stage_c,msg_c(me_556,them_555),true);
        {226}insert statestore(me_556,them_555,statepack_d(hs_644));
        {227}out(pub, message_c_646)
    ) | (
        {229}!
        {257}get statestore(=me_556,=them_555,statepack_d(hs_647: handshakestate)) in
        {230}in(pub, message_d_648: bitstring);
        {231}let v_649: bitstring = catch-fail(handshakestateunpack(hs_647)) in
        {232}let v_650: bitstring = catch-fail(deconcat3(message_d_648)) in
        {233}let v_651: bool = catch-fail(true) in
        {234}let v_652: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_649))) in
        {235}let v_653: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {236}let v_654: aead = catch-fail(decrypt(1-proj-2-tuple(v_653),2-proj-2-tuple(v_653),3-proj-3-tuple(v_652),3-proj-3-tuple(v_650))) in
        {237}let v_655: bitstring = catch-fail(aeadunpack(v_654)) in
        {238}let v_656: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {239}let v_657: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_653))) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then cipherstatepack(1-proj-2-tuple(v_656),increment_nonce(2-proj-2-tuple(v_653))) else fail-any) else fail-any)) in
        {240}let v_658: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_650)) && (success?(3-proj-3-tuple(v_652)) && success?(1-proj-3-tuple(v_652)))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_654) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if not-caught-fail(v_657) then (v_657,3-proj-3-tuple(v_655),1-proj-3-tuple(v_655)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {241}let v_659: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) in
        {242}let v_660: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_650)) && success?(symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then symmetricstatepack(1-proj-3-tuple(v_659),2-proj-3-tuple(v_659),hash(3-proj-3-tuple(v_659),3-proj-3-tuple(v_650))) else fail-any) else fail-any)) in
        {243}let v_661: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_650)) && success?(1-proj-7-tuple(v_649))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if not-caught-fail(v_660) then (v_660,2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {244}let v_662: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_661),2-proj-7-tuple(v_649),3-proj-7-tuple(v_649),4-proj-7-tuple(v_649),5-proj-7-tuple(v_649),6-proj-7-tuple(v_649),7-proj-7-tuple(v_649))) in
        {245}let v_663: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_661))) in
        {246}let v_664: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_663),zero)) in
        {247}let v_665: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_663),zero)) in
        {248}let v_666: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_663),zero)) in
        {249}let v_667: bitstring = catch-fail((if success?(2-proj-3-tuple(v_663)) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (v_664,v_665,v_666) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_668: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_667)) then cipherstatepack(1-proj-3-tuple(v_667),minnonce) else fail-any)) in
        {251}let v_669: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_667)) then cipherstatepack(2-proj-3-tuple(v_667),minnonce) else fail-any)) in
        {252}let v_670: bitstring = catch-fail((if success?(1-proj-3-tuple(v_661)) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (1-proj-3-tuple(v_661),v_668,v_669) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let (hs_671: handshakestate,re_672: key,plaintext_d_673: bitstring,valid_674: bool,cs1_675: cipherstate,cs2_676: cipherstate) = (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-7-tuple(v_649))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if not-caught-fail(v_651) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if (v_651 && 3-proj-3-tuple(v_661)) then (if not-caught-fail(v_662) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (v_662,getpublickey(3-proj-7-tuple(v_649)),2-proj-3-tuple(v_661),true,2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {254}event RecvMsg(me_556,them_555,stage_d,plaintext_d_673,valid_674);
        {255}insert statestore(me_556,them_555,statepack_e(hs_671));
        {256}event RecvEnd(valid_674)
    ) | (
        {258}event LeakS(phase0,me_556);
        {259}out(pub, key_s(me_556))
    ) | (
        {260}phase 1;
        {261}event LeakS(phase1,me_556);
        {262}out(pub, key_s(me_556))
    )
) | (
    {263}let them_677: principal = alice in
    {264}let me_678: principal = bob in
    {265}let s_679: keypair = keypairpack(empty,empty) in
    (
        {266}let e_680: keypair = keypairpack(empty,empty) in
        {267}let v_681: key = catch-fail(dhexp(key_s(them_677),g)) in
        {268}let rs_682: key = getpublickey((if not-caught-fail(v_681) then keypairpack(v_681,key_s(them_677)) else fail-any)) in
        {269}let re_683: key = empty in
        {270}let v_684: bitstring = catch-fail(hash(somename,empty)) in
        {271}let v_685: key = catch-fail(v_684) in
        {272}let v_686: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {273}let v_687: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then symmetricstatepack(v_686,v_685,v_684) else fail-any) else fail-any) else fail-any))) in
        {274}let v_688: symmetricstate = catch-fail((if success?((if not-caught-fail(v_684) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then symmetricstatepack(v_686,v_685,v_684) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then symmetricstatepack(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),hash(3-proj-3-tuple(v_687),empty)) else fail-any) else fail-any)) in
        {275}let v_689: bitstring = catch-fail(symmetricstateunpack(v_688)) in
        {276}let v_690: symmetricstate = catch-fail((if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then symmetricstatepack(1-proj-3-tuple(v_689),2-proj-3-tuple(v_689),hash(3-proj-3-tuple(v_689),rs_682)) else fail-any)) in
        {277}let hs_691: handshakestate = (if not-caught-fail(v_688) then (if not-caught-fail(v_690) then handshakestatepack(v_690,s_679,e_680,rs_682,re_683,empty,false) else fail-any) else fail-any) in
        {278}insert statestore(me_678,them_677,statepack_a(hs_691))
    ) | (
        {300}get statestore(=me_678,=them_677,statepack_a(hs_692: handshakestate)) in
        {279}in(pub, message_a_693: bitstring);
        {280}let v_694: bitstring = catch-fail(handshakestateunpack(hs_692)) in
        {281}let v_695: bitstring = catch-fail(deconcat3(message_a_693)) in
        {282}let v_696: bool = catch-fail(true) in
        {283}let v_697: key = catch-fail(1-proj-3-tuple(v_695)) in
        {284}let v_698: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_694))) in
        {285}let v_699: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_694)) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then symmetricstatepack(1-proj-3-tuple(v_698),2-proj-3-tuple(v_698),hash(3-proj-3-tuple(v_698),v_697)) else fail-any) else fail-any)) in
        {286}let v_700: bitstring = catch-fail(symmetricstateunpack(v_699)) in
        {287}let v_701: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_700))) in
        {288}let v_702: aead = catch-fail(decrypt(1-proj-2-tuple(v_701),2-proj-2-tuple(v_701),3-proj-3-tuple(v_700),3-proj-3-tuple(v_695))) in
        {289}let v_703: bitstring = catch-fail(aeadunpack(v_702)) in
        {290}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_700))) in
        {291}let v_705: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_701))) && success?(1-proj-3-tuple(v_700))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then cipherstatepack(1-proj-2-tuple(v_704),increment_nonce(2-proj-2-tuple(v_701))) else fail-any) else fail-any)) in
        {292}let v_706: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_695)) && (success?(3-proj-3-tuple(v_700)) && success?(1-proj-3-tuple(v_700)))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then (if not-caught-fail(v_702) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if not-caught-fail(v_705) then (v_705,3-proj-3-tuple(v_703),1-proj-3-tuple(v_703)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_707: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)))) in
        {294}let v_708: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_695)) && success?(symmetricstatepack(1-proj-3-tuple(v_706),2-proj-3-tuple(v_700),3-proj-3-tuple(v_700)))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),3-proj-3-tuple(v_695))) else fail-any) else fail-any)) in
        {295}let v_709: bitstring = catch-fail((if success?(3-proj-3-tuple(v_695)) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if not-caught-fail(v_708) then (v_708,2-proj-3-tuple(v_706),3-proj-3-tuple(v_706)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_710: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_709),2-proj-7-tuple(v_694),3-proj-7-tuple(v_694),4-proj-7-tuple(v_694),v_697,6-proj-7-tuple(v_694),7-proj-7-tuple(v_694))) in
        {297}let (hs_711: handshakestate,re_712: key,plaintext_a: bitstring,valid_713: bool) = (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-7-tuple(v_694))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (if not-caught-fail(v_699) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if (v_696 && 3-proj-3-tuple(v_709)) then (if not-caught-fail(v_710) then (v_710,getpublickey(3-proj-7-tuple(v_694)),2-proj-3-tuple(v_709),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {298}event RecvMsg(me_678,them_677,stage_a,plaintext_a,valid_713);
        {299}insert statestore(me_678,them_677,statepack_b(hs_711))
    ) | (
        {338}get statestore(=me_678,=them_677,statepack_b(hs_714: handshakestate)) in
        {301}let v_715: bitstring = catch-fail(handshakestateunpack(hs_714)) in
        {302}let v_716: bitstring = catch-fail((empty,empty,empty)) in
        {303}new key_e_717[me_678,them_677]: key;
        {304}let v_718: key = catch-fail(dhexp(key_e_717,g)) in
        {305}let v_719: keypair = catch-fail((if not-caught-fail(v_718) then keypairpack(v_718,key_e_717) else fail-any)) in
        {306}let v_720: bitstring = catch-fail(getpublickey(v_719)) in
        {307}let v_721: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_715))) in
        {308}let v_722: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_715)) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_721),hash(3-proj-3-tuple(v_721),v_720)) else fail-any) else fail-any)) in
        {309}let v_723: bitstring = catch-fail(keypairunpack(v_719)) in
        {310}let v_724: bitstring = catch-fail(symmetricstateunpack(v_722)) in
        {311}let v_725: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_724),(if success?(5-proj-7-tuple(v_715)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_715)) else fail-any) else fail-any))) in
        {312}let v_726: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_724),(if success?(5-proj-7-tuple(v_715)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_715)) else fail-any) else fail-any))) in
        {313}let v_727: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_724),(if success?(5-proj-7-tuple(v_715)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_715)) else fail-any) else fail-any))) in
        {314}let v_728: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_715)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_715)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_724))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (v_725,v_726,v_727) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {315}let v_729: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_715)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-2-tuple(v_723))))) then dhexp(2-proj-2-tuple(v_723),5-proj-7-tuple(v_715)) else fail-any) else fail-any)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_728)) then cipherstatepack(2-proj-3-tuple(v_728),minnonce) else fail-any),1-proj-3-tuple(v_728),3-proj-3-tuple(v_724)) else fail-any) else fail-any) else fail-any)) in
        {316}let v_730: bitstring = catch-fail(keypairunpack(v_719)) in
        {317}let v_731: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {318}let v_732: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_731),(if success?(4-proj-7-tuple(v_715)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),4-proj-7-tuple(v_715)) else fail-any) else fail-any))) in
        {319}let v_733: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_731),(if success?(4-proj-7-tuple(v_715)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),4-proj-7-tuple(v_715)) else fail-any) else fail-any))) in
        {320}let v_734: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_731),(if success?(4-proj-7-tuple(v_715)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),4-proj-7-tuple(v_715)) else fail-any) else fail-any))) in
        {321}let v_735: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_715)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),4-proj-7-tuple(v_715)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_731))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then (v_732,v_733,v_734) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {322}let v_736: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_715)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then dhexp(2-proj-2-tuple(v_730),4-proj-7-tuple(v_715)) else fail-any) else fail-any)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_735)) then cipherstatepack(2-proj-3-tuple(v_735),minnonce) else fail-any),1-proj-3-tuple(v_735),3-proj-3-tuple(v_731)) else fail-any) else fail-any) else fail-any)) in
        {323}let v_737: bitstring = catch-fail(symmetricstateunpack(v_736)) in
        {324}let v_738: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_737))) in
        {325}let v_739: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_738),2-proj-2-tuple(v_738),3-proj-3-tuple(v_737),msg_b(me_678,them_677))) in
        {326}let v_740: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_737))) in
        {327}let v_741: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_738))) && success?(1-proj-3-tuple(v_737))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then cipherstatepack(1-proj-2-tuple(v_740),increment_nonce(2-proj-2-tuple(v_738))) else fail-any) else fail-any)) in
        {328}let v_742: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_737)) && success?(1-proj-3-tuple(v_737))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_741) then (v_741,v_739) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {329}let v_743: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_742),2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)))) in
        {330}let v_744: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_742)) && success?(symmetricstatepack(1-proj-2-tuple(v_742),2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then symmetricstatepack(1-proj-3-tuple(v_743),2-proj-3-tuple(v_743),hash(3-proj-3-tuple(v_743),2-proj-2-tuple(v_742))) else fail-any) else fail-any)) in
        {331}let v_745: bitstring = catch-fail((if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-2-tuple(v_742))))) then (if not-caught-fail(v_744) then (v_744,2-proj-2-tuple(v_742)) else fail-any) else fail-any) else fail-any)) in
        {332}let v_746: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_745),2-proj-7-tuple(v_715),v_719,4-proj-7-tuple(v_715),5-proj-7-tuple(v_715),6-proj-7-tuple(v_715),7-proj-7-tuple(v_715))) in
        {333}let v_747: bitstring = catch-fail(concat3(v_720,2-proj-3-tuple(v_716),2-proj-2-tuple(v_745))) in
        {334}let (hs_748: handshakestate,re_749: key,message_b_750: bitstring) = (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-7-tuple(v_715))))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (if not-caught-fail(v_722) then (if not-caught-fail(v_729) then (if not-caught-fail(v_736) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (v_746,5-proj-7-tuple(v_715),v_747) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {335}event SendMsg(me_678,them_677,stage_b,msg_b(me_678,them_677),true);
        {336}insert statestore(me_678,them_677,statepack_c(hs_748));
        {337}out(pub, message_b_750)
    ) | (
        {339}!
        {358}get statestore(=me_678,=them_677,statepack_c(hs_751: handshakestate)) in
        {340}in(pub, message_c_752: bitstring);
        {341}let v_753: bitstring = catch-fail(handshakestateunpack(hs_751)) in
        {342}let v_754: bitstring = catch-fail(deconcat3(message_c_752)) in
        {343}let v_755: bool = catch-fail(true) in
        {344}let v_756: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_753))) in
        {345}let v_757: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_756))) in
        {346}let v_758: aead = catch-fail(decrypt(1-proj-2-tuple(v_757),2-proj-2-tuple(v_757),3-proj-3-tuple(v_756),3-proj-3-tuple(v_754))) in
        {347}let v_759: bitstring = catch-fail(aeadunpack(v_758)) in
        {348}let v_760: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_756))) in
        {349}let v_761: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_757))) && success?(1-proj-3-tuple(v_756))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then cipherstatepack(1-proj-2-tuple(v_760),increment_nonce(2-proj-2-tuple(v_757))) else fail-any) else fail-any)) in
        {350}let v_762: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_754)) && (success?(3-proj-3-tuple(v_756)) && success?(1-proj-3-tuple(v_756)))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then (if not-caught-fail(v_758) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if not-caught-fail(v_761) then (v_761,3-proj-3-tuple(v_759),1-proj-3-tuple(v_759)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_763: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)))) in
        {352}let v_764: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_754)) && success?(symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_763),hash(3-proj-3-tuple(v_763),3-proj-3-tuple(v_754))) else fail-any) else fail-any)) in
        {353}let v_765: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_754)) && success?(1-proj-7-tuple(v_753))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if not-caught-fail(v_764) then (v_764,2-proj-3-tuple(v_762),3-proj-3-tuple(v_762)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {354}let v_766: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_765),2-proj-7-tuple(v_753),3-proj-7-tuple(v_753),4-proj-7-tuple(v_753),5-proj-7-tuple(v_753),6-proj-7-tuple(v_753),7-proj-7-tuple(v_753))) in
        {355}let (hs_767: handshakestate,re_768: key,plaintext_c: bitstring,valid_769: bool) = (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-7-tuple(v_753))))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if not-caught-fail(v_755) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (v_755 && 3-proj-3-tuple(v_765)) then (if not-caught-fail(v_766) then (v_766,getpublickey(3-proj-7-tuple(v_753)),2-proj-3-tuple(v_765),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {356}event RecvMsg(me_678,them_677,stage_c,plaintext_c,valid_769);
        {357}insert statestore(me_678,them_677,statepack_d(hs_767))
    ) | (
        {359}!
        {385}get statestore(=me_678,=them_677,statepack_d(hs_770: handshakestate)) in
        {360}let v_771: bitstring = catch-fail(handshakestateunpack(hs_770)) in
        {361}let v_772: bitstring = catch-fail((empty,empty,empty)) in
        {362}let v_773: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_771))) in
        {363}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {364}let v_775: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),msg_d(me_678,them_677))) in
        {365}let v_776: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {366}let v_777: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then cipherstatepack(1-proj-2-tuple(v_776),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
        {367}let v_778: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if not-caught-fail(v_777) then (v_777,v_775) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {368}let v_779: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_778),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
        {369}let v_780: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_778)) && success?(symmetricstatepack(1-proj-2-tuple(v_778),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_779),hash(3-proj-3-tuple(v_779),2-proj-2-tuple(v_778))) else fail-any) else fail-any)) in
        {370}let v_781: bitstring = catch-fail((if success?(1-proj-7-tuple(v_771)) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then (if not-caught-fail(v_780) then (v_780,2-proj-2-tuple(v_778)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {371}let v_782: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_781),2-proj-7-tuple(v_771),3-proj-7-tuple(v_771),4-proj-7-tuple(v_771),5-proj-7-tuple(v_771),6-proj-7-tuple(v_771),7-proj-7-tuple(v_771))) in
        {372}let v_783: bitstring = catch-fail(concat3(1-proj-3-tuple(v_772),2-proj-3-tuple(v_772),2-proj-2-tuple(v_781))) in
        {373}let v_784: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_781))) in
        {374}let v_785: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_784),zero)) in
        {375}let v_786: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_784),zero)) in
        {376}let v_787: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_784),zero)) in
        {377}let v_788: bitstring = catch-fail((if success?(2-proj-3-tuple(v_784)) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (v_785,v_786,v_787) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {378}let v_789: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_788)) then cipherstatepack(1-proj-3-tuple(v_788),minnonce) else fail-any)) in
        {379}let v_790: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_788)) then cipherstatepack(2-proj-3-tuple(v_788),minnonce) else fail-any)) in
        {380}let v_791: bitstring = catch-fail((if success?(1-proj-2-tuple(v_781)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (1-proj-2-tuple(v_781),v_789,v_790) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let (hs_792: handshakestate,re_793: key,message_d_794: bitstring,cs1_795: cipherstate,cs2_796: cipherstate) = (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-7-tuple(v_771))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-2-tuple(v_781))))) then (if not-caught-fail(v_782) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (v_782,5-proj-7-tuple(v_771),v_783,2-proj-3-tuple(v_791),3-proj-3-tuple(v_791)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {382}event SendMsg(me_678,them_677,stage_d,msg_d(me_678,them_677),true);
        {383}insert statestore(me_678,them_677,statepack_e(hs_792));
        {384}out(pub, message_d_794)
    ) | (
        {386}event LeakS(phase0,me_678);
        {387}out(pub, key_s(me_678))
    ) | (
        {388}phase 1;
        {389}event LeakS(phase1,me_678);
        {390}out(pub, key_s(me_678))
    )
) | (
    {391}let them_797: principal = charlie in
    {392}let me_798: principal = bob in
    {393}let s_799: keypair = keypairpack(empty,empty) in
    (
        {394}let e_800: keypair = keypairpack(empty,empty) in
        {395}let v_801: key = catch-fail(dhexp(key_s(them_797),g)) in
        {396}let rs_802: key = getpublickey((if not-caught-fail(v_801) then keypairpack(v_801,key_s(them_797)) else fail-any)) in
        {397}let re_803: key = empty in
        {398}let v_804: bitstring = catch-fail(hash(somename,empty)) in
        {399}let v_805: key = catch-fail(v_804) in
        {400}let v_806: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {401}let v_807: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (if not-caught-fail(v_806) then symmetricstatepack(v_806,v_805,v_804) else fail-any) else fail-any) else fail-any))) in
        {402}let v_808: symmetricstate = catch-fail((if success?((if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (if not-caught-fail(v_806) then symmetricstatepack(v_806,v_805,v_804) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_807),hash(3-proj-3-tuple(v_807),empty)) else fail-any) else fail-any)) in
        {403}let v_809: bitstring = catch-fail(symmetricstateunpack(v_808)) in
        {404}let v_810: symmetricstate = catch-fail((if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_809),hash(3-proj-3-tuple(v_809),rs_802)) else fail-any)) in
        {405}let hs_811: handshakestate = (if not-caught-fail(v_808) then (if not-caught-fail(v_810) then handshakestatepack(v_810,s_799,e_800,rs_802,re_803,empty,false) else fail-any) else fail-any) in
        {406}insert statestore(me_798,them_797,statepack_a(hs_811))
    ) | (
        {428}get statestore(=me_798,=them_797,statepack_a(hs_812: handshakestate)) in
        {407}in(pub, message_a_813: bitstring);
        {408}let v_814: bitstring = catch-fail(handshakestateunpack(hs_812)) in
        {409}let v_815: bitstring = catch-fail(deconcat3(message_a_813)) in
        {410}let v_816: bool = catch-fail(true) in
        {411}let v_817: key = catch-fail(1-proj-3-tuple(v_815)) in
        {412}let v_818: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_814))) in
        {413}let v_819: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_814)) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_818),hash(3-proj-3-tuple(v_818),v_817)) else fail-any) else fail-any)) in
        {414}let v_820: bitstring = catch-fail(symmetricstateunpack(v_819)) in
        {415}let v_821: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {416}let v_822: aead = catch-fail(decrypt(1-proj-2-tuple(v_821),2-proj-2-tuple(v_821),3-proj-3-tuple(v_820),3-proj-3-tuple(v_815))) in
        {417}let v_823: bitstring = catch-fail(aeadunpack(v_822)) in
        {418}let v_824: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {419}let v_825: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_821))) && success?(1-proj-3-tuple(v_820))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-2-tuple(v_824))))) then cipherstatepack(1-proj-2-tuple(v_824),increment_nonce(2-proj-2-tuple(v_821))) else fail-any) else fail-any)) in
        {420}let v_826: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_815)) && (success?(3-proj-3-tuple(v_820)) && success?(1-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_822) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_825) then (v_825,3-proj-3-tuple(v_823),1-proj-3-tuple(v_823)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let v_827: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) in
        {422}let v_828: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_815)) && success?(symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_827),hash(3-proj-3-tuple(v_827),3-proj-3-tuple(v_815))) else fail-any) else fail-any)) in
        {423}let v_829: bitstring = catch-fail((if success?(3-proj-3-tuple(v_815)) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if not-caught-fail(v_828) then (v_828,2-proj-3-tuple(v_826),3-proj-3-tuple(v_826)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_830: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_829),2-proj-7-tuple(v_814),3-proj-7-tuple(v_814),4-proj-7-tuple(v_814),v_817,6-proj-7-tuple(v_814),7-proj-7-tuple(v_814))) in
        {425}let (hs_831: handshakestate,re_832: key,plaintext_a_833: bitstring,valid_834: bool) = (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-7-tuple(v_814))))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if not-caught-fail(v_816) then (if not-caught-fail(v_817) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if (v_816 && 3-proj-3-tuple(v_829)) then (if not-caught-fail(v_830) then (v_830,getpublickey(3-proj-7-tuple(v_814)),2-proj-3-tuple(v_829),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {426}event RecvMsg(me_798,them_797,stage_a,plaintext_a_833,valid_834);
        {427}insert statestore(me_798,them_797,statepack_b(hs_831))
    ) | (
        {466}get statestore(=me_798,=them_797,statepack_b(hs_835: handshakestate)) in
        {429}let v_836: bitstring = catch-fail(handshakestateunpack(hs_835)) in
        {430}let v_837: bitstring = catch-fail((empty,empty,empty)) in
        {431}new key_e_838[me_798,them_797]: key;
        {432}let v_839: key = catch-fail(dhexp(key_e_838,g)) in
        {433}let v_840: keypair = catch-fail((if not-caught-fail(v_839) then keypairpack(v_839,key_e_838) else fail-any)) in
        {434}let v_841: bitstring = catch-fail(getpublickey(v_840)) in
        {435}let v_842: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_836))) in
        {436}let v_843: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_836)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then symmetricstatepack(1-proj-3-tuple(v_842),2-proj-3-tuple(v_842),hash(3-proj-3-tuple(v_842),v_841)) else fail-any) else fail-any)) in
        {437}let v_844: bitstring = catch-fail(keypairunpack(v_840)) in
        {438}let v_845: bitstring = catch-fail(symmetricstateunpack(v_843)) in
        {439}let v_846: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_845),(if success?(5-proj-7-tuple(v_836)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_836)) else fail-any) else fail-any))) in
        {440}let v_847: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_845),(if success?(5-proj-7-tuple(v_836)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_836)) else fail-any) else fail-any))) in
        {441}let v_848: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_845),(if success?(5-proj-7-tuple(v_836)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_836)) else fail-any) else fail-any))) in
        {442}let v_849: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_836)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_836)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_845))) then (if not-caught-fail(v_846) then (if not-caught-fail(v_847) then (if not-caught-fail(v_848) then (v_846,v_847,v_848) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_850: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_836)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_836)) else fail-any) else fail-any)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_849)) then cipherstatepack(2-proj-3-tuple(v_849),minnonce) else fail-any),1-proj-3-tuple(v_849),3-proj-3-tuple(v_845)) else fail-any) else fail-any) else fail-any)) in
        {444}let v_851: bitstring = catch-fail(keypairunpack(v_840)) in
        {445}let v_852: bitstring = catch-fail(symmetricstateunpack(v_850)) in
        {446}let v_853: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_852),(if success?(4-proj-7-tuple(v_836)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),4-proj-7-tuple(v_836)) else fail-any) else fail-any))) in
        {447}let v_854: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_852),(if success?(4-proj-7-tuple(v_836)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),4-proj-7-tuple(v_836)) else fail-any) else fail-any))) in
        {448}let v_855: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_852),(if success?(4-proj-7-tuple(v_836)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),4-proj-7-tuple(v_836)) else fail-any) else fail-any))) in
        {449}let v_856: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_836)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),4-proj-7-tuple(v_836)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_852))) then (if not-caught-fail(v_853) then (if not-caught-fail(v_854) then (if not-caught-fail(v_855) then (v_853,v_854,v_855) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_857: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_836)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),4-proj-7-tuple(v_836)) else fail-any) else fail-any)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_856)) then cipherstatepack(2-proj-3-tuple(v_856),minnonce) else fail-any),1-proj-3-tuple(v_856),3-proj-3-tuple(v_852)) else fail-any) else fail-any) else fail-any)) in
        {451}let v_858: bitstring = catch-fail(symmetricstateunpack(v_857)) in
        {452}let v_859: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_858))) in
        {453}let v_860: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_859),2-proj-2-tuple(v_859),3-proj-3-tuple(v_858),msg_b(me_798,them_797))) in
        {454}let v_861: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_858))) in
        {455}let v_862: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_859))) && success?(1-proj-3-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then cipherstatepack(1-proj-2-tuple(v_861),increment_nonce(2-proj-2-tuple(v_859))) else fail-any) else fail-any)) in
        {456}let v_863: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_858)) && success?(1-proj-3-tuple(v_858))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-2-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_862) then (v_862,v_860) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {457}let v_864: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_863),2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)))) in
        {458}let v_865: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_863)) && success?(symmetricstatepack(1-proj-2-tuple(v_863),2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then symmetricstatepack(1-proj-3-tuple(v_864),2-proj-3-tuple(v_864),hash(3-proj-3-tuple(v_864),2-proj-2-tuple(v_863))) else fail-any) else fail-any)) in
        {459}let v_866: bitstring = catch-fail((if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then (if not-caught-fail(v_865) then (v_865,2-proj-2-tuple(v_863)) else fail-any) else fail-any) else fail-any)) in
        {460}let v_867: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_866),2-proj-7-tuple(v_836),v_840,4-proj-7-tuple(v_836),5-proj-7-tuple(v_836),6-proj-7-tuple(v_836),7-proj-7-tuple(v_836))) in
        {461}let v_868: bitstring = catch-fail(concat3(v_841,2-proj-3-tuple(v_837),2-proj-2-tuple(v_866))) in
        {462}let (hs_869: handshakestate,re_870: key,message_b_871: bitstring) = (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-7-tuple(v_836))))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if not-caught-fail(v_840) then (if not-caught-fail(v_841) then (if not-caught-fail(v_843) then (if not-caught-fail(v_850) then (if not-caught-fail(v_857) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then (if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (v_867,5-proj-7-tuple(v_836),v_868) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {463}event SendMsg(me_798,them_797,stage_b,msg_b(me_798,them_797),true);
        {464}insert statestore(me_798,them_797,statepack_c(hs_869));
        {465}out(pub, message_b_871)
    ) | (
        {467}!
        {486}get statestore(=me_798,=them_797,statepack_c(hs_872: handshakestate)) in
        {468}in(pub, message_c_873: bitstring);
        {469}let v_874: bitstring = catch-fail(handshakestateunpack(hs_872)) in
        {470}let v_875: bitstring = catch-fail(deconcat3(message_c_873)) in
        {471}let v_876: bool = catch-fail(true) in
        {472}let v_877: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_874))) in
        {473}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_877))) in
        {474}let v_879: aead = catch-fail(decrypt(1-proj-2-tuple(v_878),2-proj-2-tuple(v_878),3-proj-3-tuple(v_877),3-proj-3-tuple(v_875))) in
        {475}let v_880: bitstring = catch-fail(aeadunpack(v_879)) in
        {476}let v_881: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_877))) in
        {477}let v_882: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_878))) && success?(1-proj-3-tuple(v_877))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-2-tuple(v_881))))) then cipherstatepack(1-proj-2-tuple(v_881),increment_nonce(2-proj-2-tuple(v_878))) else fail-any) else fail-any)) in
        {478}let v_883: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_875)) && (success?(3-proj-3-tuple(v_877)) && success?(1-proj-3-tuple(v_877)))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then (if not-caught-fail(v_879) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,3-proj-3-tuple(v_880),1-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {479}let v_884: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)))) in
        {480}let v_885: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_875)) && success?(symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_884),hash(3-proj-3-tuple(v_884),3-proj-3-tuple(v_875))) else fail-any) else fail-any)) in
        {481}let v_886: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_875)) && success?(1-proj-7-tuple(v_874))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if not-caught-fail(v_885) then (v_885,2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {482}let v_887: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_886),2-proj-7-tuple(v_874),3-proj-7-tuple(v_874),4-proj-7-tuple(v_874),5-proj-7-tuple(v_874),6-proj-7-tuple(v_874),7-proj-7-tuple(v_874))) in
        {483}let (hs_888: handshakestate,re_889: key,plaintext_c_890: bitstring,valid_891: bool) = (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-7-tuple(v_874))))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if (v_876 && 3-proj-3-tuple(v_886)) then (if not-caught-fail(v_887) then (v_887,getpublickey(3-proj-7-tuple(v_874)),2-proj-3-tuple(v_886),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {484}event RecvMsg(me_798,them_797,stage_c,plaintext_c_890,valid_891);
        {485}insert statestore(me_798,them_797,statepack_d(hs_888))
    ) | (
        {487}!
        {513}get statestore(=me_798,=them_797,statepack_d(hs_892: handshakestate)) in
        {488}let v_893: bitstring = catch-fail(handshakestateunpack(hs_892)) in
        {489}let v_894: bitstring = catch-fail((empty,empty,empty)) in
        {490}let v_895: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_893))) in
        {491}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {492}let v_897: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_896),2-proj-2-tuple(v_896),3-proj-3-tuple(v_895),msg_d(me_798,them_797))) in
        {493}let v_898: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {494}let v_899: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_896))) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then cipherstatepack(1-proj-2-tuple(v_898),increment_nonce(2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {495}let v_900: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_895)) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_899) then (v_899,v_897) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {496}let v_901: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_900),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) in
        {497}let v_902: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_900)) && success?(symmetricstatepack(1-proj-2-tuple(v_900),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_901),hash(3-proj-3-tuple(v_901),2-proj-2-tuple(v_900))) else fail-any) else fail-any)) in
        {498}let v_903: bitstring = catch-fail((if success?(1-proj-7-tuple(v_893)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then (if not-caught-fail(v_902) then (v_902,2-proj-2-tuple(v_900)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {499}let v_904: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_903),2-proj-7-tuple(v_893),3-proj-7-tuple(v_893),4-proj-7-tuple(v_893),5-proj-7-tuple(v_893),6-proj-7-tuple(v_893),7-proj-7-tuple(v_893))) in
        {500}let v_905: bitstring = catch-fail(concat3(1-proj-3-tuple(v_894),2-proj-3-tuple(v_894),2-proj-2-tuple(v_903))) in
        {501}let v_906: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_903))) in
        {502}let v_907: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_906),zero)) in
        {503}let v_908: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_906),zero)) in
        {504}let v_909: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_906),zero)) in
        {505}let v_910: bitstring = catch-fail((if success?(2-proj-3-tuple(v_906)) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then (if not-caught-fail(v_909) then (v_907,v_908,v_909) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {506}let v_911: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_910)) then cipherstatepack(1-proj-3-tuple(v_910),minnonce) else fail-any)) in
        {507}let v_912: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_910)) then cipherstatepack(2-proj-3-tuple(v_910),minnonce) else fail-any)) in
        {508}let v_913: bitstring = catch-fail((if success?(1-proj-2-tuple(v_903)) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (1-proj-2-tuple(v_903),v_911,v_912) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let (hs_914: handshakestate,re_915: key,message_d_916: bitstring,cs1_917: cipherstate,cs2_918: cipherstate) = (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-7-tuple(v_893))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if not-caught-fail(v_904) then (if not-caught-fail(v_905) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (v_904,5-proj-7-tuple(v_893),v_905,2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {510}event SendMsg(me_798,them_797,stage_d,msg_d(me_798,them_797),true);
        {511}insert statestore(me_798,them_797,statepack_e(hs_914));
        {512}out(pub, message_d_916)
    ) | (
        {514}event LeakS(phase0,me_798);
        {515}out(pub, key_s(me_798))
    ) | (
        {516}phase 1;
        {517}event LeakS(phase1,me_798);
        {518}out(pub, key_s(me_798))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_999,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_999,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_999,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_999,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_999,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_999,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_999,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_999,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 146 rules in the queue.
400 rules inserted. The rule base contains 390 rules. 60 rules in the queue.
600 rules inserted. The rule base contains 578 rules. 96 rules in the queue.
800 rules inserted. The rule base contains 760 rules. 108 rules in the queue.
1000 rules inserted. The rule base contains 875 rules. 113 rules in the queue.
1200 rules inserted. The rule base contains 1007 rules. 132 rules in the queue.
1400 rules inserted. The rule base contains 1174 rules. 166 rules in the queue.
1600 rules inserted. The rule base contains 1347 rules. 218 rules in the queue.
1800 rules inserted. The rule base contains 1495 rules. 217 rules in the queue.
2000 rules inserted. The rule base contains 1608 rules. 181 rules in the queue.
2200 rules inserted. The rule base contains 1725 rules. 174 rules in the queue.
2400 rules inserted. The rule base contains 1869 rules. 195 rules in the queue.
2600 rules inserted. The rule base contains 2007 rules. 216 rules in the queue.
2800 rules inserted. The rule base contains 2140 rules. 203 rules in the queue.
3000 rules inserted. The rule base contains 2253 rules. 173 rules in the queue.
3200 rules inserted. The rule base contains 2371 rules. 131 rules in the queue.
3400 rules inserted. The rule base contains 2506 rules. 140 rules in the queue.
3600 rules inserted. The rule base contains 2618 rules. 95 rules in the queue.
3800 rules inserted. The rule base contains 2629 rules. 16 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_374048763 = key_e_573[me_556 = alice,them_555 = charlie,!1 = @sid_374048745]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374048763,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048763,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374048763,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048763,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e_374048763,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048763,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e_374048763,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_999,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_999,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_999,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_999,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_374048801 = key_e_573[me_556 = alice,them_555 = charlie,!1 = @sid_374048783]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374048801,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048801,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374048801,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048801,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e_374048801,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048801,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e_374048801,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_374048833 = key_e_573[me_556 = alice,them_555 = charlie,!1 = @sid_374048815]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374048833,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048833,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374048833,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048833,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e_374048833,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374048833,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e_374048833,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_374048888 = key_e[me = alice,them = bob,!1 = @sid_374048874]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {40}.
So the message concat3(dhexp(key_374048888,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob))) may be sent on channel pub at output {42}.
mess(pub,concat3(dhexp(key_374048888,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_374048888,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_374048888,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_374048888,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_374048888,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_374048888,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_374048888,g).
attacker(dhexp(key_374048888,g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_374048888,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048888,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_374048943 = key_e[me = alice,them = bob,!1 = @sid_374048929]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {40}.
So the message concat3(dhexp(key_374048943,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob))) may be sent on channel pub at output {42}.
mess(pub,concat3(dhexp(key_374048943,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_374048943,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_374048943,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_374048943,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_374048943,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_374048943,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_374048943,g).
attacker(dhexp(key_374048943,g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_374048943,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048943,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_374048999 = key_e[me = alice,them = bob,!1 = @sid_374048985]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {40}.
So the message concat3(dhexp(key_374048999,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob))) may be sent on channel pub at output {42}.
mess(pub,concat3(dhexp(key_374048999,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_374048999,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_374048999,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_374048999,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_374048999,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_374048999,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_374048999,g).
attacker(dhexp(key_374048999,g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_374048999,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374048999,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_374049054 = key_e[me = alice,them = bob,!1 = @sid_374049040]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {40}.
So the message concat3(dhexp(key_374049054,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob))) may be sent on channel pub at output {42}.
mess(pub,concat3(dhexp(key_374049054,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_374049054,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_374049054,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_374049054,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_374049054,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_374049054,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_374049054,g).
attacker(dhexp(key_374049054,g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_374049054,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_374049054,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_999,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_999,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_999,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_999,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_374049202 = key_e_573[me_556 = alice,them_555 = charlie,!1 = @sid_374049158]
key_e_374049203 = key_e_717[me_678 = bob,them_677 = alice,!1 = @sid_374049184]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374049202,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374049202,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e_374049202,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e_374049202,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false))) that may be in a table by 4 may be read at get {338}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {335}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049203,g),key_e_374049203),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false))) may be inserted in a table at insert {336}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049203,g),key_e_374049203),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049202,g),key_e_374049202),empty,empty,empty,true))) may be inserted in a table at insert {171}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049202,g),key_e_374049202),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374049202,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374049202,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e_374049202,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e_374049202,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false))) that may be in a table by 11 may be read at get {338}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {335}.
So the message concat3(dhexp(key_e_374049203,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice))) may be sent on channel pub at output {337}.
mess(pub,concat3(dhexp(key_e_374049203,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049202,g),key_e_374049202),empty,empty,empty,true))) that may be in a table by 7 may be read at get {209}.
The message concat3(dhexp(key_e_374049203,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {174}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_e_374049203,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049202,g),key_e_374049202),empty,dhexp(key_e_374049203,g),empty,true))) may be inserted in a table at insert {208}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_e_374049203,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049202,g),key_e_374049202),empty,dhexp(key_e_374049203,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_e_374049203,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049202,g),key_e_374049202),empty,dhexp(key_e_374049203,g),empty,true))) that may be in a table by 13 may be read at get {228}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {225}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {227}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049203,g),key_e_374049203),dhexp(key_s(alice),g),dhexp(key_e_374049202,g),empty,false))) that may be in a table by 5 may be read at get {358}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049202,dhexp(key_e_374049203,g))),dhexp(key_s(alice),dhexp(key_e_374049203,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049202,g)),msg_a(alice,charlie))),dhexp(key_e_374049203,g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {340}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {356}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_999,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_999,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_999,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_999,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_374049344 = key_e_573[me_556 = alice,them_555 = charlie,!1 = @sid_374049300]
key_e_374049345 = key_e_717[me_678 = bob,them_677 = alice,!1 = @sid_374049326]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374049344,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374049344,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e_374049344,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e_374049344,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false))) that may be in a table by 4 may be read at get {338}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {335}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049345,g),key_e_374049345),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false))) may be inserted in a table at insert {336}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049345,g),key_e_374049345),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049344,g),key_e_374049344),empty,empty,empty,true))) may be inserted in a table at insert {171}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049344,g),key_e_374049344),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374049344,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374049344,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e_374049344,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e_374049344,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false))) that may be in a table by 11 may be read at get {338}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {335}.
So the message concat3(dhexp(key_e_374049345,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice))) may be sent on channel pub at output {337}.
mess(pub,concat3(dhexp(key_e_374049345,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049344,g),key_e_374049344),empty,empty,empty,true))) that may be in a table by 7 may be read at get {209}.
The message concat3(dhexp(key_e_374049345,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {174}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_e_374049345,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049344,g),key_e_374049344),empty,dhexp(key_e_374049345,g),empty,true))) may be inserted in a table at insert {208}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_e_374049345,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049344,g),key_e_374049344),empty,dhexp(key_e_374049345,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_e_374049345,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049344,g),key_e_374049344),empty,dhexp(key_e_374049345,g),empty,true))) that may be in a table by 13 may be read at get {228}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {225}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {227}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049345,g),key_e_374049345),dhexp(key_s(alice),g),dhexp(key_e_374049344,g),empty,false))) that may be in a table by 5 may be read at get {358}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049344,dhexp(key_e_374049345,g))),dhexp(key_s(alice),dhexp(key_e_374049345,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049344,g)),msg_a(alice,charlie))),dhexp(key_e_374049345,g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {340}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {356}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_374049480 = key_e_573[me_556 = alice,them_555 = charlie,!1 = @sid_374049436]
key_e_374049481 = key_e_717[me_678 = bob,them_677 = alice,!1 = @sid_374049462]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374049480,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374049480,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e_374049480,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e_374049480,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false))) that may be in a table by 4 may be read at get {338}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {335}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049481,g),key_e_374049481),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false))) may be inserted in a table at insert {336}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049481,g),key_e_374049481),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049480,g),key_e_374049480),empty,empty,empty,true))) may be inserted in a table at insert {171}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049480,g),key_e_374049480),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {149}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {173}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {170}.
So the message concat3(dhexp(key_e_374049480,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))) may be sent on channel pub at output {172}.
mess(pub,concat3(dhexp(key_e_374049480,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e_374049480,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e_374049480,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false))) that may be in a table by 11 may be read at get {338}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {335}.
So the message concat3(dhexp(key_e_374049481,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice))) may be sent on channel pub at output {337}.
mess(pub,concat3(dhexp(key_e_374049481,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049480,g),key_e_374049480),empty,empty,empty,true))) that may be in a table by 7 may be read at get {209}.
The message concat3(dhexp(key_e_374049481,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {174}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_e_374049481,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049480,g),key_e_374049480),empty,dhexp(key_e_374049481,g),empty,true))) may be inserted in a table at insert {208}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_e_374049481,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049480,g),key_e_374049480),empty,dhexp(key_e_374049481,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_e_374049481,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_374049480,g),key_e_374049480),empty,dhexp(key_e_374049481,g),empty,true))) that may be in a table by 13 may be read at get {228}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {225}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {227}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_374049481,g),key_e_374049481),dhexp(key_s(alice),g),dhexp(key_e_374049480,g),empty,false))) that may be in a table by 5 may be read at get {358}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_374049480,dhexp(key_e_374049481,g))),dhexp(key_s(alice),dhexp(key_e_374049481,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_374049480,g)),msg_a(alice,charlie))),dhexp(key_e_374049481,g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {340}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {356}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_999,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_999,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_999,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_999,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
