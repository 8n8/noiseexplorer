File "XX1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XX1.noise.passive.pv", line 270, characters 7-8:
Warning: identifier ck rebound.
File "XX1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 271, character 36:
Warning: identifier h rebound.
File "XX1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 310, character 6:
Warning: identifier e rebound.
File "XX1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ne rebound.
File "XX1.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XX1.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 322, character 6:
Warning: identifier e rebound.
File "XX1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ne rebound.
File "XX1.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 327, character 6:
Warning: identifier s rebound.
File "XX1.noise.passive.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 328, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XX1.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XX1.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 338, character 6:
Warning: identifier s rebound.
File "XX1.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 339, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XX1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 341, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XX1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier re rebound.
File "XX1.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 364, characters 6-7:
Warning: identifier re rebound.
File "XX1.noise.passive.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 368, characters 48-53:
Warning: identifier valid1 rebound.
File "XX1.noise.passive.pv", line 369, characters 6-7:
Warning: identifier rs rebound.
File "XX1.noise.passive.pv", line 370, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 372, characters 7-8:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 380, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 381, characters 48-53:
Warning: identifier valid1 rebound.
File "XX1.noise.passive.pv", line 382, characters 6-7:
Warning: identifier rs rebound.
File "XX1.noise.passive.pv", line 383, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 384, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 386, characters 7-8:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 338, character 6:
Warning: identifier s rebound.
File "XX1.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 339, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XX1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 341, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XX1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XX1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XX1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 364, characters 6-7:
Warning: identifier re rebound.
File "XX1.noise.passive.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 368, characters 48-53:
Warning: identifier valid1 rebound.
File "XX1.noise.passive.pv", line 369, characters 6-7:
Warning: identifier rs rebound.
File "XX1.noise.passive.pv", line 370, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 372, characters 7-8:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XX1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 490, characters 8-9:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 310, character 6:
Warning: identifier e rebound.
File "XX1.noise.passive.pv", line 311, characters 6-7:
Warning: identifier ne rebound.
File "XX1.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XX1.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 548, characters 8-9:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 380, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 381, characters 48-53:
Warning: identifier valid1 rebound.
File "XX1.noise.passive.pv", line 382, characters 6-7:
Warning: identifier rs rebound.
File "XX1.noise.passive.pv", line 383, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 384, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 386, characters 7-8:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XX1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XX1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 540, characters 8-9:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 322, character 6:
Warning: identifier e rebound.
File "XX1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ne rebound.
File "XX1.noise.passive.pv", line 324, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 327, character 6:
Warning: identifier s rebound.
File "XX1.noise.passive.pv", line 328, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 328, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XX1.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XX1.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XX1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 533, characters 8-9:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier re rebound.
File "XX1.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "XX1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "XX1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XX1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_474: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_474));
    (
        {4}let e_475: keypair = keypairpack(empty,empty) in
        {5}let rs_476: key = empty in
        {6}let re_477: key = empty in
        {7}let v_478: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_479: key = catch-fail(v_478) in
        {9}let v_480: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_481: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any))) in
        {11}let v_482: symmetricstate = catch-fail((if success?((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_481),hash(3-proj-3-tuple(v_481),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_482) then handshakestatepack(v_482,s_474,e_475,rs_476,re_477,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {36}get statestore(=alice,=bob,statepack_a(hs_483: handshakestate)) in
        {14}let v_484: bitstring = catch-fail(handshakestateunpack(hs_483)) in
        {15}let v_485: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_486: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_487: keypair = catch-fail((if not-caught-fail(v_486) then keypairpack(v_486,key_e(alice,bob)) else fail-any)) in
        {18}let v_488: bitstring = catch-fail(getpublickey(v_487)) in
        {19}let v_489: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_484))) in
        {20}let v_490: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_484)) then (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-3-tuple(v_489))))) then symmetricstatepack(1-proj-3-tuple(v_489),2-proj-3-tuple(v_489),hash(3-proj-3-tuple(v_489),v_488)) else fail-any) else fail-any)) in
        {21}let v_491: bitstring = catch-fail(symmetricstateunpack(v_490)) in
        {22}let v_492: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_491))) in
        {23}let v_493: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_492),2-proj-2-tuple(v_492),3-proj-3-tuple(v_491),msg_a(alice,bob))) in
        {24}let v_494: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_491))) in
        {25}let v_495: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_492))) && success?(1-proj-3-tuple(v_491))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-2-tuple(v_494))))) then cipherstatepack(1-proj-2-tuple(v_494),increment_nonce(2-proj-2-tuple(v_492))) else fail-any) else fail-any)) in
        {26}let v_496: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_491)) && success?(1-proj-3-tuple(v_491))) then (if (not-caught-fail(v_492) && success?(is-true(success?(1-proj-2-tuple(v_492))))) then (if not-caught-fail(v_493) then (if not-caught-fail(v_495) then (v_495,v_493) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_497: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_496),2-proj-3-tuple(v_491),3-proj-3-tuple(v_491)))) in
        {28}let v_498: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_496)) && success?(symmetricstatepack(1-proj-2-tuple(v_496),2-proj-3-tuple(v_491),3-proj-3-tuple(v_491)))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-3-tuple(v_497))))) then symmetricstatepack(1-proj-3-tuple(v_497),2-proj-3-tuple(v_497),hash(3-proj-3-tuple(v_497),2-proj-2-tuple(v_496))) else fail-any) else fail-any)) in
        {29}let v_499: bitstring = catch-fail((if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-2-tuple(v_496))))) then (if not-caught-fail(v_498) then (v_498,2-proj-2-tuple(v_496)) else fail-any) else fail-any) else fail-any)) in
        {30}let v_500: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_499),2-proj-7-tuple(v_484),v_487,4-proj-7-tuple(v_484),5-proj-7-tuple(v_484),6-proj-7-tuple(v_484),7-proj-7-tuple(v_484))) in
        {31}let v_501: bitstring = catch-fail(concat3(v_488,2-proj-3-tuple(v_485),2-proj-2-tuple(v_499))) in
        {32}let (hs_502: handshakestate,re_503: key,message_a: bitstring) = (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-7-tuple(v_484))))) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then (if not-caught-fail(v_487) then (if not-caught-fail(v_488) then (if not-caught-fail(v_490) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-2-tuple(v_499))))) then (if not-caught-fail(v_500) then (if not-caught-fail(v_501) then (v_500,5-proj-7-tuple(v_484),v_501) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {33}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {34}insert statestore(alice,bob,statepack_b(hs_502));
        {35}out(pub, message_a)
    ) | (
        {77}get statestore(=alice,=bob,statepack_b(hs_504: handshakestate)) in
        {37}in(pub, message_b: bitstring);
        {38}let v_505: bitstring = catch-fail(handshakestateunpack(hs_504)) in
        {39}let v_506: bitstring = catch-fail(deconcat3(message_b)) in
        {40}let v_507: bool = catch-fail(true) in
        {41}let v_508: key = catch-fail(1-proj-3-tuple(v_506)) in
        {42}let v_509: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_505))) in
        {43}let v_510: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_505)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-3-tuple(v_509))))) then symmetricstatepack(1-proj-3-tuple(v_509),2-proj-3-tuple(v_509),hash(3-proj-3-tuple(v_509),v_508)) else fail-any) else fail-any)) in
        {44}let v_511: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_505))) in
        {45}let v_512: bitstring = catch-fail(symmetricstateunpack(v_510)) in
        {46}let v_513: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_512),(if success?(3-proj-7-tuple(v_505)) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-2-tuple(v_511))))) then dhexp(2-proj-2-tuple(v_511),v_508) else fail-any) else fail-any))) in
        {47}let v_514: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_512),(if success?(3-proj-7-tuple(v_505)) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-2-tuple(v_511))))) then dhexp(2-proj-2-tuple(v_511),v_508) else fail-any) else fail-any))) in
        {48}let v_515: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_512),(if success?(3-proj-7-tuple(v_505)) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-2-tuple(v_511))))) then dhexp(2-proj-2-tuple(v_511),v_508) else fail-any) else fail-any))) in
        {49}let v_516: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_505)) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-2-tuple(v_511))))) then dhexp(2-proj-2-tuple(v_511),v_508) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_512))) then (if not-caught-fail(v_513) then (if not-caught-fail(v_514) then (if not-caught-fail(v_515) then (v_513,v_514,v_515) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_517: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_505)) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-2-tuple(v_511))))) then dhexp(2-proj-2-tuple(v_511),v_508) else fail-any) else fail-any)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_516)) then cipherstatepack(2-proj-3-tuple(v_516),minnonce) else fail-any),1-proj-3-tuple(v_516),3-proj-3-tuple(v_512)) else fail-any) else fail-any) else fail-any)) in
        {51}let v_518: bitstring = catch-fail(symmetricstateunpack(v_517)) in
        {52}let v_519: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_518))) in
        {53}let v_520: aead = catch-fail(decrypt(1-proj-2-tuple(v_519),2-proj-2-tuple(v_519),3-proj-3-tuple(v_518),2-proj-3-tuple(v_506))) in
        {54}let v_521: bitstring = catch-fail(aeadunpack(v_520)) in
        {55}let v_522: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_518))) in
        {56}let v_523: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_519))) && success?(1-proj-3-tuple(v_518))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then cipherstatepack(1-proj-2-tuple(v_522),increment_nonce(2-proj-2-tuple(v_519))) else fail-any) else fail-any)) in
        {57}let v_524: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_506)) && (success?(3-proj-3-tuple(v_518)) && success?(1-proj-3-tuple(v_518)))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then (if not-caught-fail(v_520) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if not-caught-fail(v_523) then (v_523,3-proj-3-tuple(v_521),1-proj-3-tuple(v_521)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {58}let v_525: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_524),2-proj-3-tuple(v_518),3-proj-3-tuple(v_518)))) in
        {59}let v_526: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_506)) && success?(symmetricstatepack(1-proj-3-tuple(v_524),2-proj-3-tuple(v_518),3-proj-3-tuple(v_518)))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then symmetricstatepack(1-proj-3-tuple(v_525),2-proj-3-tuple(v_525),hash(3-proj-3-tuple(v_525),2-proj-3-tuple(v_506))) else fail-any) else fail-any)) in
        {60}let v_527: bitstring = catch-fail((if success?(2-proj-3-tuple(v_506)) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then (if not-caught-fail(v_526) then (v_526,2-proj-3-tuple(v_524),3-proj-3-tuple(v_524)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_528: key = catch-fail(2-proj-3-tuple(v_527)) in
        {62}let v_529: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_527))) in
        {63}let v_530: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_529))) in
        {64}let v_531: aead = catch-fail(decrypt(1-proj-2-tuple(v_530),2-proj-2-tuple(v_530),3-proj-3-tuple(v_529),3-proj-3-tuple(v_506))) in
        {65}let v_532: bitstring = catch-fail(aeadunpack(v_531)) in
        {66}let v_533: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_529))) in
        {67}let v_534: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_530))) && success?(1-proj-3-tuple(v_529))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then cipherstatepack(1-proj-2-tuple(v_533),increment_nonce(2-proj-2-tuple(v_530))) else fail-any) else fail-any)) in
        {68}let v_535: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_506)) && (success?(3-proj-3-tuple(v_529)) && success?(1-proj-3-tuple(v_529)))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then (if not-caught-fail(v_531) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if not-caught-fail(v_534) then (v_534,3-proj-3-tuple(v_532),1-proj-3-tuple(v_532)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {69}let v_536: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_535),2-proj-3-tuple(v_529),3-proj-3-tuple(v_529)))) in
        {70}let v_537: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_506)) && success?(symmetricstatepack(1-proj-3-tuple(v_535),2-proj-3-tuple(v_529),3-proj-3-tuple(v_529)))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_536),hash(3-proj-3-tuple(v_536),3-proj-3-tuple(v_506))) else fail-any) else fail-any)) in
        {71}let v_538: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_506)) && success?(1-proj-3-tuple(v_527))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if not-caught-fail(v_537) then (v_537,2-proj-3-tuple(v_535),3-proj-3-tuple(v_535)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_539: key = catch-fail(dhexp(key_s(bob),g)) in
        {73}let v_540: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_538),2-proj-7-tuple(v_505),3-proj-7-tuple(v_505),v_528,v_508,6-proj-7-tuple(v_505),7-proj-7-tuple(v_505))) in
        {74}let (hs_541: handshakestate,re_542: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-7-tuple(v_505))))) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if not-caught-fail(v_507) then (if not-caught-fail(v_508) then (if not-caught-fail(v_510) then (if not-caught-fail(v_517) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if not-caught-fail(v_528) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if ((3-proj-3-tuple(v_527) && 3-proj-3-tuple(v_538)) && (v_528 = getpublickey((if not-caught-fail(v_539) then keypairpack(v_539,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_540) then (v_540,getpublickey(3-proj-7-tuple(v_505)),2-proj-3-tuple(v_538),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {75}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {76}insert statestore(alice,bob,statepack_c(hs_541))
    ) | (
        {128}get statestore(=alice,=bob,statepack_c(hs_543: handshakestate)) in
        {78}let v_544: bitstring = catch-fail(handshakestateunpack(hs_543)) in
        {79}let v_545: bitstring = catch-fail((empty,empty,empty)) in
        {80}let v_546: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_544))) in
        {81}let v_547: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_544))) in
        {82}let v_548: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_547),(if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),4-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {83}let v_549: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_547),(if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),4-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {84}let v_550: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_547),(if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),4-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {85}let v_551: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),4-proj-7-tuple(v_544)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_547))) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (v_548,v_549,v_550) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_552: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_544)) && success?(3-proj-7-tuple(v_544))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then dhexp(2-proj-2-tuple(v_546),4-proj-7-tuple(v_544)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_544))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_551)) then cipherstatepack(2-proj-3-tuple(v_551),minnonce) else fail-any),1-proj-3-tuple(v_551),3-proj-3-tuple(v_547)) else fail-any) else fail-any) else fail-any)) in
        {87}let v_553: key = catch-fail(dhexp(key_s(alice),g)) in
        {88}let v_554: keypair = catch-fail((if not-caught-fail(v_553) then keypairpack(v_553,key_s(alice)) else fail-any)) in
        {89}let v_555: bitstring = catch-fail(symmetricstateunpack(v_552)) in
        {90}let v_556: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_555))) in
        {91}let v_557: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_556),2-proj-2-tuple(v_556),3-proj-3-tuple(v_555),getpublickey(v_554))) in
        {92}let v_558: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_555))) in
        {93}let v_559: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_556))) && success?(1-proj-3-tuple(v_555))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then cipherstatepack(1-proj-2-tuple(v_558),increment_nonce(2-proj-2-tuple(v_556))) else fail-any) else fail-any)) in
        {94}let v_560: bitstring = catch-fail((if (success?(getpublickey(v_554)) && (success?(3-proj-3-tuple(v_555)) && success?(1-proj-3-tuple(v_555)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-2-tuple(v_556))))) then (if not-caught-fail(v_557) then (if not-caught-fail(v_559) then (v_559,v_557) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_561: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_560),2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)))) in
        {96}let v_562: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_560)) && success?(symmetricstatepack(1-proj-2-tuple(v_560),2-proj-3-tuple(v_555),3-proj-3-tuple(v_555)))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then symmetricstatepack(1-proj-3-tuple(v_561),2-proj-3-tuple(v_561),hash(3-proj-3-tuple(v_561),2-proj-2-tuple(v_560))) else fail-any) else fail-any)) in
        {97}let v_563: bitstring = catch-fail((if success?(getpublickey(v_554)) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then (if not-caught-fail(v_562) then (v_562,2-proj-2-tuple(v_560)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_564: bitstring = catch-fail(keypairunpack(v_554)) in
        {99}let v_565: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_563))) in
        {100}let v_566: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_565),(if success?(5-proj-7-tuple(v_544)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),5-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {101}let v_567: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_565),(if success?(5-proj-7-tuple(v_544)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),5-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {102}let v_568: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_565),(if success?(5-proj-7-tuple(v_544)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),5-proj-7-tuple(v_544)) else fail-any) else fail-any))) in
        {103}let v_569: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_544)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),5-proj-7-tuple(v_544)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_565))) then (if not-caught-fail(v_566) then (if not-caught-fail(v_567) then (if not-caught-fail(v_568) then (v_566,v_567,v_568) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_570: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_544)) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then dhexp(2-proj-2-tuple(v_564),5-proj-7-tuple(v_544)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_563))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_569)) then cipherstatepack(2-proj-3-tuple(v_569),minnonce) else fail-any),1-proj-3-tuple(v_569),3-proj-3-tuple(v_565)) else fail-any) else fail-any) else fail-any)) in
        {105}let v_571: bitstring = catch-fail(symmetricstateunpack(v_570)) in
        {106}let v_572: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {107}let v_573: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_572),2-proj-2-tuple(v_572),3-proj-3-tuple(v_571),msg_c(alice,bob))) in
        {108}let v_574: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {109}let v_575: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_572))) && success?(1-proj-3-tuple(v_571))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then cipherstatepack(1-proj-2-tuple(v_574),increment_nonce(2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {110}let v_576: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_571)) && success?(1-proj-3-tuple(v_571))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_573) then (if not-caught-fail(v_575) then (v_575,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {111}let v_577: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_576),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) in
        {112}let v_578: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_576)) && success?(symmetricstatepack(1-proj-2-tuple(v_576),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_577),hash(3-proj-3-tuple(v_577),2-proj-2-tuple(v_576))) else fail-any) else fail-any)) in
        {113}let v_579: bitstring = catch-fail((if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then (if not-caught-fail(v_578) then (v_578,2-proj-2-tuple(v_576)) else fail-any) else fail-any) else fail-any)) in
        {114}let v_580: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_579),v_554,3-proj-7-tuple(v_544),4-proj-7-tuple(v_544),5-proj-7-tuple(v_544),6-proj-7-tuple(v_544),7-proj-7-tuple(v_544))) in
        {115}let v_581: bitstring = catch-fail(concat3(1-proj-3-tuple(v_545),2-proj-2-tuple(v_563),2-proj-2-tuple(v_579))) in
        {116}let v_582: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_579))) in
        {117}let v_583: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_582),zero)) in
        {118}let v_584: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_582),zero)) in
        {119}let v_585: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_582),zero)) in
        {120}let v_586: bitstring = catch-fail((if success?(2-proj-3-tuple(v_582)) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (v_583,v_584,v_585) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {121}let v_587: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_586)) then cipherstatepack(1-proj-3-tuple(v_586),minnonce) else fail-any)) in
        {122}let v_588: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_586)) then cipherstatepack(2-proj-3-tuple(v_586),minnonce) else fail-any)) in
        {123}let v_589: bitstring = catch-fail((if success?(1-proj-2-tuple(v_579)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (1-proj-2-tuple(v_579),v_587,v_588) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let (hs_590: handshakestate,re_591: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-7-tuple(v_544))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_554) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-2-tuple(v_563))))) then (if not-caught-fail(v_570) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (v_580,5-proj-7-tuple(v_544),v_581,2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {125}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {126}insert statestore(alice,bob,statepack_d(hs_590));
        {127}out(pub, message_c)
    ) | (
        {129}event LeakS(phase0,alice);
        {130}out(pub, key_s(alice))
    ) | (
        {131}phase 1;
        {132}event LeakS(phase1,alice);
        {133}out(pub, key_s(alice))
    )
) | (
    {134}let s_592: keypair = keypairpack(empty,empty) in
    {135}out(pub, getpublickey(s_592));
    (
        {136}let e_593: keypair = keypairpack(empty,empty) in
        {137}let rs_594: key = empty in
        {138}let re_595: key = empty in
        {139}let v_596: bitstring = catch-fail(hash(somename,empty)) in
        {140}let v_597: key = catch-fail(v_596) in
        {141}let v_598: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {142}let v_599: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then symmetricstatepack(v_598,v_597,v_596) else fail-any) else fail-any) else fail-any))) in
        {143}let v_600: symmetricstate = catch-fail((if success?((if not-caught-fail(v_596) then (if not-caught-fail(v_597) then (if not-caught-fail(v_598) then symmetricstatepack(v_598,v_597,v_596) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then symmetricstatepack(1-proj-3-tuple(v_599),2-proj-3-tuple(v_599),hash(3-proj-3-tuple(v_599),empty)) else fail-any) else fail-any)) in
        {144}let hs_601: handshakestate = (if not-caught-fail(v_600) then handshakestatepack(v_600,s_592,e_593,rs_594,re_595,empty,true) else fail-any) in
        {145}insert statestore(alice,charlie,statepack_a(hs_601))
    ) | (
        {168}get statestore(=alice,=charlie,statepack_a(hs_602: handshakestate)) in
        {146}let v_603: bitstring = catch-fail(handshakestateunpack(hs_602)) in
        {147}let v_604: bitstring = catch-fail((empty,empty,empty)) in
        {148}let v_605: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {149}let v_606: keypair = catch-fail((if not-caught-fail(v_605) then keypairpack(v_605,key_e(alice,charlie)) else fail-any)) in
        {150}let v_607: bitstring = catch-fail(getpublickey(v_606)) in
        {151}let v_608: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_603))) in
        {152}let v_609: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_603)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then symmetricstatepack(1-proj-3-tuple(v_608),2-proj-3-tuple(v_608),hash(3-proj-3-tuple(v_608),v_607)) else fail-any) else fail-any)) in
        {153}let v_610: bitstring = catch-fail(symmetricstateunpack(v_609)) in
        {154}let v_611: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_610))) in
        {155}let v_612: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_611),2-proj-2-tuple(v_611),3-proj-3-tuple(v_610),msg_a(alice,charlie))) in
        {156}let v_613: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_610))) in
        {157}let v_614: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_611))) && success?(1-proj-3-tuple(v_610))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then cipherstatepack(1-proj-2-tuple(v_613),increment_nonce(2-proj-2-tuple(v_611))) else fail-any) else fail-any)) in
        {158}let v_615: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_610)) && success?(1-proj-3-tuple(v_610))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_614) then (v_614,v_612) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_616: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_615),2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)))) in
        {160}let v_617: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_615)) && success?(symmetricstatepack(1-proj-2-tuple(v_615),2-proj-3-tuple(v_610),3-proj-3-tuple(v_610)))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack(1-proj-3-tuple(v_616),2-proj-3-tuple(v_616),hash(3-proj-3-tuple(v_616),2-proj-2-tuple(v_615))) else fail-any) else fail-any)) in
        {161}let v_618: bitstring = catch-fail((if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then (if not-caught-fail(v_617) then (v_617,2-proj-2-tuple(v_615)) else fail-any) else fail-any) else fail-any)) in
        {162}let v_619: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_618),2-proj-7-tuple(v_603),v_606,4-proj-7-tuple(v_603),5-proj-7-tuple(v_603),6-proj-7-tuple(v_603),7-proj-7-tuple(v_603))) in
        {163}let v_620: bitstring = catch-fail(concat3(v_607,2-proj-3-tuple(v_604),2-proj-2-tuple(v_618))) in
        {164}let (hs_621: handshakestate,re_622: key,message_a_623: bitstring) = (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-7-tuple(v_603))))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if not-caught-fail(v_606) then (if not-caught-fail(v_607) then (if not-caught-fail(v_609) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_620) then (v_619,5-proj-7-tuple(v_603),v_620) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {165}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {166}insert statestore(alice,charlie,statepack_b(hs_621));
        {167}out(pub, message_a_623)
    ) | (
        {209}get statestore(=alice,=charlie,statepack_b(hs_624: handshakestate)) in
        {169}in(pub, message_b_625: bitstring);
        {170}let v_626: bitstring = catch-fail(handshakestateunpack(hs_624)) in
        {171}let v_627: bitstring = catch-fail(deconcat3(message_b_625)) in
        {172}let v_628: bool = catch-fail(true) in
        {173}let v_629: key = catch-fail(1-proj-3-tuple(v_627)) in
        {174}let v_630: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_626))) in
        {175}let v_631: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_626)) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then symmetricstatepack(1-proj-3-tuple(v_630),2-proj-3-tuple(v_630),hash(3-proj-3-tuple(v_630),v_629)) else fail-any) else fail-any)) in
        {176}let v_632: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_626))) in
        {177}let v_633: bitstring = catch-fail(symmetricstateunpack(v_631)) in
        {178}let v_634: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_633),(if success?(3-proj-7-tuple(v_626)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then dhexp(2-proj-2-tuple(v_632),v_629) else fail-any) else fail-any))) in
        {179}let v_635: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_633),(if success?(3-proj-7-tuple(v_626)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then dhexp(2-proj-2-tuple(v_632),v_629) else fail-any) else fail-any))) in
        {180}let v_636: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_633),(if success?(3-proj-7-tuple(v_626)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then dhexp(2-proj-2-tuple(v_632),v_629) else fail-any) else fail-any))) in
        {181}let v_637: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_626)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then dhexp(2-proj-2-tuple(v_632),v_629) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_633))) then (if not-caught-fail(v_634) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (v_634,v_635,v_636) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {182}let v_638: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_626)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then dhexp(2-proj-2-tuple(v_632),v_629) else fail-any) else fail-any)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_637)) then cipherstatepack(2-proj-3-tuple(v_637),minnonce) else fail-any),1-proj-3-tuple(v_637),3-proj-3-tuple(v_633)) else fail-any) else fail-any) else fail-any)) in
        {183}let v_639: bitstring = catch-fail(symmetricstateunpack(v_638)) in
        {184}let v_640: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_639))) in
        {185}let v_641: aead = catch-fail(decrypt(1-proj-2-tuple(v_640),2-proj-2-tuple(v_640),3-proj-3-tuple(v_639),2-proj-3-tuple(v_627))) in
        {186}let v_642: bitstring = catch-fail(aeadunpack(v_641)) in
        {187}let v_643: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_639))) in
        {188}let v_644: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_640))) && success?(1-proj-3-tuple(v_639))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then cipherstatepack(1-proj-2-tuple(v_643),increment_nonce(2-proj-2-tuple(v_640))) else fail-any) else fail-any)) in
        {189}let v_645: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_627)) && (success?(3-proj-3-tuple(v_639)) && success?(1-proj-3-tuple(v_639)))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-2-tuple(v_640))))) then (if not-caught-fail(v_641) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if not-caught-fail(v_644) then (v_644,3-proj-3-tuple(v_642),1-proj-3-tuple(v_642)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_646: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)))) in
        {191}let v_647: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_627)) && success?(symmetricstatepack(1-proj-3-tuple(v_645),2-proj-3-tuple(v_639),3-proj-3-tuple(v_639)))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_646),hash(3-proj-3-tuple(v_646),2-proj-3-tuple(v_627))) else fail-any) else fail-any)) in
        {192}let v_648: bitstring = catch-fail((if success?(2-proj-3-tuple(v_627)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then (if not-caught-fail(v_647) then (v_647,2-proj-3-tuple(v_645),3-proj-3-tuple(v_645)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {193}let v_649: key = catch-fail(2-proj-3-tuple(v_648)) in
        {194}let v_650: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_648))) in
        {195}let v_651: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_650))) in
        {196}let v_652: aead = catch-fail(decrypt(1-proj-2-tuple(v_651),2-proj-2-tuple(v_651),3-proj-3-tuple(v_650),3-proj-3-tuple(v_627))) in
        {197}let v_653: bitstring = catch-fail(aeadunpack(v_652)) in
        {198}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_650))) in
        {199}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_651))) && success?(1-proj-3-tuple(v_650))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_651))) else fail-any) else fail-any)) in
        {200}let v_656: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_627)) && (success?(3-proj-3-tuple(v_650)) && success?(1-proj-3-tuple(v_650)))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then (if not-caught-fail(v_652) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if not-caught-fail(v_655) then (v_655,3-proj-3-tuple(v_653),1-proj-3-tuple(v_653)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {201}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)))) in
        {202}let v_658: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_627)) && success?(symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_650),3-proj-3-tuple(v_650)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),3-proj-3-tuple(v_627))) else fail-any) else fail-any)) in
        {203}let v_659: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_627)) && success?(1-proj-3-tuple(v_648))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {204}let v_660: key = catch-fail(dhexp(key_s(charlie),g)) in
        {205}let v_661: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_659),2-proj-7-tuple(v_626),3-proj-7-tuple(v_626),v_649,v_629,6-proj-7-tuple(v_626),7-proj-7-tuple(v_626))) in
        {206}let (hs_662: handshakestate,re_663: key,plaintext_b_664: bitstring,valid_665: bool) = (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-7-tuple(v_626))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (if not-caught-fail(v_631) then (if not-caught-fail(v_638) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then (if not-caught-fail(v_649) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if ((3-proj-3-tuple(v_648) && 3-proj-3-tuple(v_659)) && (v_649 = getpublickey((if not-caught-fail(v_660) then keypairpack(v_660,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_661) then (v_661,getpublickey(3-proj-7-tuple(v_626)),2-proj-3-tuple(v_659),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {207}event RecvMsg(alice,charlie,stage_b,plaintext_b_664,valid_665);
        {208}insert statestore(alice,charlie,statepack_c(hs_662))
    ) | (
        {260}get statestore(=alice,=charlie,statepack_c(hs_666: handshakestate)) in
        {210}let v_667: bitstring = catch-fail(handshakestateunpack(hs_666)) in
        {211}let v_668: bitstring = catch-fail((empty,empty,empty)) in
        {212}let v_669: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_667))) in
        {213}let v_670: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_667))) in
        {214}let v_671: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_670),(if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),4-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {215}let v_672: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_670),(if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),4-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {216}let v_673: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_670),(if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),4-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {217}let v_674: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),4-proj-7-tuple(v_667)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_670))) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then (if not-caught-fail(v_673) then (v_671,v_672,v_673) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_675: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_667)) && success?(3-proj-7-tuple(v_667))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then dhexp(2-proj-2-tuple(v_669),4-proj-7-tuple(v_667)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_667))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_674)) then cipherstatepack(2-proj-3-tuple(v_674),minnonce) else fail-any),1-proj-3-tuple(v_674),3-proj-3-tuple(v_670)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_676: key = catch-fail(dhexp(key_s(alice),g)) in
        {220}let v_677: keypair = catch-fail((if not-caught-fail(v_676) then keypairpack(v_676,key_s(alice)) else fail-any)) in
        {221}let v_678: bitstring = catch-fail(symmetricstateunpack(v_675)) in
        {222}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_678))) in
        {223}let v_680: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_679),2-proj-2-tuple(v_679),3-proj-3-tuple(v_678),getpublickey(v_677))) in
        {224}let v_681: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_678))) in
        {225}let v_682: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_679))) && success?(1-proj-3-tuple(v_678))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then cipherstatepack(1-proj-2-tuple(v_681),increment_nonce(2-proj-2-tuple(v_679))) else fail-any) else fail-any)) in
        {226}let v_683: bitstring = catch-fail((if (success?(getpublickey(v_677)) && (success?(3-proj-3-tuple(v_678)) && success?(1-proj-3-tuple(v_678)))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then (if not-caught-fail(v_680) then (if not-caught-fail(v_682) then (v_682,v_680) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_684: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_683),2-proj-3-tuple(v_678),3-proj-3-tuple(v_678)))) in
        {228}let v_685: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_683)) && success?(symmetricstatepack(1-proj-2-tuple(v_683),2-proj-3-tuple(v_678),3-proj-3-tuple(v_678)))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),2-proj-2-tuple(v_683))) else fail-any) else fail-any)) in
        {229}let v_686: bitstring = catch-fail((if success?(getpublickey(v_677)) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-2-tuple(v_683))))) then (if not-caught-fail(v_685) then (v_685,2-proj-2-tuple(v_683)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_687: bitstring = catch-fail(keypairunpack(v_677)) in
        {231}let v_688: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_686))) in
        {232}let v_689: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_688),(if success?(5-proj-7-tuple(v_667)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),5-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {233}let v_690: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_688),(if success?(5-proj-7-tuple(v_667)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),5-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {234}let v_691: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_688),(if success?(5-proj-7-tuple(v_667)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),5-proj-7-tuple(v_667)) else fail-any) else fail-any))) in
        {235}let v_692: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_667)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),5-proj-7-tuple(v_667)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_688))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (v_689,v_690,v_691) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_693: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_667)) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then dhexp(2-proj-2-tuple(v_687),5-proj-7-tuple(v_667)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_686))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_692)) then cipherstatepack(2-proj-3-tuple(v_692),minnonce) else fail-any),1-proj-3-tuple(v_692),3-proj-3-tuple(v_688)) else fail-any) else fail-any) else fail-any)) in
        {237}let v_694: bitstring = catch-fail(symmetricstateunpack(v_693)) in
        {238}let v_695: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {239}let v_696: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_695),2-proj-2-tuple(v_695),3-proj-3-tuple(v_694),msg_c(alice,charlie))) in
        {240}let v_697: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_694))) in
        {241}let v_698: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_695))) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then cipherstatepack(1-proj-2-tuple(v_697),increment_nonce(2-proj-2-tuple(v_695))) else fail-any) else fail-any)) in
        {242}let v_699: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_694)) && success?(1-proj-3-tuple(v_694))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_698) then (v_698,v_696) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_700: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_699),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) in
        {244}let v_701: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_699)) && success?(symmetricstatepack(1-proj-2-tuple(v_699),2-proj-3-tuple(v_694),3-proj-3-tuple(v_694)))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_700),hash(3-proj-3-tuple(v_700),2-proj-2-tuple(v_699))) else fail-any) else fail-any)) in
        {245}let v_702: bitstring = catch-fail((if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then (if not-caught-fail(v_701) then (v_701,2-proj-2-tuple(v_699)) else fail-any) else fail-any) else fail-any)) in
        {246}let v_703: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_702),v_677,3-proj-7-tuple(v_667),4-proj-7-tuple(v_667),5-proj-7-tuple(v_667),6-proj-7-tuple(v_667),7-proj-7-tuple(v_667))) in
        {247}let v_704: bitstring = catch-fail(concat3(1-proj-3-tuple(v_668),2-proj-2-tuple(v_686),2-proj-2-tuple(v_702))) in
        {248}let v_705: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_702))) in
        {249}let v_706: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_705),zero)) in
        {250}let v_707: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_705),zero)) in
        {251}let v_708: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_705),zero)) in
        {252}let v_709: bitstring = catch-fail((if success?(2-proj-3-tuple(v_705)) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (if not-caught-fail(v_708) then (v_706,v_707,v_708) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_710: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_709)) then cipherstatepack(1-proj-3-tuple(v_709),minnonce) else fail-any)) in
        {254}let v_711: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_709)) then cipherstatepack(2-proj-3-tuple(v_709),minnonce) else fail-any)) in
        {255}let v_712: bitstring = catch-fail((if success?(1-proj-2-tuple(v_702)) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (1-proj-2-tuple(v_702),v_710,v_711) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let (hs_713: handshakestate,re_714: key,message_c_715: bitstring,cs1_716: cipherstate,cs2_717: cipherstate) = (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-7-tuple(v_667))))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if not-caught-fail(v_675) then (if not-caught-fail(v_677) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-2-tuple(v_702))))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (v_703,5-proj-7-tuple(v_667),v_704,2-proj-3-tuple(v_712),3-proj-3-tuple(v_712)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {257}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {258}insert statestore(alice,charlie,statepack_d(hs_713));
        {259}out(pub, message_c_715)
    ) | (
        {261}event LeakS(phase0,alice);
        {262}out(pub, key_s(alice))
    ) | (
        {263}phase 1;
        {264}event LeakS(phase1,alice);
        {265}out(pub, key_s(alice))
    )
) | (
    {266}let s_718: keypair = keypairpack(empty,empty) in
    {267}out(pub, getpublickey(s_718));
    (
        {268}let e_719: keypair = keypairpack(empty,empty) in
        {269}let rs_720: key = empty in
        {270}let re_721: key = empty in
        {271}let v_722: bitstring = catch-fail(hash(somename,empty)) in
        {272}let v_723: key = catch-fail(v_722) in
        {273}let v_724: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {274}let v_725: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then symmetricstatepack(v_724,v_723,v_722) else fail-any) else fail-any) else fail-any))) in
        {275}let v_726: symmetricstate = catch-fail((if success?((if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_724) then symmetricstatepack(v_724,v_723,v_722) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then symmetricstatepack(1-proj-3-tuple(v_725),2-proj-3-tuple(v_725),hash(3-proj-3-tuple(v_725),empty)) else fail-any) else fail-any)) in
        {276}let hs_727: handshakestate = (if not-caught-fail(v_726) then handshakestatepack(v_726,s_718,e_719,rs_720,re_721,empty,false) else fail-any) in
        {277}insert statestore(bob,alice,statepack_a(hs_727))
    ) | (
        {299}get statestore(=bob,=alice,statepack_a(hs_728: handshakestate)) in
        {278}in(pub, message_a_729: bitstring);
        {279}let v_730: bitstring = catch-fail(handshakestateunpack(hs_728)) in
        {280}let v_731: bitstring = catch-fail(deconcat3(message_a_729)) in
        {281}let v_732: bool = catch-fail(true) in
        {282}let v_733: key = catch-fail(1-proj-3-tuple(v_731)) in
        {283}let v_734: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_730))) in
        {284}let v_735: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_730)) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then symmetricstatepack(1-proj-3-tuple(v_734),2-proj-3-tuple(v_734),hash(3-proj-3-tuple(v_734),v_733)) else fail-any) else fail-any)) in
        {285}let v_736: bitstring = catch-fail(symmetricstateunpack(v_735)) in
        {286}let v_737: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_736))) in
        {287}let v_738: aead = catch-fail(decrypt(1-proj-2-tuple(v_737),2-proj-2-tuple(v_737),3-proj-3-tuple(v_736),3-proj-3-tuple(v_731))) in
        {288}let v_739: bitstring = catch-fail(aeadunpack(v_738)) in
        {289}let v_740: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_736))) in
        {290}let v_741: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_737))) && success?(1-proj-3-tuple(v_736))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-2-tuple(v_740))))) then cipherstatepack(1-proj-2-tuple(v_740),increment_nonce(2-proj-2-tuple(v_737))) else fail-any) else fail-any)) in
        {291}let v_742: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_731)) && (success?(3-proj-3-tuple(v_736)) && success?(1-proj-3-tuple(v_736)))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then (if not-caught-fail(v_738) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if not-caught-fail(v_741) then (v_741,3-proj-3-tuple(v_739),1-proj-3-tuple(v_739)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {292}let v_743: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_742),2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)))) in
        {293}let v_744: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_731)) && success?(symmetricstatepack(1-proj-3-tuple(v_742),2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-3-tuple(v_743))))) then symmetricstatepack(1-proj-3-tuple(v_743),2-proj-3-tuple(v_743),hash(3-proj-3-tuple(v_743),3-proj-3-tuple(v_731))) else fail-any) else fail-any)) in
        {294}let v_745: bitstring = catch-fail((if success?(3-proj-3-tuple(v_731)) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if not-caught-fail(v_744) then (v_744,2-proj-3-tuple(v_742),3-proj-3-tuple(v_742)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_746: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_745),2-proj-7-tuple(v_730),3-proj-7-tuple(v_730),4-proj-7-tuple(v_730),v_733,6-proj-7-tuple(v_730),7-proj-7-tuple(v_730))) in
        {296}let (hs_747: handshakestate,re_748: key,plaintext_a: bitstring,valid_749: bool) = (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-7-tuple(v_730))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_735) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (if (v_732 && 3-proj-3-tuple(v_745)) then (if not-caught-fail(v_746) then (v_746,getpublickey(3-proj-7-tuple(v_730)),2-proj-3-tuple(v_745),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {297}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_749);
        {298}insert statestore(bob,alice,statepack_b(hs_747))
    ) | (
        {340}get statestore(=bob,=alice,statepack_b(hs_750: handshakestate)) in
        {300}let v_751: bitstring = catch-fail(handshakestateunpack(hs_750)) in
        {301}let v_752: bitstring = catch-fail((empty,empty,empty)) in
        {302}let v_753: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {303}let v_754: keypair = catch-fail((if not-caught-fail(v_753) then keypairpack(v_753,key_e(bob,alice)) else fail-any)) in
        {304}let v_755: bitstring = catch-fail(getpublickey(v_754)) in
        {305}let v_756: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_751))) in
        {306}let v_757: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_751)) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),hash(3-proj-3-tuple(v_756),v_755)) else fail-any) else fail-any)) in
        {307}let v_758: bitstring = catch-fail(keypairunpack(v_754)) in
        {308}let v_759: bitstring = catch-fail(symmetricstateunpack(v_757)) in
        {309}let v_760: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_751)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_751)) else fail-any) else fail-any))) in
        {310}let v_761: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_751)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_751)) else fail-any) else fail-any))) in
        {311}let v_762: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_751)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_751)) else fail-any) else fail-any))) in
        {312}let v_763: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_751)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_751)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_759))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_760,v_761,v_762) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {313}let v_764: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_751)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_751)) else fail-any) else fail-any)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_763)) then cipherstatepack(2-proj-3-tuple(v_763),minnonce) else fail-any),1-proj-3-tuple(v_763),3-proj-3-tuple(v_759)) else fail-any) else fail-any) else fail-any)) in
        {314}let v_765: key = catch-fail(dhexp(key_s(bob),g)) in
        {315}let v_766: keypair = catch-fail((if not-caught-fail(v_765) then keypairpack(v_765,key_s(bob)) else fail-any)) in
        {316}let v_767: bitstring = catch-fail(symmetricstateunpack(v_764)) in
        {317}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {318}let v_769: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_768),2-proj-2-tuple(v_768),3-proj-3-tuple(v_767),getpublickey(v_766))) in
        {319}let v_770: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {320}let v_771: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_768))) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then cipherstatepack(1-proj-2-tuple(v_770),increment_nonce(2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {321}let v_772: bitstring = catch-fail((if (success?(getpublickey(v_766)) && (success?(3-proj-3-tuple(v_767)) && success?(1-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_771) then (v_771,v_769) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {322}let v_773: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_772),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) in
        {323}let v_774: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_772)) && success?(symmetricstatepack(1-proj-2-tuple(v_772),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_773),hash(3-proj-3-tuple(v_773),2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {324}let v_775: bitstring = catch-fail((if success?(getpublickey(v_766)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_774) then (v_774,2-proj-2-tuple(v_772)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {325}let v_776: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_775))) in
        {326}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {327}let v_778: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_777),2-proj-2-tuple(v_777),3-proj-3-tuple(v_776),msg_b(bob,alice))) in
        {328}let v_779: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {329}let v_780: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_777))) && success?(1-proj-3-tuple(v_776))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then cipherstatepack(1-proj-2-tuple(v_779),increment_nonce(2-proj-2-tuple(v_777))) else fail-any) else fail-any)) in
        {330}let v_781: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_776)) && success?(1-proj-3-tuple(v_776))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then (if not-caught-fail(v_778) then (if not-caught-fail(v_780) then (v_780,v_778) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {331}let v_782: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_781),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) in
        {332}let v_783: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_781)) && success?(symmetricstatepack(1-proj-2-tuple(v_781),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_782),hash(3-proj-3-tuple(v_782),2-proj-2-tuple(v_781))) else fail-any) else fail-any)) in
        {333}let v_784: bitstring = catch-fail((if success?(1-proj-2-tuple(v_775)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-2-tuple(v_781))))) then (if not-caught-fail(v_783) then (v_783,2-proj-2-tuple(v_781)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {334}let v_785: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_784),v_766,v_754,4-proj-7-tuple(v_751),5-proj-7-tuple(v_751),6-proj-7-tuple(v_751),7-proj-7-tuple(v_751))) in
        {335}let v_786: bitstring = catch-fail(concat3(v_755,2-proj-2-tuple(v_775),2-proj-2-tuple(v_784))) in
        {336}let (hs_787: handshakestate,re_788: key,message_b_789: bitstring) = (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-7-tuple(v_751))))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (if not-caught-fail(v_757) then (if not-caught-fail(v_764) then (if not-caught-fail(v_766) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-2-tuple(v_784))))) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (v_785,5-proj-7-tuple(v_751),v_786) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {337}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {338}insert statestore(bob,alice,statepack_c(hs_787));
        {339}out(pub, message_b_789)
    ) | (
        {394}get statestore(=bob,=alice,statepack_c(hs_790: handshakestate)) in
        {341}in(pub, message_c_791: bitstring);
        {342}let v_792: bitstring = catch-fail(handshakestateunpack(hs_790)) in
        {343}let v_793: bitstring = catch-fail(deconcat3(message_c_791)) in
        {344}let v_794: bool = catch-fail(true) in
        {345}let v_795: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_792))) in
        {346}let v_796: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_792))) in
        {347}let v_797: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_796),(if (success?(5-proj-7-tuple(v_792)) && success?(2-proj-7-tuple(v_792))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_792)) else fail-any) else fail-any))) in
        {348}let v_798: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_796),(if (success?(5-proj-7-tuple(v_792)) && success?(2-proj-7-tuple(v_792))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_792)) else fail-any) else fail-any))) in
        {349}let v_799: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_796),(if (success?(5-proj-7-tuple(v_792)) && success?(2-proj-7-tuple(v_792))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_792)) else fail-any) else fail-any))) in
        {350}let v_800: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_792)) && success?(2-proj-7-tuple(v_792))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_792)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_796))) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (if not-caught-fail(v_799) then (v_797,v_798,v_799) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_801: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_792)) && success?(2-proj-7-tuple(v_792))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-2-tuple(v_795))))) then dhexp(2-proj-2-tuple(v_795),5-proj-7-tuple(v_792)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_792))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-3-tuple(v_800))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_800)) then cipherstatepack(2-proj-3-tuple(v_800),minnonce) else fail-any),1-proj-3-tuple(v_800),3-proj-3-tuple(v_796)) else fail-any) else fail-any) else fail-any)) in
        {352}let v_802: bitstring = catch-fail(symmetricstateunpack(v_801)) in
        {353}let v_803: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {354}let v_804: aead = catch-fail(decrypt(1-proj-2-tuple(v_803),2-proj-2-tuple(v_803),3-proj-3-tuple(v_802),2-proj-3-tuple(v_793))) in
        {355}let v_805: bitstring = catch-fail(aeadunpack(v_804)) in
        {356}let v_806: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {357}let v_807: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_803))) && success?(1-proj-3-tuple(v_802))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then cipherstatepack(1-proj-2-tuple(v_806),increment_nonce(2-proj-2-tuple(v_803))) else fail-any) else fail-any)) in
        {358}let v_808: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_793)) && (success?(3-proj-3-tuple(v_802)) && success?(1-proj-3-tuple(v_802)))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-2-tuple(v_803))))) then (if not-caught-fail(v_804) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if not-caught-fail(v_807) then (v_807,3-proj-3-tuple(v_805),1-proj-3-tuple(v_805)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {359}let v_809: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) in
        {360}let v_810: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_793)) && success?(symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_809),hash(3-proj-3-tuple(v_809),2-proj-3-tuple(v_793))) else fail-any) else fail-any)) in
        {361}let v_811: bitstring = catch-fail((if success?(2-proj-3-tuple(v_793)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if not-caught-fail(v_810) then (v_810,2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {362}let v_812: key = catch-fail(2-proj-3-tuple(v_811)) in
        {363}let v_813: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_792))) in
        {364}let v_814: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_811))) in
        {365}let v_815: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_814),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),v_812) else fail-any) else fail-any))) in
        {366}let v_816: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_814),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),v_812) else fail-any) else fail-any))) in
        {367}let v_817: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_814),(if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),v_812) else fail-any) else fail-any))) in
        {368}let v_818: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),v_812) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_814))) then (if not-caught-fail(v_815) then (if not-caught-fail(v_816) then (if not-caught-fail(v_817) then (v_815,v_816,v_817) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {369}let v_819: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_792)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then dhexp(2-proj-2-tuple(v_813),v_812) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_811))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_818)) then cipherstatepack(2-proj-3-tuple(v_818),minnonce) else fail-any),1-proj-3-tuple(v_818),3-proj-3-tuple(v_814)) else fail-any) else fail-any) else fail-any)) in
        {370}let v_820: bitstring = catch-fail(symmetricstateunpack(v_819)) in
        {371}let v_821: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {372}let v_822: aead = catch-fail(decrypt(1-proj-2-tuple(v_821),2-proj-2-tuple(v_821),3-proj-3-tuple(v_820),3-proj-3-tuple(v_793))) in
        {373}let v_823: bitstring = catch-fail(aeadunpack(v_822)) in
        {374}let v_824: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {375}let v_825: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_821))) && success?(1-proj-3-tuple(v_820))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-2-tuple(v_824))))) then cipherstatepack(1-proj-2-tuple(v_824),increment_nonce(2-proj-2-tuple(v_821))) else fail-any) else fail-any)) in
        {376}let v_826: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_793)) && (success?(3-proj-3-tuple(v_820)) && success?(1-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_822) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_825) then (v_825,3-proj-3-tuple(v_823),1-proj-3-tuple(v_823)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_827: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) in
        {378}let v_828: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_793)) && success?(symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_827),hash(3-proj-3-tuple(v_827),3-proj-3-tuple(v_793))) else fail-any) else fail-any)) in
        {379}let v_829: bitstring = catch-fail((if success?(3-proj-3-tuple(v_793)) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if not-caught-fail(v_828) then (v_828,2-proj-3-tuple(v_826),3-proj-3-tuple(v_826)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_830: key = catch-fail(dhexp(key_s(alice),g)) in
        {381}let v_831: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_829),2-proj-7-tuple(v_792),3-proj-7-tuple(v_792),v_812,5-proj-7-tuple(v_792),6-proj-7-tuple(v_792),7-proj-7-tuple(v_792))) in
        {382}let v_832: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_829))) in
        {383}let v_833: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_832),zero)) in
        {384}let v_834: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_832),zero)) in
        {385}let v_835: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_832),zero)) in
        {386}let v_836: bitstring = catch-fail((if success?(2-proj-3-tuple(v_832)) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then (v_833,v_834,v_835) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_837: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_836)) then cipherstatepack(1-proj-3-tuple(v_836),minnonce) else fail-any)) in
        {388}let v_838: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_836)) then cipherstatepack(2-proj-3-tuple(v_836),minnonce) else fail-any)) in
        {389}let v_839: bitstring = catch-fail((if success?(1-proj-3-tuple(v_829)) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (1-proj-3-tuple(v_829),v_837,v_838) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let (hs_840: handshakestate,re_841: key,plaintext_c: bitstring,valid_842: bool,cs1_843: cipherstate,cs2_844: cipherstate) = (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-7-tuple(v_792))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if not-caught-fail(v_794) then (if not-caught-fail(v_801) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_812) then (if not-caught-fail(v_819) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if ((3-proj-3-tuple(v_811) && 3-proj-3-tuple(v_829)) && (v_812 = getpublickey((if not-caught-fail(v_830) then keypairpack(v_830,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_831) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (v_831,getpublickey(3-proj-7-tuple(v_792)),2-proj-3-tuple(v_829),true,2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {391}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_842);
        {392}insert statestore(bob,alice,statepack_d(hs_840));
        {393}event RecvEnd(valid_842)
    ) | (
        {395}event LeakS(phase0,bob);
        {396}out(pub, key_s(bob))
    ) | (
        {397}phase 1;
        {398}event LeakS(phase1,bob);
        {399}out(pub, key_s(bob))
    )
) | (
    {400}let s_845: keypair = keypairpack(empty,empty) in
    {401}out(pub, getpublickey(s_845));
    (
        {402}let e_846: keypair = keypairpack(empty,empty) in
        {403}let rs_847: key = empty in
        {404}let re_848: key = empty in
        {405}let v_849: bitstring = catch-fail(hash(somename,empty)) in
        {406}let v_850: key = catch-fail(v_849) in
        {407}let v_851: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {408}let v_852: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then symmetricstatepack(v_851,v_850,v_849) else fail-any) else fail-any) else fail-any))) in
        {409}let v_853: symmetricstate = catch-fail((if success?((if not-caught-fail(v_849) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then symmetricstatepack(v_851,v_850,v_849) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack(1-proj-3-tuple(v_852),2-proj-3-tuple(v_852),hash(3-proj-3-tuple(v_852),empty)) else fail-any) else fail-any)) in
        {410}let hs_854: handshakestate = (if not-caught-fail(v_853) then handshakestatepack(v_853,s_845,e_846,rs_847,re_848,empty,false) else fail-any) in
        {411}insert statestore(bob,charlie,statepack_a(hs_854))
    ) | (
        {433}get statestore(=bob,=charlie,statepack_a(hs_855: handshakestate)) in
        {412}in(pub, message_a_856: bitstring);
        {413}let v_857: bitstring = catch-fail(handshakestateunpack(hs_855)) in
        {414}let v_858: bitstring = catch-fail(deconcat3(message_a_856)) in
        {415}let v_859: bool = catch-fail(true) in
        {416}let v_860: key = catch-fail(1-proj-3-tuple(v_858)) in
        {417}let v_861: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_857))) in
        {418}let v_862: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_857)) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack(1-proj-3-tuple(v_861),2-proj-3-tuple(v_861),hash(3-proj-3-tuple(v_861),v_860)) else fail-any) else fail-any)) in
        {419}let v_863: bitstring = catch-fail(symmetricstateunpack(v_862)) in
        {420}let v_864: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {421}let v_865: aead = catch-fail(decrypt(1-proj-2-tuple(v_864),2-proj-2-tuple(v_864),3-proj-3-tuple(v_863),3-proj-3-tuple(v_858))) in
        {422}let v_866: bitstring = catch-fail(aeadunpack(v_865)) in
        {423}let v_867: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_863))) in
        {424}let v_868: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_864))) && success?(1-proj-3-tuple(v_863))) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then cipherstatepack(1-proj-2-tuple(v_867),increment_nonce(2-proj-2-tuple(v_864))) else fail-any) else fail-any)) in
        {425}let v_869: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_858)) && (success?(3-proj-3-tuple(v_863)) && success?(1-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-2-tuple(v_864))))) then (if not-caught-fail(v_865) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then (if not-caught-fail(v_868) then (v_868,3-proj-3-tuple(v_866),1-proj-3-tuple(v_866)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {426}let v_870: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) in
        {427}let v_871: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_858)) && success?(symmetricstatepack(1-proj-3-tuple(v_869),2-proj-3-tuple(v_863),3-proj-3-tuple(v_863)))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_870),hash(3-proj-3-tuple(v_870),3-proj-3-tuple(v_858))) else fail-any) else fail-any)) in
        {428}let v_872: bitstring = catch-fail((if success?(3-proj-3-tuple(v_858)) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then (if not-caught-fail(v_871) then (v_871,2-proj-3-tuple(v_869),3-proj-3-tuple(v_869)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {429}let v_873: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_872),2-proj-7-tuple(v_857),3-proj-7-tuple(v_857),4-proj-7-tuple(v_857),v_860,6-proj-7-tuple(v_857),7-proj-7-tuple(v_857))) in
        {430}let (hs_874: handshakestate,re_875: key,plaintext_a_876: bitstring,valid_877: bool) = (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-7-tuple(v_857))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then (if not-caught-fail(v_862) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if (v_859 && 3-proj-3-tuple(v_872)) then (if not-caught-fail(v_873) then (v_873,getpublickey(3-proj-7-tuple(v_857)),2-proj-3-tuple(v_872),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {431}event RecvMsg(bob,charlie,stage_a,plaintext_a_876,valid_877);
        {432}insert statestore(bob,charlie,statepack_b(hs_874))
    ) | (
        {474}get statestore(=bob,=charlie,statepack_b(hs_878: handshakestate)) in
        {434}let v_879: bitstring = catch-fail(handshakestateunpack(hs_878)) in
        {435}let v_880: bitstring = catch-fail((empty,empty,empty)) in
        {436}let v_881: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {437}let v_882: keypair = catch-fail((if not-caught-fail(v_881) then keypairpack(v_881,key_e(bob,charlie)) else fail-any)) in
        {438}let v_883: bitstring = catch-fail(getpublickey(v_882)) in
        {439}let v_884: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_879))) in
        {440}let v_885: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_879)) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_884),hash(3-proj-3-tuple(v_884),v_883)) else fail-any) else fail-any)) in
        {441}let v_886: bitstring = catch-fail(keypairunpack(v_882)) in
        {442}let v_887: bitstring = catch-fail(symmetricstateunpack(v_885)) in
        {443}let v_888: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_887),(if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {444}let v_889: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_887),(if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {445}let v_890: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_887),(if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any))) in
        {446}let v_891: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_887))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (if not-caught-fail(v_890) then (v_888,v_889,v_890) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let v_892: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_879)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then dhexp(2-proj-2-tuple(v_886),5-proj-7-tuple(v_879)) else fail-any) else fail-any)) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_891)) then cipherstatepack(2-proj-3-tuple(v_891),minnonce) else fail-any),1-proj-3-tuple(v_891),3-proj-3-tuple(v_887)) else fail-any) else fail-any) else fail-any)) in
        {448}let v_893: key = catch-fail(dhexp(key_s(bob),g)) in
        {449}let v_894: keypair = catch-fail((if not-caught-fail(v_893) then keypairpack(v_893,key_s(bob)) else fail-any)) in
        {450}let v_895: bitstring = catch-fail(symmetricstateunpack(v_892)) in
        {451}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {452}let v_897: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_896),2-proj-2-tuple(v_896),3-proj-3-tuple(v_895),getpublickey(v_894))) in
        {453}let v_898: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {454}let v_899: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_896))) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-2-tuple(v_898))))) then cipherstatepack(1-proj-2-tuple(v_898),increment_nonce(2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {455}let v_900: bitstring = catch-fail((if (success?(getpublickey(v_894)) && (success?(3-proj-3-tuple(v_895)) && success?(1-proj-3-tuple(v_895)))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_899) then (v_899,v_897) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {456}let v_901: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_900),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) in
        {457}let v_902: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_900)) && success?(symmetricstatepack(1-proj-2-tuple(v_900),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_901),hash(3-proj-3-tuple(v_901),2-proj-2-tuple(v_900))) else fail-any) else fail-any)) in
        {458}let v_903: bitstring = catch-fail((if success?(getpublickey(v_894)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then (if not-caught-fail(v_902) then (v_902,2-proj-2-tuple(v_900)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_904: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_903))) in
        {460}let v_905: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_904))) in
        {461}let v_906: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_905),2-proj-2-tuple(v_905),3-proj-3-tuple(v_904),msg_b(bob,charlie))) in
        {462}let v_907: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_904))) in
        {463}let v_908: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_905))) && success?(1-proj-3-tuple(v_904))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then cipherstatepack(1-proj-2-tuple(v_907),increment_nonce(2-proj-2-tuple(v_905))) else fail-any) else fail-any)) in
        {464}let v_909: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_904)) && success?(1-proj-3-tuple(v_904))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-2-tuple(v_905))))) then (if not-caught-fail(v_906) then (if not-caught-fail(v_908) then (v_908,v_906) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {465}let v_910: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_909),2-proj-3-tuple(v_904),3-proj-3-tuple(v_904)))) in
        {466}let v_911: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_909)) && success?(symmetricstatepack(1-proj-2-tuple(v_909),2-proj-3-tuple(v_904),3-proj-3-tuple(v_904)))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then symmetricstatepack(1-proj-3-tuple(v_910),2-proj-3-tuple(v_910),hash(3-proj-3-tuple(v_910),2-proj-2-tuple(v_909))) else fail-any) else fail-any)) in
        {467}let v_912: bitstring = catch-fail((if success?(1-proj-2-tuple(v_903)) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then (if not-caught-fail(v_911) then (v_911,2-proj-2-tuple(v_909)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {468}let v_913: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_912),v_894,v_882,4-proj-7-tuple(v_879),5-proj-7-tuple(v_879),6-proj-7-tuple(v_879),7-proj-7-tuple(v_879))) in
        {469}let v_914: bitstring = catch-fail(concat3(v_883,2-proj-2-tuple(v_903),2-proj-2-tuple(v_912))) in
        {470}let (hs_915: handshakestate,re_916: key,message_b_917: bitstring) = (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-7-tuple(v_879))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (if not-caught-fail(v_883) then (if not-caught-fail(v_885) then (if not-caught-fail(v_892) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-2-tuple(v_912))))) then (if not-caught-fail(v_913) then (if not-caught-fail(v_914) then (v_913,5-proj-7-tuple(v_879),v_914) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {471}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {472}insert statestore(bob,charlie,statepack_c(hs_915));
        {473}out(pub, message_b_917)
    ) | (
        {528}get statestore(=bob,=charlie,statepack_c(hs_918: handshakestate)) in
        {475}in(pub, message_c_919: bitstring);
        {476}let v_920: bitstring = catch-fail(handshakestateunpack(hs_918)) in
        {477}let v_921: bitstring = catch-fail(deconcat3(message_c_919)) in
        {478}let v_922: bool = catch-fail(true) in
        {479}let v_923: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_920))) in
        {480}let v_924: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_920))) in
        {481}let v_925: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_924),(if (success?(5-proj-7-tuple(v_920)) && success?(2-proj-7-tuple(v_920))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_920)) else fail-any) else fail-any))) in
        {482}let v_926: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_924),(if (success?(5-proj-7-tuple(v_920)) && success?(2-proj-7-tuple(v_920))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_920)) else fail-any) else fail-any))) in
        {483}let v_927: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_924),(if (success?(5-proj-7-tuple(v_920)) && success?(2-proj-7-tuple(v_920))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_920)) else fail-any) else fail-any))) in
        {484}let v_928: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_920)) && success?(2-proj-7-tuple(v_920))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_920)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_924))) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (v_925,v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_929: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_920)) && success?(2-proj-7-tuple(v_920))) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_920)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_920))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_928)) then cipherstatepack(2-proj-3-tuple(v_928),minnonce) else fail-any),1-proj-3-tuple(v_928),3-proj-3-tuple(v_924)) else fail-any) else fail-any) else fail-any)) in
        {486}let v_930: bitstring = catch-fail(symmetricstateunpack(v_929)) in
        {487}let v_931: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_930))) in
        {488}let v_932: aead = catch-fail(decrypt(1-proj-2-tuple(v_931),2-proj-2-tuple(v_931),3-proj-3-tuple(v_930),2-proj-3-tuple(v_921))) in
        {489}let v_933: bitstring = catch-fail(aeadunpack(v_932)) in
        {490}let v_934: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_930))) in
        {491}let v_935: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_931))) && success?(1-proj-3-tuple(v_930))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then cipherstatepack(1-proj-2-tuple(v_934),increment_nonce(2-proj-2-tuple(v_931))) else fail-any) else fail-any)) in
        {492}let v_936: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_921)) && (success?(3-proj-3-tuple(v_930)) && success?(1-proj-3-tuple(v_930)))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-2-tuple(v_931))))) then (if not-caught-fail(v_932) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if not-caught-fail(v_935) then (v_935,3-proj-3-tuple(v_933),1-proj-3-tuple(v_933)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {493}let v_937: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)))) in
        {494}let v_938: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_921)) && success?(symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_930),3-proj-3-tuple(v_930)))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then symmetricstatepack(1-proj-3-tuple(v_937),2-proj-3-tuple(v_937),hash(3-proj-3-tuple(v_937),2-proj-3-tuple(v_921))) else fail-any) else fail-any)) in
        {495}let v_939: bitstring = catch-fail((if success?(2-proj-3-tuple(v_921)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if not-caught-fail(v_938) then (v_938,2-proj-3-tuple(v_936),3-proj-3-tuple(v_936)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {496}let v_940: key = catch-fail(2-proj-3-tuple(v_939)) in
        {497}let v_941: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_920))) in
        {498}let v_942: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_939))) in
        {499}let v_943: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_942),(if success?(3-proj-7-tuple(v_920)) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),v_940) else fail-any) else fail-any))) in
        {500}let v_944: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_942),(if success?(3-proj-7-tuple(v_920)) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),v_940) else fail-any) else fail-any))) in
        {501}let v_945: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_942),(if success?(3-proj-7-tuple(v_920)) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),v_940) else fail-any) else fail-any))) in
        {502}let v_946: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_920)) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),v_940) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_942))) then (if not-caught-fail(v_943) then (if not-caught-fail(v_944) then (if not-caught-fail(v_945) then (v_943,v_944,v_945) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {503}let v_947: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_920)) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then dhexp(2-proj-2-tuple(v_941),v_940) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_939))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-3-tuple(v_946))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_946)) then cipherstatepack(2-proj-3-tuple(v_946),minnonce) else fail-any),1-proj-3-tuple(v_946),3-proj-3-tuple(v_942)) else fail-any) else fail-any) else fail-any)) in
        {504}let v_948: bitstring = catch-fail(symmetricstateunpack(v_947)) in
        {505}let v_949: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_948))) in
        {506}let v_950: aead = catch-fail(decrypt(1-proj-2-tuple(v_949),2-proj-2-tuple(v_949),3-proj-3-tuple(v_948),3-proj-3-tuple(v_921))) in
        {507}let v_951: bitstring = catch-fail(aeadunpack(v_950)) in
        {508}let v_952: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_948))) in
        {509}let v_953: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_949))) && success?(1-proj-3-tuple(v_948))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then cipherstatepack(1-proj-2-tuple(v_952),increment_nonce(2-proj-2-tuple(v_949))) else fail-any) else fail-any)) in
        {510}let v_954: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_921)) && (success?(3-proj-3-tuple(v_948)) && success?(1-proj-3-tuple(v_948)))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-2-tuple(v_949))))) then (if not-caught-fail(v_950) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if not-caught-fail(v_953) then (v_953,3-proj-3-tuple(v_951),1-proj-3-tuple(v_951)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {511}let v_955: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_954),2-proj-3-tuple(v_948),3-proj-3-tuple(v_948)))) in
        {512}let v_956: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_921)) && success?(symmetricstatepack(1-proj-3-tuple(v_954),2-proj-3-tuple(v_948),3-proj-3-tuple(v_948)))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_955),hash(3-proj-3-tuple(v_955),3-proj-3-tuple(v_921))) else fail-any) else fail-any)) in
        {513}let v_957: bitstring = catch-fail((if success?(3-proj-3-tuple(v_921)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-3-tuple(v_954))))) then (if not-caught-fail(v_956) then (v_956,2-proj-3-tuple(v_954),3-proj-3-tuple(v_954)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {514}let v_958: key = catch-fail(dhexp(key_s(charlie),g)) in
        {515}let v_959: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_957),2-proj-7-tuple(v_920),3-proj-7-tuple(v_920),v_940,5-proj-7-tuple(v_920),6-proj-7-tuple(v_920),7-proj-7-tuple(v_920))) in
        {516}let v_960: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_957))) in
        {517}let v_961: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_960),zero)) in
        {518}let v_962: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_960),zero)) in
        {519}let v_963: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_960),zero)) in
        {520}let v_964: bitstring = catch-fail((if success?(2-proj-3-tuple(v_960)) then (if not-caught-fail(v_961) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (v_961,v_962,v_963) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {521}let v_965: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_964)) then cipherstatepack(1-proj-3-tuple(v_964),minnonce) else fail-any)) in
        {522}let v_966: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_964)) then cipherstatepack(2-proj-3-tuple(v_964),minnonce) else fail-any)) in
        {523}let v_967: bitstring = catch-fail((if success?(1-proj-3-tuple(v_957)) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if not-caught-fail(v_965) then (if not-caught-fail(v_966) then (1-proj-3-tuple(v_957),v_965,v_966) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {524}let (hs_968: handshakestate,re_969: key,plaintext_c_970: bitstring,valid_971: bool,cs1_972: cipherstate,cs2_973: cipherstate) = (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-7-tuple(v_920))))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if not-caught-fail(v_922) then (if not-caught-fail(v_929) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_947) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if ((3-proj-3-tuple(v_939) && 3-proj-3-tuple(v_957)) && (v_940 = getpublickey((if not-caught-fail(v_958) then keypairpack(v_958,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_959) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then (v_959,getpublickey(3-proj-7-tuple(v_920)),2-proj-3-tuple(v_957),true,2-proj-3-tuple(v_967),3-proj-3-tuple(v_967)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {525}event RecvMsg(bob,charlie,stage_c,plaintext_c_970,valid_971);
        {526}insert statestore(bob,charlie,statepack_d(hs_968));
        {527}event RecvEnd(valid_971)
    ) | (
        {529}event LeakS(phase0,bob);
        {530}out(pub, key_s(bob))
    ) | (
        {531}phase 1;
        {532}event LeakS(phase1,bob);
        {533}out(pub, key_s(bob))
    )
) | (
    {534}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 237 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 57 rules in the queue.
600 rules inserted. The rule base contains 565 rules. 144 rules in the queue.
800 rules inserted. The rule base contains 763 rules. 479 rules in the queue.
1000 rules inserted. The rule base contains 925 rules. 476 rules in the queue.
1200 rules inserted. The rule base contains 1092 rules. 369 rules in the queue.
1400 rules inserted. The rule base contains 1259 rules. 216 rules in the queue.
1600 rules inserted. The rule base contains 1419 rules. 290 rules in the queue.
1800 rules inserted. The rule base contains 1589 rules. 261 rules in the queue.
2000 rules inserted. The rule base contains 1756 rules. 328 rules in the queue.
2200 rules inserted. The rule base contains 1890 rules. 351 rules in the queue.
2400 rules inserted. The rule base contains 1936 rules. 246 rules in the queue.
2600 rules inserted. The rule base contains 2072 rules. 256 rules in the queue.
2800 rules inserted. The rule base contains 2225 rules. 297 rules in the queue.
3000 rules inserted. The rule base contains 2312 rules. 268 rules in the queue.
3200 rules inserted. The rule base contains 2397 rules. 216 rules in the queue.
3400 rules inserted. The rule base contains 2515 rules. 218 rules in the queue.
3600 rules inserted. The rule base contains 2608 rules. 198 rules in the queue.
3800 rules inserted. The rule base contains 2709 rules. 182 rules in the queue.
4000 rules inserted. The rule base contains 2814 rules. 186 rules in the queue.
4200 rules inserted. The rule base contains 2947 rules. 227 rules in the queue.
4400 rules inserted. The rule base contains 3101 rules. 266 rules in the queue.
4600 rules inserted. The rule base contains 3297 rules. 301 rules in the queue.
4800 rules inserted. The rule base contains 3453 rules. 333 rules in the queue.
5000 rules inserted. The rule base contains 3590 rules. 342 rules in the queue.
5200 rules inserted. The rule base contains 3703 rules. 338 rules in the queue.
5400 rules inserted. The rule base contains 3853 rules. 315 rules in the queue.
5600 rules inserted. The rule base contains 4019 rules. 312 rules in the queue.
5800 rules inserted. The rule base contains 4191 rules. 339 rules in the queue.
6000 rules inserted. The rule base contains 4319 rules. 345 rules in the queue.
6200 rules inserted. The rule base contains 4461 rules. 348 rules in the queue.
6400 rules inserted. The rule base contains 4568 rules. 334 rules in the queue.
6600 rules inserted. The rule base contains 4704 rules. 308 rules in the queue.
6800 rules inserted. The rule base contains 4837 rules. 254 rules in the queue.
7000 rules inserted. The rule base contains 4951 rules. 165 rules in the queue.
7200 rules inserted. The rule base contains 5027 rules. 88 rules in the queue.
7400 rules inserted. The rule base contains 4958 rules. 33 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {145}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {168}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {165}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {167}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {299}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {278}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {297}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {145}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {168}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {165}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {167}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {299}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {278}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {297}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {145}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {168}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {165}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {167}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {299}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {278}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {297}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

15. By 14, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

15. By 14, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

15. By 14, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

11. By 10, the attacker may know hash(hash(somename,empty),empty).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

12. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

13. By 7, the attacker may know empty.
By 12, the attacker may know minnonce.
By 11, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

14. By 13, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

15. By 14, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {411}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {433}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {412}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {432}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {474}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {471}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {473}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {411}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {433}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {412}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {432}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {474}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {471}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {473}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {411}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {433}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {412}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {432}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {474}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {471}.
So the message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) may be sent on channel pub at output {473}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {77}.
The message concat3(dhexp(key_e(bob,charlie),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),dhexp(key_s(bob),g))),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {75}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {299}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 3 may be received at input {278}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {298}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 4 may be read at get {340}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {337}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {338}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {277}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {299}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 10 may be received at input {278}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {298}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 11 may be read at get {340}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {337}.
So the message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) may be sent on channel pub at output {339}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))).

13. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {77}.
The message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {37}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {76}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {128}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {125}.
So the message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) may be sent on channel pub at output {127}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {394}.
The message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) that may be sent on channel pub by 14 may be received at input {341}.
So event RecvEnd(true) may be executed at {393}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
