File "XK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 270, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 271, character 36:
Warning: identifier h rebound.
File "XK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 312, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 324, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 338, character 6:
Warning: identifier s rebound.
File "XK1.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 339, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XK1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 341, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 364, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 368, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 379, characters 48-53:
Warning: identifier valid1 rebound.
File "XK1.noise.passive.pv", line 380, characters 6-7:
Warning: identifier rs rebound.
File "XK1.noise.passive.pv", line 381, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 382, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 384, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 338, character 6:
Warning: identifier s rebound.
File "XK1.noise.passive.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 339, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XK1.noise.passive.pv", line 340, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 341, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 341, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 342, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 364, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 368, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 490, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 312, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 548, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 379, characters 48-53:
Warning: identifier valid1 rebound.
File "XK1.noise.passive.pv", line 380, characters 6-7:
Warning: identifier rs rebound.
File "XK1.noise.passive.pv", line 381, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 382, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 384, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 540, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 324, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 533, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 352, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 354, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 356, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_455: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_455));
    (
        {4}let e_456: keypair = keypairpack(empty,empty) in
        {5}let v_457: key = catch-fail(dhexp(key_s(bob),g)) in
        {6}let rs_458: key = getpublickey((if not-caught-fail(v_457) then keypairpack(v_457,key_s(bob)) else fail-any)) in
        {7}let re_459: key = empty in
        {8}let v_460: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_461: key = catch-fail(v_460) in
        {10}let v_462: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_463: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_460) then (if not-caught-fail(v_461) then (if not-caught-fail(v_462) then symmetricstatepack(v_462,v_461,v_460) else fail-any) else fail-any) else fail-any))) in
        {12}let v_464: symmetricstate = catch-fail((if success?((if not-caught-fail(v_460) then (if not-caught-fail(v_461) then (if not-caught-fail(v_462) then symmetricstatepack(v_462,v_461,v_460) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-3-tuple(v_463))))) then symmetricstatepack(1-proj-3-tuple(v_463),2-proj-3-tuple(v_463),hash(3-proj-3-tuple(v_463),empty)) else fail-any) else fail-any)) in
        {13}let v_465: bitstring = catch-fail(symmetricstateunpack(v_464)) in
        {14}let v_466: symmetricstate = catch-fail((if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-3-tuple(v_465))))) then symmetricstatepack(1-proj-3-tuple(v_465),2-proj-3-tuple(v_465),hash(3-proj-3-tuple(v_465),rs_458)) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_464) then (if not-caught-fail(v_466) then handshakestatepack(v_466,s_455,e_456,rs_458,re_459,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {39}get statestore(=alice,=bob,statepack_a(hs_467: handshakestate)) in
        {17}let v_468: bitstring = catch-fail(handshakestateunpack(hs_467)) in
        {18}let v_469: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_470: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_471: keypair = catch-fail((if not-caught-fail(v_470) then keypairpack(v_470,key_e(alice,bob)) else fail-any)) in
        {21}let v_472: bitstring = catch-fail(getpublickey(v_471)) in
        {22}let v_473: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_468))) in
        {23}let v_474: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_468)) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-3-tuple(v_473))))) then symmetricstatepack(1-proj-3-tuple(v_473),2-proj-3-tuple(v_473),hash(3-proj-3-tuple(v_473),v_472)) else fail-any) else fail-any)) in
        {24}let v_475: bitstring = catch-fail(symmetricstateunpack(v_474)) in
        {25}let v_476: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_475))) in
        {26}let v_477: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_476),2-proj-2-tuple(v_476),3-proj-3-tuple(v_475),msg_a(alice,bob))) in
        {27}let v_478: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_475))) in
        {28}let v_479: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_476))) && success?(1-proj-3-tuple(v_475))) then (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-2-tuple(v_478))))) then cipherstatepack(1-proj-2-tuple(v_478),increment_nonce(2-proj-2-tuple(v_476))) else fail-any) else fail-any)) in
        {29}let v_480: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_475)) && success?(1-proj-3-tuple(v_475))) then (if (not-caught-fail(v_476) && success?(is-true(success?(1-proj-2-tuple(v_476))))) then (if not-caught-fail(v_477) then (if not-caught-fail(v_479) then (v_479,v_477) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_481: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_480),2-proj-3-tuple(v_475),3-proj-3-tuple(v_475)))) in
        {31}let v_482: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_480)) && success?(symmetricstatepack(1-proj-2-tuple(v_480),2-proj-3-tuple(v_475),3-proj-3-tuple(v_475)))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_481),hash(3-proj-3-tuple(v_481),2-proj-2-tuple(v_480))) else fail-any) else fail-any)) in
        {32}let v_483: bitstring = catch-fail((if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-2-tuple(v_480))))) then (if not-caught-fail(v_482) then (v_482,2-proj-2-tuple(v_480)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_484: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_483),2-proj-7-tuple(v_468),v_471,4-proj-7-tuple(v_468),5-proj-7-tuple(v_468),6-proj-7-tuple(v_468),7-proj-7-tuple(v_468))) in
        {34}let v_485: bitstring = catch-fail(concat3(v_472,2-proj-3-tuple(v_469),2-proj-2-tuple(v_483))) in
        {35}let (hs_486: handshakestate,re_487: key,message_a: bitstring) = (if (not-caught-fail(v_468) && success?(is-true(success?(1-proj-7-tuple(v_468))))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-3-tuple(v_469))))) then (if not-caught-fail(v_471) then (if not-caught-fail(v_472) then (if not-caught-fail(v_474) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-2-tuple(v_483))))) then (if not-caught-fail(v_484) then (if not-caught-fail(v_485) then (v_484,5-proj-7-tuple(v_468),v_485) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {36}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {37}insert statestore(alice,bob,statepack_b(hs_486));
        {38}out(pub, message_a)
    ) | (
        {75}get statestore(=alice,=bob,statepack_b(hs_488: handshakestate)) in
        {40}in(pub, message_b: bitstring);
        {41}let v_489: bitstring = catch-fail(handshakestateunpack(hs_488)) in
        {42}let v_490: bitstring = catch-fail(deconcat3(message_b)) in
        {43}let v_491: bool = catch-fail(true) in
        {44}let v_492: key = catch-fail(1-proj-3-tuple(v_490)) in
        {45}let v_493: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_489))) in
        {46}let v_494: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_489)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-3-tuple(v_493))))) then symmetricstatepack(1-proj-3-tuple(v_493),2-proj-3-tuple(v_493),hash(3-proj-3-tuple(v_493),v_492)) else fail-any) else fail-any)) in
        {47}let v_495: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_489))) in
        {48}let v_496: bitstring = catch-fail(symmetricstateunpack(v_494)) in
        {49}let v_497: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_496),(if success?(3-proj-7-tuple(v_489)) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then dhexp(2-proj-2-tuple(v_495),v_492) else fail-any) else fail-any))) in
        {50}let v_498: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_496),(if success?(3-proj-7-tuple(v_489)) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then dhexp(2-proj-2-tuple(v_495),v_492) else fail-any) else fail-any))) in
        {51}let v_499: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_496),(if success?(3-proj-7-tuple(v_489)) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then dhexp(2-proj-2-tuple(v_495),v_492) else fail-any) else fail-any))) in
        {52}let v_500: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_489)) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then dhexp(2-proj-2-tuple(v_495),v_492) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_496))) then (if not-caught-fail(v_497) then (if not-caught-fail(v_498) then (if not-caught-fail(v_499) then (v_497,v_498,v_499) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_501: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_489)) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then dhexp(2-proj-2-tuple(v_495),v_492) else fail-any) else fail-any)) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-3-tuple(v_496))))) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_500)) then cipherstatepack(2-proj-3-tuple(v_500),minnonce) else fail-any),1-proj-3-tuple(v_500),3-proj-3-tuple(v_496)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_502: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_489))) in
        {55}let v_503: bitstring = catch-fail(symmetricstateunpack(v_501)) in
        {56}let v_504: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_503),(if (success?(4-proj-7-tuple(v_489)) && success?(3-proj-7-tuple(v_489))) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-2-tuple(v_502))))) then dhexp(2-proj-2-tuple(v_502),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {57}let v_505: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_503),(if (success?(4-proj-7-tuple(v_489)) && success?(3-proj-7-tuple(v_489))) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-2-tuple(v_502))))) then dhexp(2-proj-2-tuple(v_502),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {58}let v_506: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_503),(if (success?(4-proj-7-tuple(v_489)) && success?(3-proj-7-tuple(v_489))) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-2-tuple(v_502))))) then dhexp(2-proj-2-tuple(v_502),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {59}let v_507: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_489)) && success?(3-proj-7-tuple(v_489))) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-2-tuple(v_502))))) then dhexp(2-proj-2-tuple(v_502),4-proj-7-tuple(v_489)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_503))) then (if not-caught-fail(v_504) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (v_504,v_505,v_506) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_508: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_489)) && success?(3-proj-7-tuple(v_489))) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-2-tuple(v_502))))) then dhexp(2-proj-2-tuple(v_502),4-proj-7-tuple(v_489)) else fail-any) else fail-any)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-3-tuple(v_503))))) then (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-3-tuple(v_507))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_507)) then cipherstatepack(2-proj-3-tuple(v_507),minnonce) else fail-any),1-proj-3-tuple(v_507),3-proj-3-tuple(v_503)) else fail-any) else fail-any) else fail-any)) in
        {61}let v_509: bitstring = catch-fail(symmetricstateunpack(v_508)) in
        {62}let v_510: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_509))) in
        {63}let v_511: aead = catch-fail(decrypt(1-proj-2-tuple(v_510),2-proj-2-tuple(v_510),3-proj-3-tuple(v_509),3-proj-3-tuple(v_490))) in
        {64}let v_512: bitstring = catch-fail(aeadunpack(v_511)) in
        {65}let v_513: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_509))) in
        {66}let v_514: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_510))) && success?(1-proj-3-tuple(v_509))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then cipherstatepack(1-proj-2-tuple(v_513),increment_nonce(2-proj-2-tuple(v_510))) else fail-any) else fail-any)) in
        {67}let v_515: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_490)) && (success?(3-proj-3-tuple(v_509)) && success?(1-proj-3-tuple(v_509)))) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-2-tuple(v_510))))) then (if not-caught-fail(v_511) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then (if not-caught-fail(v_514) then (v_514,3-proj-3-tuple(v_512),1-proj-3-tuple(v_512)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_516: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_515),2-proj-3-tuple(v_509),3-proj-3-tuple(v_509)))) in
        {69}let v_517: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_490)) && success?(symmetricstatepack(1-proj-3-tuple(v_515),2-proj-3-tuple(v_509),3-proj-3-tuple(v_509)))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then symmetricstatepack(1-proj-3-tuple(v_516),2-proj-3-tuple(v_516),hash(3-proj-3-tuple(v_516),3-proj-3-tuple(v_490))) else fail-any) else fail-any)) in
        {70}let v_518: bitstring = catch-fail((if success?(3-proj-3-tuple(v_490)) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-3-tuple(v_509))))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then (if not-caught-fail(v_517) then (v_517,2-proj-3-tuple(v_515),3-proj-3-tuple(v_515)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_519: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_518),2-proj-7-tuple(v_489),3-proj-7-tuple(v_489),4-proj-7-tuple(v_489),v_492,6-proj-7-tuple(v_489),7-proj-7-tuple(v_489))) in
        {72}let (hs_520: handshakestate,re_521: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-7-tuple(v_489))))) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-3-tuple(v_490))))) then (if not-caught-fail(v_491) then (if not-caught-fail(v_492) then (if not-caught-fail(v_494) then (if not-caught-fail(v_501) then (if not-caught-fail(v_508) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then (if (v_491 && 3-proj-3-tuple(v_518)) then (if not-caught-fail(v_519) then (v_519,getpublickey(3-proj-7-tuple(v_489)),2-proj-3-tuple(v_518),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {73}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {74}insert statestore(alice,bob,statepack_c(hs_520))
    ) | (
        {119}get statestore(=alice,=bob,statepack_c(hs_522: handshakestate)) in
        {76}let v_523: bitstring = catch-fail(handshakestateunpack(hs_522)) in
        {77}let v_524: bitstring = catch-fail((empty,empty,empty)) in
        {78}let v_525: key = catch-fail(dhexp(key_s(alice),g)) in
        {79}let v_526: keypair = catch-fail((if not-caught-fail(v_525) then keypairpack(v_525,key_s(alice)) else fail-any)) in
        {80}let v_527: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_523))) in
        {81}let v_528: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_527))) in
        {82}let v_529: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_528),2-proj-2-tuple(v_528),3-proj-3-tuple(v_527),getpublickey(v_526))) in
        {83}let v_530: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_527))) in
        {84}let v_531: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_528))) && success?(1-proj-3-tuple(v_527))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then cipherstatepack(1-proj-2-tuple(v_530),increment_nonce(2-proj-2-tuple(v_528))) else fail-any) else fail-any)) in
        {85}let v_532: bitstring = catch-fail((if (success?(getpublickey(v_526)) && (success?(3-proj-3-tuple(v_527)) && success?(1-proj-3-tuple(v_527)))) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-2-tuple(v_528))))) then (if not-caught-fail(v_529) then (if not-caught-fail(v_531) then (v_531,v_529) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_533: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_532),2-proj-3-tuple(v_527),3-proj-3-tuple(v_527)))) in
        {87}let v_534: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_532)) && success?(symmetricstatepack(1-proj-2-tuple(v_532),2-proj-3-tuple(v_527),3-proj-3-tuple(v_527)))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then symmetricstatepack(1-proj-3-tuple(v_533),2-proj-3-tuple(v_533),hash(3-proj-3-tuple(v_533),2-proj-2-tuple(v_532))) else fail-any) else fail-any)) in
        {88}let v_535: bitstring = catch-fail((if (success?(getpublickey(v_526)) && success?(1-proj-7-tuple(v_523))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-2-tuple(v_532))))) then (if not-caught-fail(v_534) then (v_534,2-proj-2-tuple(v_532)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_536: bitstring = catch-fail(keypairunpack(v_526)) in
        {90}let v_537: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_535))) in
        {91}let v_538: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_537),(if success?(5-proj-7-tuple(v_523)) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_523)) else fail-any) else fail-any))) in
        {92}let v_539: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_537),(if success?(5-proj-7-tuple(v_523)) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_523)) else fail-any) else fail-any))) in
        {93}let v_540: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_537),(if success?(5-proj-7-tuple(v_523)) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_523)) else fail-any) else fail-any))) in
        {94}let v_541: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_523)) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_523)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_537))) then (if not-caught-fail(v_538) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (v_538,v_539,v_540) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_542: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_523)) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-2-tuple(v_536))))) then dhexp(2-proj-2-tuple(v_536),5-proj-7-tuple(v_523)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_535))) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_541)) then cipherstatepack(2-proj-3-tuple(v_541),minnonce) else fail-any),1-proj-3-tuple(v_541),3-proj-3-tuple(v_537)) else fail-any) else fail-any) else fail-any)) in
        {96}let v_543: bitstring = catch-fail(symmetricstateunpack(v_542)) in
        {97}let v_544: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_543))) in
        {98}let v_545: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_544),2-proj-2-tuple(v_544),3-proj-3-tuple(v_543),msg_c(alice,bob))) in
        {99}let v_546: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_543))) in
        {100}let v_547: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_544))) && success?(1-proj-3-tuple(v_543))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-2-tuple(v_546))))) then cipherstatepack(1-proj-2-tuple(v_546),increment_nonce(2-proj-2-tuple(v_544))) else fail-any) else fail-any)) in
        {101}let v_548: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_543)) && success?(1-proj-3-tuple(v_543))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_547) then (v_547,v_545) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_549: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_548),2-proj-3-tuple(v_543),3-proj-3-tuple(v_543)))) in
        {103}let v_550: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_548)) && success?(symmetricstatepack(1-proj-2-tuple(v_548),2-proj-3-tuple(v_543),3-proj-3-tuple(v_543)))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then symmetricstatepack(1-proj-3-tuple(v_549),2-proj-3-tuple(v_549),hash(3-proj-3-tuple(v_549),2-proj-2-tuple(v_548))) else fail-any) else fail-any)) in
        {104}let v_551: bitstring = catch-fail((if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then (if not-caught-fail(v_550) then (v_550,2-proj-2-tuple(v_548)) else fail-any) else fail-any) else fail-any)) in
        {105}let v_552: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_551),v_526,3-proj-7-tuple(v_523),4-proj-7-tuple(v_523),5-proj-7-tuple(v_523),6-proj-7-tuple(v_523),7-proj-7-tuple(v_523))) in
        {106}let v_553: bitstring = catch-fail(concat3(1-proj-3-tuple(v_524),2-proj-2-tuple(v_535),2-proj-2-tuple(v_551))) in
        {107}let v_554: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_551))) in
        {108}let v_555: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_554),zero)) in
        {109}let v_556: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_554),zero)) in
        {110}let v_557: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_554),zero)) in
        {111}let v_558: bitstring = catch-fail((if success?(2-proj-3-tuple(v_554)) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (if not-caught-fail(v_557) then (v_555,v_556,v_557) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {112}let v_559: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_558)) then cipherstatepack(1-proj-3-tuple(v_558),minnonce) else fail-any)) in
        {113}let v_560: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_558)) then cipherstatepack(2-proj-3-tuple(v_558),minnonce) else fail-any)) in
        {114}let v_561: bitstring = catch-fail((if success?(1-proj-2-tuple(v_551)) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (1-proj-2-tuple(v_551),v_559,v_560) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let (hs_562: handshakestate,re_563: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-7-tuple(v_523))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then (if not-caught-fail(v_526) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_542) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (v_552,5-proj-7-tuple(v_523),v_553,2-proj-3-tuple(v_561),3-proj-3-tuple(v_561)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {116}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {117}insert statestore(alice,bob,statepack_d(hs_562));
        {118}out(pub, message_c)
    ) | (
        {120}event LeakS(phase0,alice);
        {121}out(pub, key_s(alice))
    ) | (
        {122}phase 1;
        {123}event LeakS(phase1,alice);
        {124}out(pub, key_s(alice))
    )
) | (
    {125}let s_564: keypair = keypairpack(empty,empty) in
    {126}out(pub, getpublickey(s_564));
    (
        {127}let e_565: keypair = keypairpack(empty,empty) in
        {128}let v_566: key = catch-fail(dhexp(key_s(charlie),g)) in
        {129}let rs_567: key = getpublickey((if not-caught-fail(v_566) then keypairpack(v_566,key_s(charlie)) else fail-any)) in
        {130}let re_568: key = empty in
        {131}let v_569: bitstring = catch-fail(hash(somename,empty)) in
        {132}let v_570: key = catch-fail(v_569) in
        {133}let v_571: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {134}let v_572: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then symmetricstatepack(v_571,v_570,v_569) else fail-any) else fail-any) else fail-any))) in
        {135}let v_573: symmetricstate = catch-fail((if success?((if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then symmetricstatepack(v_571,v_570,v_569) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then symmetricstatepack(1-proj-3-tuple(v_572),2-proj-3-tuple(v_572),hash(3-proj-3-tuple(v_572),empty)) else fail-any) else fail-any)) in
        {136}let v_574: bitstring = catch-fail(symmetricstateunpack(v_573)) in
        {137}let v_575: symmetricstate = catch-fail((if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),rs_567)) else fail-any)) in
        {138}let hs_576: handshakestate = (if not-caught-fail(v_573) then (if not-caught-fail(v_575) then handshakestatepack(v_575,s_564,e_565,rs_567,re_568,empty,true) else fail-any) else fail-any) in
        {139}insert statestore(alice,charlie,statepack_a(hs_576))
    ) | (
        {162}get statestore(=alice,=charlie,statepack_a(hs_577: handshakestate)) in
        {140}let v_578: bitstring = catch-fail(handshakestateunpack(hs_577)) in
        {141}let v_579: bitstring = catch-fail((empty,empty,empty)) in
        {142}let v_580: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {143}let v_581: keypair = catch-fail((if not-caught-fail(v_580) then keypairpack(v_580,key_e(alice,charlie)) else fail-any)) in
        {144}let v_582: bitstring = catch-fail(getpublickey(v_581)) in
        {145}let v_583: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_578))) in
        {146}let v_584: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_578)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then symmetricstatepack(1-proj-3-tuple(v_583),2-proj-3-tuple(v_583),hash(3-proj-3-tuple(v_583),v_582)) else fail-any) else fail-any)) in
        {147}let v_585: bitstring = catch-fail(symmetricstateunpack(v_584)) in
        {148}let v_586: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_585))) in
        {149}let v_587: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_586),2-proj-2-tuple(v_586),3-proj-3-tuple(v_585),msg_a(alice,charlie))) in
        {150}let v_588: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_585))) in
        {151}let v_589: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_586))) && success?(1-proj-3-tuple(v_585))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-2-tuple(v_588))))) then cipherstatepack(1-proj-2-tuple(v_588),increment_nonce(2-proj-2-tuple(v_586))) else fail-any) else fail-any)) in
        {152}let v_590: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_585)) && success?(1-proj-3-tuple(v_585))) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then (if not-caught-fail(v_587) then (if not-caught-fail(v_589) then (v_589,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {153}let v_591: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_590),2-proj-3-tuple(v_585),3-proj-3-tuple(v_585)))) in
        {154}let v_592: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_590)) && success?(symmetricstatepack(1-proj-2-tuple(v_590),2-proj-3-tuple(v_585),3-proj-3-tuple(v_585)))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack(1-proj-3-tuple(v_591),2-proj-3-tuple(v_591),hash(3-proj-3-tuple(v_591),2-proj-2-tuple(v_590))) else fail-any) else fail-any)) in
        {155}let v_593: bitstring = catch-fail((if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then (if not-caught-fail(v_592) then (v_592,2-proj-2-tuple(v_590)) else fail-any) else fail-any) else fail-any)) in
        {156}let v_594: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_593),2-proj-7-tuple(v_578),v_581,4-proj-7-tuple(v_578),5-proj-7-tuple(v_578),6-proj-7-tuple(v_578),7-proj-7-tuple(v_578))) in
        {157}let v_595: bitstring = catch-fail(concat3(v_582,2-proj-3-tuple(v_579),2-proj-2-tuple(v_593))) in
        {158}let (hs_596: handshakestate,re_597: key,message_a_598: bitstring) = (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-7-tuple(v_578))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_581) then (if not-caught-fail(v_582) then (if not-caught-fail(v_584) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_595) then (v_594,5-proj-7-tuple(v_578),v_595) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {159}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {160}insert statestore(alice,charlie,statepack_b(hs_596));
        {161}out(pub, message_a_598)
    ) | (
        {198}get statestore(=alice,=charlie,statepack_b(hs_599: handshakestate)) in
        {163}in(pub, message_b_600: bitstring);
        {164}let v_601: bitstring = catch-fail(handshakestateunpack(hs_599)) in
        {165}let v_602: bitstring = catch-fail(deconcat3(message_b_600)) in
        {166}let v_603: bool = catch-fail(true) in
        {167}let v_604: key = catch-fail(1-proj-3-tuple(v_602)) in
        {168}let v_605: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_601))) in
        {169}let v_606: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_601)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then symmetricstatepack(1-proj-3-tuple(v_605),2-proj-3-tuple(v_605),hash(3-proj-3-tuple(v_605),v_604)) else fail-any) else fail-any)) in
        {170}let v_607: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_601))) in
        {171}let v_608: bitstring = catch-fail(symmetricstateunpack(v_606)) in
        {172}let v_609: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_608),(if success?(3-proj-7-tuple(v_601)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),v_604) else fail-any) else fail-any))) in
        {173}let v_610: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_608),(if success?(3-proj-7-tuple(v_601)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),v_604) else fail-any) else fail-any))) in
        {174}let v_611: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_608),(if success?(3-proj-7-tuple(v_601)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),v_604) else fail-any) else fail-any))) in
        {175}let v_612: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_601)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),v_604) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_608))) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (if not-caught-fail(v_611) then (v_609,v_610,v_611) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {176}let v_613: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_601)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-2-tuple(v_607))))) then dhexp(2-proj-2-tuple(v_607),v_604) else fail-any) else fail-any)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_612)) then cipherstatepack(2-proj-3-tuple(v_612),minnonce) else fail-any),1-proj-3-tuple(v_612),3-proj-3-tuple(v_608)) else fail-any) else fail-any) else fail-any)) in
        {177}let v_614: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_601))) in
        {178}let v_615: bitstring = catch-fail(symmetricstateunpack(v_613)) in
        {179}let v_616: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_615),(if (success?(4-proj-7-tuple(v_601)) && success?(3-proj-7-tuple(v_601))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),4-proj-7-tuple(v_601)) else fail-any) else fail-any))) in
        {180}let v_617: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_615),(if (success?(4-proj-7-tuple(v_601)) && success?(3-proj-7-tuple(v_601))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),4-proj-7-tuple(v_601)) else fail-any) else fail-any))) in
        {181}let v_618: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_615),(if (success?(4-proj-7-tuple(v_601)) && success?(3-proj-7-tuple(v_601))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),4-proj-7-tuple(v_601)) else fail-any) else fail-any))) in
        {182}let v_619: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_601)) && success?(3-proj-7-tuple(v_601))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),4-proj-7-tuple(v_601)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_615))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (v_616,v_617,v_618) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_620: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_601)) && success?(3-proj-7-tuple(v_601))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then dhexp(2-proj-2-tuple(v_614),4-proj-7-tuple(v_601)) else fail-any) else fail-any)) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_619)) then cipherstatepack(2-proj-3-tuple(v_619),minnonce) else fail-any),1-proj-3-tuple(v_619),3-proj-3-tuple(v_615)) else fail-any) else fail-any) else fail-any)) in
        {184}let v_621: bitstring = catch-fail(symmetricstateunpack(v_620)) in
        {185}let v_622: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {186}let v_623: aead = catch-fail(decrypt(1-proj-2-tuple(v_622),2-proj-2-tuple(v_622),3-proj-3-tuple(v_621),3-proj-3-tuple(v_602))) in
        {187}let v_624: bitstring = catch-fail(aeadunpack(v_623)) in
        {188}let v_625: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_621))) in
        {189}let v_626: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_622))) && success?(1-proj-3-tuple(v_621))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then cipherstatepack(1-proj-2-tuple(v_625),increment_nonce(2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {190}let v_627: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_602)) && (success?(3-proj-3-tuple(v_621)) && success?(1-proj-3-tuple(v_621)))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_623) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if not-caught-fail(v_626) then (v_626,3-proj-3-tuple(v_624),1-proj-3-tuple(v_624)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_628: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) in
        {192}let v_629: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_602)) && success?(symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_621),3-proj-3-tuple(v_621)))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack(1-proj-3-tuple(v_628),2-proj-3-tuple(v_628),hash(3-proj-3-tuple(v_628),3-proj-3-tuple(v_602))) else fail-any) else fail-any)) in
        {193}let v_630: bitstring = catch-fail((if success?(3-proj-3-tuple(v_602)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then (if not-caught-fail(v_629) then (v_629,2-proj-3-tuple(v_627),3-proj-3-tuple(v_627)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_631: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_630),2-proj-7-tuple(v_601),3-proj-7-tuple(v_601),4-proj-7-tuple(v_601),v_604,6-proj-7-tuple(v_601),7-proj-7-tuple(v_601))) in
        {195}let (hs_632: handshakestate,re_633: key,plaintext_b_634: bitstring,valid_635: bool) = (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-7-tuple(v_601))))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_604) then (if not-caught-fail(v_606) then (if not-caught-fail(v_613) then (if not-caught-fail(v_620) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if (v_603 && 3-proj-3-tuple(v_630)) then (if not-caught-fail(v_631) then (v_631,getpublickey(3-proj-7-tuple(v_601)),2-proj-3-tuple(v_630),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {196}event RecvMsg(alice,charlie,stage_b,plaintext_b_634,valid_635);
        {197}insert statestore(alice,charlie,statepack_c(hs_632))
    ) | (
        {242}get statestore(=alice,=charlie,statepack_c(hs_636: handshakestate)) in
        {199}let v_637: bitstring = catch-fail(handshakestateunpack(hs_636)) in
        {200}let v_638: bitstring = catch-fail((empty,empty,empty)) in
        {201}let v_639: key = catch-fail(dhexp(key_s(alice),g)) in
        {202}let v_640: keypair = catch-fail((if not-caught-fail(v_639) then keypairpack(v_639,key_s(alice)) else fail-any)) in
        {203}let v_641: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_637))) in
        {204}let v_642: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_641))) in
        {205}let v_643: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_642),2-proj-2-tuple(v_642),3-proj-3-tuple(v_641),getpublickey(v_640))) in
        {206}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_641))) in
        {207}let v_645: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_642))) && success?(1-proj-3-tuple(v_641))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then cipherstatepack(1-proj-2-tuple(v_644),increment_nonce(2-proj-2-tuple(v_642))) else fail-any) else fail-any)) in
        {208}let v_646: bitstring = catch-fail((if (success?(getpublickey(v_640)) && (success?(3-proj-3-tuple(v_641)) && success?(1-proj-3-tuple(v_641)))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then (if not-caught-fail(v_643) then (if not-caught-fail(v_645) then (v_645,v_643) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_647: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_646),2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)))) in
        {210}let v_648: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_646)) && success?(symmetricstatepack(1-proj-2-tuple(v_646),2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),2-proj-2-tuple(v_646))) else fail-any) else fail-any)) in
        {211}let v_649: bitstring = catch-fail((if (success?(getpublickey(v_640)) && success?(1-proj-7-tuple(v_637))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then (if not-caught-fail(v_648) then (v_648,2-proj-2-tuple(v_646)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_650: bitstring = catch-fail(keypairunpack(v_640)) in
        {213}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_649))) in
        {214}let v_652: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_651),(if success?(5-proj-7-tuple(v_637)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_637)) else fail-any) else fail-any))) in
        {215}let v_653: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_651),(if success?(5-proj-7-tuple(v_637)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_637)) else fail-any) else fail-any))) in
        {216}let v_654: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_651),(if success?(5-proj-7-tuple(v_637)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_637)) else fail-any) else fail-any))) in
        {217}let v_655: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_637)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_637)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_651))) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (v_652,v_653,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_656: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_637)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then dhexp(2-proj-2-tuple(v_650),5-proj-7-tuple(v_637)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_649))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_655)) then cipherstatepack(2-proj-3-tuple(v_655),minnonce) else fail-any),1-proj-3-tuple(v_655),3-proj-3-tuple(v_651)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_657: bitstring = catch-fail(symmetricstateunpack(v_656)) in
        {220}let v_658: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_657))) in
        {221}let v_659: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_658),2-proj-2-tuple(v_658),3-proj-3-tuple(v_657),msg_c(alice,charlie))) in
        {222}let v_660: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_657))) in
        {223}let v_661: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_658))) && success?(1-proj-3-tuple(v_657))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then cipherstatepack(1-proj-2-tuple(v_660),increment_nonce(2-proj-2-tuple(v_658))) else fail-any) else fail-any)) in
        {224}let v_662: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_657)) && success?(1-proj-3-tuple(v_657))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-2-tuple(v_658))))) then (if not-caught-fail(v_659) then (if not-caught-fail(v_661) then (v_661,v_659) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_663: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_662),2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)))) in
        {226}let v_664: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_662)) && success?(symmetricstatepack(1-proj-2-tuple(v_662),2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then symmetricstatepack(1-proj-3-tuple(v_663),2-proj-3-tuple(v_663),hash(3-proj-3-tuple(v_663),2-proj-2-tuple(v_662))) else fail-any) else fail-any)) in
        {227}let v_665: bitstring = catch-fail((if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then (if not-caught-fail(v_664) then (v_664,2-proj-2-tuple(v_662)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_666: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_665),v_640,3-proj-7-tuple(v_637),4-proj-7-tuple(v_637),5-proj-7-tuple(v_637),6-proj-7-tuple(v_637),7-proj-7-tuple(v_637))) in
        {229}let v_667: bitstring = catch-fail(concat3(1-proj-3-tuple(v_638),2-proj-2-tuple(v_649),2-proj-2-tuple(v_665))) in
        {230}let v_668: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_665))) in
        {231}let v_669: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_668),zero)) in
        {232}let v_670: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_668),zero)) in
        {233}let v_671: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_668),zero)) in
        {234}let v_672: bitstring = catch-fail((if success?(2-proj-3-tuple(v_668)) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (if not-caught-fail(v_671) then (v_669,v_670,v_671) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {235}let v_673: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_672)) then cipherstatepack(1-proj-3-tuple(v_672),minnonce) else fail-any)) in
        {236}let v_674: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_672)) then cipherstatepack(2-proj-3-tuple(v_672),minnonce) else fail-any)) in
        {237}let v_675: bitstring = catch-fail((if success?(1-proj-2-tuple(v_665)) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if not-caught-fail(v_673) then (if not-caught-fail(v_674) then (1-proj-2-tuple(v_665),v_673,v_674) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let (hs_676: handshakestate,re_677: key,message_c_678: bitstring,cs1_679: cipherstate,cs2_680: cipherstate) = (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-7-tuple(v_637))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then (if not-caught-fail(v_656) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-2-tuple(v_665))))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (v_666,5-proj-7-tuple(v_637),v_667,2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {239}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {240}insert statestore(alice,charlie,statepack_d(hs_676));
        {241}out(pub, message_c_678)
    ) | (
        {243}event LeakS(phase0,alice);
        {244}out(pub, key_s(alice))
    ) | (
        {245}phase 1;
        {246}event LeakS(phase1,alice);
        {247}out(pub, key_s(alice))
    )
) | (
    {248}let v_681: key = catch-fail(dhexp(key_s(bob),g)) in
    {249}let s_682: keypair = (if not-caught-fail(v_681) then keypairpack(v_681,key_s(bob)) else fail-any) in
    {250}out(pub, getpublickey(s_682));
    (
        {251}let e_683: keypair = keypairpack(empty,empty) in
        {252}let rs_684: key = empty in
        {253}let re_685: key = empty in
        {254}let v_686: bitstring = catch-fail(hash(somename,empty)) in
        {255}let v_687: key = catch-fail(v_686) in
        {256}let v_688: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {257}let v_689: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_686) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then symmetricstatepack(v_688,v_687,v_686) else fail-any) else fail-any) else fail-any))) in
        {258}let v_690: symmetricstate = catch-fail((if success?((if not-caught-fail(v_686) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then symmetricstatepack(v_688,v_687,v_686) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then symmetricstatepack(1-proj-3-tuple(v_689),2-proj-3-tuple(v_689),hash(3-proj-3-tuple(v_689),empty)) else fail-any) else fail-any)) in
        {259}let v_691: bitstring = catch-fail(symmetricstateunpack(v_690)) in
        {260}let v_692: symmetricstate = catch-fail((if success?(getpublickey(s_682)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then symmetricstatepack(1-proj-3-tuple(v_691),2-proj-3-tuple(v_691),hash(3-proj-3-tuple(v_691),getpublickey(s_682))) else fail-any) else fail-any)) in
        {261}let hs_693: handshakestate = (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then handshakestatepack(v_692,s_682,e_683,rs_684,re_685,empty,false) else fail-any) else fail-any) in
        {262}insert statestore(bob,alice,statepack_a(hs_693))
    ) | (
        {284}get statestore(=bob,=alice,statepack_a(hs_694: handshakestate)) in
        {263}in(pub, message_a_695: bitstring);
        {264}let v_696: bitstring = catch-fail(handshakestateunpack(hs_694)) in
        {265}let v_697: bitstring = catch-fail(deconcat3(message_a_695)) in
        {266}let v_698: bool = catch-fail(true) in
        {267}let v_699: key = catch-fail(1-proj-3-tuple(v_697)) in
        {268}let v_700: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_696))) in
        {269}let v_701: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_696)) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_700),hash(3-proj-3-tuple(v_700),v_699)) else fail-any) else fail-any)) in
        {270}let v_702: bitstring = catch-fail(symmetricstateunpack(v_701)) in
        {271}let v_703: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {272}let v_704: aead = catch-fail(decrypt(1-proj-2-tuple(v_703),2-proj-2-tuple(v_703),3-proj-3-tuple(v_702),3-proj-3-tuple(v_697))) in
        {273}let v_705: bitstring = catch-fail(aeadunpack(v_704)) in
        {274}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_702))) in
        {275}let v_707: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_703))) && success?(1-proj-3-tuple(v_702))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then cipherstatepack(1-proj-2-tuple(v_706),increment_nonce(2-proj-2-tuple(v_703))) else fail-any) else fail-any)) in
        {276}let v_708: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_697)) && (success?(3-proj-3-tuple(v_702)) && success?(1-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if not-caught-fail(v_707) then (v_707,3-proj-3-tuple(v_705),1-proj-3-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {277}let v_709: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) in
        {278}let v_710: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_697)) && success?(symmetricstatepack(1-proj-3-tuple(v_708),2-proj-3-tuple(v_702),3-proj-3-tuple(v_702)))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),3-proj-3-tuple(v_697))) else fail-any) else fail-any)) in
        {279}let v_711: bitstring = catch-fail((if success?(3-proj-3-tuple(v_697)) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_712: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_711),2-proj-7-tuple(v_696),3-proj-7-tuple(v_696),4-proj-7-tuple(v_696),v_699,6-proj-7-tuple(v_696),7-proj-7-tuple(v_696))) in
        {281}let (hs_713: handshakestate,re_714: key,plaintext_a: bitstring,valid_715: bool) = (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-7-tuple(v_696))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if not-caught-fail(v_698) then (if not-caught-fail(v_699) then (if not-caught-fail(v_701) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if (v_698 && 3-proj-3-tuple(v_711)) then (if not-caught-fail(v_712) then (v_712,getpublickey(3-proj-7-tuple(v_696)),2-proj-3-tuple(v_711),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {282}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_715);
        {283}insert statestore(bob,alice,statepack_b(hs_713))
    ) | (
        {321}get statestore(=bob,=alice,statepack_b(hs_716: handshakestate)) in
        {285}let v_717: bitstring = catch-fail(handshakestateunpack(hs_716)) in
        {286}let v_718: bitstring = catch-fail((empty,empty,empty)) in
        {287}let v_719: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {288}let v_720: keypair = catch-fail((if not-caught-fail(v_719) then keypairpack(v_719,key_e(bob,alice)) else fail-any)) in
        {289}let v_721: bitstring = catch-fail(getpublickey(v_720)) in
        {290}let v_722: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_717))) in
        {291}let v_723: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_717)) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),v_721)) else fail-any) else fail-any)) in
        {292}let v_724: bitstring = catch-fail(keypairunpack(v_720)) in
        {293}let v_725: bitstring = catch-fail(symmetricstateunpack(v_723)) in
        {294}let v_726: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_725),(if success?(5-proj-7-tuple(v_717)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),5-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {295}let v_727: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_725),(if success?(5-proj-7-tuple(v_717)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),5-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {296}let v_728: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_725),(if success?(5-proj-7-tuple(v_717)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),5-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {297}let v_729: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_717)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),5-proj-7-tuple(v_717)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_725))) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (if not-caught-fail(v_728) then (v_726,v_727,v_728) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_730: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_717)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then dhexp(2-proj-2-tuple(v_724),5-proj-7-tuple(v_717)) else fail-any) else fail-any)) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_729)) then cipherstatepack(2-proj-3-tuple(v_729),minnonce) else fail-any),1-proj-3-tuple(v_729),3-proj-3-tuple(v_725)) else fail-any) else fail-any) else fail-any)) in
        {299}let v_731: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_717))) in
        {300}let v_732: bitstring = catch-fail(symmetricstateunpack(v_730)) in
        {301}let v_733: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_732),(if (success?(5-proj-7-tuple(v_717)) && success?(2-proj-7-tuple(v_717))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),5-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {302}let v_734: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_732),(if (success?(5-proj-7-tuple(v_717)) && success?(2-proj-7-tuple(v_717))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),5-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {303}let v_735: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_732),(if (success?(5-proj-7-tuple(v_717)) && success?(2-proj-7-tuple(v_717))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),5-proj-7-tuple(v_717)) else fail-any) else fail-any))) in
        {304}let v_736: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_717)) && success?(2-proj-7-tuple(v_717))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),5-proj-7-tuple(v_717)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_732))) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (v_733,v_734,v_735) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {305}let v_737: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_717)) && success?(2-proj-7-tuple(v_717))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then dhexp(2-proj-2-tuple(v_731),5-proj-7-tuple(v_717)) else fail-any) else fail-any)) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_736)) then cipherstatepack(2-proj-3-tuple(v_736),minnonce) else fail-any),1-proj-3-tuple(v_736),3-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any)) in
        {306}let v_738: bitstring = catch-fail(symmetricstateunpack(v_737)) in
        {307}let v_739: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_738))) in
        {308}let v_740: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_739),2-proj-2-tuple(v_739),3-proj-3-tuple(v_738),msg_b(bob,alice))) in
        {309}let v_741: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_738))) in
        {310}let v_742: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_739))) && success?(1-proj-3-tuple(v_738))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-2-tuple(v_741))))) then cipherstatepack(1-proj-2-tuple(v_741),increment_nonce(2-proj-2-tuple(v_739))) else fail-any) else fail-any)) in
        {311}let v_743: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_738)) && success?(1-proj-3-tuple(v_738))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then (if not-caught-fail(v_740) then (if not-caught-fail(v_742) then (v_742,v_740) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {312}let v_744: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_743),2-proj-3-tuple(v_738),3-proj-3-tuple(v_738)))) in
        {313}let v_745: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_743)) && success?(symmetricstatepack(1-proj-2-tuple(v_743),2-proj-3-tuple(v_738),3-proj-3-tuple(v_738)))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then symmetricstatepack(1-proj-3-tuple(v_744),2-proj-3-tuple(v_744),hash(3-proj-3-tuple(v_744),2-proj-2-tuple(v_743))) else fail-any) else fail-any)) in
        {314}let v_746: bitstring = catch-fail((if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then (if not-caught-fail(v_745) then (v_745,2-proj-2-tuple(v_743)) else fail-any) else fail-any) else fail-any)) in
        {315}let v_747: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_746),2-proj-7-tuple(v_717),v_720,4-proj-7-tuple(v_717),5-proj-7-tuple(v_717),6-proj-7-tuple(v_717),7-proj-7-tuple(v_717))) in
        {316}let v_748: bitstring = catch-fail(concat3(v_721,2-proj-3-tuple(v_718),2-proj-2-tuple(v_746))) in
        {317}let (hs_749: handshakestate,re_750: key,message_b_751: bitstring) = (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-7-tuple(v_717))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (if not-caught-fail(v_723) then (if not-caught-fail(v_730) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (v_747,5-proj-7-tuple(v_717),v_748) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {318}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {319}insert statestore(bob,alice,statepack_c(hs_749));
        {320}out(pub, message_b_751)
    ) | (
        {368}get statestore(=bob,=alice,statepack_c(hs_752: handshakestate)) in
        {322}in(pub, message_c_753: bitstring);
        {323}let v_754: bitstring = catch-fail(handshakestateunpack(hs_752)) in
        {324}let v_755: bitstring = catch-fail(deconcat3(message_c_753)) in
        {325}let v_756: bool = catch-fail(true) in
        {326}let v_757: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_754))) in
        {327}let v_758: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_757))) in
        {328}let v_759: aead = catch-fail(decrypt(1-proj-2-tuple(v_758),2-proj-2-tuple(v_758),3-proj-3-tuple(v_757),2-proj-3-tuple(v_755))) in
        {329}let v_760: bitstring = catch-fail(aeadunpack(v_759)) in
        {330}let v_761: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_757))) in
        {331}let v_762: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_758))) && success?(1-proj-3-tuple(v_757))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then cipherstatepack(1-proj-2-tuple(v_761),increment_nonce(2-proj-2-tuple(v_758))) else fail-any) else fail-any)) in
        {332}let v_763: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_755)) && (success?(3-proj-3-tuple(v_757)) && success?(1-proj-3-tuple(v_757)))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then (if not-caught-fail(v_759) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then (if not-caught-fail(v_762) then (v_762,3-proj-3-tuple(v_760),1-proj-3-tuple(v_760)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_764: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_757),3-proj-3-tuple(v_757)))) in
        {334}let v_765: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_755)) && success?(symmetricstatepack(1-proj-3-tuple(v_763),2-proj-3-tuple(v_757),3-proj-3-tuple(v_757)))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_764),hash(3-proj-3-tuple(v_764),2-proj-3-tuple(v_755))) else fail-any) else fail-any)) in
        {335}let v_766: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_755)) && success?(1-proj-7-tuple(v_754))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if not-caught-fail(v_765) then (v_765,2-proj-3-tuple(v_763),3-proj-3-tuple(v_763)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let v_767: key = catch-fail(2-proj-3-tuple(v_766)) in
        {337}let v_768: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_754))) in
        {338}let v_769: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_766))) in
        {339}let v_770: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_769),(if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then dhexp(2-proj-2-tuple(v_768),v_767) else fail-any) else fail-any))) in
        {340}let v_771: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_769),(if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then dhexp(2-proj-2-tuple(v_768),v_767) else fail-any) else fail-any))) in
        {341}let v_772: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_769),(if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then dhexp(2-proj-2-tuple(v_768),v_767) else fail-any) else fail-any))) in
        {342}let v_773: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then dhexp(2-proj-2-tuple(v_768),v_767) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_769))) then (if not-caught-fail(v_770) then (if not-caught-fail(v_771) then (if not-caught-fail(v_772) then (v_770,v_771,v_772) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {343}let v_774: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_754)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then dhexp(2-proj-2-tuple(v_768),v_767) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_773)) then cipherstatepack(2-proj-3-tuple(v_773),minnonce) else fail-any),1-proj-3-tuple(v_773),3-proj-3-tuple(v_769)) else fail-any) else fail-any) else fail-any)) in
        {344}let v_775: bitstring = catch-fail(symmetricstateunpack(v_774)) in
        {345}let v_776: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_775))) in
        {346}let v_777: aead = catch-fail(decrypt(1-proj-2-tuple(v_776),2-proj-2-tuple(v_776),3-proj-3-tuple(v_775),3-proj-3-tuple(v_755))) in
        {347}let v_778: bitstring = catch-fail(aeadunpack(v_777)) in
        {348}let v_779: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_775))) in
        {349}let v_780: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_776))) && success?(1-proj-3-tuple(v_775))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then cipherstatepack(1-proj-2-tuple(v_779),increment_nonce(2-proj-2-tuple(v_776))) else fail-any) else fail-any)) in
        {350}let v_781: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_755)) && (success?(3-proj-3-tuple(v_775)) && success?(1-proj-3-tuple(v_775)))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then (if not-caught-fail(v_777) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if not-caught-fail(v_780) then (v_780,3-proj-3-tuple(v_778),1-proj-3-tuple(v_778)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_782: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_781),2-proj-3-tuple(v_775),3-proj-3-tuple(v_775)))) in
        {352}let v_783: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_755)) && success?(symmetricstatepack(1-proj-3-tuple(v_781),2-proj-3-tuple(v_775),3-proj-3-tuple(v_775)))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_782),hash(3-proj-3-tuple(v_782),3-proj-3-tuple(v_755))) else fail-any) else fail-any)) in
        {353}let v_784: bitstring = catch-fail((if success?(3-proj-3-tuple(v_755)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if not-caught-fail(v_783) then (v_783,2-proj-3-tuple(v_781),3-proj-3-tuple(v_781)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {354}let v_785: key = catch-fail(dhexp(key_s(alice),g)) in
        {355}let v_786: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_784),2-proj-7-tuple(v_754),3-proj-7-tuple(v_754),v_767,5-proj-7-tuple(v_754),6-proj-7-tuple(v_754),7-proj-7-tuple(v_754))) in
        {356}let v_787: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_784))) in
        {357}let v_788: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_787),zero)) in
        {358}let v_789: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_787),zero)) in
        {359}let v_790: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_787),zero)) in
        {360}let v_791: bitstring = catch-fail((if success?(2-proj-3-tuple(v_787)) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (v_788,v_789,v_790) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let v_792: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_791)) then cipherstatepack(1-proj-3-tuple(v_791),minnonce) else fail-any)) in
        {362}let v_793: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_791)) then cipherstatepack(2-proj-3-tuple(v_791),minnonce) else fail-any)) in
        {363}let v_794: bitstring = catch-fail((if success?(1-proj-3-tuple(v_784)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (1-proj-3-tuple(v_784),v_792,v_793) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {364}let (hs_795: handshakestate,re_796: key,plaintext_c: bitstring,valid_797: bool,cs1_798: cipherstate,cs2_799: cipherstate) = (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-7-tuple(v_754))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if not-caught-fail(v_756) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then (if not-caught-fail(v_767) then (if not-caught-fail(v_774) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if ((3-proj-3-tuple(v_766) && 3-proj-3-tuple(v_784)) && (v_767 = getpublickey((if not-caught-fail(v_785) then keypairpack(v_785,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (v_786,getpublickey(3-proj-7-tuple(v_754)),2-proj-3-tuple(v_784),true,2-proj-3-tuple(v_794),3-proj-3-tuple(v_794)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {365}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_797);
        {366}insert statestore(bob,alice,statepack_d(hs_795));
        {367}event RecvEnd(valid_797)
    ) | (
        {369}event LeakS(phase0,bob);
        {370}out(pub, key_s(bob))
    ) | (
        {371}phase 1;
        {372}event LeakS(phase1,bob);
        {373}out(pub, key_s(bob))
    )
) | (
    {374}let v_800: key = catch-fail(dhexp(key_s(bob),g)) in
    {375}let s_801: keypair = (if not-caught-fail(v_800) then keypairpack(v_800,key_s(bob)) else fail-any) in
    {376}out(pub, getpublickey(s_801));
    (
        {377}let e_802: keypair = keypairpack(empty,empty) in
        {378}let rs_803: key = empty in
        {379}let re_804: key = empty in
        {380}let v_805: bitstring = catch-fail(hash(somename,empty)) in
        {381}let v_806: key = catch-fail(v_805) in
        {382}let v_807: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {383}let v_808: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (if not-caught-fail(v_807) then symmetricstatepack(v_807,v_806,v_805) else fail-any) else fail-any) else fail-any))) in
        {384}let v_809: symmetricstate = catch-fail((if success?((if not-caught-fail(v_805) then (if not-caught-fail(v_806) then (if not-caught-fail(v_807) then symmetricstatepack(v_807,v_806,v_805) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),empty)) else fail-any) else fail-any)) in
        {385}let v_810: bitstring = catch-fail(symmetricstateunpack(v_809)) in
        {386}let v_811: symmetricstate = catch-fail((if success?(getpublickey(s_801)) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),getpublickey(s_801))) else fail-any) else fail-any)) in
        {387}let hs_812: handshakestate = (if not-caught-fail(v_809) then (if not-caught-fail(v_811) then handshakestatepack(v_811,s_801,e_802,rs_803,re_804,empty,false) else fail-any) else fail-any) in
        {388}insert statestore(bob,charlie,statepack_a(hs_812))
    ) | (
        {410}get statestore(=bob,=charlie,statepack_a(hs_813: handshakestate)) in
        {389}in(pub, message_a_814: bitstring);
        {390}let v_815: bitstring = catch-fail(handshakestateunpack(hs_813)) in
        {391}let v_816: bitstring = catch-fail(deconcat3(message_a_814)) in
        {392}let v_817: bool = catch-fail(true) in
        {393}let v_818: key = catch-fail(1-proj-3-tuple(v_816)) in
        {394}let v_819: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_815))) in
        {395}let v_820: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_815)) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),v_818)) else fail-any) else fail-any)) in
        {396}let v_821: bitstring = catch-fail(symmetricstateunpack(v_820)) in
        {397}let v_822: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {398}let v_823: aead = catch-fail(decrypt(1-proj-2-tuple(v_822),2-proj-2-tuple(v_822),3-proj-3-tuple(v_821),3-proj-3-tuple(v_816))) in
        {399}let v_824: bitstring = catch-fail(aeadunpack(v_823)) in
        {400}let v_825: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {401}let v_826: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_822))) && success?(1-proj-3-tuple(v_821))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then cipherstatepack(1-proj-2-tuple(v_825),increment_nonce(2-proj-2-tuple(v_822))) else fail-any) else fail-any)) in
        {402}let v_827: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_816)) && (success?(3-proj-3-tuple(v_821)) && success?(1-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then (if not-caught-fail(v_823) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_826) then (v_826,3-proj-3-tuple(v_824),1-proj-3-tuple(v_824)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_828: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) in
        {404}let v_829: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_816)) && success?(symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_828),hash(3-proj-3-tuple(v_828),3-proj-3-tuple(v_816))) else fail-any) else fail-any)) in
        {405}let v_830: bitstring = catch-fail((if success?(3-proj-3-tuple(v_816)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if not-caught-fail(v_829) then (v_829,2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let v_831: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_830),2-proj-7-tuple(v_815),3-proj-7-tuple(v_815),4-proj-7-tuple(v_815),v_818,6-proj-7-tuple(v_815),7-proj-7-tuple(v_815))) in
        {407}let (hs_832: handshakestate,re_833: key,plaintext_a_834: bitstring,valid_835: bool) = (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-7-tuple(v_815))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (if not-caught-fail(v_820) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if (v_817 && 3-proj-3-tuple(v_830)) then (if not-caught-fail(v_831) then (v_831,getpublickey(3-proj-7-tuple(v_815)),2-proj-3-tuple(v_830),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {408}event RecvMsg(bob,charlie,stage_a,plaintext_a_834,valid_835);
        {409}insert statestore(bob,charlie,statepack_b(hs_832))
    ) | (
        {447}get statestore(=bob,=charlie,statepack_b(hs_836: handshakestate)) in
        {411}let v_837: bitstring = catch-fail(handshakestateunpack(hs_836)) in
        {412}let v_838: bitstring = catch-fail((empty,empty,empty)) in
        {413}let v_839: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {414}let v_840: keypair = catch-fail((if not-caught-fail(v_839) then keypairpack(v_839,key_e(bob,charlie)) else fail-any)) in
        {415}let v_841: bitstring = catch-fail(getpublickey(v_840)) in
        {416}let v_842: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_837))) in
        {417}let v_843: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_837)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then symmetricstatepack(1-proj-3-tuple(v_842),2-proj-3-tuple(v_842),hash(3-proj-3-tuple(v_842),v_841)) else fail-any) else fail-any)) in
        {418}let v_844: bitstring = catch-fail(keypairunpack(v_840)) in
        {419}let v_845: bitstring = catch-fail(symmetricstateunpack(v_843)) in
        {420}let v_846: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_845),(if success?(5-proj-7-tuple(v_837)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_837)) else fail-any) else fail-any))) in
        {421}let v_847: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_845),(if success?(5-proj-7-tuple(v_837)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_837)) else fail-any) else fail-any))) in
        {422}let v_848: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_845),(if success?(5-proj-7-tuple(v_837)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_837)) else fail-any) else fail-any))) in
        {423}let v_849: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_837)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_837)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_845))) then (if not-caught-fail(v_846) then (if not-caught-fail(v_847) then (if not-caught-fail(v_848) then (v_846,v_847,v_848) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_850: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_837)) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-2-tuple(v_844))))) then dhexp(2-proj-2-tuple(v_844),5-proj-7-tuple(v_837)) else fail-any) else fail-any)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_849)) then cipherstatepack(2-proj-3-tuple(v_849),minnonce) else fail-any),1-proj-3-tuple(v_849),3-proj-3-tuple(v_845)) else fail-any) else fail-any) else fail-any)) in
        {425}let v_851: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_837))) in
        {426}let v_852: bitstring = catch-fail(symmetricstateunpack(v_850)) in
        {427}let v_853: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_852),(if (success?(5-proj-7-tuple(v_837)) && success?(2-proj-7-tuple(v_837))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_837)) else fail-any) else fail-any))) in
        {428}let v_854: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_852),(if (success?(5-proj-7-tuple(v_837)) && success?(2-proj-7-tuple(v_837))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_837)) else fail-any) else fail-any))) in
        {429}let v_855: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_852),(if (success?(5-proj-7-tuple(v_837)) && success?(2-proj-7-tuple(v_837))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_837)) else fail-any) else fail-any))) in
        {430}let v_856: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_837)) && success?(2-proj-7-tuple(v_837))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_837)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_852))) then (if not-caught-fail(v_853) then (if not-caught-fail(v_854) then (if not-caught-fail(v_855) then (v_853,v_854,v_855) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_857: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_837)) && success?(2-proj-7-tuple(v_837))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_837)) else fail-any) else fail-any)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_856)) then cipherstatepack(2-proj-3-tuple(v_856),minnonce) else fail-any),1-proj-3-tuple(v_856),3-proj-3-tuple(v_852)) else fail-any) else fail-any) else fail-any)) in
        {432}let v_858: bitstring = catch-fail(symmetricstateunpack(v_857)) in
        {433}let v_859: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_858))) in
        {434}let v_860: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_859),2-proj-2-tuple(v_859),3-proj-3-tuple(v_858),msg_b(bob,charlie))) in
        {435}let v_861: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_858))) in
        {436}let v_862: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_859))) && success?(1-proj-3-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then cipherstatepack(1-proj-2-tuple(v_861),increment_nonce(2-proj-2-tuple(v_859))) else fail-any) else fail-any)) in
        {437}let v_863: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_858)) && success?(1-proj-3-tuple(v_858))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-2-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_862) then (v_862,v_860) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_864: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_863),2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)))) in
        {439}let v_865: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_863)) && success?(symmetricstatepack(1-proj-2-tuple(v_863),2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then symmetricstatepack(1-proj-3-tuple(v_864),2-proj-3-tuple(v_864),hash(3-proj-3-tuple(v_864),2-proj-2-tuple(v_863))) else fail-any) else fail-any)) in
        {440}let v_866: bitstring = catch-fail((if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then (if not-caught-fail(v_865) then (v_865,2-proj-2-tuple(v_863)) else fail-any) else fail-any) else fail-any)) in
        {441}let v_867: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_866),2-proj-7-tuple(v_837),v_840,4-proj-7-tuple(v_837),5-proj-7-tuple(v_837),6-proj-7-tuple(v_837),7-proj-7-tuple(v_837))) in
        {442}let v_868: bitstring = catch-fail(concat3(v_841,2-proj-3-tuple(v_838),2-proj-2-tuple(v_866))) in
        {443}let (hs_869: handshakestate,re_870: key,message_b_871: bitstring) = (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-7-tuple(v_837))))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if not-caught-fail(v_840) then (if not-caught-fail(v_841) then (if not-caught-fail(v_843) then (if not-caught-fail(v_850) then (if not-caught-fail(v_857) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then (if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (v_867,5-proj-7-tuple(v_837),v_868) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {444}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {445}insert statestore(bob,charlie,statepack_c(hs_869));
        {446}out(pub, message_b_871)
    ) | (
        {494}get statestore(=bob,=charlie,statepack_c(hs_872: handshakestate)) in
        {448}in(pub, message_c_873: bitstring);
        {449}let v_874: bitstring = catch-fail(handshakestateunpack(hs_872)) in
        {450}let v_875: bitstring = catch-fail(deconcat3(message_c_873)) in
        {451}let v_876: bool = catch-fail(true) in
        {452}let v_877: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_874))) in
        {453}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_877))) in
        {454}let v_879: aead = catch-fail(decrypt(1-proj-2-tuple(v_878),2-proj-2-tuple(v_878),3-proj-3-tuple(v_877),2-proj-3-tuple(v_875))) in
        {455}let v_880: bitstring = catch-fail(aeadunpack(v_879)) in
        {456}let v_881: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_877))) in
        {457}let v_882: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_878))) && success?(1-proj-3-tuple(v_877))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-2-tuple(v_881))))) then cipherstatepack(1-proj-2-tuple(v_881),increment_nonce(2-proj-2-tuple(v_878))) else fail-any) else fail-any)) in
        {458}let v_883: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_875)) && (success?(3-proj-3-tuple(v_877)) && success?(1-proj-3-tuple(v_877)))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then (if not-caught-fail(v_879) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,3-proj-3-tuple(v_880),1-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_884: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)))) in
        {460}let v_885: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_875)) && success?(symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_877),3-proj-3-tuple(v_877)))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then symmetricstatepack(1-proj-3-tuple(v_884),2-proj-3-tuple(v_884),hash(3-proj-3-tuple(v_884),2-proj-3-tuple(v_875))) else fail-any) else fail-any)) in
        {461}let v_886: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_875)) && success?(1-proj-7-tuple(v_874))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if not-caught-fail(v_885) then (v_885,2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {462}let v_887: key = catch-fail(2-proj-3-tuple(v_886)) in
        {463}let v_888: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_874))) in
        {464}let v_889: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_886))) in
        {465}let v_890: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_889),(if success?(3-proj-7-tuple(v_874)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),v_887) else fail-any) else fail-any))) in
        {466}let v_891: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_889),(if success?(3-proj-7-tuple(v_874)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),v_887) else fail-any) else fail-any))) in
        {467}let v_892: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_889),(if success?(3-proj-7-tuple(v_874)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),v_887) else fail-any) else fail-any))) in
        {468}let v_893: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_874)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),v_887) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_889))) then (if not-caught-fail(v_890) then (if not-caught-fail(v_891) then (if not-caught-fail(v_892) then (v_890,v_891,v_892) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {469}let v_894: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_874)) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then dhexp(2-proj-2-tuple(v_888),v_887) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_893)) then cipherstatepack(2-proj-3-tuple(v_893),minnonce) else fail-any),1-proj-3-tuple(v_893),3-proj-3-tuple(v_889)) else fail-any) else fail-any) else fail-any)) in
        {470}let v_895: bitstring = catch-fail(symmetricstateunpack(v_894)) in
        {471}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {472}let v_897: aead = catch-fail(decrypt(1-proj-2-tuple(v_896),2-proj-2-tuple(v_896),3-proj-3-tuple(v_895),3-proj-3-tuple(v_875))) in
        {473}let v_898: bitstring = catch-fail(aeadunpack(v_897)) in
        {474}let v_899: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_895))) in
        {475}let v_900: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_896))) && success?(1-proj-3-tuple(v_895))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then cipherstatepack(1-proj-2-tuple(v_899),increment_nonce(2-proj-2-tuple(v_896))) else fail-any) else fail-any)) in
        {476}let v_901: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_875)) && (success?(3-proj-3-tuple(v_895)) && success?(1-proj-3-tuple(v_895)))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then (if not-caught-fail(v_897) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if not-caught-fail(v_900) then (v_900,3-proj-3-tuple(v_898),1-proj-3-tuple(v_898)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {477}let v_902: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) in
        {478}let v_903: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_875)) && success?(symmetricstatepack(1-proj-3-tuple(v_901),2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then symmetricstatepack(1-proj-3-tuple(v_902),2-proj-3-tuple(v_902),hash(3-proj-3-tuple(v_902),3-proj-3-tuple(v_875))) else fail-any) else fail-any)) in
        {479}let v_904: bitstring = catch-fail((if success?(3-proj-3-tuple(v_875)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if not-caught-fail(v_903) then (v_903,2-proj-3-tuple(v_901),3-proj-3-tuple(v_901)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {480}let v_905: key = catch-fail(dhexp(key_s(charlie),g)) in
        {481}let v_906: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_904),2-proj-7-tuple(v_874),3-proj-7-tuple(v_874),v_887,5-proj-7-tuple(v_874),6-proj-7-tuple(v_874),7-proj-7-tuple(v_874))) in
        {482}let v_907: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_904))) in
        {483}let v_908: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_907),zero)) in
        {484}let v_909: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_907),zero)) in
        {485}let v_910: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_907),zero)) in
        {486}let v_911: bitstring = catch-fail((if success?(2-proj-3-tuple(v_907)) then (if not-caught-fail(v_908) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (v_908,v_909,v_910) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {487}let v_912: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_911)) then cipherstatepack(1-proj-3-tuple(v_911),minnonce) else fail-any)) in
        {488}let v_913: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_911)) then cipherstatepack(2-proj-3-tuple(v_911),minnonce) else fail-any)) in
        {489}let v_914: bitstring = catch-fail((if success?(1-proj-3-tuple(v_904)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then (1-proj-3-tuple(v_904),v_912,v_913) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {490}let (hs_915: handshakestate,re_916: key,plaintext_c_917: bitstring,valid_918: bool,cs1_919: cipherstate,cs2_920: cipherstate) = (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-7-tuple(v_874))))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if not-caught-fail(v_887) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then (if ((3-proj-3-tuple(v_886) && 3-proj-3-tuple(v_904)) && (v_887 = getpublickey((if not-caught-fail(v_905) then keypairpack(v_905,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_906) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (v_906,getpublickey(3-proj-7-tuple(v_874)),2-proj-3-tuple(v_904),true,2-proj-3-tuple(v_914),3-proj-3-tuple(v_914)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {491}event RecvMsg(bob,charlie,stage_c,plaintext_c_917,valid_918);
        {492}insert statestore(bob,charlie,statepack_d(hs_915));
        {493}event RecvEnd(valid_918)
    ) | (
        {495}event LeakS(phase0,bob);
        {496}out(pub, key_s(bob))
    ) | (
        {497}phase 1;
        {498}event LeakS(phase1,bob);
        {499}out(pub, key_s(bob))
    )
) | (
    {500}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 178 rules in the queue.
400 rules inserted. The rule base contains 392 rules. 19 rules in the queue.
600 rules inserted. The rule base contains 574 rules. 164 rules in the queue.
800 rules inserted. The rule base contains 751 rules. 194 rules in the queue.
1000 rules inserted. The rule base contains 923 rules. 143 rules in the queue.
1200 rules inserted. The rule base contains 1087 rules. 189 rules in the queue.
1400 rules inserted. The rule base contains 1179 rules. 218 rules in the queue.
1600 rules inserted. The rule base contains 1243 rules. 177 rules in the queue.
1800 rules inserted. The rule base contains 1424 rules. 201 rules in the queue.
2000 rules inserted. The rule base contains 1572 rules. 218 rules in the queue.
2200 rules inserted. The rule base contains 1742 rules. 250 rules in the queue.
2400 rules inserted. The rule base contains 1904 rules. 261 rules in the queue.
2600 rules inserted. The rule base contains 2036 rules. 268 rules in the queue.
2800 rules inserted. The rule base contains 2151 rules. 273 rules in the queue.
3000 rules inserted. The rule base contains 2287 rules. 284 rules in the queue.
3200 rules inserted. The rule base contains 2432 rules. 298 rules in the queue.
3400 rules inserted. The rule base contains 2569 rules. 340 rules in the queue.
3600 rules inserted. The rule base contains 2690 rules. 367 rules in the queue.
3800 rules inserted. The rule base contains 2811 rules. 338 rules in the queue.
4000 rules inserted. The rule base contains 2955 rules. 339 rules in the queue.
4200 rules inserted. The rule base contains 3098 rules. 347 rules in the queue.
4400 rules inserted. The rule base contains 3258 rules. 355 rules in the queue.
4600 rules inserted. The rule base contains 3400 rules. 333 rules in the queue.
4800 rules inserted. The rule base contains 3539 rules. 363 rules in the queue.
5000 rules inserted. The rule base contains 3696 rules. 372 rules in the queue.
5200 rules inserted. The rule base contains 3856 rules. 386 rules in the queue.
5400 rules inserted. The rule base contains 3995 rules. 343 rules in the queue.
5600 rules inserted. The rule base contains 4101 rules. 334 rules in the queue.
5800 rules inserted. The rule base contains 4222 rules. 284 rules in the queue.
6000 rules inserted. The rule base contains 4311 rules. 218 rules in the queue.
6200 rules inserted. The rule base contains 4382 rules. 125 rules in the queue.
6400 rules inserted. The rule base contains 4420 rules. 63 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1001,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {250}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {250}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {250}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(bob),g) may be sent on channel pub at output {250}.
mess(pub,dhexp(key_s(bob),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {388}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {410}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {389}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {409}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {447}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {444}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {446}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1001,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {388}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {410}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {389}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {409}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {447}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {444}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {446}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {388}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {410}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {389}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {409}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {447}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {444}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {446}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1001,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {262}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {284}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 3 may be received at input {263}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {283}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 4 may be read at get {321}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {318}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 6 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {262}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 9 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {284}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 10 may be received at input {263}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {283}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 11 may be read at get {321}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {318}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {320}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 7 may be read at get {75}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {40}.
We have dhexp(key_e(bob,alice),g) <> caught-fail.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {74}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {119}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {116}.
So the message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) may be sent on channel pub at output {118}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) that may be sent on channel pub by 14 may be received at input {322}.
So event RecvEnd(true) may be executed at {367}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
