File "XK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "XK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "XK1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 361, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 363, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 371, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 372, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 386, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 386, characters 48-53:
Warning: identifier valid1 rebound.
File "XK1.noise.passive.pv", line 387, characters 6-7:
Warning: identifier rs rebound.
File "XK1.noise.passive.pv", line 388, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 584, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 577, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 569, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "XK1.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XK1.noise.passive.pv", line 331, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 371, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 372, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 554, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 642, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 409, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 411, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 634, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 627, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 386, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 386, characters 48-53:
Warning: identifier valid1 rebound.
File "XK1.noise.passive.pv", line 387, characters 6-7:
Warning: identifier rs rebound.
File "XK1.noise.passive.pv", line 388, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 619, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "XK1.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "XK1.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XK1.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 612, characters 8-9:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 358, characters 6-7:
Warning: identifier re rebound.
File "XK1.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 361, characters 7-8:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 363, characters 7-8:
Warning: identifier hs rebound.
File "XK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XK1.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_529: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_529));
    (
        {4}let e_530: keypair = keypairpack(empty,empty) in
        {5}let v_531: key = catch-fail(dhexp(key_s(bob),g)) in
        {6}let rs_532: key = getpublickey((if not-caught-fail(v_531) then keypairpack(v_531,key_s(bob)) else fail-any)) in
        {7}let re_533: key = empty in
        {8}let v_534: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_535: key = catch-fail(v_534) in
        {10}let v_536: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_537: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any))) in
        {12}let v_538: symmetricstate = catch-fail((if success?((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then symmetricstatepack(1-proj-3-tuple(v_537),2-proj-3-tuple(v_537),hash(3-proj-3-tuple(v_537),empty)) else fail-any) else fail-any)) in
        {13}let v_539: bitstring = catch-fail(symmetricstateunpack(v_538)) in
        {14}let v_540: symmetricstate = catch-fail((if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),rs_532)) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_538) then (if not-caught-fail(v_540) then handshakestatepack(v_540,s_529,e_530,rs_532,re_533,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {39}get statestore(=alice,=bob,statepack_a(hs_541: handshakestate)) in
        {17}let v_542: bitstring = catch-fail(handshakestateunpack(hs_541)) in
        {18}let v_543: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_544: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_545: keypair = catch-fail((if not-caught-fail(v_544) then keypairpack(v_544,key_e(alice,bob)) else fail-any)) in
        {21}let v_546: bitstring = catch-fail(getpublickey(v_545)) in
        {22}let v_547: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_542))) in
        {23}let v_548: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_542)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),v_546)) else fail-any) else fail-any)) in
        {24}let v_549: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {25}let v_550: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {26}let v_551: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_550),2-proj-2-tuple(v_550),3-proj-3-tuple(v_549),msg_a(alice,bob))) in
        {27}let v_552: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {28}let v_553: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_550))) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then cipherstatepack(1-proj-2-tuple(v_552),increment_nonce(2-proj-2-tuple(v_550))) else fail-any) else fail-any)) in
        {29}let v_554: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_549)) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_553) then (v_553,v_551) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_555: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) in
        {31}let v_556: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_554)) && success?(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),2-proj-2-tuple(v_554))) else fail-any) else fail-any)) in
        {32}let v_557: bitstring = catch-fail((if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_556) then (v_556,2-proj-2-tuple(v_554)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_558: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_557),2-proj-7-tuple(v_542),v_545,4-proj-7-tuple(v_542),5-proj-7-tuple(v_542),6-proj-7-tuple(v_542),7-proj-7-tuple(v_542))) in
        {34}let v_559: bitstring = catch-fail(concat3(v_546,2-proj-3-tuple(v_543),2-proj-2-tuple(v_557))) in
        {35}let (hs_560: handshakestate,re_561: key,message_a: bitstring) = (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-7-tuple(v_542))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (v_558,5-proj-7-tuple(v_542),v_559) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {36}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {37}insert statestore(alice,bob,statepack_b(hs_560));
        {38}out(pub, message_a)
    ) | (
        {75}get statestore(=alice,=bob,statepack_b(hs_562: handshakestate)) in
        {40}in(pub, message_b: bitstring);
        {41}let v_563: bitstring = catch-fail(handshakestateunpack(hs_562)) in
        {42}let v_564: bitstring = catch-fail(deconcat3(message_b)) in
        {43}let v_565: bool = catch-fail(true) in
        {44}let v_566: key = catch-fail(1-proj-3-tuple(v_564)) in
        {45}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_563))) in
        {46}let v_568: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_563)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then symmetricstatepack(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),hash(3-proj-3-tuple(v_567),v_566)) else fail-any) else fail-any)) in
        {47}let v_569: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_563))) in
        {48}let v_570: bitstring = catch-fail(symmetricstateunpack(v_568)) in
        {49}let v_571: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {50}let v_572: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {51}let v_573: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {52}let v_574: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_570))) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_571,v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_575: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_574)) then cipherstatepack(2-proj-3-tuple(v_574),minnonce) else fail-any),1-proj-3-tuple(v_574),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_576: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_563))) in
        {55}let v_577: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {56}let v_578: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_577),(if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_563)) else fail-any) else fail-any))) in
        {57}let v_579: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_577),(if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_563)) else fail-any) else fail-any))) in
        {58}let v_580: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_577),(if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_563)) else fail-any) else fail-any))) in
        {59}let v_581: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_563)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_577))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (v_578,v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_582: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_563)) && success?(3-proj-7-tuple(v_563))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then dhexp(2-proj-2-tuple(v_576),4-proj-7-tuple(v_563)) else fail-any) else fail-any)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_581)) then cipherstatepack(2-proj-3-tuple(v_581),minnonce) else fail-any),1-proj-3-tuple(v_581),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any)) in
        {61}let v_583: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {62}let v_584: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_583))) in
        {63}let v_585: aead = catch-fail(decrypt(1-proj-2-tuple(v_584),2-proj-2-tuple(v_584),3-proj-3-tuple(v_583),3-proj-3-tuple(v_564))) in
        {64}let v_586: bitstring = catch-fail(aeadunpack(v_585)) in
        {65}let v_587: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_583))) in
        {66}let v_588: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_584))) && success?(1-proj-3-tuple(v_583))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then cipherstatepack(1-proj-2-tuple(v_587),increment_nonce(2-proj-2-tuple(v_584))) else fail-any) else fail-any)) in
        {67}let v_589: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && (success?(3-proj-3-tuple(v_583)) && success?(1-proj-3-tuple(v_583)))) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_585) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if not-caught-fail(v_588) then (v_588,3-proj-3-tuple(v_586),1-proj-3-tuple(v_586)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_590: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_583),3-proj-3-tuple(v_583)))) in
        {69}let v_591: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(symmetricstatepack(1-proj-3-tuple(v_589),2-proj-3-tuple(v_583),3-proj-3-tuple(v_583)))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack(1-proj-3-tuple(v_590),2-proj-3-tuple(v_590),hash(3-proj-3-tuple(v_590),3-proj-3-tuple(v_564))) else fail-any) else fail-any)) in
        {70}let v_592: bitstring = catch-fail((if success?(3-proj-3-tuple(v_564)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then (if not-caught-fail(v_591) then (v_591,2-proj-3-tuple(v_589),3-proj-3-tuple(v_589)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_593: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_592),2-proj-7-tuple(v_563),3-proj-7-tuple(v_563),4-proj-7-tuple(v_563),v_566,6-proj-7-tuple(v_563),7-proj-7-tuple(v_563))) in
        {72}let (hs_594: handshakestate,re_595: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-7-tuple(v_563))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (if not-caught-fail(v_575) then (if not-caught-fail(v_582) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if (v_565 && 3-proj-3-tuple(v_592)) then (if not-caught-fail(v_593) then (v_593,getpublickey(3-proj-7-tuple(v_563)),2-proj-3-tuple(v_592),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {73}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {74}insert statestore(alice,bob,statepack_c(hs_594))
    ) | (
        {111}get statestore(=alice,=bob,statepack_c(hs_596: handshakestate)) in
        {76}let v_597: bitstring = catch-fail(handshakestateunpack(hs_596)) in
        {77}let v_598: bitstring = catch-fail((empty,empty,empty)) in
        {78}let v_599: key = catch-fail(dhexp(key_s(alice),g)) in
        {79}let v_600: keypair = catch-fail((if not-caught-fail(v_599) then keypairpack(v_599,key_s(alice)) else fail-any)) in
        {80}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_597))) in
        {81}let v_602: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {82}let v_603: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_602),2-proj-2-tuple(v_602),3-proj-3-tuple(v_601),getpublickey(v_600))) in
        {83}let v_604: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {84}let v_605: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_602))) && success?(1-proj-3-tuple(v_601))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then cipherstatepack(1-proj-2-tuple(v_604),increment_nonce(2-proj-2-tuple(v_602))) else fail-any) else fail-any)) in
        {85}let v_606: bitstring = catch-fail((if (success?(getpublickey(v_600)) && (success?(3-proj-3-tuple(v_601)) && success?(1-proj-3-tuple(v_601)))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if not-caught-fail(v_603) then (if not-caught-fail(v_605) then (v_605,v_603) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_607: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_606),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) in
        {87}let v_608: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_606)) && success?(symmetricstatepack(1-proj-2-tuple(v_606),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_607),hash(3-proj-3-tuple(v_607),2-proj-2-tuple(v_606))) else fail-any) else fail-any)) in
        {88}let v_609: bitstring = catch-fail((if (success?(getpublickey(v_600)) && success?(1-proj-7-tuple(v_597))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then (if not-caught-fail(v_608) then (v_608,2-proj-2-tuple(v_606)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_610: bitstring = catch-fail(keypairunpack(v_600)) in
        {90}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_609))) in
        {91}let v_612: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_611),(if success?(5-proj-7-tuple(v_597)) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_597)) else fail-any) else fail-any))) in
        {92}let v_613: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_611),(if success?(5-proj-7-tuple(v_597)) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_597)) else fail-any) else fail-any))) in
        {93}let v_614: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_611),(if success?(5-proj-7-tuple(v_597)) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_597)) else fail-any) else fail-any))) in
        {94}let v_615: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_597)) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_597)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_611))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (v_612,v_613,v_614) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_616: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_597)) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-2-tuple(v_610))))) then dhexp(2-proj-2-tuple(v_610),5-proj-7-tuple(v_597)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_615)) then cipherstatepack(2-proj-3-tuple(v_615),minnonce) else fail-any),1-proj-3-tuple(v_615),3-proj-3-tuple(v_611)) else fail-any) else fail-any) else fail-any)) in
        {96}let v_617: bitstring = catch-fail(symmetricstateunpack(v_616)) in
        {97}let v_618: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {98}let v_619: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_618),2-proj-2-tuple(v_618),3-proj-3-tuple(v_617),msg_c(alice,bob))) in
        {99}let v_620: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {100}let v_621: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_618))) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then cipherstatepack(1-proj-2-tuple(v_620),increment_nonce(2-proj-2-tuple(v_618))) else fail-any) else fail-any)) in
        {101}let v_622: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (v_621,v_619) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_623: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) in
        {103}let v_624: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_622)) && success?(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {104}let v_625: bitstring = catch-fail((if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_624) then (v_624,2-proj-2-tuple(v_622)) else fail-any) else fail-any) else fail-any)) in
        {105}let v_626: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_625),v_600,3-proj-7-tuple(v_597),4-proj-7-tuple(v_597),5-proj-7-tuple(v_597),6-proj-7-tuple(v_597),7-proj-7-tuple(v_597))) in
        {106}let v_627: bitstring = catch-fail(concat3(1-proj-3-tuple(v_598),2-proj-2-tuple(v_609),2-proj-2-tuple(v_625))) in
        {107}let (hs_628: handshakestate,re_629: key,message_c: bitstring) = (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-7-tuple(v_597))))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then (if not-caught-fail(v_600) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then (if not-caught-fail(v_616) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_626,5-proj-7-tuple(v_597),v_627) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {108}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {109}insert statestore(alice,bob,statepack_d(hs_628));
        {110}out(pub, message_c)
    ) | (
        {130}get statestore(=alice,=bob,statepack_d(hs_630: handshakestate)) in
        {112}in(pub, message_d: bitstring);
        {113}let v_631: bitstring = catch-fail(handshakestateunpack(hs_630)) in
        {114}let v_632: bitstring = catch-fail(deconcat3(message_d)) in
        {115}let v_633: bool = catch-fail(true) in
        {116}let v_634: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_631))) in
        {117}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {118}let v_636: aead = catch-fail(decrypt(1-proj-2-tuple(v_635),2-proj-2-tuple(v_635),3-proj-3-tuple(v_634),3-proj-3-tuple(v_632))) in
        {119}let v_637: bitstring = catch-fail(aeadunpack(v_636)) in
        {120}let v_638: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {121}let v_639: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_635))) && success?(1-proj-3-tuple(v_634))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then cipherstatepack(1-proj-2-tuple(v_638),increment_nonce(2-proj-2-tuple(v_635))) else fail-any) else fail-any)) in
        {122}let v_640: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && (success?(3-proj-3-tuple(v_634)) && success?(1-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_636) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then (if not-caught-fail(v_639) then (v_639,3-proj-3-tuple(v_637),1-proj-3-tuple(v_637)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_641: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) in
        {124}let v_642: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_641),hash(3-proj-3-tuple(v_641),3-proj-3-tuple(v_632))) else fail-any) else fail-any)) in
        {125}let v_643: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(1-proj-7-tuple(v_631))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if not-caught-fail(v_642) then (v_642,2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_644: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_643),2-proj-7-tuple(v_631),3-proj-7-tuple(v_631),4-proj-7-tuple(v_631),5-proj-7-tuple(v_631),6-proj-7-tuple(v_631),7-proj-7-tuple(v_631))) in
        {127}let (hs_645: handshakestate,re_646: key,plaintext_d: bitstring,valid_647: bool) = (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-7-tuple(v_631))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_633) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (v_633 && 3-proj-3-tuple(v_643)) then (if not-caught-fail(v_644) then (v_644,getpublickey(3-proj-7-tuple(v_631)),2-proj-3-tuple(v_643),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {128}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_647);
        {129}insert statestore(alice,bob,statepack_e(hs_645))
    ) | (
        {156}get statestore(=alice,=bob,statepack_e(hs_648: handshakestate)) in
        {131}let v_649: bitstring = catch-fail(handshakestateunpack(hs_648)) in
        {132}let v_650: bitstring = catch-fail((empty,empty,empty)) in
        {133}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_649))) in
        {134}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {135}let v_653: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_652),2-proj-2-tuple(v_652),3-proj-3-tuple(v_651),msg_e(alice,bob))) in
        {136}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {137}let v_655: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_652))) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then cipherstatepack(1-proj-2-tuple(v_654),increment_nonce(2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {138}let v_656: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_651)) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_653) then (if not-caught-fail(v_655) then (v_655,v_653) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_657: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) in
        {140}let v_658: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_656)) && success?(symmetricstatepack(1-proj-2-tuple(v_656),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_657),hash(3-proj-3-tuple(v_657),2-proj-2-tuple(v_656))) else fail-any) else fail-any)) in
        {141}let v_659: bitstring = catch-fail((if success?(1-proj-7-tuple(v_649)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-2-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,2-proj-2-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {142}let v_660: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_659),2-proj-7-tuple(v_649),3-proj-7-tuple(v_649),4-proj-7-tuple(v_649),5-proj-7-tuple(v_649),6-proj-7-tuple(v_649),7-proj-7-tuple(v_649))) in
        {143}let v_661: bitstring = catch-fail(concat3(1-proj-3-tuple(v_650),2-proj-3-tuple(v_650),2-proj-2-tuple(v_659))) in
        {144}let v_662: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_659))) in
        {145}let v_663: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_662),zero)) in
        {146}let v_664: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_662),zero)) in
        {147}let v_665: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_662),zero)) in
        {148}let v_666: bitstring = catch-fail((if success?(2-proj-3-tuple(v_662)) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (v_663,v_664,v_665) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {149}let v_667: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_666)) then cipherstatepack(1-proj-3-tuple(v_666),minnonce) else fail-any)) in
        {150}let v_668: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_666)) then cipherstatepack(2-proj-3-tuple(v_666),minnonce) else fail-any)) in
        {151}let v_669: bitstring = catch-fail((if success?(1-proj-2-tuple(v_659)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (1-proj-2-tuple(v_659),v_667,v_668) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {152}let (hs_670: handshakestate,re_671: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-7-tuple(v_649))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_661) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (v_660,5-proj-7-tuple(v_649),v_661,2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {153}event SendMsg(alice,bob,stage_e,msg_e(alice,bob),true);
        {154}insert statestore(alice,bob,statepack_f(hs_670));
        {155}out(pub, message_e)
    ) | (
        {157}event LeakS(phase0,alice);
        {158}out(pub, key_s(alice))
    ) | (
        {159}phase 1;
        {160}event LeakS(phase1,alice);
        {161}out(pub, key_s(alice))
    )
) | (
    {162}let s_672: keypair = keypairpack(empty,empty) in
    {163}out(pub, getpublickey(s_672));
    (
        {164}let e_673: keypair = keypairpack(empty,empty) in
        {165}let v_674: key = catch-fail(dhexp(key_s(charlie),g)) in
        {166}let rs_675: key = getpublickey((if not-caught-fail(v_674) then keypairpack(v_674,key_s(charlie)) else fail-any)) in
        {167}let re_676: key = empty in
        {168}let v_677: bitstring = catch-fail(hash(somename,empty)) in
        {169}let v_678: key = catch-fail(v_677) in
        {170}let v_679: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {171}let v_680: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then symmetricstatepack(v_679,v_678,v_677) else fail-any) else fail-any) else fail-any))) in
        {172}let v_681: symmetricstate = catch-fail((if success?((if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if not-caught-fail(v_679) then symmetricstatepack(v_679,v_678,v_677) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then symmetricstatepack(1-proj-3-tuple(v_680),2-proj-3-tuple(v_680),hash(3-proj-3-tuple(v_680),empty)) else fail-any) else fail-any)) in
        {173}let v_682: bitstring = catch-fail(symmetricstateunpack(v_681)) in
        {174}let v_683: symmetricstate = catch-fail((if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),rs_675)) else fail-any)) in
        {175}let hs_684: handshakestate = (if not-caught-fail(v_681) then (if not-caught-fail(v_683) then handshakestatepack(v_683,s_672,e_673,rs_675,re_676,empty,true) else fail-any) else fail-any) in
        {176}insert statestore(alice,charlie,statepack_a(hs_684))
    ) | (
        {199}get statestore(=alice,=charlie,statepack_a(hs_685: handshakestate)) in
        {177}let v_686: bitstring = catch-fail(handshakestateunpack(hs_685)) in
        {178}let v_687: bitstring = catch-fail((empty,empty,empty)) in
        {179}let v_688: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {180}let v_689: keypair = catch-fail((if not-caught-fail(v_688) then keypairpack(v_688,key_e(alice,charlie)) else fail-any)) in
        {181}let v_690: bitstring = catch-fail(getpublickey(v_689)) in
        {182}let v_691: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_686))) in
        {183}let v_692: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_686)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then symmetricstatepack(1-proj-3-tuple(v_691),2-proj-3-tuple(v_691),hash(3-proj-3-tuple(v_691),v_690)) else fail-any) else fail-any)) in
        {184}let v_693: bitstring = catch-fail(symmetricstateunpack(v_692)) in
        {185}let v_694: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_693))) in
        {186}let v_695: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_694),2-proj-2-tuple(v_694),3-proj-3-tuple(v_693),msg_a(alice,charlie))) in
        {187}let v_696: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_693))) in
        {188}let v_697: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_694))) && success?(1-proj-3-tuple(v_693))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then cipherstatepack(1-proj-2-tuple(v_696),increment_nonce(2-proj-2-tuple(v_694))) else fail-any) else fail-any)) in
        {189}let v_698: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_693)) && success?(1-proj-3-tuple(v_693))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_697) then (v_697,v_695) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_699: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_698),2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)))) in
        {191}let v_700: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_698)) && success?(symmetricstatepack(1-proj-2-tuple(v_698),2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),hash(3-proj-3-tuple(v_699),2-proj-2-tuple(v_698))) else fail-any) else fail-any)) in
        {192}let v_701: bitstring = catch-fail((if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then (if not-caught-fail(v_700) then (v_700,2-proj-2-tuple(v_698)) else fail-any) else fail-any) else fail-any)) in
        {193}let v_702: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_701),2-proj-7-tuple(v_686),v_689,4-proj-7-tuple(v_686),5-proj-7-tuple(v_686),6-proj-7-tuple(v_686),7-proj-7-tuple(v_686))) in
        {194}let v_703: bitstring = catch-fail(concat3(v_690,2-proj-3-tuple(v_687),2-proj-2-tuple(v_701))) in
        {195}let (hs_704: handshakestate,re_705: key,message_a_706: bitstring) = (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-7-tuple(v_686))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then (if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (v_702,5-proj-7-tuple(v_686),v_703) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {196}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {197}insert statestore(alice,charlie,statepack_b(hs_704));
        {198}out(pub, message_a_706)
    ) | (
        {235}get statestore(=alice,=charlie,statepack_b(hs_707: handshakestate)) in
        {200}in(pub, message_b_708: bitstring);
        {201}let v_709: bitstring = catch-fail(handshakestateunpack(hs_707)) in
        {202}let v_710: bitstring = catch-fail(deconcat3(message_b_708)) in
        {203}let v_711: bool = catch-fail(true) in
        {204}let v_712: key = catch-fail(1-proj-3-tuple(v_710)) in
        {205}let v_713: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_709))) in
        {206}let v_714: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_709)) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack(1-proj-3-tuple(v_713),2-proj-3-tuple(v_713),hash(3-proj-3-tuple(v_713),v_712)) else fail-any) else fail-any)) in
        {207}let v_715: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_709))) in
        {208}let v_716: bitstring = catch-fail(symmetricstateunpack(v_714)) in
        {209}let v_717: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_716),(if success?(3-proj-7-tuple(v_709)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),v_712) else fail-any) else fail-any))) in
        {210}let v_718: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_716),(if success?(3-proj-7-tuple(v_709)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),v_712) else fail-any) else fail-any))) in
        {211}let v_719: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_716),(if success?(3-proj-7-tuple(v_709)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),v_712) else fail-any) else fail-any))) in
        {212}let v_720: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_709)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),v_712) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_716))) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (v_717,v_718,v_719) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {213}let v_721: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_709)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then dhexp(2-proj-2-tuple(v_715),v_712) else fail-any) else fail-any)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_720)) then cipherstatepack(2-proj-3-tuple(v_720),minnonce) else fail-any),1-proj-3-tuple(v_720),3-proj-3-tuple(v_716)) else fail-any) else fail-any) else fail-any)) in
        {214}let v_722: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_709))) in
        {215}let v_723: bitstring = catch-fail(symmetricstateunpack(v_721)) in
        {216}let v_724: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_723),(if (success?(4-proj-7-tuple(v_709)) && success?(3-proj-7-tuple(v_709))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),4-proj-7-tuple(v_709)) else fail-any) else fail-any))) in
        {217}let v_725: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_723),(if (success?(4-proj-7-tuple(v_709)) && success?(3-proj-7-tuple(v_709))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),4-proj-7-tuple(v_709)) else fail-any) else fail-any))) in
        {218}let v_726: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_723),(if (success?(4-proj-7-tuple(v_709)) && success?(3-proj-7-tuple(v_709))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),4-proj-7-tuple(v_709)) else fail-any) else fail-any))) in
        {219}let v_727: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_709)) && success?(3-proj-7-tuple(v_709))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),4-proj-7-tuple(v_709)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_723))) then (if not-caught-fail(v_724) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then (v_724,v_725,v_726) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {220}let v_728: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_709)) && success?(3-proj-7-tuple(v_709))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-2-tuple(v_722))))) then dhexp(2-proj-2-tuple(v_722),4-proj-7-tuple(v_709)) else fail-any) else fail-any)) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_727)) then cipherstatepack(2-proj-3-tuple(v_727),minnonce) else fail-any),1-proj-3-tuple(v_727),3-proj-3-tuple(v_723)) else fail-any) else fail-any) else fail-any)) in
        {221}let v_729: bitstring = catch-fail(symmetricstateunpack(v_728)) in
        {222}let v_730: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_729))) in
        {223}let v_731: aead = catch-fail(decrypt(1-proj-2-tuple(v_730),2-proj-2-tuple(v_730),3-proj-3-tuple(v_729),3-proj-3-tuple(v_710))) in
        {224}let v_732: bitstring = catch-fail(aeadunpack(v_731)) in
        {225}let v_733: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_729))) in
        {226}let v_734: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_730))) && success?(1-proj-3-tuple(v_729))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then cipherstatepack(1-proj-2-tuple(v_733),increment_nonce(2-proj-2-tuple(v_730))) else fail-any) else fail-any)) in
        {227}let v_735: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_710)) && (success?(3-proj-3-tuple(v_729)) && success?(1-proj-3-tuple(v_729)))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then (if not-caught-fail(v_731) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if not-caught-fail(v_734) then (v_734,3-proj-3-tuple(v_732),1-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_736: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)))) in
        {229}let v_737: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_710)) && success?(symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_736),hash(3-proj-3-tuple(v_736),3-proj-3-tuple(v_710))) else fail-any) else fail-any)) in
        {230}let v_738: bitstring = catch-fail((if success?(3-proj-3-tuple(v_710)) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if not-caught-fail(v_737) then (v_737,2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {231}let v_739: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_738),2-proj-7-tuple(v_709),3-proj-7-tuple(v_709),4-proj-7-tuple(v_709),v_712,6-proj-7-tuple(v_709),7-proj-7-tuple(v_709))) in
        {232}let (hs_740: handshakestate,re_741: key,plaintext_b_742: bitstring,valid_743: bool) = (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-7-tuple(v_709))))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then (if not-caught-fail(v_714) then (if not-caught-fail(v_721) then (if not-caught-fail(v_728) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (v_711 && 3-proj-3-tuple(v_738)) then (if not-caught-fail(v_739) then (v_739,getpublickey(3-proj-7-tuple(v_709)),2-proj-3-tuple(v_738),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {233}event RecvMsg(alice,charlie,stage_b,plaintext_b_742,valid_743);
        {234}insert statestore(alice,charlie,statepack_c(hs_740))
    ) | (
        {271}get statestore(=alice,=charlie,statepack_c(hs_744: handshakestate)) in
        {236}let v_745: bitstring = catch-fail(handshakestateunpack(hs_744)) in
        {237}let v_746: bitstring = catch-fail((empty,empty,empty)) in
        {238}let v_747: key = catch-fail(dhexp(key_s(alice),g)) in
        {239}let v_748: keypair = catch-fail((if not-caught-fail(v_747) then keypairpack(v_747,key_s(alice)) else fail-any)) in
        {240}let v_749: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_745))) in
        {241}let v_750: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_749))) in
        {242}let v_751: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_750),2-proj-2-tuple(v_750),3-proj-3-tuple(v_749),getpublickey(v_748))) in
        {243}let v_752: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_749))) in
        {244}let v_753: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_750))) && success?(1-proj-3-tuple(v_749))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-2-tuple(v_752))))) then cipherstatepack(1-proj-2-tuple(v_752),increment_nonce(2-proj-2-tuple(v_750))) else fail-any) else fail-any)) in
        {245}let v_754: bitstring = catch-fail((if (success?(getpublickey(v_748)) && (success?(3-proj-3-tuple(v_749)) && success?(1-proj-3-tuple(v_749)))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then (if not-caught-fail(v_751) then (if not-caught-fail(v_753) then (v_753,v_751) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_755: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_754),2-proj-3-tuple(v_749),3-proj-3-tuple(v_749)))) in
        {247}let v_756: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_754)) && success?(symmetricstatepack(1-proj-2-tuple(v_754),2-proj-3-tuple(v_749),3-proj-3-tuple(v_749)))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_755),hash(3-proj-3-tuple(v_755),2-proj-2-tuple(v_754))) else fail-any) else fail-any)) in
        {248}let v_757: bitstring = catch-fail((if (success?(getpublickey(v_748)) && success?(1-proj-7-tuple(v_745))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then (if not-caught-fail(v_756) then (v_756,2-proj-2-tuple(v_754)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_758: bitstring = catch-fail(keypairunpack(v_748)) in
        {250}let v_759: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_757))) in
        {251}let v_760: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {252}let v_761: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {253}let v_762: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_759),(if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {254}let v_763: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_745)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_759))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_760,v_761,v_762) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_764: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then dhexp(2-proj-2-tuple(v_758),5-proj-7-tuple(v_745)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_757))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_763)) then cipherstatepack(2-proj-3-tuple(v_763),minnonce) else fail-any),1-proj-3-tuple(v_763),3-proj-3-tuple(v_759)) else fail-any) else fail-any) else fail-any)) in
        {256}let v_765: bitstring = catch-fail(symmetricstateunpack(v_764)) in
        {257}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {258}let v_767: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_766),2-proj-2-tuple(v_766),3-proj-3-tuple(v_765),msg_c(alice,charlie))) in
        {259}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {260}let v_769: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_766))) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then cipherstatepack(1-proj-2-tuple(v_768),increment_nonce(2-proj-2-tuple(v_766))) else fail-any) else fail-any)) in
        {261}let v_770: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_765)) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_767) then (if not-caught-fail(v_769) then (v_769,v_767) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_771: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_770),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) in
        {263}let v_772: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_770)) && success?(symmetricstatepack(1-proj-2-tuple(v_770),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_771),hash(3-proj-3-tuple(v_771),2-proj-2-tuple(v_770))) else fail-any) else fail-any)) in
        {264}let v_773: bitstring = catch-fail((if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then (if not-caught-fail(v_772) then (v_772,2-proj-2-tuple(v_770)) else fail-any) else fail-any) else fail-any)) in
        {265}let v_774: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_773),v_748,3-proj-7-tuple(v_745),4-proj-7-tuple(v_745),5-proj-7-tuple(v_745),6-proj-7-tuple(v_745),7-proj-7-tuple(v_745))) in
        {266}let v_775: bitstring = catch-fail(concat3(1-proj-3-tuple(v_746),2-proj-2-tuple(v_757),2-proj-2-tuple(v_773))) in
        {267}let (hs_776: handshakestate,re_777: key,message_c_778: bitstring) = (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-7-tuple(v_745))))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if not-caught-fail(v_748) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then (if not-caught-fail(v_764) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (v_774,5-proj-7-tuple(v_745),v_775) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {268}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {269}insert statestore(alice,charlie,statepack_d(hs_776));
        {270}out(pub, message_c_778)
    ) | (
        {290}get statestore(=alice,=charlie,statepack_d(hs_779: handshakestate)) in
        {272}in(pub, message_d_780: bitstring);
        {273}let v_781: bitstring = catch-fail(handshakestateunpack(hs_779)) in
        {274}let v_782: bitstring = catch-fail(deconcat3(message_d_780)) in
        {275}let v_783: bool = catch-fail(true) in
        {276}let v_784: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_781))) in
        {277}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {278}let v_786: aead = catch-fail(decrypt(1-proj-2-tuple(v_785),2-proj-2-tuple(v_785),3-proj-3-tuple(v_784),3-proj-3-tuple(v_782))) in
        {279}let v_787: bitstring = catch-fail(aeadunpack(v_786)) in
        {280}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {281}let v_789: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_785))) && success?(1-proj-3-tuple(v_784))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then cipherstatepack(1-proj-2-tuple(v_788),increment_nonce(2-proj-2-tuple(v_785))) else fail-any) else fail-any)) in
        {282}let v_790: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && (success?(3-proj-3-tuple(v_784)) && success?(1-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,3-proj-3-tuple(v_787),1-proj-3-tuple(v_787)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_791: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) in
        {284}let v_792: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_791),hash(3-proj-3-tuple(v_791),3-proj-3-tuple(v_782))) else fail-any) else fail-any)) in
        {285}let v_793: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_782)) && success?(1-proj-7-tuple(v_781))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_792) then (v_792,2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_794: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_793),2-proj-7-tuple(v_781),3-proj-7-tuple(v_781),4-proj-7-tuple(v_781),5-proj-7-tuple(v_781),6-proj-7-tuple(v_781),7-proj-7-tuple(v_781))) in
        {287}let (hs_795: handshakestate,re_796: key,plaintext_d_797: bitstring,valid_798: bool) = (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-7-tuple(v_781))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (v_783 && 3-proj-3-tuple(v_793)) then (if not-caught-fail(v_794) then (v_794,getpublickey(3-proj-7-tuple(v_781)),2-proj-3-tuple(v_793),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {288}event RecvMsg(alice,charlie,stage_d,plaintext_d_797,valid_798);
        {289}insert statestore(alice,charlie,statepack_e(hs_795))
    ) | (
        {316}get statestore(=alice,=charlie,statepack_e(hs_799: handshakestate)) in
        {291}let v_800: bitstring = catch-fail(handshakestateunpack(hs_799)) in
        {292}let v_801: bitstring = catch-fail((empty,empty,empty)) in
        {293}let v_802: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_800))) in
        {294}let v_803: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {295}let v_804: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_803),2-proj-2-tuple(v_803),3-proj-3-tuple(v_802),msg_e(alice,charlie))) in
        {296}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_802))) in
        {297}let v_806: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_803))) && success?(1-proj-3-tuple(v_802))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then cipherstatepack(1-proj-2-tuple(v_805),increment_nonce(2-proj-2-tuple(v_803))) else fail-any) else fail-any)) in
        {298}let v_807: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_802)) && success?(1-proj-3-tuple(v_802))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-2-tuple(v_803))))) then (if not-caught-fail(v_804) then (if not-caught-fail(v_806) then (v_806,v_804) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {299}let v_808: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_807),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) in
        {300}let v_809: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_807)) && success?(symmetricstatepack(1-proj-2-tuple(v_807),2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then symmetricstatepack(1-proj-3-tuple(v_808),2-proj-3-tuple(v_808),hash(3-proj-3-tuple(v_808),2-proj-2-tuple(v_807))) else fail-any) else fail-any)) in
        {301}let v_810: bitstring = catch-fail((if success?(1-proj-7-tuple(v_800)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then (if not-caught-fail(v_809) then (v_809,2-proj-2-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {302}let v_811: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_810),2-proj-7-tuple(v_800),3-proj-7-tuple(v_800),4-proj-7-tuple(v_800),5-proj-7-tuple(v_800),6-proj-7-tuple(v_800),7-proj-7-tuple(v_800))) in
        {303}let v_812: bitstring = catch-fail(concat3(1-proj-3-tuple(v_801),2-proj-3-tuple(v_801),2-proj-2-tuple(v_810))) in
        {304}let v_813: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_810))) in
        {305}let v_814: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_813),zero)) in
        {306}let v_815: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_813),zero)) in
        {307}let v_816: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_813),zero)) in
        {308}let v_817: bitstring = catch-fail((if success?(2-proj-3-tuple(v_813)) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (if not-caught-fail(v_816) then (v_814,v_815,v_816) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {309}let v_818: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_817)) then cipherstatepack(1-proj-3-tuple(v_817),minnonce) else fail-any)) in
        {310}let v_819: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_817)) then cipherstatepack(2-proj-3-tuple(v_817),minnonce) else fail-any)) in
        {311}let v_820: bitstring = catch-fail((if success?(1-proj-2-tuple(v_810)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if not-caught-fail(v_818) then (if not-caught-fail(v_819) then (1-proj-2-tuple(v_810),v_818,v_819) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {312}let (hs_821: handshakestate,re_822: key,message_e_823: bitstring,cs1_824: cipherstate,cs2_825: cipherstate) = (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-7-tuple(v_800))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then (if not-caught-fail(v_811) then (if not-caught-fail(v_812) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (v_811,5-proj-7-tuple(v_800),v_812,2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {313}event SendMsg(alice,charlie,stage_e,msg_e(alice,charlie),true);
        {314}insert statestore(alice,charlie,statepack_f(hs_821));
        {315}out(pub, message_e_823)
    ) | (
        {317}event LeakS(phase0,alice);
        {318}out(pub, key_s(alice))
    ) | (
        {319}phase 1;
        {320}event LeakS(phase1,alice);
        {321}out(pub, key_s(alice))
    )
) | (
    {322}let v_826: key = catch-fail(dhexp(key_s(bob),g)) in
    {323}let s_827: keypair = (if not-caught-fail(v_826) then keypairpack(v_826,key_s(bob)) else fail-any) in
    {324}out(pub, getpublickey(s_827));
    (
        {325}let e_828: keypair = keypairpack(empty,empty) in
        {326}let rs_829: key = empty in
        {327}let re_830: key = empty in
        {328}let v_831: bitstring = catch-fail(hash(somename,empty)) in
        {329}let v_832: key = catch-fail(v_831) in
        {330}let v_833: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {331}let v_834: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_831) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then symmetricstatepack(v_833,v_832,v_831) else fail-any) else fail-any) else fail-any))) in
        {332}let v_835: symmetricstate = catch-fail((if success?((if not-caught-fail(v_831) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then symmetricstatepack(v_833,v_832,v_831) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_834),hash(3-proj-3-tuple(v_834),empty)) else fail-any) else fail-any)) in
        {333}let v_836: bitstring = catch-fail(symmetricstateunpack(v_835)) in
        {334}let v_837: symmetricstate = catch-fail((if success?(getpublickey(s_827)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then symmetricstatepack(1-proj-3-tuple(v_836),2-proj-3-tuple(v_836),hash(3-proj-3-tuple(v_836),getpublickey(s_827))) else fail-any) else fail-any)) in
        {335}let hs_838: handshakestate = (if not-caught-fail(v_835) then (if not-caught-fail(v_837) then handshakestatepack(v_837,s_827,e_828,rs_829,re_830,empty,false) else fail-any) else fail-any) in
        {336}insert statestore(bob,alice,statepack_a(hs_838))
    ) | (
        {358}get statestore(=bob,=alice,statepack_a(hs_839: handshakestate)) in
        {337}in(pub, message_a_840: bitstring);
        {338}let v_841: bitstring = catch-fail(handshakestateunpack(hs_839)) in
        {339}let v_842: bitstring = catch-fail(deconcat3(message_a_840)) in
        {340}let v_843: bool = catch-fail(true) in
        {341}let v_844: key = catch-fail(1-proj-3-tuple(v_842)) in
        {342}let v_845: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_841))) in
        {343}let v_846: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_841)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),v_844)) else fail-any) else fail-any)) in
        {344}let v_847: bitstring = catch-fail(symmetricstateunpack(v_846)) in
        {345}let v_848: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_847))) in
        {346}let v_849: aead = catch-fail(decrypt(1-proj-2-tuple(v_848),2-proj-2-tuple(v_848),3-proj-3-tuple(v_847),3-proj-3-tuple(v_842))) in
        {347}let v_850: bitstring = catch-fail(aeadunpack(v_849)) in
        {348}let v_851: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_847))) in
        {349}let v_852: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_848))) && success?(1-proj-3-tuple(v_847))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then cipherstatepack(1-proj-2-tuple(v_851),increment_nonce(2-proj-2-tuple(v_848))) else fail-any) else fail-any)) in
        {350}let v_853: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && (success?(3-proj-3-tuple(v_847)) && success?(1-proj-3-tuple(v_847)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-2-tuple(v_848))))) then (if not-caught-fail(v_849) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if not-caught-fail(v_852) then (v_852,3-proj-3-tuple(v_850),1-proj-3-tuple(v_850)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {351}let v_854: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_847),3-proj-3-tuple(v_847)))) in
        {352}let v_855: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_847),3-proj-3-tuple(v_847)))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),3-proj-3-tuple(v_842))) else fail-any) else fail-any)) in
        {353}let v_856: bitstring = catch-fail((if success?(3-proj-3-tuple(v_842)) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-3-tuple(v_847))))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then (if not-caught-fail(v_855) then (v_855,2-proj-3-tuple(v_853),3-proj-3-tuple(v_853)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {354}let v_857: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_856),2-proj-7-tuple(v_841),3-proj-7-tuple(v_841),4-proj-7-tuple(v_841),v_844,6-proj-7-tuple(v_841),7-proj-7-tuple(v_841))) in
        {355}let (hs_858: handshakestate,re_859: key,plaintext_a: bitstring,valid_860: bool) = (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-7-tuple(v_841))))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (v_843 && 3-proj-3-tuple(v_856)) then (if not-caught-fail(v_857) then (v_857,getpublickey(3-proj-7-tuple(v_841)),2-proj-3-tuple(v_856),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {356}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_860);
        {357}insert statestore(bob,alice,statepack_b(hs_858))
    ) | (
        {395}get statestore(=bob,=alice,statepack_b(hs_861: handshakestate)) in
        {359}let v_862: bitstring = catch-fail(handshakestateunpack(hs_861)) in
        {360}let v_863: bitstring = catch-fail((empty,empty,empty)) in
        {361}let v_864: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {362}let v_865: keypair = catch-fail((if not-caught-fail(v_864) then keypairpack(v_864,key_e(bob,alice)) else fail-any)) in
        {363}let v_866: bitstring = catch-fail(getpublickey(v_865)) in
        {364}let v_867: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_862))) in
        {365}let v_868: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_862)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then symmetricstatepack(1-proj-3-tuple(v_867),2-proj-3-tuple(v_867),hash(3-proj-3-tuple(v_867),v_866)) else fail-any) else fail-any)) in
        {366}let v_869: bitstring = catch-fail(keypairunpack(v_865)) in
        {367}let v_870: bitstring = catch-fail(symmetricstateunpack(v_868)) in
        {368}let v_871: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_870),(if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {369}let v_872: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_870),(if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {370}let v_873: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_870),(if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {371}let v_874: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_870))) then (if not-caught-fail(v_871) then (if not-caught-fail(v_872) then (if not-caught-fail(v_873) then (v_871,v_872,v_873) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_875: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_862)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then dhexp(2-proj-2-tuple(v_869),5-proj-7-tuple(v_862)) else fail-any) else fail-any)) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_874)) then cipherstatepack(2-proj-3-tuple(v_874),minnonce) else fail-any),1-proj-3-tuple(v_874),3-proj-3-tuple(v_870)) else fail-any) else fail-any) else fail-any)) in
        {373}let v_876: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_862))) in
        {374}let v_877: bitstring = catch-fail(symmetricstateunpack(v_875)) in
        {375}let v_878: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_877),(if (success?(5-proj-7-tuple(v_862)) && success?(2-proj-7-tuple(v_862))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {376}let v_879: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_877),(if (success?(5-proj-7-tuple(v_862)) && success?(2-proj-7-tuple(v_862))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {377}let v_880: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_877),(if (success?(5-proj-7-tuple(v_862)) && success?(2-proj-7-tuple(v_862))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_862)) else fail-any) else fail-any))) in
        {378}let v_881: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_862)) && success?(2-proj-7-tuple(v_862))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_862)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_877))) then (if not-caught-fail(v_878) then (if not-caught-fail(v_879) then (if not-caught-fail(v_880) then (v_878,v_879,v_880) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {379}let v_882: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_862)) && success?(2-proj-7-tuple(v_862))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_862)) else fail-any) else fail-any)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_881)) then cipherstatepack(2-proj-3-tuple(v_881),minnonce) else fail-any),1-proj-3-tuple(v_881),3-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any)) in
        {380}let v_883: bitstring = catch-fail(symmetricstateunpack(v_882)) in
        {381}let v_884: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_883))) in
        {382}let v_885: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_884),2-proj-2-tuple(v_884),3-proj-3-tuple(v_883),msg_b(bob,alice))) in
        {383}let v_886: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_883))) in
        {384}let v_887: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_884))) && success?(1-proj-3-tuple(v_883))) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then cipherstatepack(1-proj-2-tuple(v_886),increment_nonce(2-proj-2-tuple(v_884))) else fail-any) else fail-any)) in
        {385}let v_888: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_883)) && success?(1-proj-3-tuple(v_883))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then (if not-caught-fail(v_885) then (if not-caught-fail(v_887) then (v_887,v_885) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {386}let v_889: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_888),2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)))) in
        {387}let v_890: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_888)) && success?(symmetricstatepack(1-proj-2-tuple(v_888),2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then symmetricstatepack(1-proj-3-tuple(v_889),2-proj-3-tuple(v_889),hash(3-proj-3-tuple(v_889),2-proj-2-tuple(v_888))) else fail-any) else fail-any)) in
        {388}let v_891: bitstring = catch-fail((if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then (if not-caught-fail(v_890) then (v_890,2-proj-2-tuple(v_888)) else fail-any) else fail-any) else fail-any)) in
        {389}let v_892: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_891),2-proj-7-tuple(v_862),v_865,4-proj-7-tuple(v_862),5-proj-7-tuple(v_862),6-proj-7-tuple(v_862),7-proj-7-tuple(v_862))) in
        {390}let v_893: bitstring = catch-fail(concat3(v_866,2-proj-3-tuple(v_863),2-proj-2-tuple(v_891))) in
        {391}let (hs_894: handshakestate,re_895: key,message_b_896: bitstring) = (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-7-tuple(v_862))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if not-caught-fail(v_865) then (if not-caught-fail(v_866) then (if not-caught-fail(v_868) then (if not-caught-fail(v_875) then (if not-caught-fail(v_882) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then (if not-caught-fail(v_892) then (if not-caught-fail(v_893) then (v_892,5-proj-7-tuple(v_862),v_893) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {392}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {393}insert statestore(bob,alice,statepack_c(hs_894));
        {394}out(pub, message_b_896)
    ) | (
        {433}get statestore(=bob,=alice,statepack_c(hs_897: handshakestate)) in
        {396}in(pub, message_c_898: bitstring);
        {397}let v_899: bitstring = catch-fail(handshakestateunpack(hs_897)) in
        {398}let v_900: bitstring = catch-fail(deconcat3(message_c_898)) in
        {399}let v_901: bool = catch-fail(true) in
        {400}let v_902: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_899))) in
        {401}let v_903: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_902))) in
        {402}let v_904: aead = catch-fail(decrypt(1-proj-2-tuple(v_903),2-proj-2-tuple(v_903),3-proj-3-tuple(v_902),2-proj-3-tuple(v_900))) in
        {403}let v_905: bitstring = catch-fail(aeadunpack(v_904)) in
        {404}let v_906: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_902))) in
        {405}let v_907: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_903))) && success?(1-proj-3-tuple(v_902))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then cipherstatepack(1-proj-2-tuple(v_906),increment_nonce(2-proj-2-tuple(v_903))) else fail-any) else fail-any)) in
        {406}let v_908: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_900)) && (success?(3-proj-3-tuple(v_902)) && success?(1-proj-3-tuple(v_902)))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if not-caught-fail(v_904) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if not-caught-fail(v_907) then (v_907,3-proj-3-tuple(v_905),1-proj-3-tuple(v_905)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_909: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)))) in
        {408}let v_910: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_900)) && success?(symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then symmetricstatepack(1-proj-3-tuple(v_909),2-proj-3-tuple(v_909),hash(3-proj-3-tuple(v_909),2-proj-3-tuple(v_900))) else fail-any) else fail-any)) in
        {409}let v_911: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_900)) && success?(1-proj-7-tuple(v_899))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_910) then (v_910,2-proj-3-tuple(v_908),3-proj-3-tuple(v_908)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {410}let v_912: key = catch-fail(2-proj-3-tuple(v_911)) in
        {411}let v_913: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_899))) in
        {412}let v_914: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_911))) in
        {413}let v_915: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_914),(if success?(3-proj-7-tuple(v_899)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),v_912) else fail-any) else fail-any))) in
        {414}let v_916: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_914),(if success?(3-proj-7-tuple(v_899)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),v_912) else fail-any) else fail-any))) in
        {415}let v_917: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_914),(if success?(3-proj-7-tuple(v_899)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),v_912) else fail-any) else fail-any))) in
        {416}let v_918: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_899)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),v_912) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_914))) then (if not-caught-fail(v_915) then (if not-caught-fail(v_916) then (if not-caught-fail(v_917) then (v_915,v_916,v_917) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {417}let v_919: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_899)) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then dhexp(2-proj-2-tuple(v_913),v_912) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_911))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_918)) then cipherstatepack(2-proj-3-tuple(v_918),minnonce) else fail-any),1-proj-3-tuple(v_918),3-proj-3-tuple(v_914)) else fail-any) else fail-any) else fail-any)) in
        {418}let v_920: bitstring = catch-fail(symmetricstateunpack(v_919)) in
        {419}let v_921: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_920))) in
        {420}let v_922: aead = catch-fail(decrypt(1-proj-2-tuple(v_921),2-proj-2-tuple(v_921),3-proj-3-tuple(v_920),3-proj-3-tuple(v_900))) in
        {421}let v_923: bitstring = catch-fail(aeadunpack(v_922)) in
        {422}let v_924: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_920))) in
        {423}let v_925: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_921))) && success?(1-proj-3-tuple(v_920))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then cipherstatepack(1-proj-2-tuple(v_924),increment_nonce(2-proj-2-tuple(v_921))) else fail-any) else fail-any)) in
        {424}let v_926: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_900)) && (success?(3-proj-3-tuple(v_920)) && success?(1-proj-3-tuple(v_920)))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then (if not-caught-fail(v_922) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if not-caught-fail(v_925) then (v_925,3-proj-3-tuple(v_923),1-proj-3-tuple(v_923)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {425}let v_927: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_926),2-proj-3-tuple(v_920),3-proj-3-tuple(v_920)))) in
        {426}let v_928: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_900)) && success?(symmetricstatepack(1-proj-3-tuple(v_926),2-proj-3-tuple(v_920),3-proj-3-tuple(v_920)))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_927),hash(3-proj-3-tuple(v_927),3-proj-3-tuple(v_900))) else fail-any) else fail-any)) in
        {427}let v_929: bitstring = catch-fail((if success?(3-proj-3-tuple(v_900)) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then (if not-caught-fail(v_928) then (v_928,2-proj-3-tuple(v_926),3-proj-3-tuple(v_926)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_930: key = catch-fail(dhexp(key_s(alice),g)) in
        {429}let v_931: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_929),2-proj-7-tuple(v_899),3-proj-7-tuple(v_899),v_912,5-proj-7-tuple(v_899),6-proj-7-tuple(v_899),7-proj-7-tuple(v_899))) in
        {430}let (hs_932: handshakestate,re_933: key,plaintext_c: bitstring,valid_934: bool) = (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-7-tuple(v_899))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if not-caught-fail(v_901) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if not-caught-fail(v_912) then (if not-caught-fail(v_919) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if ((3-proj-3-tuple(v_911) && 3-proj-3-tuple(v_929)) && (v_912 = getpublickey((if not-caught-fail(v_930) then keypairpack(v_930,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_931) then (v_931,getpublickey(3-proj-7-tuple(v_899)),2-proj-3-tuple(v_929),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {431}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_934);
        {432}insert statestore(bob,alice,statepack_d(hs_932))
    ) | (
        {451}get statestore(=bob,=alice,statepack_d(hs_935: handshakestate)) in
        {434}let v_936: bitstring = catch-fail(handshakestateunpack(hs_935)) in
        {435}let v_937: bitstring = catch-fail((empty,empty,empty)) in
        {436}let v_938: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_936))) in
        {437}let v_939: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_938))) in
        {438}let v_940: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_939),2-proj-2-tuple(v_939),3-proj-3-tuple(v_938),msg_d(bob,alice))) in
        {439}let v_941: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_938))) in
        {440}let v_942: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_939))) && success?(1-proj-3-tuple(v_938))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-2-tuple(v_941))))) then cipherstatepack(1-proj-2-tuple(v_941),increment_nonce(2-proj-2-tuple(v_939))) else fail-any) else fail-any)) in
        {441}let v_943: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_938)) && success?(1-proj-3-tuple(v_938))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-2-tuple(v_939))))) then (if not-caught-fail(v_940) then (if not-caught-fail(v_942) then (v_942,v_940) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {442}let v_944: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_943),2-proj-3-tuple(v_938),3-proj-3-tuple(v_938)))) in
        {443}let v_945: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_943)) && success?(symmetricstatepack(1-proj-2-tuple(v_943),2-proj-3-tuple(v_938),3-proj-3-tuple(v_938)))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then symmetricstatepack(1-proj-3-tuple(v_944),2-proj-3-tuple(v_944),hash(3-proj-3-tuple(v_944),2-proj-2-tuple(v_943))) else fail-any) else fail-any)) in
        {444}let v_946: bitstring = catch-fail((if success?(1-proj-7-tuple(v_936)) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then (if not-caught-fail(v_945) then (v_945,2-proj-2-tuple(v_943)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {445}let v_947: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_946),2-proj-7-tuple(v_936),3-proj-7-tuple(v_936),4-proj-7-tuple(v_936),5-proj-7-tuple(v_936),6-proj-7-tuple(v_936),7-proj-7-tuple(v_936))) in
        {446}let v_948: bitstring = catch-fail(concat3(1-proj-3-tuple(v_937),2-proj-3-tuple(v_937),2-proj-2-tuple(v_946))) in
        {447}let (hs_949: handshakestate,re_950: key,message_d_951: bitstring) = (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-7-tuple(v_936))))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then (if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (v_947,5-proj-7-tuple(v_936),v_948) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {448}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {449}insert statestore(bob,alice,statepack_e(hs_949));
        {450}out(pub, message_d_951)
    ) | (
        {479}get statestore(=bob,=alice,statepack_e(hs_952: handshakestate)) in
        {452}in(pub, message_e_953: bitstring);
        {453}let v_954: bitstring = catch-fail(handshakestateunpack(hs_952)) in
        {454}let v_955: bitstring = catch-fail(deconcat3(message_e_953)) in
        {455}let v_956: bool = catch-fail(true) in
        {456}let v_957: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_954))) in
        {457}let v_958: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_957))) in
        {458}let v_959: aead = catch-fail(decrypt(1-proj-2-tuple(v_958),2-proj-2-tuple(v_958),3-proj-3-tuple(v_957),3-proj-3-tuple(v_955))) in
        {459}let v_960: bitstring = catch-fail(aeadunpack(v_959)) in
        {460}let v_961: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_957))) in
        {461}let v_962: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_958))) && success?(1-proj-3-tuple(v_957))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then cipherstatepack(1-proj-2-tuple(v_961),increment_nonce(2-proj-2-tuple(v_958))) else fail-any) else fail-any)) in
        {462}let v_963: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_955)) && (success?(3-proj-3-tuple(v_957)) && success?(1-proj-3-tuple(v_957)))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then (if not-caught-fail(v_959) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (if not-caught-fail(v_962) then (v_962,3-proj-3-tuple(v_960),1-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let v_964: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_963),2-proj-3-tuple(v_957),3-proj-3-tuple(v_957)))) in
        {464}let v_965: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_955)) && success?(symmetricstatepack(1-proj-3-tuple(v_963),2-proj-3-tuple(v_957),3-proj-3-tuple(v_957)))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_964),hash(3-proj-3-tuple(v_964),3-proj-3-tuple(v_955))) else fail-any) else fail-any)) in
        {465}let v_966: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_955)) && success?(1-proj-7-tuple(v_954))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if not-caught-fail(v_965) then (v_965,2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {466}let v_967: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_966),2-proj-7-tuple(v_954),3-proj-7-tuple(v_954),4-proj-7-tuple(v_954),5-proj-7-tuple(v_954),6-proj-7-tuple(v_954),7-proj-7-tuple(v_954))) in
        {467}let v_968: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_966))) in
        {468}let v_969: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_968),zero)) in
        {469}let v_970: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_968),zero)) in
        {470}let v_971: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_968),zero)) in
        {471}let v_972: bitstring = catch-fail((if success?(2-proj-3-tuple(v_968)) then (if not-caught-fail(v_969) then (if not-caught-fail(v_970) then (if not-caught-fail(v_971) then (v_969,v_970,v_971) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {472}let v_973: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_972)) then cipherstatepack(1-proj-3-tuple(v_972),minnonce) else fail-any)) in
        {473}let v_974: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_972)) then cipherstatepack(2-proj-3-tuple(v_972),minnonce) else fail-any)) in
        {474}let v_975: bitstring = catch-fail((if success?(1-proj-3-tuple(v_966)) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_973) then (if not-caught-fail(v_974) then (1-proj-3-tuple(v_966),v_973,v_974) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {475}let (hs_976: handshakestate,re_977: key,plaintext_e: bitstring,valid_978: bool,cs1_979: cipherstate,cs2_980: cipherstate) = (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-7-tuple(v_954))))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if not-caught-fail(v_956) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if (v_956 && 3-proj-3-tuple(v_966)) then (if not-caught-fail(v_967) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (v_967,getpublickey(3-proj-7-tuple(v_954)),2-proj-3-tuple(v_966),true,2-proj-3-tuple(v_975),3-proj-3-tuple(v_975)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {476}event RecvMsg(bob,alice,stage_e,plaintext_e,valid_978);
        {477}insert statestore(bob,alice,statepack_f(hs_976));
        {478}event RecvEnd(valid_978)
    ) | (
        {480}event LeakS(phase0,bob);
        {481}out(pub, key_s(bob))
    ) | (
        {482}phase 1;
        {483}event LeakS(phase1,bob);
        {484}out(pub, key_s(bob))
    )
) | (
    {485}let v_981: key = catch-fail(dhexp(key_s(bob),g)) in
    {486}let s_982: keypair = (if not-caught-fail(v_981) then keypairpack(v_981,key_s(bob)) else fail-any) in
    {487}out(pub, getpublickey(s_982));
    (
        {488}let e_983: keypair = keypairpack(empty,empty) in
        {489}let rs_984: key = empty in
        {490}let re_985: key = empty in
        {491}let v_986: bitstring = catch-fail(hash(somename,empty)) in
        {492}let v_987: key = catch-fail(v_986) in
        {493}let v_988: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {494}let v_989: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then symmetricstatepack(v_988,v_987,v_986) else fail-any) else fail-any) else fail-any))) in
        {495}let v_990: symmetricstate = catch-fail((if success?((if not-caught-fail(v_986) then (if not-caught-fail(v_987) then (if not-caught-fail(v_988) then symmetricstatepack(v_988,v_987,v_986) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_989),hash(3-proj-3-tuple(v_989),empty)) else fail-any) else fail-any)) in
        {496}let v_991: bitstring = catch-fail(symmetricstateunpack(v_990)) in
        {497}let v_992: symmetricstate = catch-fail((if success?(getpublickey(s_982)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-3-tuple(v_991))))) then symmetricstatepack(1-proj-3-tuple(v_991),2-proj-3-tuple(v_991),hash(3-proj-3-tuple(v_991),getpublickey(s_982))) else fail-any) else fail-any)) in
        {498}let hs_993: handshakestate = (if not-caught-fail(v_990) then (if not-caught-fail(v_992) then handshakestatepack(v_992,s_982,e_983,rs_984,re_985,empty,false) else fail-any) else fail-any) in
        {499}insert statestore(bob,charlie,statepack_a(hs_993))
    ) | (
        {521}get statestore(=bob,=charlie,statepack_a(hs_994: handshakestate)) in
        {500}in(pub, message_a_995: bitstring);
        {501}let v_996: bitstring = catch-fail(handshakestateunpack(hs_994)) in
        {502}let v_997: bitstring = catch-fail(deconcat3(message_a_995)) in
        {503}let v_998: bool = catch-fail(true) in
        {504}let v_999: key = catch-fail(1-proj-3-tuple(v_997)) in
        {505}let v_1000: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_996))) in
        {506}let v_1001: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_996)) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then symmetricstatepack(1-proj-3-tuple(v_1000),2-proj-3-tuple(v_1000),hash(3-proj-3-tuple(v_1000),v_999)) else fail-any) else fail-any)) in
        {507}let v_1002: bitstring = catch-fail(symmetricstateunpack(v_1001)) in
        {508}let v_1003: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1002))) in
        {509}let v_1004: aead = catch-fail(decrypt(1-proj-2-tuple(v_1003),2-proj-2-tuple(v_1003),3-proj-3-tuple(v_1002),3-proj-3-tuple(v_997))) in
        {510}let v_1005: bitstring = catch-fail(aeadunpack(v_1004)) in
        {511}let v_1006: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1002))) in
        {512}let v_1007: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1003))) && success?(1-proj-3-tuple(v_1002))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then cipherstatepack(1-proj-2-tuple(v_1006),increment_nonce(2-proj-2-tuple(v_1003))) else fail-any) else fail-any)) in
        {513}let v_1008: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_997)) && (success?(3-proj-3-tuple(v_1002)) && success?(1-proj-3-tuple(v_1002)))) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-2-tuple(v_1003))))) then (if not-caught-fail(v_1004) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if not-caught-fail(v_1007) then (v_1007,3-proj-3-tuple(v_1005),1-proj-3-tuple(v_1005)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {514}let v_1009: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1002),3-proj-3-tuple(v_1002)))) in
        {515}let v_1010: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_997)) && success?(symmetricstatepack(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1002),3-proj-3-tuple(v_1002)))) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then symmetricstatepack(1-proj-3-tuple(v_1009),2-proj-3-tuple(v_1009),hash(3-proj-3-tuple(v_1009),3-proj-3-tuple(v_997))) else fail-any) else fail-any)) in
        {516}let v_1011: bitstring = catch-fail((if success?(3-proj-3-tuple(v_997)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then (if not-caught-fail(v_1010) then (v_1010,2-proj-3-tuple(v_1008),3-proj-3-tuple(v_1008)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {517}let v_1012: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1011),2-proj-7-tuple(v_996),3-proj-7-tuple(v_996),4-proj-7-tuple(v_996),v_999,6-proj-7-tuple(v_996),7-proj-7-tuple(v_996))) in
        {518}let (hs_1013: handshakestate,re_1014: key,plaintext_a_1015: bitstring,valid_1016: bool) = (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-7-tuple(v_996))))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then (if not-caught-fail(v_998) then (if not-caught-fail(v_999) then (if not-caught-fail(v_1001) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if (v_998 && 3-proj-3-tuple(v_1011)) then (if not-caught-fail(v_1012) then (v_1012,getpublickey(3-proj-7-tuple(v_996)),2-proj-3-tuple(v_1011),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {519}event RecvMsg(bob,charlie,stage_a,plaintext_a_1015,valid_1016);
        {520}insert statestore(bob,charlie,statepack_b(hs_1013))
    ) | (
        {558}get statestore(=bob,=charlie,statepack_b(hs_1017: handshakestate)) in
        {522}let v_1018: bitstring = catch-fail(handshakestateunpack(hs_1017)) in
        {523}let v_1019: bitstring = catch-fail((empty,empty,empty)) in
        {524}let v_1020: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {525}let v_1021: keypair = catch-fail((if not-caught-fail(v_1020) then keypairpack(v_1020,key_e(bob,charlie)) else fail-any)) in
        {526}let v_1022: bitstring = catch-fail(getpublickey(v_1021)) in
        {527}let v_1023: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1018))) in
        {528}let v_1024: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-3-tuple(v_1023))))) then symmetricstatepack(1-proj-3-tuple(v_1023),2-proj-3-tuple(v_1023),hash(3-proj-3-tuple(v_1023),v_1022)) else fail-any) else fail-any)) in
        {529}let v_1025: bitstring = catch-fail(keypairunpack(v_1021)) in
        {530}let v_1026: bitstring = catch-fail(symmetricstateunpack(v_1024)) in
        {531}let v_1027: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1026),(if success?(5-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then dhexp(2-proj-2-tuple(v_1025),5-proj-7-tuple(v_1018)) else fail-any) else fail-any))) in
        {532}let v_1028: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1026),(if success?(5-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then dhexp(2-proj-2-tuple(v_1025),5-proj-7-tuple(v_1018)) else fail-any) else fail-any))) in
        {533}let v_1029: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1026),(if success?(5-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then dhexp(2-proj-2-tuple(v_1025),5-proj-7-tuple(v_1018)) else fail-any) else fail-any))) in
        {534}let v_1030: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then dhexp(2-proj-2-tuple(v_1025),5-proj-7-tuple(v_1018)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1026))) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (v_1027,v_1028,v_1029) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1031: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then dhexp(2-proj-2-tuple(v_1025),5-proj-7-tuple(v_1018)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1030)) then cipherstatepack(2-proj-3-tuple(v_1030),minnonce) else fail-any),1-proj-3-tuple(v_1030),3-proj-3-tuple(v_1026)) else fail-any) else fail-any) else fail-any)) in
        {536}let v_1032: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1018))) in
        {537}let v_1033: bitstring = catch-fail(symmetricstateunpack(v_1031)) in
        {538}let v_1034: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1033),(if (success?(5-proj-7-tuple(v_1018)) && success?(2-proj-7-tuple(v_1018))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),5-proj-7-tuple(v_1018)) else fail-any) else fail-any))) in
        {539}let v_1035: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1033),(if (success?(5-proj-7-tuple(v_1018)) && success?(2-proj-7-tuple(v_1018))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),5-proj-7-tuple(v_1018)) else fail-any) else fail-any))) in
        {540}let v_1036: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1033),(if (success?(5-proj-7-tuple(v_1018)) && success?(2-proj-7-tuple(v_1018))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),5-proj-7-tuple(v_1018)) else fail-any) else fail-any))) in
        {541}let v_1037: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_1018)) && success?(2-proj-7-tuple(v_1018))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),5-proj-7-tuple(v_1018)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1033))) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1035) then (if not-caught-fail(v_1036) then (v_1034,v_1035,v_1036) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {542}let v_1038: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_1018)) && success?(2-proj-7-tuple(v_1018))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then dhexp(2-proj-2-tuple(v_1032),5-proj-7-tuple(v_1018)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1037)) then cipherstatepack(2-proj-3-tuple(v_1037),minnonce) else fail-any),1-proj-3-tuple(v_1037),3-proj-3-tuple(v_1033)) else fail-any) else fail-any) else fail-any)) in
        {543}let v_1039: bitstring = catch-fail(symmetricstateunpack(v_1038)) in
        {544}let v_1040: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {545}let v_1041: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1040),2-proj-2-tuple(v_1040),3-proj-3-tuple(v_1039),msg_b(bob,charlie))) in
        {546}let v_1042: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1039))) in
        {547}let v_1043: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1040))) && success?(1-proj-3-tuple(v_1039))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then cipherstatepack(1-proj-2-tuple(v_1042),increment_nonce(2-proj-2-tuple(v_1040))) else fail-any) else fail-any)) in
        {548}let v_1044: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1039)) && success?(1-proj-3-tuple(v_1039))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-2-tuple(v_1040))))) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1043) then (v_1043,v_1041) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {549}let v_1045: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1044),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) in
        {550}let v_1046: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1044)) && success?(symmetricstatepack(1-proj-2-tuple(v_1044),2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1045),hash(3-proj-3-tuple(v_1045),2-proj-2-tuple(v_1044))) else fail-any) else fail-any)) in
        {551}let v_1047: bitstring = catch-fail((if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-2-tuple(v_1044))))) then (if not-caught-fail(v_1046) then (v_1046,2-proj-2-tuple(v_1044)) else fail-any) else fail-any) else fail-any)) in
        {552}let v_1048: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1047),2-proj-7-tuple(v_1018),v_1021,4-proj-7-tuple(v_1018),5-proj-7-tuple(v_1018),6-proj-7-tuple(v_1018),7-proj-7-tuple(v_1018))) in
        {553}let v_1049: bitstring = catch-fail(concat3(v_1022,2-proj-3-tuple(v_1019),2-proj-2-tuple(v_1047))) in
        {554}let (hs_1050: handshakestate,re_1051: key,message_b_1052: bitstring) = (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-7-tuple(v_1018))))) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if not-caught-fail(v_1021) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1024) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1038) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then (if not-caught-fail(v_1048) then (if not-caught-fail(v_1049) then (v_1048,5-proj-7-tuple(v_1018),v_1049) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {555}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {556}insert statestore(bob,charlie,statepack_c(hs_1050));
        {557}out(pub, message_b_1052)
    ) | (
        {596}get statestore(=bob,=charlie,statepack_c(hs_1053: handshakestate)) in
        {559}in(pub, message_c_1054: bitstring);
        {560}let v_1055: bitstring = catch-fail(handshakestateunpack(hs_1053)) in
        {561}let v_1056: bitstring = catch-fail(deconcat3(message_c_1054)) in
        {562}let v_1057: bool = catch-fail(true) in
        {563}let v_1058: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1055))) in
        {564}let v_1059: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1058))) in
        {565}let v_1060: aead = catch-fail(decrypt(1-proj-2-tuple(v_1059),2-proj-2-tuple(v_1059),3-proj-3-tuple(v_1058),2-proj-3-tuple(v_1056))) in
        {566}let v_1061: bitstring = catch-fail(aeadunpack(v_1060)) in
        {567}let v_1062: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1058))) in
        {568}let v_1063: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1059))) && success?(1-proj-3-tuple(v_1058))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-2-tuple(v_1062))))) then cipherstatepack(1-proj-2-tuple(v_1062),increment_nonce(2-proj-2-tuple(v_1059))) else fail-any) else fail-any)) in
        {569}let v_1064: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1056)) && (success?(3-proj-3-tuple(v_1058)) && success?(1-proj-3-tuple(v_1058)))) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-2-tuple(v_1059))))) then (if not-caught-fail(v_1060) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then (if not-caught-fail(v_1063) then (v_1063,3-proj-3-tuple(v_1061),1-proj-3-tuple(v_1061)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {570}let v_1065: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1064),2-proj-3-tuple(v_1058),3-proj-3-tuple(v_1058)))) in
        {571}let v_1066: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1056)) && success?(symmetricstatepack(1-proj-3-tuple(v_1064),2-proj-3-tuple(v_1058),3-proj-3-tuple(v_1058)))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-3-tuple(v_1065))))) then symmetricstatepack(1-proj-3-tuple(v_1065),2-proj-3-tuple(v_1065),hash(3-proj-3-tuple(v_1065),2-proj-3-tuple(v_1056))) else fail-any) else fail-any)) in
        {572}let v_1067: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1056)) && success?(1-proj-7-tuple(v_1055))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if not-caught-fail(v_1066) then (v_1066,2-proj-3-tuple(v_1064),3-proj-3-tuple(v_1064)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {573}let v_1068: key = catch-fail(2-proj-3-tuple(v_1067)) in
        {574}let v_1069: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1055))) in
        {575}let v_1070: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1067))) in
        {576}let v_1071: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1070),(if success?(3-proj-7-tuple(v_1055)) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then dhexp(2-proj-2-tuple(v_1069),v_1068) else fail-any) else fail-any))) in
        {577}let v_1072: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1070),(if success?(3-proj-7-tuple(v_1055)) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then dhexp(2-proj-2-tuple(v_1069),v_1068) else fail-any) else fail-any))) in
        {578}let v_1073: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1070),(if success?(3-proj-7-tuple(v_1055)) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then dhexp(2-proj-2-tuple(v_1069),v_1068) else fail-any) else fail-any))) in
        {579}let v_1074: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_1055)) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then dhexp(2-proj-2-tuple(v_1069),v_1068) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1070))) then (if not-caught-fail(v_1071) then (if not-caught-fail(v_1072) then (if not-caught-fail(v_1073) then (v_1071,v_1072,v_1073) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {580}let v_1075: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_1055)) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then dhexp(2-proj-2-tuple(v_1069),v_1068) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_1067))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1074)) then cipherstatepack(2-proj-3-tuple(v_1074),minnonce) else fail-any),1-proj-3-tuple(v_1074),3-proj-3-tuple(v_1070)) else fail-any) else fail-any) else fail-any)) in
        {581}let v_1076: bitstring = catch-fail(symmetricstateunpack(v_1075)) in
        {582}let v_1077: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1076))) in
        {583}let v_1078: aead = catch-fail(decrypt(1-proj-2-tuple(v_1077),2-proj-2-tuple(v_1077),3-proj-3-tuple(v_1076),3-proj-3-tuple(v_1056))) in
        {584}let v_1079: bitstring = catch-fail(aeadunpack(v_1078)) in
        {585}let v_1080: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1076))) in
        {586}let v_1081: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1077))) && success?(1-proj-3-tuple(v_1076))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-2-tuple(v_1080))))) then cipherstatepack(1-proj-2-tuple(v_1080),increment_nonce(2-proj-2-tuple(v_1077))) else fail-any) else fail-any)) in
        {587}let v_1082: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1056)) && (success?(3-proj-3-tuple(v_1076)) && success?(1-proj-3-tuple(v_1076)))) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-2-tuple(v_1077))))) then (if not-caught-fail(v_1078) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-3-tuple(v_1079))))) then (if not-caught-fail(v_1081) then (v_1081,3-proj-3-tuple(v_1079),1-proj-3-tuple(v_1079)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {588}let v_1083: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1082),2-proj-3-tuple(v_1076),3-proj-3-tuple(v_1076)))) in
        {589}let v_1084: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1056)) && success?(symmetricstatepack(1-proj-3-tuple(v_1082),2-proj-3-tuple(v_1076),3-proj-3-tuple(v_1076)))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1083),hash(3-proj-3-tuple(v_1083),3-proj-3-tuple(v_1056))) else fail-any) else fail-any)) in
        {590}let v_1085: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1056)) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then (if (not-caught-fail(v_1082) && success?(is-true(success?(1-proj-3-tuple(v_1082))))) then (if not-caught-fail(v_1084) then (v_1084,2-proj-3-tuple(v_1082),3-proj-3-tuple(v_1082)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {591}let v_1086: key = catch-fail(dhexp(key_s(charlie),g)) in
        {592}let v_1087: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1085),2-proj-7-tuple(v_1055),3-proj-7-tuple(v_1055),v_1068,5-proj-7-tuple(v_1055),6-proj-7-tuple(v_1055),7-proj-7-tuple(v_1055))) in
        {593}let (hs_1088: handshakestate,re_1089: key,plaintext_c_1090: bitstring,valid_1091: bool) = (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-7-tuple(v_1055))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if not-caught-fail(v_1057) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then (if not-caught-fail(v_1068) then (if not-caught-fail(v_1075) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-3-tuple(v_1085))))) then (if ((3-proj-3-tuple(v_1067) && 3-proj-3-tuple(v_1085)) && (v_1068 = getpublickey((if not-caught-fail(v_1086) then keypairpack(v_1086,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1087) then (v_1087,getpublickey(3-proj-7-tuple(v_1055)),2-proj-3-tuple(v_1085),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {594}event RecvMsg(bob,charlie,stage_c,plaintext_c_1090,valid_1091);
        {595}insert statestore(bob,charlie,statepack_d(hs_1088))
    ) | (
        {614}get statestore(=bob,=charlie,statepack_d(hs_1092: handshakestate)) in
        {597}let v_1093: bitstring = catch-fail(handshakestateunpack(hs_1092)) in
        {598}let v_1094: bitstring = catch-fail((empty,empty,empty)) in
        {599}let v_1095: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1093))) in
        {600}let v_1096: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1095))) in
        {601}let v_1097: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1096),2-proj-2-tuple(v_1096),3-proj-3-tuple(v_1095),msg_d(bob,charlie))) in
        {602}let v_1098: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1095))) in
        {603}let v_1099: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1096))) && success?(1-proj-3-tuple(v_1095))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-2-tuple(v_1098))))) then cipherstatepack(1-proj-2-tuple(v_1098),increment_nonce(2-proj-2-tuple(v_1096))) else fail-any) else fail-any)) in
        {604}let v_1100: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1095)) && success?(1-proj-3-tuple(v_1095))) then (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-2-tuple(v_1096))))) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1099) then (v_1099,v_1097) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1101: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1100),2-proj-3-tuple(v_1095),3-proj-3-tuple(v_1095)))) in
        {606}let v_1102: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1100)) && success?(symmetricstatepack(1-proj-2-tuple(v_1100),2-proj-3-tuple(v_1095),3-proj-3-tuple(v_1095)))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then symmetricstatepack(1-proj-3-tuple(v_1101),2-proj-3-tuple(v_1101),hash(3-proj-3-tuple(v_1101),2-proj-2-tuple(v_1100))) else fail-any) else fail-any)) in
        {607}let v_1103: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1093)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-2-tuple(v_1100))))) then (if not-caught-fail(v_1102) then (v_1102,2-proj-2-tuple(v_1100)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1104: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1103),2-proj-7-tuple(v_1093),3-proj-7-tuple(v_1093),4-proj-7-tuple(v_1093),5-proj-7-tuple(v_1093),6-proj-7-tuple(v_1093),7-proj-7-tuple(v_1093))) in
        {609}let v_1105: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1094),2-proj-3-tuple(v_1094),2-proj-2-tuple(v_1103))) in
        {610}let (hs_1106: handshakestate,re_1107: key,message_d_1108: bitstring) = (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-7-tuple(v_1093))))) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-2-tuple(v_1103))))) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1105) then (v_1104,5-proj-7-tuple(v_1093),v_1105) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {611}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {612}insert statestore(bob,charlie,statepack_e(hs_1106));
        {613}out(pub, message_d_1108)
    ) | (
        {642}get statestore(=bob,=charlie,statepack_e(hs_1109: handshakestate)) in
        {615}in(pub, message_e_1110: bitstring);
        {616}let v_1111: bitstring = catch-fail(handshakestateunpack(hs_1109)) in
        {617}let v_1112: bitstring = catch-fail(deconcat3(message_e_1110)) in
        {618}let v_1113: bool = catch-fail(true) in
        {619}let v_1114: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1111))) in
        {620}let v_1115: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1114))) in
        {621}let v_1116: aead = catch-fail(decrypt(1-proj-2-tuple(v_1115),2-proj-2-tuple(v_1115),3-proj-3-tuple(v_1114),3-proj-3-tuple(v_1112))) in
        {622}let v_1117: bitstring = catch-fail(aeadunpack(v_1116)) in
        {623}let v_1118: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1114))) in
        {624}let v_1119: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1115))) && success?(1-proj-3-tuple(v_1114))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-2-tuple(v_1118))))) then cipherstatepack(1-proj-2-tuple(v_1118),increment_nonce(2-proj-2-tuple(v_1115))) else fail-any) else fail-any)) in
        {625}let v_1120: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && (success?(3-proj-3-tuple(v_1114)) && success?(1-proj-3-tuple(v_1114)))) then (if (not-caught-fail(v_1115) && success?(is-true(success?(1-proj-2-tuple(v_1115))))) then (if not-caught-fail(v_1116) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-3-tuple(v_1117))))) then (if not-caught-fail(v_1119) then (v_1119,3-proj-3-tuple(v_1117),1-proj-3-tuple(v_1117)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {626}let v_1121: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1120),2-proj-3-tuple(v_1114),3-proj-3-tuple(v_1114)))) in
        {627}let v_1122: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && success?(symmetricstatepack(1-proj-3-tuple(v_1120),2-proj-3-tuple(v_1114),3-proj-3-tuple(v_1114)))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then symmetricstatepack(1-proj-3-tuple(v_1121),2-proj-3-tuple(v_1121),hash(3-proj-3-tuple(v_1121),3-proj-3-tuple(v_1112))) else fail-any) else fail-any)) in
        {628}let v_1123: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1112)) && success?(1-proj-7-tuple(v_1111))) then (if (not-caught-fail(v_1114) && success?(is-true(success?(1-proj-3-tuple(v_1114))))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-3-tuple(v_1120))))) then (if not-caught-fail(v_1122) then (v_1122,2-proj-3-tuple(v_1120),3-proj-3-tuple(v_1120)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {629}let v_1124: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1123),2-proj-7-tuple(v_1111),3-proj-7-tuple(v_1111),4-proj-7-tuple(v_1111),5-proj-7-tuple(v_1111),6-proj-7-tuple(v_1111),7-proj-7-tuple(v_1111))) in
        {630}let v_1125: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1123))) in
        {631}let v_1126: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1125),zero)) in
        {632}let v_1127: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1125),zero)) in
        {633}let v_1128: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1125),zero)) in
        {634}let v_1129: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1125)) then (if not-caught-fail(v_1126) then (if not-caught-fail(v_1127) then (if not-caught-fail(v_1128) then (v_1126,v_1127,v_1128) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {635}let v_1130: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1129)) then cipherstatepack(1-proj-3-tuple(v_1129),minnonce) else fail-any)) in
        {636}let v_1131: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1129)) then cipherstatepack(2-proj-3-tuple(v_1129),minnonce) else fail-any)) in
        {637}let v_1132: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1123)) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then (if not-caught-fail(v_1130) then (if not-caught-fail(v_1131) then (1-proj-3-tuple(v_1123),v_1130,v_1131) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {638}let (hs_1133: handshakestate,re_1134: key,plaintext_e_1135: bitstring,valid_1136: bool,cs1_1137: cipherstate,cs2_1138: cipherstate) = (if (not-caught-fail(v_1111) && success?(is-true(success?(1-proj-7-tuple(v_1111))))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if not-caught-fail(v_1113) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (v_1113 && 3-proj-3-tuple(v_1123)) then (if not-caught-fail(v_1124) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-3-tuple(v_1132))))) then (v_1124,getpublickey(3-proj-7-tuple(v_1111)),2-proj-3-tuple(v_1123),true,2-proj-3-tuple(v_1132),3-proj-3-tuple(v_1132)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {639}event RecvMsg(bob,charlie,stage_e,plaintext_e_1135,valid_1136);
        {640}insert statestore(bob,charlie,statepack_f(hs_1133));
        {641}event RecvEnd(valid_1136)
    ) | (
        {643}event LeakS(phase0,bob);
        {644}out(pub, key_s(bob))
    ) | (
        {645}phase 1;
        {646}event LeakS(phase1,bob);
        {647}out(pub, key_s(bob))
    )
) | (
    {648}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 171 rules in the queue.
400 rules inserted. The rule base contains 390 rules. 15 rules in the queue.
600 rules inserted. The rule base contains 576 rules. 199 rules in the queue.
800 rules inserted. The rule base contains 759 rules. 253 rules in the queue.
1000 rules inserted. The rule base contains 929 rules. 116 rules in the queue.
1200 rules inserted. The rule base contains 1115 rules. 258 rules in the queue.
1400 rules inserted. The rule base contains 1274 rules. 311 rules in the queue.
1600 rules inserted. The rule base contains 1416 rules. 319 rules in the queue.
1800 rules inserted. The rule base contains 1520 rules. 317 rules in the queue.
2000 rules inserted. The rule base contains 1625 rules. 282 rules in the queue.
2200 rules inserted. The rule base contains 1801 rules. 279 rules in the queue.
2400 rules inserted. The rule base contains 1977 rules. 306 rules in the queue.
2600 rules inserted. The rule base contains 2096 rules. 312 rules in the queue.
2800 rules inserted. The rule base contains 2242 rules. 347 rules in the queue.
3000 rules inserted. The rule base contains 2413 rules. 357 rules in the queue.
3200 rules inserted. The rule base contains 2525 rules. 375 rules in the queue.
3400 rules inserted. The rule base contains 2657 rules. 376 rules in the queue.
3600 rules inserted. The rule base contains 2756 rules. 360 rules in the queue.
3800 rules inserted. The rule base contains 2888 rules. 370 rules in the queue.
4000 rules inserted. The rule base contains 3020 rules. 381 rules in the queue.
4200 rules inserted. The rule base contains 3141 rules. 391 rules in the queue.
4400 rules inserted. The rule base contains 3280 rules. 409 rules in the queue.
4600 rules inserted. The rule base contains 3400 rules. 426 rules in the queue.
4800 rules inserted. The rule base contains 3519 rules. 437 rules in the queue.
5000 rules inserted. The rule base contains 3648 rules. 424 rules in the queue.
5200 rules inserted. The rule base contains 3771 rules. 419 rules in the queue.
5400 rules inserted. The rule base contains 3906 rules. 421 rules in the queue.
5600 rules inserted. The rule base contains 4061 rules. 433 rules in the queue.
5800 rules inserted. The rule base contains 4217 rules. 423 rules in the queue.
6000 rules inserted. The rule base contains 4371 rules. 433 rules in the queue.
6200 rules inserted. The rule base contains 4529 rules. 472 rules in the queue.
6400 rules inserted. The rule base contains 4673 rules. 495 rules in the queue.
6600 rules inserted. The rule base contains 4834 rules. 503 rules in the queue.
6800 rules inserted. The rule base contains 4981 rules. 528 rules in the queue.
7000 rules inserted. The rule base contains 5117 rules. 522 rules in the queue.
7200 rules inserted. The rule base contains 5250 rules. 500 rules in the queue.
7400 rules inserted. The rule base contains 5349 rules. 483 rules in the queue.
7600 rules inserted. The rule base contains 5476 rules. 453 rules in the queue.
7800 rules inserted. The rule base contains 5607 rules. 425 rules in the queue.
8000 rules inserted. The rule base contains 5718 rules. 384 rules in the queue.
8200 rules inserted. The rule base contains 5861 rules. 358 rules in the queue.
8400 rules inserted. The rule base contains 5976 rules. 352 rules in the queue.
8600 rules inserted. The rule base contains 6115 rules. 349 rules in the queue.
8800 rules inserted. The rule base contains 6235 rules. 356 rules in the queue.
9000 rules inserted. The rule base contains 6336 rules. 359 rules in the queue.
9200 rules inserted. The rule base contains 6427 rules. 298 rules in the queue.
9400 rules inserted. The rule base contains 6556 rules. 301 rules in the queue.
9600 rules inserted. The rule base contains 6660 rules. 253 rules in the queue.
9800 rules inserted. The rule base contains 6761 rules. 211 rules in the queue.
10000 rules inserted. The rule base contains 6874 rules. 205 rules in the queue.
10200 rules inserted. The rule base contains 7004 rules. 205 rules in the queue.
10400 rules inserted. The rule base contains 7133 rules. 182 rules in the queue.
10600 rules inserted. The rule base contains 7228 rules. 93 rules in the queue.
10800 rules inserted. The rule base contains 7268 rules. 31 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1219,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {324}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {324}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {324}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {324}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {499}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {521}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {500}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {520}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {558}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {555}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {557}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1219,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {499}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {521}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {500}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {520}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {558}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {555}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {557}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {499}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {521}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {500}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {520}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {558}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {555}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {557}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {40}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1219,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1219,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1219,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
