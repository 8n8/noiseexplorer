File "K1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "K1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 292, character 6:
Warning: identifier e rebound.
File "K1X.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "K1X.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "K1X.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "K1X.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 310, character 6:
Warning: identifier s rebound.
File "K1X.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "K1X.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "K1X.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 361, characters 6-7:
Warning: identifier re rebound.
File "K1X.noise.passive.pv", line 362, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 365, characters 48-53:
Warning: identifier valid1 rebound.
File "K1X.noise.passive.pv", line 366, characters 6-7:
Warning: identifier rs rebound.
File "K1X.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 378, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 361, characters 6-7:
Warning: identifier re rebound.
File "K1X.noise.passive.pv", line 362, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 365, characters 48-53:
Warning: identifier valid1 rebound.
File "K1X.noise.passive.pv", line 366, characters 6-7:
Warning: identifier rs rebound.
File "K1X.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 368, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 370, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 544, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 292, character 6:
Warning: identifier e rebound.
File "K1X.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "K1X.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 632, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 399, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 401, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 624, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 617, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 378, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 609, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "K1X.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "K1X.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 310, character 6:
Warning: identifier s rebound.
File "K1X.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "K1X.noise.passive.pv", line 312, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 313, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 313, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1X.noise.passive.pv", line 314, characters 6-7:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "K1X.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 602, characters 8-9:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "K1X.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "K1X.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "K1X.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "K1X.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let v_529: key = catch-fail(dhexp(key_s(me),g)) in
    {6}let s_530: keypair = (if not-caught-fail(v_529) then keypairpack(v_529,key_s(me)) else fail-any) in
    {7}out(pub, getpublickey(s_530));
    (
        {8}let e_531: keypair = keypairpack(empty,empty) in
        {9}let rs_532: key = empty in
        {10}let re_533: key = empty in
        {11}let v_534: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_535: key = catch-fail(v_534) in
        {13}let v_536: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_537: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any))) in
        {15}let v_538: symmetricstate = catch-fail((if success?((if not-caught-fail(v_534) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then symmetricstatepack(v_536,v_535,v_534) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then symmetricstatepack(1-proj-3-tuple(v_537),2-proj-3-tuple(v_537),hash(3-proj-3-tuple(v_537),empty)) else fail-any) else fail-any)) in
        {16}let v_539: bitstring = catch-fail(symmetricstateunpack(v_538)) in
        {17}let v_540: symmetricstate = catch-fail((if success?(getpublickey(s_530)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_539),hash(3-proj-3-tuple(v_539),getpublickey(s_530))) else fail-any) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_538) then (if not-caught-fail(v_540) then handshakestatepack(v_540,s_530,e_531,rs_532,re_533,empty,true) else fail-any) else fail-any) in
        {19}insert statestore(me,them,statepack_a(hs))
    ) | (
        {43}get statestore(=me,=them,statepack_a(hs_541: handshakestate)) in
        {20}let v_542: bitstring = catch-fail(handshakestateunpack(hs_541)) in
        {21}let v_543: bitstring = catch-fail((empty,empty,empty)) in
        {22}new key_e[me,them]: key;
        {23}let v_544: key = catch-fail(dhexp(key_e,g)) in
        {24}let v_545: keypair = catch-fail((if not-caught-fail(v_544) then keypairpack(v_544,key_e) else fail-any)) in
        {25}let v_546: bitstring = catch-fail(getpublickey(v_545)) in
        {26}let v_547: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_542))) in
        {27}let v_548: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_542)) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack(1-proj-3-tuple(v_547),2-proj-3-tuple(v_547),hash(3-proj-3-tuple(v_547),v_546)) else fail-any) else fail-any)) in
        {28}let v_549: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {29}let v_550: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {30}let v_551: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_550),2-proj-2-tuple(v_550),3-proj-3-tuple(v_549),msg_a(me,them))) in
        {31}let v_552: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_549))) in
        {32}let v_553: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_550))) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-2-tuple(v_552))))) then cipherstatepack(1-proj-2-tuple(v_552),increment_nonce(2-proj-2-tuple(v_550))) else fail-any) else fail-any)) in
        {33}let v_554: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_549)) && success?(1-proj-3-tuple(v_549))) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-2-tuple(v_550))))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_553) then (v_553,v_551) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_555: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) in
        {35}let v_556: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_554)) && success?(symmetricstatepack(1-proj-2-tuple(v_554),2-proj-3-tuple(v_549),3-proj-3-tuple(v_549)))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-3-tuple(v_555))))) then symmetricstatepack(1-proj-3-tuple(v_555),2-proj-3-tuple(v_555),hash(3-proj-3-tuple(v_555),2-proj-2-tuple(v_554))) else fail-any) else fail-any)) in
        {36}let v_557: bitstring = catch-fail((if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_556) then (v_556,2-proj-2-tuple(v_554)) else fail-any) else fail-any) else fail-any)) in
        {37}let v_558: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_557),2-proj-7-tuple(v_542),v_545,4-proj-7-tuple(v_542),5-proj-7-tuple(v_542),6-proj-7-tuple(v_542),7-proj-7-tuple(v_542))) in
        {38}let v_559: bitstring = catch-fail(concat3(v_546,2-proj-3-tuple(v_543),2-proj-2-tuple(v_557))) in
        {39}let (hs_560: handshakestate,re_561: key,message_a: bitstring) = (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-7-tuple(v_542))))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_548) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then (if not-caught-fail(v_558) then (if not-caught-fail(v_559) then (v_558,5-proj-7-tuple(v_542),v_559) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {40}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {41}insert statestore(me,them,statepack_b(hs_560));
        {42}out(pub, message_a)
    ) | (
        {91}get statestore(=me,=them,statepack_b(hs_562: handshakestate)) in
        {44}in(pub, message_b: bitstring);
        {45}let v_563: bitstring = catch-fail(handshakestateunpack(hs_562)) in
        {46}let v_564: bitstring = catch-fail(deconcat3(message_b)) in
        {47}let v_565: bool = catch-fail(true) in
        {48}let v_566: key = catch-fail(1-proj-3-tuple(v_564)) in
        {49}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_563))) in
        {50}let v_568: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_563)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then symmetricstatepack(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),hash(3-proj-3-tuple(v_567),v_566)) else fail-any) else fail-any)) in
        {51}let v_569: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_563))) in
        {52}let v_570: bitstring = catch-fail(symmetricstateunpack(v_568)) in
        {53}let v_571: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {54}let v_572: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {55}let v_573: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_570),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any))) in
        {56}let v_574: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_570))) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_571,v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {57}let v_575: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-2-tuple(v_569))))) then dhexp(2-proj-2-tuple(v_569),v_566) else fail-any) else fail-any)) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_574)) then cipherstatepack(2-proj-3-tuple(v_574),minnonce) else fail-any),1-proj-3-tuple(v_574),3-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any)) in
        {58}let v_576: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {59}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {60}let v_578: aead = catch-fail(decrypt(1-proj-2-tuple(v_577),2-proj-2-tuple(v_577),3-proj-3-tuple(v_576),2-proj-3-tuple(v_564))) in
        {61}let v_579: bitstring = catch-fail(aeadunpack(v_578)) in
        {62}let v_580: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {63}let v_581: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_577))) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then cipherstatepack(1-proj-2-tuple(v_580),increment_nonce(2-proj-2-tuple(v_577))) else fail-any) else fail-any)) in
        {64}let v_582: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_564)) && (success?(3-proj-3-tuple(v_576)) && success?(1-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then (if not-caught-fail(v_578) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_581) then (v_581,3-proj-3-tuple(v_579),1-proj-3-tuple(v_579)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_583: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) in
        {66}let v_584: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_564)) && success?(symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then symmetricstatepack(1-proj-3-tuple(v_583),2-proj-3-tuple(v_583),hash(3-proj-3-tuple(v_583),2-proj-3-tuple(v_564))) else fail-any) else fail-any)) in
        {67}let v_585: bitstring = catch-fail((if success?(2-proj-3-tuple(v_564)) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if not-caught-fail(v_584) then (v_584,2-proj-3-tuple(v_582),3-proj-3-tuple(v_582)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_586: key = catch-fail(2-proj-3-tuple(v_585)) in
        {69}let v_587: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_563))) in
        {70}let v_588: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_585))) in
        {71}let v_589: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_586) else fail-any) else fail-any))) in
        {72}let v_590: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_586) else fail-any) else fail-any))) in
        {73}let v_591: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_588),(if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_586) else fail-any) else fail-any))) in
        {74}let v_592: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_586) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_588))) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then (v_589,v_590,v_591) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_593: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_563)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then dhexp(2-proj-2-tuple(v_587),v_586) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_585))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_592)) then cipherstatepack(2-proj-3-tuple(v_592),minnonce) else fail-any),1-proj-3-tuple(v_592),3-proj-3-tuple(v_588)) else fail-any) else fail-any) else fail-any)) in
        {76}let v_594: bitstring = catch-fail(symmetricstateunpack(v_593)) in
        {77}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {78}let v_596: aead = catch-fail(decrypt(1-proj-2-tuple(v_595),2-proj-2-tuple(v_595),3-proj-3-tuple(v_594),3-proj-3-tuple(v_564))) in
        {79}let v_597: bitstring = catch-fail(aeadunpack(v_596)) in
        {80}let v_598: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_594))) in
        {81}let v_599: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_595))) && success?(1-proj-3-tuple(v_594))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then cipherstatepack(1-proj-2-tuple(v_598),increment_nonce(2-proj-2-tuple(v_595))) else fail-any) else fail-any)) in
        {82}let v_600: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_564)) && (success?(3-proj-3-tuple(v_594)) && success?(1-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then (if not-caught-fail(v_596) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,3-proj-3-tuple(v_597),1-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_601: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) in
        {84}let v_602: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_564)) && success?(symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_594),3-proj-3-tuple(v_594)))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack(1-proj-3-tuple(v_601),2-proj-3-tuple(v_601),hash(3-proj-3-tuple(v_601),3-proj-3-tuple(v_564))) else fail-any) else fail-any)) in
        {85}let v_603: bitstring = catch-fail((if success?(3-proj-3-tuple(v_564)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if not-caught-fail(v_602) then (v_602,2-proj-3-tuple(v_600),3-proj-3-tuple(v_600)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_604: key = catch-fail(dhexp(key_s(them),g)) in
        {87}let v_605: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_603),2-proj-7-tuple(v_563),3-proj-7-tuple(v_563),v_586,v_566,6-proj-7-tuple(v_563),7-proj-7-tuple(v_563))) in
        {88}let (hs_606: handshakestate,re_607: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-7-tuple(v_563))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_566) then (if not-caught-fail(v_568) then (if not-caught-fail(v_575) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if not-caught-fail(v_586) then (if not-caught-fail(v_593) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if ((3-proj-3-tuple(v_585) && 3-proj-3-tuple(v_603)) && (v_586 = getpublickey((if not-caught-fail(v_604) then keypairpack(v_604,key_s(them)) else fail-any)))) then (if not-caught-fail(v_605) then (v_605,getpublickey(3-proj-7-tuple(v_563)),2-proj-3-tuple(v_603),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {89}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {90}insert statestore(me,them,statepack_c(hs_606))
    ) | (
        {116}get statestore(=me,=them,statepack_c(hs_608: handshakestate)) in
        {92}let v_609: bitstring = catch-fail(handshakestateunpack(hs_608)) in
        {93}let v_610: bitstring = catch-fail((empty,empty,empty)) in
        {94}let v_611: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_609))) in
        {95}let v_612: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_609))) in
        {96}let v_613: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_612),(if (success?(5-proj-7-tuple(v_609)) && success?(2-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),5-proj-7-tuple(v_609)) else fail-any) else fail-any))) in
        {97}let v_614: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_612),(if (success?(5-proj-7-tuple(v_609)) && success?(2-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),5-proj-7-tuple(v_609)) else fail-any) else fail-any))) in
        {98}let v_615: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_612),(if (success?(5-proj-7-tuple(v_609)) && success?(2-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),5-proj-7-tuple(v_609)) else fail-any) else fail-any))) in
        {99}let v_616: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_609)) && success?(2-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),5-proj-7-tuple(v_609)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_612))) then (if not-caught-fail(v_613) then (if not-caught-fail(v_614) then (if not-caught-fail(v_615) then (v_613,v_614,v_615) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {100}let v_617: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_609)) && success?(2-proj-7-tuple(v_609))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then dhexp(2-proj-2-tuple(v_611),5-proj-7-tuple(v_609)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_609))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-3-tuple(v_616))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_616)) then cipherstatepack(2-proj-3-tuple(v_616),minnonce) else fail-any),1-proj-3-tuple(v_616),3-proj-3-tuple(v_612)) else fail-any) else fail-any) else fail-any)) in
        {101}let v_618: bitstring = catch-fail(symmetricstateunpack(v_617)) in
        {102}let v_619: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_618))) in
        {103}let v_620: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_619),2-proj-2-tuple(v_619),3-proj-3-tuple(v_618),msg_c(me,them))) in
        {104}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_618))) in
        {105}let v_622: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_619))) && success?(1-proj-3-tuple(v_618))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then cipherstatepack(1-proj-2-tuple(v_621),increment_nonce(2-proj-2-tuple(v_619))) else fail-any) else fail-any)) in
        {106}let v_623: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_618)) && success?(1-proj-3-tuple(v_618))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-2-tuple(v_619))))) then (if not-caught-fail(v_620) then (if not-caught-fail(v_622) then (v_622,v_620) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_624: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_623),2-proj-3-tuple(v_618),3-proj-3-tuple(v_618)))) in
        {108}let v_625: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_623)) && success?(symmetricstatepack(1-proj-2-tuple(v_623),2-proj-3-tuple(v_618),3-proj-3-tuple(v_618)))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then symmetricstatepack(1-proj-3-tuple(v_624),2-proj-3-tuple(v_624),hash(3-proj-3-tuple(v_624),2-proj-2-tuple(v_623))) else fail-any) else fail-any)) in
        {109}let v_626: bitstring = catch-fail((if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,2-proj-2-tuple(v_623)) else fail-any) else fail-any) else fail-any)) in
        {110}let v_627: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_626),2-proj-7-tuple(v_609),3-proj-7-tuple(v_609),4-proj-7-tuple(v_609),5-proj-7-tuple(v_609),6-proj-7-tuple(v_609),7-proj-7-tuple(v_609))) in
        {111}let v_628: bitstring = catch-fail(concat3(1-proj-3-tuple(v_610),2-proj-3-tuple(v_610),2-proj-2-tuple(v_626))) in
        {112}let (hs_629: handshakestate,re_630: key,message_c: bitstring) = (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-7-tuple(v_609))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if not-caught-fail(v_617) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (v_627,5-proj-7-tuple(v_609),v_628) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {113}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {114}insert statestore(me,them,statepack_d(hs_629));
        {115}out(pub, message_c)
    ) | (
        {135}get statestore(=me,=them,statepack_d(hs_631: handshakestate)) in
        {117}in(pub, message_d: bitstring);
        {118}let v_632: bitstring = catch-fail(handshakestateunpack(hs_631)) in
        {119}let v_633: bitstring = catch-fail(deconcat3(message_d)) in
        {120}let v_634: bool = catch-fail(true) in
        {121}let v_635: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_632))) in
        {122}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {123}let v_637: aead = catch-fail(decrypt(1-proj-2-tuple(v_636),2-proj-2-tuple(v_636),3-proj-3-tuple(v_635),3-proj-3-tuple(v_633))) in
        {124}let v_638: bitstring = catch-fail(aeadunpack(v_637)) in
        {125}let v_639: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_635))) in
        {126}let v_640: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_636))) && success?(1-proj-3-tuple(v_635))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then cipherstatepack(1-proj-2-tuple(v_639),increment_nonce(2-proj-2-tuple(v_636))) else fail-any) else fail-any)) in
        {127}let v_641: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_633)) && (success?(3-proj-3-tuple(v_635)) && success?(1-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then (if not-caught-fail(v_637) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,3-proj-3-tuple(v_638),1-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {128}let v_642: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) in
        {129}let v_643: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_633)) && success?(symmetricstatepack(1-proj-3-tuple(v_641),2-proj-3-tuple(v_635),3-proj-3-tuple(v_635)))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then symmetricstatepack(1-proj-3-tuple(v_642),2-proj-3-tuple(v_642),hash(3-proj-3-tuple(v_642),3-proj-3-tuple(v_633))) else fail-any) else fail-any)) in
        {130}let v_644: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_633)) && success?(1-proj-7-tuple(v_632))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if not-caught-fail(v_643) then (v_643,2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {131}let v_645: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_644),2-proj-7-tuple(v_632),3-proj-7-tuple(v_632),4-proj-7-tuple(v_632),5-proj-7-tuple(v_632),6-proj-7-tuple(v_632),7-proj-7-tuple(v_632))) in
        {132}let (hs_646: handshakestate,re_647: key,plaintext_d: bitstring,valid_648: bool) = (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-7-tuple(v_632))))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then (if not-caught-fail(v_634) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if (v_634 && 3-proj-3-tuple(v_644)) then (if not-caught-fail(v_645) then (v_645,getpublickey(3-proj-7-tuple(v_632)),2-proj-3-tuple(v_644),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {133}event RecvMsg(me,them,stage_d,plaintext_d,valid_648);
        {134}insert statestore(me,them,statepack_e(hs_646))
    ) | (
        {161}get statestore(=me,=them,statepack_e(hs_649: handshakestate)) in
        {136}let v_650: bitstring = catch-fail(handshakestateunpack(hs_649)) in
        {137}let v_651: bitstring = catch-fail((empty,empty,empty)) in
        {138}let v_652: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_650))) in
        {139}let v_653: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {140}let v_654: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_653),2-proj-2-tuple(v_653),3-proj-3-tuple(v_652),msg_e(me,them))) in
        {141}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {142}let v_656: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_653))) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then cipherstatepack(1-proj-2-tuple(v_655),increment_nonce(2-proj-2-tuple(v_653))) else fail-any) else fail-any)) in
        {143}let v_657: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_652)) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then (v_656,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let v_658: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) in
        {145}let v_659: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_657)) && success?(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
        {146}let v_660: bitstring = catch-fail((if success?(1-proj-7-tuple(v_650)) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_659) then (v_659,2-proj-2-tuple(v_657)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {147}let v_661: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_660),2-proj-7-tuple(v_650),3-proj-7-tuple(v_650),4-proj-7-tuple(v_650),5-proj-7-tuple(v_650),6-proj-7-tuple(v_650),7-proj-7-tuple(v_650))) in
        {148}let v_662: bitstring = catch-fail(concat3(1-proj-3-tuple(v_651),2-proj-3-tuple(v_651),2-proj-2-tuple(v_660))) in
        {149}let v_663: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_660))) in
        {150}let v_664: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_663),zero)) in
        {151}let v_665: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_663),zero)) in
        {152}let v_666: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_663),zero)) in
        {153}let v_667: bitstring = catch-fail((if success?(2-proj-3-tuple(v_663)) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (v_664,v_665,v_666) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {154}let v_668: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_667)) then cipherstatepack(1-proj-3-tuple(v_667),minnonce) else fail-any)) in
        {155}let v_669: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_667)) then cipherstatepack(2-proj-3-tuple(v_667),minnonce) else fail-any)) in
        {156}let v_670: bitstring = catch-fail((if success?(1-proj-2-tuple(v_660)) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (1-proj-2-tuple(v_660),v_668,v_669) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {157}let (hs_671: handshakestate,re_672: key,message_e: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-7-tuple(v_650))))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then (if not-caught-fail(v_661) then (if not-caught-fail(v_662) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (v_661,5-proj-7-tuple(v_650),v_662,2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {158}event SendMsg(me,them,stage_e,msg_e(me,them),true);
        {159}insert statestore(me,them,statepack_f(hs_671));
        {160}out(pub, message_e)
    ) | (
        {162}event LeakS(phase0,me);
        {163}out(pub, key_s(me))
    ) | (
        {164}phase 1;
        {165}event LeakS(phase1,me);
        {166}out(pub, key_s(me))
    )
) | (
    {167}let them_673: principal = charlie in
    {168}let me_674: principal = alice in
    {169}let v_675: key = catch-fail(dhexp(key_s(me_674),g)) in
    {170}let s_676: keypair = (if not-caught-fail(v_675) then keypairpack(v_675,key_s(me_674)) else fail-any) in
    {171}out(pub, getpublickey(s_676));
    (
        {172}let e_677: keypair = keypairpack(empty,empty) in
        {173}let rs_678: key = empty in
        {174}let re_679: key = empty in
        {175}let v_680: bitstring = catch-fail(hash(somename,empty)) in
        {176}let v_681: key = catch-fail(v_680) in
        {177}let v_682: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {178}let v_683: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_680) then (if not-caught-fail(v_681) then (if not-caught-fail(v_682) then symmetricstatepack(v_682,v_681,v_680) else fail-any) else fail-any) else fail-any))) in
        {179}let v_684: symmetricstate = catch-fail((if success?((if not-caught-fail(v_680) then (if not-caught-fail(v_681) then (if not-caught-fail(v_682) then symmetricstatepack(v_682,v_681,v_680) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then symmetricstatepack(1-proj-3-tuple(v_683),2-proj-3-tuple(v_683),hash(3-proj-3-tuple(v_683),empty)) else fail-any) else fail-any)) in
        {180}let v_685: bitstring = catch-fail(symmetricstateunpack(v_684)) in
        {181}let v_686: symmetricstate = catch-fail((if success?(getpublickey(s_676)) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),hash(3-proj-3-tuple(v_685),getpublickey(s_676))) else fail-any) else fail-any)) in
        {182}let hs_687: handshakestate = (if not-caught-fail(v_684) then (if not-caught-fail(v_686) then handshakestatepack(v_686,s_676,e_677,rs_678,re_679,empty,true) else fail-any) else fail-any) in
        {183}insert statestore(me_674,them_673,statepack_a(hs_687))
    ) | (
        {207}get statestore(=me_674,=them_673,statepack_a(hs_688: handshakestate)) in
        {184}let v_689: bitstring = catch-fail(handshakestateunpack(hs_688)) in
        {185}let v_690: bitstring = catch-fail((empty,empty,empty)) in
        {186}new key_e_691[me_674,them_673]: key;
        {187}let v_692: key = catch-fail(dhexp(key_e_691,g)) in
        {188}let v_693: keypair = catch-fail((if not-caught-fail(v_692) then keypairpack(v_692,key_e_691) else fail-any)) in
        {189}let v_694: bitstring = catch-fail(getpublickey(v_693)) in
        {190}let v_695: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_689))) in
        {191}let v_696: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_689)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then symmetricstatepack(1-proj-3-tuple(v_695),2-proj-3-tuple(v_695),hash(3-proj-3-tuple(v_695),v_694)) else fail-any) else fail-any)) in
        {192}let v_697: bitstring = catch-fail(symmetricstateunpack(v_696)) in
        {193}let v_698: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_697))) in
        {194}let v_699: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_698),2-proj-2-tuple(v_698),3-proj-3-tuple(v_697),msg_a(me_674,them_673))) in
        {195}let v_700: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_697))) in
        {196}let v_701: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_698))) && success?(1-proj-3-tuple(v_697))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-2-tuple(v_700))))) then cipherstatepack(1-proj-2-tuple(v_700),increment_nonce(2-proj-2-tuple(v_698))) else fail-any) else fail-any)) in
        {197}let v_702: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_697)) && success?(1-proj-3-tuple(v_697))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-2-tuple(v_698))))) then (if not-caught-fail(v_699) then (if not-caught-fail(v_701) then (v_701,v_699) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {198}let v_703: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_702),2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)))) in
        {199}let v_704: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_702)) && success?(symmetricstatepack(1-proj-2-tuple(v_702),2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then symmetricstatepack(1-proj-3-tuple(v_703),2-proj-3-tuple(v_703),hash(3-proj-3-tuple(v_703),2-proj-2-tuple(v_702))) else fail-any) else fail-any)) in
        {200}let v_705: bitstring = catch-fail((if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-2-tuple(v_702))))) then (if not-caught-fail(v_704) then (v_704,2-proj-2-tuple(v_702)) else fail-any) else fail-any) else fail-any)) in
        {201}let v_706: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_705),2-proj-7-tuple(v_689),v_693,4-proj-7-tuple(v_689),5-proj-7-tuple(v_689),6-proj-7-tuple(v_689),7-proj-7-tuple(v_689))) in
        {202}let v_707: bitstring = catch-fail(concat3(v_694,2-proj-3-tuple(v_690),2-proj-2-tuple(v_705))) in
        {203}let (hs_708: handshakestate,re_709: key,message_a_710: bitstring) = (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-7-tuple(v_689))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (if not-caught-fail(v_696) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-2-tuple(v_705))))) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (v_706,5-proj-7-tuple(v_689),v_707) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {204}event SendMsg(me_674,them_673,stage_a,msg_a(me_674,them_673),true);
        {205}insert statestore(me_674,them_673,statepack_b(hs_708));
        {206}out(pub, message_a_710)
    ) | (
        {255}get statestore(=me_674,=them_673,statepack_b(hs_711: handshakestate)) in
        {208}in(pub, message_b_712: bitstring);
        {209}let v_713: bitstring = catch-fail(handshakestateunpack(hs_711)) in
        {210}let v_714: bitstring = catch-fail(deconcat3(message_b_712)) in
        {211}let v_715: bool = catch-fail(true) in
        {212}let v_716: key = catch-fail(1-proj-3-tuple(v_714)) in
        {213}let v_717: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_713))) in
        {214}let v_718: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_713)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then symmetricstatepack(1-proj-3-tuple(v_717),2-proj-3-tuple(v_717),hash(3-proj-3-tuple(v_717),v_716)) else fail-any) else fail-any)) in
        {215}let v_719: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_713))) in
        {216}let v_720: bitstring = catch-fail(symmetricstateunpack(v_718)) in
        {217}let v_721: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_720),(if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),v_716) else fail-any) else fail-any))) in
        {218}let v_722: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_720),(if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),v_716) else fail-any) else fail-any))) in
        {219}let v_723: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_720),(if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),v_716) else fail-any) else fail-any))) in
        {220}let v_724: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),v_716) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_720))) then (if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (v_721,v_722,v_723) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {221}let v_725: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then dhexp(2-proj-2-tuple(v_719),v_716) else fail-any) else fail-any)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_724)) then cipherstatepack(2-proj-3-tuple(v_724),minnonce) else fail-any),1-proj-3-tuple(v_724),3-proj-3-tuple(v_720)) else fail-any) else fail-any) else fail-any)) in
        {222}let v_726: bitstring = catch-fail(symmetricstateunpack(v_725)) in
        {223}let v_727: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {224}let v_728: aead = catch-fail(decrypt(1-proj-2-tuple(v_727),2-proj-2-tuple(v_727),3-proj-3-tuple(v_726),2-proj-3-tuple(v_714))) in
        {225}let v_729: bitstring = catch-fail(aeadunpack(v_728)) in
        {226}let v_730: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_726))) in
        {227}let v_731: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_727))) && success?(1-proj-3-tuple(v_726))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then cipherstatepack(1-proj-2-tuple(v_730),increment_nonce(2-proj-2-tuple(v_727))) else fail-any) else fail-any)) in
        {228}let v_732: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_714)) && (success?(3-proj-3-tuple(v_726)) && success?(1-proj-3-tuple(v_726)))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then (if not-caught-fail(v_728) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if not-caught-fail(v_731) then (v_731,3-proj-3-tuple(v_729),1-proj-3-tuple(v_729)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {229}let v_733: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) in
        {230}let v_734: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_714)) && success?(symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_733),hash(3-proj-3-tuple(v_733),2-proj-3-tuple(v_714))) else fail-any) else fail-any)) in
        {231}let v_735: bitstring = catch-fail((if success?(2-proj-3-tuple(v_714)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if not-caught-fail(v_734) then (v_734,2-proj-3-tuple(v_732),3-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_736: key = catch-fail(2-proj-3-tuple(v_735)) in
        {233}let v_737: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_713))) in
        {234}let v_738: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_735))) in
        {235}let v_739: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_738),(if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then dhexp(2-proj-2-tuple(v_737),v_736) else fail-any) else fail-any))) in
        {236}let v_740: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_738),(if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then dhexp(2-proj-2-tuple(v_737),v_736) else fail-any) else fail-any))) in
        {237}let v_741: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_738),(if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then dhexp(2-proj-2-tuple(v_737),v_736) else fail-any) else fail-any))) in
        {238}let v_742: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then dhexp(2-proj-2-tuple(v_737),v_736) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_738))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (if not-caught-fail(v_741) then (v_739,v_740,v_741) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_743: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_713)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then dhexp(2-proj-2-tuple(v_737),v_736) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_735))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_742)) then cipherstatepack(2-proj-3-tuple(v_742),minnonce) else fail-any),1-proj-3-tuple(v_742),3-proj-3-tuple(v_738)) else fail-any) else fail-any) else fail-any)) in
        {240}let v_744: bitstring = catch-fail(symmetricstateunpack(v_743)) in
        {241}let v_745: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_744))) in
        {242}let v_746: aead = catch-fail(decrypt(1-proj-2-tuple(v_745),2-proj-2-tuple(v_745),3-proj-3-tuple(v_744),3-proj-3-tuple(v_714))) in
        {243}let v_747: bitstring = catch-fail(aeadunpack(v_746)) in
        {244}let v_748: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_744))) in
        {245}let v_749: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_745))) && success?(1-proj-3-tuple(v_744))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then cipherstatepack(1-proj-2-tuple(v_748),increment_nonce(2-proj-2-tuple(v_745))) else fail-any) else fail-any)) in
        {246}let v_750: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_714)) && (success?(3-proj-3-tuple(v_744)) && success?(1-proj-3-tuple(v_744)))) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-2-tuple(v_745))))) then (if not-caught-fail(v_746) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-3-tuple(v_747))))) then (if not-caught-fail(v_749) then (v_749,3-proj-3-tuple(v_747),1-proj-3-tuple(v_747)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_751: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_750),2-proj-3-tuple(v_744),3-proj-3-tuple(v_744)))) in
        {248}let v_752: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_714)) && success?(symmetricstatepack(1-proj-3-tuple(v_750),2-proj-3-tuple(v_744),3-proj-3-tuple(v_744)))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then symmetricstatepack(1-proj-3-tuple(v_751),2-proj-3-tuple(v_751),hash(3-proj-3-tuple(v_751),3-proj-3-tuple(v_714))) else fail-any) else fail-any)) in
        {249}let v_753: bitstring = catch-fail((if success?(3-proj-3-tuple(v_714)) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if not-caught-fail(v_752) then (v_752,2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_754: key = catch-fail(dhexp(key_s(them_673),g)) in
        {251}let v_755: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_753),2-proj-7-tuple(v_713),3-proj-7-tuple(v_713),v_736,v_716,6-proj-7-tuple(v_713),7-proj-7-tuple(v_713))) in
        {252}let (hs_756: handshakestate,re_757: key,plaintext_b_758: bitstring,valid_759: bool) = (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-7-tuple(v_713))))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then (if not-caught-fail(v_718) then (if not-caught-fail(v_725) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if not-caught-fail(v_736) then (if not-caught-fail(v_743) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if ((3-proj-3-tuple(v_735) && 3-proj-3-tuple(v_753)) && (v_736 = getpublickey((if not-caught-fail(v_754) then keypairpack(v_754,key_s(them_673)) else fail-any)))) then (if not-caught-fail(v_755) then (v_755,getpublickey(3-proj-7-tuple(v_713)),2-proj-3-tuple(v_753),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {253}event RecvMsg(me_674,them_673,stage_b,plaintext_b_758,valid_759);
        {254}insert statestore(me_674,them_673,statepack_c(hs_756))
    ) | (
        {280}get statestore(=me_674,=them_673,statepack_c(hs_760: handshakestate)) in
        {256}let v_761: bitstring = catch-fail(handshakestateunpack(hs_760)) in
        {257}let v_762: bitstring = catch-fail((empty,empty,empty)) in
        {258}let v_763: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_761))) in
        {259}let v_764: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_761))) in
        {260}let v_765: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_764),(if (success?(5-proj-7-tuple(v_761)) && success?(2-proj-7-tuple(v_761))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then dhexp(2-proj-2-tuple(v_763),5-proj-7-tuple(v_761)) else fail-any) else fail-any))) in
        {261}let v_766: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_764),(if (success?(5-proj-7-tuple(v_761)) && success?(2-proj-7-tuple(v_761))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then dhexp(2-proj-2-tuple(v_763),5-proj-7-tuple(v_761)) else fail-any) else fail-any))) in
        {262}let v_767: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_764),(if (success?(5-proj-7-tuple(v_761)) && success?(2-proj-7-tuple(v_761))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then dhexp(2-proj-2-tuple(v_763),5-proj-7-tuple(v_761)) else fail-any) else fail-any))) in
        {263}let v_768: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_761)) && success?(2-proj-7-tuple(v_761))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then dhexp(2-proj-2-tuple(v_763),5-proj-7-tuple(v_761)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_764))) then (if not-caught-fail(v_765) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (v_765,v_766,v_767) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {264}let v_769: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_761)) && success?(2-proj-7-tuple(v_761))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then dhexp(2-proj-2-tuple(v_763),5-proj-7-tuple(v_761)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_761))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_768)) then cipherstatepack(2-proj-3-tuple(v_768),minnonce) else fail-any),1-proj-3-tuple(v_768),3-proj-3-tuple(v_764)) else fail-any) else fail-any) else fail-any)) in
        {265}let v_770: bitstring = catch-fail(symmetricstateunpack(v_769)) in
        {266}let v_771: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_770))) in
        {267}let v_772: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_771),2-proj-2-tuple(v_771),3-proj-3-tuple(v_770),msg_c(me_674,them_673))) in
        {268}let v_773: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_770))) in
        {269}let v_774: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_771))) && success?(1-proj-3-tuple(v_770))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then cipherstatepack(1-proj-2-tuple(v_773),increment_nonce(2-proj-2-tuple(v_771))) else fail-any) else fail-any)) in
        {270}let v_775: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_770)) && success?(1-proj-3-tuple(v_770))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then (if not-caught-fail(v_772) then (if not-caught-fail(v_774) then (v_774,v_772) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {271}let v_776: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_775),2-proj-3-tuple(v_770),3-proj-3-tuple(v_770)))) in
        {272}let v_777: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_775)) && success?(symmetricstatepack(1-proj-2-tuple(v_775),2-proj-3-tuple(v_770),3-proj-3-tuple(v_770)))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then symmetricstatepack(1-proj-3-tuple(v_776),2-proj-3-tuple(v_776),hash(3-proj-3-tuple(v_776),2-proj-2-tuple(v_775))) else fail-any) else fail-any)) in
        {273}let v_778: bitstring = catch-fail((if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then (if not-caught-fail(v_777) then (v_777,2-proj-2-tuple(v_775)) else fail-any) else fail-any) else fail-any)) in
        {274}let v_779: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_778),2-proj-7-tuple(v_761),3-proj-7-tuple(v_761),4-proj-7-tuple(v_761),5-proj-7-tuple(v_761),6-proj-7-tuple(v_761),7-proj-7-tuple(v_761))) in
        {275}let v_780: bitstring = catch-fail(concat3(1-proj-3-tuple(v_762),2-proj-3-tuple(v_762),2-proj-2-tuple(v_778))) in
        {276}let (hs_781: handshakestate,re_782: key,message_c_783: bitstring) = (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-7-tuple(v_761))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then (if not-caught-fail(v_769) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (v_779,5-proj-7-tuple(v_761),v_780) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {277}event SendMsg(me_674,them_673,stage_c,msg_c(me_674,them_673),true);
        {278}insert statestore(me_674,them_673,statepack_d(hs_781));
        {279}out(pub, message_c_783)
    ) | (
        {299}get statestore(=me_674,=them_673,statepack_d(hs_784: handshakestate)) in
        {281}in(pub, message_d_785: bitstring);
        {282}let v_786: bitstring = catch-fail(handshakestateunpack(hs_784)) in
        {283}let v_787: bitstring = catch-fail(deconcat3(message_d_785)) in
        {284}let v_788: bool = catch-fail(true) in
        {285}let v_789: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_786))) in
        {286}let v_790: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_789))) in
        {287}let v_791: aead = catch-fail(decrypt(1-proj-2-tuple(v_790),2-proj-2-tuple(v_790),3-proj-3-tuple(v_789),3-proj-3-tuple(v_787))) in
        {288}let v_792: bitstring = catch-fail(aeadunpack(v_791)) in
        {289}let v_793: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_789))) in
        {290}let v_794: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_790))) && success?(1-proj-3-tuple(v_789))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-2-tuple(v_793))))) then cipherstatepack(1-proj-2-tuple(v_793),increment_nonce(2-proj-2-tuple(v_790))) else fail-any) else fail-any)) in
        {291}let v_795: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_787)) && (success?(3-proj-3-tuple(v_789)) && success?(1-proj-3-tuple(v_789)))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then (if not-caught-fail(v_791) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then (if not-caught-fail(v_794) then (v_794,3-proj-3-tuple(v_792),1-proj-3-tuple(v_792)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {292}let v_796: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)))) in
        {293}let v_797: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_787)) && success?(symmetricstatepack(1-proj-3-tuple(v_795),2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then symmetricstatepack(1-proj-3-tuple(v_796),2-proj-3-tuple(v_796),hash(3-proj-3-tuple(v_796),3-proj-3-tuple(v_787))) else fail-any) else fail-any)) in
        {294}let v_798: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_787)) && success?(1-proj-7-tuple(v_786))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if not-caught-fail(v_797) then (v_797,2-proj-3-tuple(v_795),3-proj-3-tuple(v_795)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_799: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_798),2-proj-7-tuple(v_786),3-proj-7-tuple(v_786),4-proj-7-tuple(v_786),5-proj-7-tuple(v_786),6-proj-7-tuple(v_786),7-proj-7-tuple(v_786))) in
        {296}let (hs_800: handshakestate,re_801: key,plaintext_d_802: bitstring,valid_803: bool) = (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-7-tuple(v_786))))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_788) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then (if (v_788 && 3-proj-3-tuple(v_798)) then (if not-caught-fail(v_799) then (v_799,getpublickey(3-proj-7-tuple(v_786)),2-proj-3-tuple(v_798),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {297}event RecvMsg(me_674,them_673,stage_d,plaintext_d_802,valid_803);
        {298}insert statestore(me_674,them_673,statepack_e(hs_800))
    ) | (
        {325}get statestore(=me_674,=them_673,statepack_e(hs_804: handshakestate)) in
        {300}let v_805: bitstring = catch-fail(handshakestateunpack(hs_804)) in
        {301}let v_806: bitstring = catch-fail((empty,empty,empty)) in
        {302}let v_807: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_805))) in
        {303}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_807))) in
        {304}let v_809: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_808),2-proj-2-tuple(v_808),3-proj-3-tuple(v_807),msg_e(me_674,them_673))) in
        {305}let v_810: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_807))) in
        {306}let v_811: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_808))) && success?(1-proj-3-tuple(v_807))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then cipherstatepack(1-proj-2-tuple(v_810),increment_nonce(2-proj-2-tuple(v_808))) else fail-any) else fail-any)) in
        {307}let v_812: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_807)) && success?(1-proj-3-tuple(v_807))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then (if not-caught-fail(v_809) then (if not-caught-fail(v_811) then (v_811,v_809) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {308}let v_813: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_812),2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)))) in
        {309}let v_814: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_812)) && success?(symmetricstatepack(1-proj-2-tuple(v_812),2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_813),hash(3-proj-3-tuple(v_813),2-proj-2-tuple(v_812))) else fail-any) else fail-any)) in
        {310}let v_815: bitstring = catch-fail((if success?(1-proj-7-tuple(v_805)) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then (if not-caught-fail(v_814) then (v_814,2-proj-2-tuple(v_812)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {311}let v_816: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_815),2-proj-7-tuple(v_805),3-proj-7-tuple(v_805),4-proj-7-tuple(v_805),5-proj-7-tuple(v_805),6-proj-7-tuple(v_805),7-proj-7-tuple(v_805))) in
        {312}let v_817: bitstring = catch-fail(concat3(1-proj-3-tuple(v_806),2-proj-3-tuple(v_806),2-proj-2-tuple(v_815))) in
        {313}let v_818: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_815))) in
        {314}let v_819: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_818),zero)) in
        {315}let v_820: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_818),zero)) in
        {316}let v_821: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_818),zero)) in
        {317}let v_822: bitstring = catch-fail((if success?(2-proj-3-tuple(v_818)) then (if not-caught-fail(v_819) then (if not-caught-fail(v_820) then (if not-caught-fail(v_821) then (v_819,v_820,v_821) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {318}let v_823: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_822)) then cipherstatepack(1-proj-3-tuple(v_822),minnonce) else fail-any)) in
        {319}let v_824: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_822)) then cipherstatepack(2-proj-3-tuple(v_822),minnonce) else fail-any)) in
        {320}let v_825: bitstring = catch-fail((if success?(1-proj-2-tuple(v_815)) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (1-proj-2-tuple(v_815),v_823,v_824) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let (hs_826: handshakestate,re_827: key,message_e_828: bitstring,cs1_829: cipherstate,cs2_830: cipherstate) = (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-7-tuple(v_805))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-2-tuple(v_815))))) then (if not-caught-fail(v_816) then (if not-caught-fail(v_817) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (v_816,5-proj-7-tuple(v_805),v_817,2-proj-3-tuple(v_825),3-proj-3-tuple(v_825)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {322}event SendMsg(me_674,them_673,stage_e,msg_e(me_674,them_673),true);
        {323}insert statestore(me_674,them_673,statepack_f(hs_826));
        {324}out(pub, message_e_828)
    ) | (
        {326}event LeakS(phase0,me_674);
        {327}out(pub, key_s(me_674))
    ) | (
        {328}phase 1;
        {329}event LeakS(phase1,me_674);
        {330}out(pub, key_s(me_674))
    )
) | (
    {331}let them_831: principal = alice in
    {332}let me_832: principal = bob in
    {333}let s_833: keypair = keypairpack(empty,empty) in
    {334}out(pub, getpublickey(s_833));
    (
        {335}let e_834: keypair = keypairpack(empty,empty) in
        {336}let v_835: key = catch-fail(dhexp(key_s(them_831),g)) in
        {337}let rs_836: key = getpublickey((if not-caught-fail(v_835) then keypairpack(v_835,key_s(them_831)) else fail-any)) in
        {338}let re_837: key = empty in
        {339}let v_838: bitstring = catch-fail(hash(somename,empty)) in
        {340}let v_839: key = catch-fail(v_838) in
        {341}let v_840: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {342}let v_841: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_838) then (if not-caught-fail(v_839) then (if not-caught-fail(v_840) then symmetricstatepack(v_840,v_839,v_838) else fail-any) else fail-any) else fail-any))) in
        {343}let v_842: symmetricstate = catch-fail((if success?((if not-caught-fail(v_838) then (if not-caught-fail(v_839) then (if not-caught-fail(v_840) then symmetricstatepack(v_840,v_839,v_838) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then symmetricstatepack(1-proj-3-tuple(v_841),2-proj-3-tuple(v_841),hash(3-proj-3-tuple(v_841),empty)) else fail-any) else fail-any)) in
        {344}let v_843: bitstring = catch-fail(symmetricstateunpack(v_842)) in
        {345}let v_844: symmetricstate = catch-fail((if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then symmetricstatepack(1-proj-3-tuple(v_843),2-proj-3-tuple(v_843),hash(3-proj-3-tuple(v_843),rs_836)) else fail-any)) in
        {346}let hs_845: handshakestate = (if not-caught-fail(v_842) then (if not-caught-fail(v_844) then handshakestatepack(v_844,s_833,e_834,rs_836,re_837,empty,false) else fail-any) else fail-any) in
        {347}insert statestore(me_832,them_831,statepack_a(hs_845))
    ) | (
        {369}get statestore(=me_832,=them_831,statepack_a(hs_846: handshakestate)) in
        {348}in(pub, message_a_847: bitstring);
        {349}let v_848: bitstring = catch-fail(handshakestateunpack(hs_846)) in
        {350}let v_849: bitstring = catch-fail(deconcat3(message_a_847)) in
        {351}let v_850: bool = catch-fail(true) in
        {352}let v_851: key = catch-fail(1-proj-3-tuple(v_849)) in
        {353}let v_852: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_848))) in
        {354}let v_853: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_848)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then symmetricstatepack(1-proj-3-tuple(v_852),2-proj-3-tuple(v_852),hash(3-proj-3-tuple(v_852),v_851)) else fail-any) else fail-any)) in
        {355}let v_854: bitstring = catch-fail(symmetricstateunpack(v_853)) in
        {356}let v_855: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_854))) in
        {357}let v_856: aead = catch-fail(decrypt(1-proj-2-tuple(v_855),2-proj-2-tuple(v_855),3-proj-3-tuple(v_854),3-proj-3-tuple(v_849))) in
        {358}let v_857: bitstring = catch-fail(aeadunpack(v_856)) in
        {359}let v_858: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_854))) in
        {360}let v_859: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_855))) && success?(1-proj-3-tuple(v_854))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then cipherstatepack(1-proj-2-tuple(v_858),increment_nonce(2-proj-2-tuple(v_855))) else fail-any) else fail-any)) in
        {361}let v_860: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_849)) && (success?(3-proj-3-tuple(v_854)) && success?(1-proj-3-tuple(v_854)))) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-2-tuple(v_855))))) then (if not-caught-fail(v_856) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if not-caught-fail(v_859) then (v_859,3-proj-3-tuple(v_857),1-proj-3-tuple(v_857)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {362}let v_861: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)))) in
        {363}let v_862: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_849)) && success?(symmetricstatepack(1-proj-3-tuple(v_860),2-proj-3-tuple(v_854),3-proj-3-tuple(v_854)))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then symmetricstatepack(1-proj-3-tuple(v_861),2-proj-3-tuple(v_861),hash(3-proj-3-tuple(v_861),3-proj-3-tuple(v_849))) else fail-any) else fail-any)) in
        {364}let v_863: bitstring = catch-fail((if success?(3-proj-3-tuple(v_849)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if not-caught-fail(v_862) then (v_862,2-proj-3-tuple(v_860),3-proj-3-tuple(v_860)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {365}let v_864: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_863),2-proj-7-tuple(v_848),3-proj-7-tuple(v_848),4-proj-7-tuple(v_848),v_851,6-proj-7-tuple(v_848),7-proj-7-tuple(v_848))) in
        {366}let (hs_865: handshakestate,re_866: key,plaintext_a: bitstring,valid_867: bool) = (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-7-tuple(v_848))))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (if not-caught-fail(v_853) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then (if (v_850 && 3-proj-3-tuple(v_863)) then (if not-caught-fail(v_864) then (v_864,getpublickey(3-proj-7-tuple(v_848)),2-proj-3-tuple(v_863),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {367}event RecvMsg(me_832,them_831,stage_a,plaintext_a,valid_867);
        {368}insert statestore(me_832,them_831,statepack_b(hs_865))
    ) | (
        {418}get statestore(=me_832,=them_831,statepack_b(hs_868: handshakestate)) in
        {370}let v_869: bitstring = catch-fail(handshakestateunpack(hs_868)) in
        {371}let v_870: bitstring = catch-fail((empty,empty,empty)) in
        {372}new key_e_871[me_832,them_831]: key;
        {373}let v_872: key = catch-fail(dhexp(key_e_871,g)) in
        {374}let v_873: keypair = catch-fail((if not-caught-fail(v_872) then keypairpack(v_872,key_e_871) else fail-any)) in
        {375}let v_874: bitstring = catch-fail(getpublickey(v_873)) in
        {376}let v_875: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_869))) in
        {377}let v_876: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_869)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then symmetricstatepack(1-proj-3-tuple(v_875),2-proj-3-tuple(v_875),hash(3-proj-3-tuple(v_875),v_874)) else fail-any) else fail-any)) in
        {378}let v_877: bitstring = catch-fail(keypairunpack(v_873)) in
        {379}let v_878: bitstring = catch-fail(symmetricstateunpack(v_876)) in
        {380}let v_879: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_878),(if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then dhexp(2-proj-2-tuple(v_877),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {381}let v_880: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_878),(if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then dhexp(2-proj-2-tuple(v_877),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {382}let v_881: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_878),(if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then dhexp(2-proj-2-tuple(v_877),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {383}let v_882: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then dhexp(2-proj-2-tuple(v_877),5-proj-7-tuple(v_869)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_878))) then (if not-caught-fail(v_879) then (if not-caught-fail(v_880) then (if not-caught-fail(v_881) then (v_879,v_880,v_881) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {384}let v_883: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then dhexp(2-proj-2-tuple(v_877),5-proj-7-tuple(v_869)) else fail-any) else fail-any)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_882)) then cipherstatepack(2-proj-3-tuple(v_882),minnonce) else fail-any),1-proj-3-tuple(v_882),3-proj-3-tuple(v_878)) else fail-any) else fail-any) else fail-any)) in
        {385}let v_884: key = catch-fail(dhexp(key_s(me_832),g)) in
        {386}let v_885: keypair = catch-fail((if not-caught-fail(v_884) then keypairpack(v_884,key_s(me_832)) else fail-any)) in
        {387}let v_886: bitstring = catch-fail(symmetricstateunpack(v_883)) in
        {388}let v_887: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_886))) in
        {389}let v_888: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_887),2-proj-2-tuple(v_887),3-proj-3-tuple(v_886),getpublickey(v_885))) in
        {390}let v_889: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_886))) in
        {391}let v_890: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_887))) && success?(1-proj-3-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then cipherstatepack(1-proj-2-tuple(v_889),increment_nonce(2-proj-2-tuple(v_887))) else fail-any) else fail-any)) in
        {392}let v_891: bitstring = catch-fail((if (success?(getpublickey(v_885)) && (success?(3-proj-3-tuple(v_886)) && success?(1-proj-3-tuple(v_886)))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-2-tuple(v_887))))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_890) then (v_890,v_888) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let v_892: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_891),2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)))) in
        {394}let v_893: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_891)) && success?(symmetricstatepack(1-proj-2-tuple(v_891),2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_892),hash(3-proj-3-tuple(v_892),2-proj-2-tuple(v_891))) else fail-any) else fail-any)) in
        {395}let v_894: bitstring = catch-fail((if success?(getpublickey(v_885)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then (if not-caught-fail(v_893) then (v_893,2-proj-2-tuple(v_891)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {396}let v_895: bitstring = catch-fail(keypairunpack(v_885)) in
        {397}let v_896: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_894))) in
        {398}let v_897: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_896),(if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {399}let v_898: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_896),(if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {400}let v_899: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_896),(if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_869)) else fail-any) else fail-any))) in
        {401}let v_900: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_869)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_896))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (if not-caught-fail(v_899) then (v_897,v_898,v_899) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_901: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_869)) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then dhexp(2-proj-2-tuple(v_895),5-proj-7-tuple(v_869)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_894))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_900)) then cipherstatepack(2-proj-3-tuple(v_900),minnonce) else fail-any),1-proj-3-tuple(v_900),3-proj-3-tuple(v_896)) else fail-any) else fail-any) else fail-any)) in
        {403}let v_902: bitstring = catch-fail(symmetricstateunpack(v_901)) in
        {404}let v_903: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_902))) in
        {405}let v_904: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_903),2-proj-2-tuple(v_903),3-proj-3-tuple(v_902),msg_b(me_832,them_831))) in
        {406}let v_905: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_902))) in
        {407}let v_906: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_903))) && success?(1-proj-3-tuple(v_902))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-2-tuple(v_905))))) then cipherstatepack(1-proj-2-tuple(v_905),increment_nonce(2-proj-2-tuple(v_903))) else fail-any) else fail-any)) in
        {408}let v_907: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_902)) && success?(1-proj-3-tuple(v_902))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if not-caught-fail(v_904) then (if not-caught-fail(v_906) then (v_906,v_904) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {409}let v_908: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_907),2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)))) in
        {410}let v_909: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_907)) && success?(symmetricstatepack(1-proj-2-tuple(v_907),2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_908),hash(3-proj-3-tuple(v_908),2-proj-2-tuple(v_907))) else fail-any) else fail-any)) in
        {411}let v_910: bitstring = catch-fail((if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then (if not-caught-fail(v_909) then (v_909,2-proj-2-tuple(v_907)) else fail-any) else fail-any) else fail-any)) in
        {412}let v_911: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_910),v_885,v_873,4-proj-7-tuple(v_869),5-proj-7-tuple(v_869),6-proj-7-tuple(v_869),7-proj-7-tuple(v_869))) in
        {413}let v_912: bitstring = catch-fail(concat3(v_874,2-proj-2-tuple(v_894),2-proj-2-tuple(v_910))) in
        {414}let (hs_913: handshakestate,re_914: key,message_b_915: bitstring) = (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-7-tuple(v_869))))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if not-caught-fail(v_873) then (if not-caught-fail(v_874) then (if not-caught-fail(v_876) then (if not-caught-fail(v_883) then (if not-caught-fail(v_885) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then (if not-caught-fail(v_901) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-2-tuple(v_910))))) then (if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (v_911,5-proj-7-tuple(v_869),v_912) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {415}event SendMsg(me_832,them_831,stage_b,msg_b(me_832,them_831),true);
        {416}insert statestore(me_832,them_831,statepack_c(hs_913));
        {417}out(pub, message_b_915)
    ) | (
        {444}get statestore(=me_832,=them_831,statepack_c(hs_916: handshakestate)) in
        {419}in(pub, message_c_917: bitstring);
        {420}let v_918: bitstring = catch-fail(handshakestateunpack(hs_916)) in
        {421}let v_919: bitstring = catch-fail(deconcat3(message_c_917)) in
        {422}let v_920: bool = catch-fail(true) in
        {423}let v_921: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_918))) in
        {424}let v_922: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_918))) in
        {425}let v_923: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_922),(if (success?(4-proj-7-tuple(v_918)) && success?(3-proj-7-tuple(v_918))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_918)) else fail-any) else fail-any))) in
        {426}let v_924: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_922),(if (success?(4-proj-7-tuple(v_918)) && success?(3-proj-7-tuple(v_918))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_918)) else fail-any) else fail-any))) in
        {427}let v_925: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_922),(if (success?(4-proj-7-tuple(v_918)) && success?(3-proj-7-tuple(v_918))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_918)) else fail-any) else fail-any))) in
        {428}let v_926: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_918)) && success?(3-proj-7-tuple(v_918))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_918)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_922))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (v_923,v_924,v_925) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {429}let v_927: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_918)) && success?(3-proj-7-tuple(v_918))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then dhexp(2-proj-2-tuple(v_921),4-proj-7-tuple(v_918)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_918))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_926)) then cipherstatepack(2-proj-3-tuple(v_926),minnonce) else fail-any),1-proj-3-tuple(v_926),3-proj-3-tuple(v_922)) else fail-any) else fail-any) else fail-any)) in
        {430}let v_928: bitstring = catch-fail(symmetricstateunpack(v_927)) in
        {431}let v_929: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_928))) in
        {432}let v_930: aead = catch-fail(decrypt(1-proj-2-tuple(v_929),2-proj-2-tuple(v_929),3-proj-3-tuple(v_928),3-proj-3-tuple(v_919))) in
        {433}let v_931: bitstring = catch-fail(aeadunpack(v_930)) in
        {434}let v_932: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_928))) in
        {435}let v_933: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_929))) && success?(1-proj-3-tuple(v_928))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-2-tuple(v_932))))) then cipherstatepack(1-proj-2-tuple(v_932),increment_nonce(2-proj-2-tuple(v_929))) else fail-any) else fail-any)) in
        {436}let v_934: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_919)) && (success?(3-proj-3-tuple(v_928)) && success?(1-proj-3-tuple(v_928)))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_930) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if not-caught-fail(v_933) then (v_933,3-proj-3-tuple(v_931),1-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_935: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)))) in
        {438}let v_936: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_919)) && success?(symmetricstatepack(1-proj-3-tuple(v_934),2-proj-3-tuple(v_928),3-proj-3-tuple(v_928)))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_935),hash(3-proj-3-tuple(v_935),3-proj-3-tuple(v_919))) else fail-any) else fail-any)) in
        {439}let v_937: bitstring = catch-fail((if success?(3-proj-3-tuple(v_919)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if not-caught-fail(v_936) then (v_936,2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {440}let v_938: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_937),2-proj-7-tuple(v_918),3-proj-7-tuple(v_918),4-proj-7-tuple(v_918),5-proj-7-tuple(v_918),6-proj-7-tuple(v_918),7-proj-7-tuple(v_918))) in
        {441}let (hs_939: handshakestate,re_940: key,plaintext_c: bitstring,valid_941: bool) = (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-7-tuple(v_918))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if not-caught-fail(v_920) then (if not-caught-fail(v_927) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if (v_920 && 3-proj-3-tuple(v_937)) then (if not-caught-fail(v_938) then (v_938,getpublickey(3-proj-7-tuple(v_918)),2-proj-3-tuple(v_937),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {442}event RecvMsg(me_832,them_831,stage_c,plaintext_c,valid_941);
        {443}insert statestore(me_832,them_831,statepack_d(hs_939))
    ) | (
        {462}get statestore(=me_832,=them_831,statepack_d(hs_942: handshakestate)) in
        {445}let v_943: bitstring = catch-fail(handshakestateunpack(hs_942)) in
        {446}let v_944: bitstring = catch-fail((empty,empty,empty)) in
        {447}let v_945: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_943))) in
        {448}let v_946: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_945))) in
        {449}let v_947: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_946),2-proj-2-tuple(v_946),3-proj-3-tuple(v_945),msg_d(me_832,them_831))) in
        {450}let v_948: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_945))) in
        {451}let v_949: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_946))) && success?(1-proj-3-tuple(v_945))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then cipherstatepack(1-proj-2-tuple(v_948),increment_nonce(2-proj-2-tuple(v_946))) else fail-any) else fail-any)) in
        {452}let v_950: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_945)) && success?(1-proj-3-tuple(v_945))) then (if (not-caught-fail(v_946) && success?(is-true(success?(1-proj-2-tuple(v_946))))) then (if not-caught-fail(v_947) then (if not-caught-fail(v_949) then (v_949,v_947) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {453}let v_951: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_950),2-proj-3-tuple(v_945),3-proj-3-tuple(v_945)))) in
        {454}let v_952: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_950)) && success?(symmetricstatepack(1-proj-2-tuple(v_950),2-proj-3-tuple(v_945),3-proj-3-tuple(v_945)))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then symmetricstatepack(1-proj-3-tuple(v_951),2-proj-3-tuple(v_951),hash(3-proj-3-tuple(v_951),2-proj-2-tuple(v_950))) else fail-any) else fail-any)) in
        {455}let v_953: bitstring = catch-fail((if success?(1-proj-7-tuple(v_943)) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then (if not-caught-fail(v_952) then (v_952,2-proj-2-tuple(v_950)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {456}let v_954: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_953),2-proj-7-tuple(v_943),3-proj-7-tuple(v_943),4-proj-7-tuple(v_943),5-proj-7-tuple(v_943),6-proj-7-tuple(v_943),7-proj-7-tuple(v_943))) in
        {457}let v_955: bitstring = catch-fail(concat3(1-proj-3-tuple(v_944),2-proj-3-tuple(v_944),2-proj-2-tuple(v_953))) in
        {458}let (hs_956: handshakestate,re_957: key,message_d_958: bitstring) = (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-7-tuple(v_943))))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-3-tuple(v_944))))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-2-tuple(v_953))))) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (v_954,5-proj-7-tuple(v_943),v_955) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {459}event SendMsg(me_832,them_831,stage_d,msg_d(me_832,them_831),true);
        {460}insert statestore(me_832,them_831,statepack_e(hs_956));
        {461}out(pub, message_d_958)
    ) | (
        {490}get statestore(=me_832,=them_831,statepack_e(hs_959: handshakestate)) in
        {463}in(pub, message_e_960: bitstring);
        {464}let v_961: bitstring = catch-fail(handshakestateunpack(hs_959)) in
        {465}let v_962: bitstring = catch-fail(deconcat3(message_e_960)) in
        {466}let v_963: bool = catch-fail(true) in
        {467}let v_964: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_961))) in
        {468}let v_965: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_964))) in
        {469}let v_966: aead = catch-fail(decrypt(1-proj-2-tuple(v_965),2-proj-2-tuple(v_965),3-proj-3-tuple(v_964),3-proj-3-tuple(v_962))) in
        {470}let v_967: bitstring = catch-fail(aeadunpack(v_966)) in
        {471}let v_968: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_964))) in
        {472}let v_969: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_965))) && success?(1-proj-3-tuple(v_964))) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-2-tuple(v_968))))) then cipherstatepack(1-proj-2-tuple(v_968),increment_nonce(2-proj-2-tuple(v_965))) else fail-any) else fail-any)) in
        {473}let v_970: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_962)) && (success?(3-proj-3-tuple(v_964)) && success?(1-proj-3-tuple(v_964)))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then (if not-caught-fail(v_966) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-3-tuple(v_967))))) then (if not-caught-fail(v_969) then (v_969,3-proj-3-tuple(v_967),1-proj-3-tuple(v_967)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {474}let v_971: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_970),2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)))) in
        {475}let v_972: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_962)) && success?(symmetricstatepack(1-proj-3-tuple(v_970),2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then symmetricstatepack(1-proj-3-tuple(v_971),2-proj-3-tuple(v_971),hash(3-proj-3-tuple(v_971),3-proj-3-tuple(v_962))) else fail-any) else fail-any)) in
        {476}let v_973: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_962)) && success?(1-proj-7-tuple(v_961))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then (if not-caught-fail(v_972) then (v_972,2-proj-3-tuple(v_970),3-proj-3-tuple(v_970)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {477}let v_974: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_973),2-proj-7-tuple(v_961),3-proj-7-tuple(v_961),4-proj-7-tuple(v_961),5-proj-7-tuple(v_961),6-proj-7-tuple(v_961),7-proj-7-tuple(v_961))) in
        {478}let v_975: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_973))) in
        {479}let v_976: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_975),zero)) in
        {480}let v_977: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_975),zero)) in
        {481}let v_978: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_975),zero)) in
        {482}let v_979: bitstring = catch-fail((if success?(2-proj-3-tuple(v_975)) then (if not-caught-fail(v_976) then (if not-caught-fail(v_977) then (if not-caught-fail(v_978) then (v_976,v_977,v_978) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_980: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_979)) then cipherstatepack(1-proj-3-tuple(v_979),minnonce) else fail-any)) in
        {484}let v_981: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_979)) then cipherstatepack(2-proj-3-tuple(v_979),minnonce) else fail-any)) in
        {485}let v_982: bitstring = catch-fail((if success?(1-proj-3-tuple(v_973)) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if (not-caught-fail(v_979) && success?(is-true(success?(1-proj-3-tuple(v_979))))) then (if not-caught-fail(v_980) then (if not-caught-fail(v_981) then (1-proj-3-tuple(v_973),v_980,v_981) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {486}let (hs_983: handshakestate,re_984: key,plaintext_e: bitstring,valid_985: bool,cs1_986: cipherstate,cs2_987: cipherstate) = (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-7-tuple(v_961))))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (if not-caught-fail(v_963) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-3-tuple(v_973))))) then (if (v_963 && 3-proj-3-tuple(v_973)) then (if not-caught-fail(v_974) then (if (not-caught-fail(v_982) && success?(is-true(success?(1-proj-3-tuple(v_982))))) then (v_974,getpublickey(3-proj-7-tuple(v_961)),2-proj-3-tuple(v_973),true,2-proj-3-tuple(v_982),3-proj-3-tuple(v_982)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {487}event RecvMsg(me_832,them_831,stage_e,plaintext_e,valid_985);
        {488}insert statestore(me_832,them_831,statepack_f(hs_983));
        {489}event RecvEnd(valid_985)
    ) | (
        {491}event LeakS(phase0,me_832);
        {492}out(pub, key_s(me_832))
    ) | (
        {493}phase 1;
        {494}event LeakS(phase1,me_832);
        {495}out(pub, key_s(me_832))
    )
) | (
    {496}let them_988: principal = charlie in
    {497}let me_989: principal = bob in
    {498}let s_990: keypair = keypairpack(empty,empty) in
    {499}out(pub, getpublickey(s_990));
    (
        {500}let e_991: keypair = keypairpack(empty,empty) in
        {501}let v_992: key = catch-fail(dhexp(key_s(them_988),g)) in
        {502}let rs_993: key = getpublickey((if not-caught-fail(v_992) then keypairpack(v_992,key_s(them_988)) else fail-any)) in
        {503}let re_994: key = empty in
        {504}let v_995: bitstring = catch-fail(hash(somename,empty)) in
        {505}let v_996: key = catch-fail(v_995) in
        {506}let v_997: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {507}let v_998: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (if not-caught-fail(v_997) then symmetricstatepack(v_997,v_996,v_995) else fail-any) else fail-any) else fail-any))) in
        {508}let v_999: symmetricstate = catch-fail((if success?((if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (if not-caught-fail(v_997) then symmetricstatepack(v_997,v_996,v_995) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-3-tuple(v_998))))) then symmetricstatepack(1-proj-3-tuple(v_998),2-proj-3-tuple(v_998),hash(3-proj-3-tuple(v_998),empty)) else fail-any) else fail-any)) in
        {509}let v_1000: bitstring = catch-fail(symmetricstateunpack(v_999)) in
        {510}let v_1001: symmetricstate = catch-fail((if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then symmetricstatepack(1-proj-3-tuple(v_1000),2-proj-3-tuple(v_1000),hash(3-proj-3-tuple(v_1000),rs_993)) else fail-any)) in
        {511}let hs_1002: handshakestate = (if not-caught-fail(v_999) then (if not-caught-fail(v_1001) then handshakestatepack(v_1001,s_990,e_991,rs_993,re_994,empty,false) else fail-any) else fail-any) in
        {512}insert statestore(me_989,them_988,statepack_a(hs_1002))
    ) | (
        {534}get statestore(=me_989,=them_988,statepack_a(hs_1003: handshakestate)) in
        {513}in(pub, message_a_1004: bitstring);
        {514}let v_1005: bitstring = catch-fail(handshakestateunpack(hs_1003)) in
        {515}let v_1006: bitstring = catch-fail(deconcat3(message_a_1004)) in
        {516}let v_1007: bool = catch-fail(true) in
        {517}let v_1008: key = catch-fail(1-proj-3-tuple(v_1006)) in
        {518}let v_1009: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1005))) in
        {519}let v_1010: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1005)) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then symmetricstatepack(1-proj-3-tuple(v_1009),2-proj-3-tuple(v_1009),hash(3-proj-3-tuple(v_1009),v_1008)) else fail-any) else fail-any)) in
        {520}let v_1011: bitstring = catch-fail(symmetricstateunpack(v_1010)) in
        {521}let v_1012: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1011))) in
        {522}let v_1013: aead = catch-fail(decrypt(1-proj-2-tuple(v_1012),2-proj-2-tuple(v_1012),3-proj-3-tuple(v_1011),3-proj-3-tuple(v_1006))) in
        {523}let v_1014: bitstring = catch-fail(aeadunpack(v_1013)) in
        {524}let v_1015: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1011))) in
        {525}let v_1016: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1012))) && success?(1-proj-3-tuple(v_1011))) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-2-tuple(v_1015))))) then cipherstatepack(1-proj-2-tuple(v_1015),increment_nonce(2-proj-2-tuple(v_1012))) else fail-any) else fail-any)) in
        {526}let v_1017: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1006)) && (success?(3-proj-3-tuple(v_1011)) && success?(1-proj-3-tuple(v_1011)))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then (if not-caught-fail(v_1013) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-3-tuple(v_1014))))) then (if not-caught-fail(v_1016) then (v_1016,3-proj-3-tuple(v_1014),1-proj-3-tuple(v_1014)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {527}let v_1018: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1017),2-proj-3-tuple(v_1011),3-proj-3-tuple(v_1011)))) in
        {528}let v_1019: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1006)) && success?(symmetricstatepack(1-proj-3-tuple(v_1017),2-proj-3-tuple(v_1011),3-proj-3-tuple(v_1011)))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-3-tuple(v_1018))))) then symmetricstatepack(1-proj-3-tuple(v_1018),2-proj-3-tuple(v_1018),hash(3-proj-3-tuple(v_1018),3-proj-3-tuple(v_1006))) else fail-any) else fail-any)) in
        {529}let v_1020: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1006)) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then (if not-caught-fail(v_1019) then (v_1019,2-proj-3-tuple(v_1017),3-proj-3-tuple(v_1017)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {530}let v_1021: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1020),2-proj-7-tuple(v_1005),3-proj-7-tuple(v_1005),4-proj-7-tuple(v_1005),v_1008,6-proj-7-tuple(v_1005),7-proj-7-tuple(v_1005))) in
        {531}let (hs_1022: handshakestate,re_1023: key,plaintext_a_1024: bitstring,valid_1025: bool) = (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-7-tuple(v_1005))))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then (if not-caught-fail(v_1007) then (if not-caught-fail(v_1008) then (if not-caught-fail(v_1010) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if (v_1007 && 3-proj-3-tuple(v_1020)) then (if not-caught-fail(v_1021) then (v_1021,getpublickey(3-proj-7-tuple(v_1005)),2-proj-3-tuple(v_1020),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {532}event RecvMsg(me_989,them_988,stage_a,plaintext_a_1024,valid_1025);
        {533}insert statestore(me_989,them_988,statepack_b(hs_1022))
    ) | (
        {583}get statestore(=me_989,=them_988,statepack_b(hs_1026: handshakestate)) in
        {535}let v_1027: bitstring = catch-fail(handshakestateunpack(hs_1026)) in
        {536}let v_1028: bitstring = catch-fail((empty,empty,empty)) in
        {537}new key_e_1029[me_989,them_988]: key;
        {538}let v_1030: key = catch-fail(dhexp(key_e_1029,g)) in
        {539}let v_1031: keypair = catch-fail((if not-caught-fail(v_1030) then keypairpack(v_1030,key_e_1029) else fail-any)) in
        {540}let v_1032: bitstring = catch-fail(getpublickey(v_1031)) in
        {541}let v_1033: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1027))) in
        {542}let v_1034: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then symmetricstatepack(1-proj-3-tuple(v_1033),2-proj-3-tuple(v_1033),hash(3-proj-3-tuple(v_1033),v_1032)) else fail-any) else fail-any)) in
        {543}let v_1035: bitstring = catch-fail(keypairunpack(v_1031)) in
        {544}let v_1036: bitstring = catch-fail(symmetricstateunpack(v_1034)) in
        {545}let v_1037: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1036),(if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-2-tuple(v_1035))))) then dhexp(2-proj-2-tuple(v_1035),5-proj-7-tuple(v_1027)) else fail-any) else fail-any))) in
        {546}let v_1038: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1036),(if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-2-tuple(v_1035))))) then dhexp(2-proj-2-tuple(v_1035),5-proj-7-tuple(v_1027)) else fail-any) else fail-any))) in
        {547}let v_1039: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1036),(if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-2-tuple(v_1035))))) then dhexp(2-proj-2-tuple(v_1035),5-proj-7-tuple(v_1027)) else fail-any) else fail-any))) in
        {548}let v_1040: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-2-tuple(v_1035))))) then dhexp(2-proj-2-tuple(v_1035),5-proj-7-tuple(v_1027)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1036))) then (if not-caught-fail(v_1037) then (if not-caught-fail(v_1038) then (if not-caught-fail(v_1039) then (v_1037,v_1038,v_1039) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {549}let v_1041: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-2-tuple(v_1035))))) then dhexp(2-proj-2-tuple(v_1035),5-proj-7-tuple(v_1027)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1040)) then cipherstatepack(2-proj-3-tuple(v_1040),minnonce) else fail-any),1-proj-3-tuple(v_1040),3-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any)) in
        {550}let v_1042: key = catch-fail(dhexp(key_s(me_989),g)) in
        {551}let v_1043: keypair = catch-fail((if not-caught-fail(v_1042) then keypairpack(v_1042,key_s(me_989)) else fail-any)) in
        {552}let v_1044: bitstring = catch-fail(symmetricstateunpack(v_1041)) in
        {553}let v_1045: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1044))) in
        {554}let v_1046: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1045),2-proj-2-tuple(v_1045),3-proj-3-tuple(v_1044),getpublickey(v_1043))) in
        {555}let v_1047: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1044))) in
        {556}let v_1048: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1045))) && success?(1-proj-3-tuple(v_1044))) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-2-tuple(v_1047))))) then cipherstatepack(1-proj-2-tuple(v_1047),increment_nonce(2-proj-2-tuple(v_1045))) else fail-any) else fail-any)) in
        {557}let v_1049: bitstring = catch-fail((if (success?(getpublickey(v_1043)) && (success?(3-proj-3-tuple(v_1044)) && success?(1-proj-3-tuple(v_1044)))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then (if not-caught-fail(v_1046) then (if not-caught-fail(v_1048) then (v_1048,v_1046) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {558}let v_1050: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1049),2-proj-3-tuple(v_1044),3-proj-3-tuple(v_1044)))) in
        {559}let v_1051: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1049)) && success?(symmetricstatepack(1-proj-2-tuple(v_1049),2-proj-3-tuple(v_1044),3-proj-3-tuple(v_1044)))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1050),hash(3-proj-3-tuple(v_1050),2-proj-2-tuple(v_1049))) else fail-any) else fail-any)) in
        {560}let v_1052: bitstring = catch-fail((if success?(getpublickey(v_1043)) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-2-tuple(v_1049))))) then (if not-caught-fail(v_1051) then (v_1051,2-proj-2-tuple(v_1049)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1053: bitstring = catch-fail(keypairunpack(v_1043)) in
        {562}let v_1054: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1052))) in
        {563}let v_1055: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1054),(if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1027)) else fail-any) else fail-any))) in
        {564}let v_1056: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1054),(if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1027)) else fail-any) else fail-any))) in
        {565}let v_1057: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1054),(if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1027)) else fail-any) else fail-any))) in
        {566}let v_1058: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1027)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1054))) then (if not-caught-fail(v_1055) then (if not-caught-fail(v_1056) then (if not-caught-fail(v_1057) then (v_1055,v_1056,v_1057) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {567}let v_1059: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-2-tuple(v_1053))))) then dhexp(2-proj-2-tuple(v_1053),5-proj-7-tuple(v_1027)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1052))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-3-tuple(v_1058))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1058)) then cipherstatepack(2-proj-3-tuple(v_1058),minnonce) else fail-any),1-proj-3-tuple(v_1058),3-proj-3-tuple(v_1054)) else fail-any) else fail-any) else fail-any)) in
        {568}let v_1060: bitstring = catch-fail(symmetricstateunpack(v_1059)) in
        {569}let v_1061: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1060))) in
        {570}let v_1062: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1061),2-proj-2-tuple(v_1061),3-proj-3-tuple(v_1060),msg_b(me_989,them_988))) in
        {571}let v_1063: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1060))) in
        {572}let v_1064: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1061))) && success?(1-proj-3-tuple(v_1060))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then cipherstatepack(1-proj-2-tuple(v_1063),increment_nonce(2-proj-2-tuple(v_1061))) else fail-any) else fail-any)) in
        {573}let v_1065: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1060)) && success?(1-proj-3-tuple(v_1060))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-2-tuple(v_1061))))) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1064) then (v_1064,v_1062) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {574}let v_1066: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1065),2-proj-3-tuple(v_1060),3-proj-3-tuple(v_1060)))) in
        {575}let v_1067: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1065)) && success?(symmetricstatepack(1-proj-2-tuple(v_1065),2-proj-3-tuple(v_1060),3-proj-3-tuple(v_1060)))) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then symmetricstatepack(1-proj-3-tuple(v_1066),2-proj-3-tuple(v_1066),hash(3-proj-3-tuple(v_1066),2-proj-2-tuple(v_1065))) else fail-any) else fail-any)) in
        {576}let v_1068: bitstring = catch-fail((if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if (not-caught-fail(v_1065) && success?(is-true(success?(1-proj-2-tuple(v_1065))))) then (if not-caught-fail(v_1067) then (v_1067,2-proj-2-tuple(v_1065)) else fail-any) else fail-any) else fail-any)) in
        {577}let v_1069: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1068),v_1043,v_1031,4-proj-7-tuple(v_1027),5-proj-7-tuple(v_1027),6-proj-7-tuple(v_1027),7-proj-7-tuple(v_1027))) in
        {578}let v_1070: bitstring = catch-fail(concat3(v_1032,2-proj-2-tuple(v_1052),2-proj-2-tuple(v_1068))) in
        {579}let (hs_1071: handshakestate,re_1072: key,message_b_1073: bitstring) = (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-7-tuple(v_1027))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if not-caught-fail(v_1031) then (if not-caught-fail(v_1032) then (if not-caught-fail(v_1034) then (if not-caught-fail(v_1041) then (if not-caught-fail(v_1043) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then (if not-caught-fail(v_1059) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-2-tuple(v_1068))))) then (if not-caught-fail(v_1069) then (if not-caught-fail(v_1070) then (v_1069,5-proj-7-tuple(v_1027),v_1070) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {580}event SendMsg(me_989,them_988,stage_b,msg_b(me_989,them_988),true);
        {581}insert statestore(me_989,them_988,statepack_c(hs_1071));
        {582}out(pub, message_b_1073)
    ) | (
        {609}get statestore(=me_989,=them_988,statepack_c(hs_1074: handshakestate)) in
        {584}in(pub, message_c_1075: bitstring);
        {585}let v_1076: bitstring = catch-fail(handshakestateunpack(hs_1074)) in
        {586}let v_1077: bitstring = catch-fail(deconcat3(message_c_1075)) in
        {587}let v_1078: bool = catch-fail(true) in
        {588}let v_1079: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1076))) in
        {589}let v_1080: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1076))) in
        {590}let v_1081: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1080),(if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any))) in
        {591}let v_1082: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1080),(if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any))) in
        {592}let v_1083: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1080),(if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any))) in
        {593}let v_1084: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1080))) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (if not-caught-fail(v_1083) then (v_1081,v_1082,v_1083) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {594}let v_1085: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1076)) && success?(3-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-2-tuple(v_1079))))) then dhexp(2-proj-2-tuple(v_1079),4-proj-7-tuple(v_1076)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1076))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1084)) then cipherstatepack(2-proj-3-tuple(v_1084),minnonce) else fail-any),1-proj-3-tuple(v_1084),3-proj-3-tuple(v_1080)) else fail-any) else fail-any) else fail-any)) in
        {595}let v_1086: bitstring = catch-fail(symmetricstateunpack(v_1085)) in
        {596}let v_1087: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1086))) in
        {597}let v_1088: aead = catch-fail(decrypt(1-proj-2-tuple(v_1087),2-proj-2-tuple(v_1087),3-proj-3-tuple(v_1086),3-proj-3-tuple(v_1077))) in
        {598}let v_1089: bitstring = catch-fail(aeadunpack(v_1088)) in
        {599}let v_1090: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1086))) in
        {600}let v_1091: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1087))) && success?(1-proj-3-tuple(v_1086))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-2-tuple(v_1090))))) then cipherstatepack(1-proj-2-tuple(v_1090),increment_nonce(2-proj-2-tuple(v_1087))) else fail-any) else fail-any)) in
        {601}let v_1092: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1077)) && (success?(3-proj-3-tuple(v_1086)) && success?(1-proj-3-tuple(v_1086)))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-2-tuple(v_1087))))) then (if not-caught-fail(v_1088) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-3-tuple(v_1089))))) then (if not-caught-fail(v_1091) then (v_1091,3-proj-3-tuple(v_1089),1-proj-3-tuple(v_1089)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {602}let v_1093: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1086),3-proj-3-tuple(v_1086)))) in
        {603}let v_1094: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1077)) && success?(symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1086),3-proj-3-tuple(v_1086)))) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-3-tuple(v_1093))))) then symmetricstatepack(1-proj-3-tuple(v_1093),2-proj-3-tuple(v_1093),hash(3-proj-3-tuple(v_1093),3-proj-3-tuple(v_1077))) else fail-any) else fail-any)) in
        {604}let v_1095: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1077)) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then (if not-caught-fail(v_1094) then (v_1094,2-proj-3-tuple(v_1092),3-proj-3-tuple(v_1092)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {605}let v_1096: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1095),2-proj-7-tuple(v_1076),3-proj-7-tuple(v_1076),4-proj-7-tuple(v_1076),5-proj-7-tuple(v_1076),6-proj-7-tuple(v_1076),7-proj-7-tuple(v_1076))) in
        {606}let (hs_1097: handshakestate,re_1098: key,plaintext_c_1099: bitstring,valid_1100: bool) = (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-7-tuple(v_1076))))) then (if (not-caught-fail(v_1077) && success?(is-true(success?(1-proj-3-tuple(v_1077))))) then (if not-caught-fail(v_1078) then (if not-caught-fail(v_1085) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (v_1078 && 3-proj-3-tuple(v_1095)) then (if not-caught-fail(v_1096) then (v_1096,getpublickey(3-proj-7-tuple(v_1076)),2-proj-3-tuple(v_1095),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {607}event RecvMsg(me_989,them_988,stage_c,plaintext_c_1099,valid_1100);
        {608}insert statestore(me_989,them_988,statepack_d(hs_1097))
    ) | (
        {627}get statestore(=me_989,=them_988,statepack_d(hs_1101: handshakestate)) in
        {610}let v_1102: bitstring = catch-fail(handshakestateunpack(hs_1101)) in
        {611}let v_1103: bitstring = catch-fail((empty,empty,empty)) in
        {612}let v_1104: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1102))) in
        {613}let v_1105: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1104))) in
        {614}let v_1106: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1105),2-proj-2-tuple(v_1105),3-proj-3-tuple(v_1104),msg_d(me_989,them_988))) in
        {615}let v_1107: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1104))) in
        {616}let v_1108: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1105))) && success?(1-proj-3-tuple(v_1104))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-2-tuple(v_1107))))) then cipherstatepack(1-proj-2-tuple(v_1107),increment_nonce(2-proj-2-tuple(v_1105))) else fail-any) else fail-any)) in
        {617}let v_1109: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1104)) && success?(1-proj-3-tuple(v_1104))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then (if not-caught-fail(v_1106) then (if not-caught-fail(v_1108) then (v_1108,v_1106) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {618}let v_1110: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1109),2-proj-3-tuple(v_1104),3-proj-3-tuple(v_1104)))) in
        {619}let v_1111: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1109)) && success?(symmetricstatepack(1-proj-2-tuple(v_1109),2-proj-3-tuple(v_1104),3-proj-3-tuple(v_1104)))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then symmetricstatepack(1-proj-3-tuple(v_1110),2-proj-3-tuple(v_1110),hash(3-proj-3-tuple(v_1110),2-proj-2-tuple(v_1109))) else fail-any) else fail-any)) in
        {620}let v_1112: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1102)) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-3-tuple(v_1104))))) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-2-tuple(v_1109))))) then (if not-caught-fail(v_1111) then (v_1111,2-proj-2-tuple(v_1109)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {621}let v_1113: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1112),2-proj-7-tuple(v_1102),3-proj-7-tuple(v_1102),4-proj-7-tuple(v_1102),5-proj-7-tuple(v_1102),6-proj-7-tuple(v_1102),7-proj-7-tuple(v_1102))) in
        {622}let v_1114: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1103),2-proj-3-tuple(v_1103),2-proj-2-tuple(v_1112))) in
        {623}let (hs_1115: handshakestate,re_1116: key,message_d_1117: bitstring) = (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-7-tuple(v_1102))))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-2-tuple(v_1112))))) then (if not-caught-fail(v_1113) then (if not-caught-fail(v_1114) then (v_1113,5-proj-7-tuple(v_1102),v_1114) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {624}event SendMsg(me_989,them_988,stage_d,msg_d(me_989,them_988),true);
        {625}insert statestore(me_989,them_988,statepack_e(hs_1115));
        {626}out(pub, message_d_1117)
    ) | (
        {655}get statestore(=me_989,=them_988,statepack_e(hs_1118: handshakestate)) in
        {628}in(pub, message_e_1119: bitstring);
        {629}let v_1120: bitstring = catch-fail(handshakestateunpack(hs_1118)) in
        {630}let v_1121: bitstring = catch-fail(deconcat3(message_e_1119)) in
        {631}let v_1122: bool = catch-fail(true) in
        {632}let v_1123: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1120))) in
        {633}let v_1124: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {634}let v_1125: aead = catch-fail(decrypt(1-proj-2-tuple(v_1124),2-proj-2-tuple(v_1124),3-proj-3-tuple(v_1123),3-proj-3-tuple(v_1121))) in
        {635}let v_1126: bitstring = catch-fail(aeadunpack(v_1125)) in
        {636}let v_1127: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1123))) in
        {637}let v_1128: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1124))) && success?(1-proj-3-tuple(v_1123))) then (if (not-caught-fail(v_1127) && success?(is-true(success?(1-proj-2-tuple(v_1127))))) then cipherstatepack(1-proj-2-tuple(v_1127),increment_nonce(2-proj-2-tuple(v_1124))) else fail-any) else fail-any)) in
        {638}let v_1129: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && (success?(3-proj-3-tuple(v_1123)) && success?(1-proj-3-tuple(v_1123)))) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then (if not-caught-fail(v_1125) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-3-tuple(v_1126))))) then (if not-caught-fail(v_1128) then (v_1128,3-proj-3-tuple(v_1126),1-proj-3-tuple(v_1126)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {639}let v_1130: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1129),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) in
        {640}let v_1131: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && success?(symmetricstatepack(1-proj-3-tuple(v_1129),2-proj-3-tuple(v_1123),3-proj-3-tuple(v_1123)))) then (if (not-caught-fail(v_1130) && success?(is-true(success?(1-proj-3-tuple(v_1130))))) then symmetricstatepack(1-proj-3-tuple(v_1130),2-proj-3-tuple(v_1130),hash(3-proj-3-tuple(v_1130),3-proj-3-tuple(v_1121))) else fail-any) else fail-any)) in
        {641}let v_1132: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1121)) && success?(1-proj-7-tuple(v_1120))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-3-tuple(v_1123))))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then (if not-caught-fail(v_1131) then (v_1131,2-proj-3-tuple(v_1129),3-proj-3-tuple(v_1129)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {642}let v_1133: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1132),2-proj-7-tuple(v_1120),3-proj-7-tuple(v_1120),4-proj-7-tuple(v_1120),5-proj-7-tuple(v_1120),6-proj-7-tuple(v_1120),7-proj-7-tuple(v_1120))) in
        {643}let v_1134: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1132))) in
        {644}let v_1135: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1134),zero)) in
        {645}let v_1136: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1134),zero)) in
        {646}let v_1137: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1134),zero)) in
        {647}let v_1138: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1134)) then (if not-caught-fail(v_1135) then (if not-caught-fail(v_1136) then (if not-caught-fail(v_1137) then (v_1135,v_1136,v_1137) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {648}let v_1139: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1138)) then cipherstatepack(1-proj-3-tuple(v_1138),minnonce) else fail-any)) in
        {649}let v_1140: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1138)) then cipherstatepack(2-proj-3-tuple(v_1138),minnonce) else fail-any)) in
        {650}let v_1141: bitstring = catch-fail((if success?(1-proj-3-tuple(v_1132)) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-3-tuple(v_1138))))) then (if not-caught-fail(v_1139) then (if not-caught-fail(v_1140) then (1-proj-3-tuple(v_1132),v_1139,v_1140) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {651}let (hs_1142: handshakestate,re_1143: key,plaintext_e_1144: bitstring,valid_1145: bool,cs1_1146: cipherstate,cs2_1147: cipherstate) = (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-7-tuple(v_1120))))) then (if (not-caught-fail(v_1121) && success?(is-true(success?(1-proj-3-tuple(v_1121))))) then (if not-caught-fail(v_1122) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-3-tuple(v_1132))))) then (if (v_1122 && 3-proj-3-tuple(v_1132)) then (if not-caught-fail(v_1133) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-3-tuple(v_1141))))) then (v_1133,getpublickey(3-proj-7-tuple(v_1120)),2-proj-3-tuple(v_1132),true,2-proj-3-tuple(v_1141),3-proj-3-tuple(v_1141)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {652}event RecvMsg(me_989,them_988,stage_e,plaintext_e_1144,valid_1145);
        {653}insert statestore(me_989,them_988,statepack_f(hs_1142));
        {654}event RecvEnd(valid_1145)
    ) | (
        {656}event LeakS(phase0,me_989);
        {657}out(pub, key_s(me_989))
    ) | (
        {658}phase 1;
        {659}event LeakS(phase1,me_989);
        {660}out(pub, key_s(me_989))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
Completing...
200 rules inserted. The rule base contains 200 rules. 219 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 40 rules in the queue.
600 rules inserted. The rule base contains 583 rules. 214 rules in the queue.
800 rules inserted. The rule base contains 767 rules. 46 rules in the queue.
1000 rules inserted. The rule base contains 967 rules. 318 rules in the queue.
1200 rules inserted. The rule base contains 1142 rules. 303 rules in the queue.
1400 rules inserted. The rule base contains 1294 rules. 282 rules in the queue.
1600 rules inserted. The rule base contains 1460 rules. 372 rules in the queue.
1800 rules inserted. The rule base contains 1634 rules. 349 rules in the queue.
2000 rules inserted. The rule base contains 1795 rules. 339 rules in the queue.
2200 rules inserted. The rule base contains 1986 rules. 377 rules in the queue.
2400 rules inserted. The rule base contains 2133 rules. 362 rules in the queue.
2600 rules inserted. The rule base contains 2277 rules. 323 rules in the queue.
2800 rules inserted. The rule base contains 2444 rules. 325 rules in the queue.
3000 rules inserted. The rule base contains 2577 rules. 343 rules in the queue.
3200 rules inserted. The rule base contains 2681 rules. 355 rules in the queue.
3400 rules inserted. The rule base contains 2805 rules. 341 rules in the queue.
3600 rules inserted. The rule base contains 2939 rules. 346 rules in the queue.
3800 rules inserted. The rule base contains 3039 rules. 339 rules in the queue.
4000 rules inserted. The rule base contains 3151 rules. 311 rules in the queue.
4200 rules inserted. The rule base contains 3287 rules. 349 rules in the queue.
4400 rules inserted. The rule base contains 3440 rules. 385 rules in the queue.
4600 rules inserted. The rule base contains 3565 rules. 395 rules in the queue.
4800 rules inserted. The rule base contains 3677 rules. 358 rules in the queue.
5000 rules inserted. The rule base contains 3807 rules. 337 rules in the queue.
5200 rules inserted. The rule base contains 3932 rules. 345 rules in the queue.
5400 rules inserted. The rule base contains 4036 rules. 323 rules in the queue.
5600 rules inserted. The rule base contains 4094 rules. 238 rules in the queue.
5800 rules inserted. The rule base contains 4241 rules. 245 rules in the queue.
6000 rules inserted. The rule base contains 4408 rules. 283 rules in the queue.
6200 rules inserted. The rule base contains 4548 rules. 307 rules in the queue.
6400 rules inserted. The rule base contains 4697 rules. 368 rules in the queue.
6600 rules inserted. The rule base contains 4831 rules. 353 rules in the queue.
6800 rules inserted. The rule base contains 4957 rules. 371 rules in the queue.
7000 rules inserted. The rule base contains 5103 rules. 358 rules in the queue.
7200 rules inserted. The rule base contains 5262 rules. 368 rules in the queue.
7400 rules inserted. The rule base contains 5402 rules. 351 rules in the queue.
7600 rules inserted. The rule base contains 5553 rules. 341 rules in the queue.
7800 rules inserted. The rule base contains 5698 rules. 338 rules in the queue.
8000 rules inserted. The rule base contains 5838 rules. 365 rules in the queue.
8200 rules inserted. The rule base contains 5975 rules. 349 rules in the queue.
8400 rules inserted. The rule base contains 6085 rules. 365 rules in the queue.
8600 rules inserted. The rule base contains 6211 rules. 319 rules in the queue.
8800 rules inserted. The rule base contains 6356 rules. 313 rules in the queue.
9000 rules inserted. The rule base contains 6456 rules. 264 rules in the queue.
9200 rules inserted. The rule base contains 6573 rules. 240 rules in the queue.
9400 rules inserted. The rule base contains 6685 rules. 243 rules in the queue.
9600 rules inserted. The rule base contains 6810 rules. 228 rules in the queue.
9800 rules inserted. The rule base contains 6937 rules. 211 rules in the queue.
10000 rules inserted. The rule base contains 7055 rules. 155 rules in the queue.
10200 rules inserted. The rule base contains 7136 rules. 76 rules in the queue.
10400 rules inserted. The rule base contains 7146 rules. 28 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_336953110 = key_e_691[me_674 = alice,them_673 = charlie,!1 = @sid_336953092]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {347}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {207}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {204}.
So the message concat3(dhexp(key_e_336953110,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953110,g)),msg_a(alice,charlie))) may be sent on channel pub at output {206}.
mess(pub,concat3(dhexp(key_e_336953110,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953110,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {369}.
The message concat3(dhexp(key_e_336953110,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953110,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {348}.
We have dhexp(key_e_336953110,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {367}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1228,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_336953148 = key_e_691[me_674 = alice,them_673 = charlie,!1 = @sid_336953130]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {347}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {207}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {204}.
So the message concat3(dhexp(key_e_336953148,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953148,g)),msg_a(alice,charlie))) may be sent on channel pub at output {206}.
mess(pub,concat3(dhexp(key_e_336953148,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953148,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {369}.
The message concat3(dhexp(key_e_336953148,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953148,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {348}.
We have dhexp(key_e_336953148,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {367}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_336953180 = key_e_691[me_674 = alice,them_673 = charlie,!1 = @sid_336953162]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {347}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {207}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {204}.
So the message concat3(dhexp(key_e_336953180,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953180,g)),msg_a(alice,charlie))) may be sent on channel pub at output {206}.
mess(pub,concat3(dhexp(key_e_336953180,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953180,g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {369}.
The message concat3(dhexp(key_e_336953180,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e_336953180,g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {348}.
We have dhexp(key_e_336953180,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {367}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_336953235 = key_e[me = alice,them = bob,!1 = @sid_336953221]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {40}.
So the message concat3(dhexp(key_336953235,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob))) may be sent on channel pub at output {42}.
mess(pub,concat3(dhexp(key_336953235,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_336953235,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_336953235,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_336953235,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_336953235,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_336953235,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_336953235,g).
attacker(dhexp(key_336953235,g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_336953235,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953235,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_336953290 = key_e[me = alice,them = bob,!1 = @sid_336953276]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {40}.
So the message concat3(dhexp(key_336953290,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob))) may be sent on channel pub at output {42}.
mess(pub,concat3(dhexp(key_336953290,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_336953290,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_336953290,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_336953290,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_336953290,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_336953290,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_336953290,g).
attacker(dhexp(key_336953290,g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_336953290,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953290,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_336953346 = key_e[me = alice,them = bob,!1 = @sid_336953332]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {40}.
So the message concat3(dhexp(key_336953346,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob))) may be sent on channel pub at output {42}.
mess(pub,concat3(dhexp(key_336953346,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_336953346,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_336953346,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_336953346,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_336953346,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_336953346,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_336953346,g).
attacker(dhexp(key_336953346,g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_336953346,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953346,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_336953401 = key_e[me = alice,them = bob,!1 = @sid_336953387]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {43}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {40}.
So the message concat3(dhexp(key_336953401,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob))) may be sent on channel pub at output {42}.
mess(pub,concat3(dhexp(key_336953401,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_336953401,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_336953401,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_336953401,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_336953401,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_336953401,g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_336953401,g).
attacker(dhexp(key_336953401,g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {7}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_336953401,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_336953401,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1228,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1228,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1228,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1228,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
