File "IN.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 231, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 232, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 232, character 36:
Warning: identifier h rebound.
File "IN.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 275, character 6:
Warning: identifier s rebound.
File "IN.noise.passive.pv", line 276, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 276, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IN.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 277, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 285, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 291, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 320, characters 48-53:
Warning: identifier valid1 rebound.
File "IN.noise.passive.pv", line 321, characters 6-7:
Warning: identifier rs rebound.
File "IN.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 324, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 332, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 505, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 497, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 490, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 332, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 333, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 335, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 336, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 339, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 482, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 271, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 275, character 6:
Warning: identifier s rebound.
File "IN.noise.passive.pv", line 276, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 276, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IN.noise.passive.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 277, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 558, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 549, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 551, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 350, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 542, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 285, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 286, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 291, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 535, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 320, characters 48-53:
Warning: identifier valid1 rebound.
File "IN.noise.passive.pv", line 321, characters 6-7:
Warning: identifier rs rebound.
File "IN.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 324, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_495: keypair = keypairpack(empty,empty) in
    {5}out(pub, getpublickey(s_495));
    (
        {6}let e_496: keypair = keypairpack(empty,empty) in
        {7}let rs_497: key = empty in
        {8}let re_498: key = empty in
        {9}let v_499: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_500: key = catch-fail(v_499) in
        {11}let v_501: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_502: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_499) then (if not-caught-fail(v_500) then (if not-caught-fail(v_501) then symmetricstatepack(v_501,v_500,v_499) else fail-any) else fail-any) else fail-any))) in
        {13}let v_503: symmetricstate = catch-fail((if success?((if not-caught-fail(v_499) then (if not-caught-fail(v_500) then (if not-caught-fail(v_501) then symmetricstatepack(v_501,v_500,v_499) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then symmetricstatepack(1-proj-3-tuple(v_502),2-proj-3-tuple(v_502),hash(3-proj-3-tuple(v_502),empty)) else fail-any) else fail-any)) in
        {14}let hs: handshakestate = (if not-caught-fail(v_503) then handshakestatepack(v_503,s_495,e_496,rs_497,re_498,empty,true) else fail-any) in
        {15}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {49}get statestore(=alice,=bob,=sid,statepack_a(hs_504: handshakestate)) in
        {16}let v_505: bitstring = catch-fail(handshakestateunpack(hs_504)) in
        {17}let v_506: bitstring = catch-fail((empty,empty,empty)) in
        {18}let v_507: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {19}let v_508: keypair = catch-fail((if not-caught-fail(v_507) then keypairpack(v_507,key_e(alice,bob,sid)) else fail-any)) in
        {20}let v_509: bitstring = catch-fail(getpublickey(v_508)) in
        {21}let v_510: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_505))) in
        {22}let v_511: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_505)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_510),hash(3-proj-3-tuple(v_510),v_509)) else fail-any) else fail-any)) in
        {23}let v_512: key = catch-fail(dhexp(key_s(alice),g)) in
        {24}let v_513: keypair = catch-fail((if not-caught-fail(v_512) then keypairpack(v_512,key_s(alice)) else fail-any)) in
        {25}let v_514: bitstring = catch-fail(symmetricstateunpack(v_511)) in
        {26}let v_515: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_514))) in
        {27}let v_516: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_515),2-proj-2-tuple(v_515),3-proj-3-tuple(v_514),getpublickey(v_513))) in
        {28}let v_517: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_514))) in
        {29}let v_518: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_515))) && success?(1-proj-3-tuple(v_514))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then cipherstatepack(1-proj-2-tuple(v_517),increment_nonce(2-proj-2-tuple(v_515))) else fail-any) else fail-any)) in
        {30}let v_519: bitstring = catch-fail((if (success?(getpublickey(v_513)) && (success?(3-proj-3-tuple(v_514)) && success?(1-proj-3-tuple(v_514)))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-2-tuple(v_515))))) then (if not-caught-fail(v_516) then (if not-caught-fail(v_518) then (v_518,v_516) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_520: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_519),2-proj-3-tuple(v_514),3-proj-3-tuple(v_514)))) in
        {32}let v_521: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_519)) && success?(symmetricstatepack(1-proj-2-tuple(v_519),2-proj-3-tuple(v_514),3-proj-3-tuple(v_514)))) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then symmetricstatepack(1-proj-3-tuple(v_520),2-proj-3-tuple(v_520),hash(3-proj-3-tuple(v_520),2-proj-2-tuple(v_519))) else fail-any) else fail-any)) in
        {33}let v_522: bitstring = catch-fail((if success?(getpublickey(v_513)) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then (if not-caught-fail(v_521) then (v_521,2-proj-2-tuple(v_519)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_523: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_522))) in
        {35}let v_524: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_523))) in
        {36}let v_525: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_524),2-proj-2-tuple(v_524),3-proj-3-tuple(v_523),msg_a(alice,bob,sid))) in
        {37}let v_526: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_523))) in
        {38}let v_527: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_524))) && success?(1-proj-3-tuple(v_523))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then cipherstatepack(1-proj-2-tuple(v_526),increment_nonce(2-proj-2-tuple(v_524))) else fail-any) else fail-any)) in
        {39}let v_528: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_523)) && success?(1-proj-3-tuple(v_523))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then (if not-caught-fail(v_525) then (if not-caught-fail(v_527) then (v_527,v_525) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {40}let v_529: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_528),2-proj-3-tuple(v_523),3-proj-3-tuple(v_523)))) in
        {41}let v_530: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_528)) && success?(symmetricstatepack(1-proj-2-tuple(v_528),2-proj-3-tuple(v_523),3-proj-3-tuple(v_523)))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then symmetricstatepack(1-proj-3-tuple(v_529),2-proj-3-tuple(v_529),hash(3-proj-3-tuple(v_529),2-proj-2-tuple(v_528))) else fail-any) else fail-any)) in
        {42}let v_531: bitstring = catch-fail((if success?(1-proj-2-tuple(v_522)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-2-tuple(v_528))))) then (if not-caught-fail(v_530) then (v_530,2-proj-2-tuple(v_528)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {43}let v_532: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_531),v_513,v_508,4-proj-7-tuple(v_505),5-proj-7-tuple(v_505),6-proj-7-tuple(v_505),7-proj-7-tuple(v_505))) in
        {44}let v_533: bitstring = catch-fail(concat3(v_509,2-proj-2-tuple(v_522),2-proj-2-tuple(v_531))) in
        {45}let (hs_534: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-7-tuple(v_505))))) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (if not-caught-fail(v_511) then (if not-caught-fail(v_513) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_533) then (v_532,v_533) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {46}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {47}insert statestore(alice,bob,sid,statepack_b(hs_534));
        {48}out(pub, message_a)
    ) | (
        {93}get statestore(=alice,=bob,=sid,statepack_b(hs_535: handshakestate)) in
        {50}in(pub, message_b: bitstring);
        {51}let v_536: bitstring = catch-fail(handshakestateunpack(hs_535)) in
        {52}let v_537: bitstring = catch-fail(deconcat3(message_b)) in
        {53}let v_538: bool = catch-fail(true) in
        {54}let v_539: key = catch-fail(1-proj-3-tuple(v_537)) in
        {55}let v_540: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_536))) in
        {56}let v_541: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_536)) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_540),hash(3-proj-3-tuple(v_540),v_539)) else fail-any) else fail-any)) in
        {57}let v_542: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_536))) in
        {58}let v_543: bitstring = catch-fail(symmetricstateunpack(v_541)) in
        {59}let v_544: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_543),(if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any))) in
        {60}let v_545: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_543),(if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any))) in
        {61}let v_546: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_543),(if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any))) in
        {62}let v_547: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_543))) then (if not-caught-fail(v_544) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (v_544,v_545,v_546) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_548: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_536)) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then dhexp(2-proj-2-tuple(v_542),v_539) else fail-any) else fail-any)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-3-tuple(v_547))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_547)) then cipherstatepack(2-proj-3-tuple(v_547),minnonce) else fail-any),1-proj-3-tuple(v_547),3-proj-3-tuple(v_543)) else fail-any) else fail-any) else fail-any)) in
        {64}let v_549: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_536))) in
        {65}let v_550: bitstring = catch-fail(symmetricstateunpack(v_548)) in
        {66}let v_551: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_550),(if success?(2-proj-7-tuple(v_536)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),v_539) else fail-any) else fail-any))) in
        {67}let v_552: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_550),(if success?(2-proj-7-tuple(v_536)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),v_539) else fail-any) else fail-any))) in
        {68}let v_553: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_550),(if success?(2-proj-7-tuple(v_536)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),v_539) else fail-any) else fail-any))) in
        {69}let v_554: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_536)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),v_539) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_550))) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then (if not-caught-fail(v_553) then (v_551,v_552,v_553) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_555: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_536)) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then dhexp(2-proj-2-tuple(v_549),v_539) else fail-any) else fail-any)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_554)) then cipherstatepack(2-proj-3-tuple(v_554),minnonce) else fail-any),1-proj-3-tuple(v_554),3-proj-3-tuple(v_550)) else fail-any) else fail-any) else fail-any)) in
        {71}let v_556: bitstring = catch-fail(symmetricstateunpack(v_555)) in
        {72}let v_557: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_556))) in
        {73}let v_558: aead = catch-fail(decrypt(1-proj-2-tuple(v_557),2-proj-2-tuple(v_557),3-proj-3-tuple(v_556),3-proj-3-tuple(v_537))) in
        {74}let v_559: bitstring = catch-fail(aeadunpack(v_558)) in
        {75}let v_560: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_556))) in
        {76}let v_561: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_557))) && success?(1-proj-3-tuple(v_556))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then cipherstatepack(1-proj-2-tuple(v_560),increment_nonce(2-proj-2-tuple(v_557))) else fail-any) else fail-any)) in
        {77}let v_562: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_537)) && (success?(3-proj-3-tuple(v_556)) && success?(1-proj-3-tuple(v_556)))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then (if not-caught-fail(v_558) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if not-caught-fail(v_561) then (v_561,3-proj-3-tuple(v_559),1-proj-3-tuple(v_559)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_563: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_562),2-proj-3-tuple(v_556),3-proj-3-tuple(v_556)))) in
        {79}let v_564: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_537)) && success?(symmetricstatepack(1-proj-3-tuple(v_562),2-proj-3-tuple(v_556),3-proj-3-tuple(v_556)))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then symmetricstatepack(1-proj-3-tuple(v_563),2-proj-3-tuple(v_563),hash(3-proj-3-tuple(v_563),3-proj-3-tuple(v_537))) else fail-any) else fail-any)) in
        {80}let v_565: bitstring = catch-fail((if success?(3-proj-3-tuple(v_537)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (if (not-caught-fail(v_562) && success?(is-true(success?(1-proj-3-tuple(v_562))))) then (if not-caught-fail(v_564) then (v_564,2-proj-3-tuple(v_562),3-proj-3-tuple(v_562)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_566: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_565),2-proj-7-tuple(v_536),3-proj-7-tuple(v_536),4-proj-7-tuple(v_536),v_539,6-proj-7-tuple(v_536),7-proj-7-tuple(v_536))) in
        {82}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_565))) in
        {83}let v_568: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_567),zero)) in
        {84}let v_569: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_567),zero)) in
        {85}let v_570: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_567),zero)) in
        {86}let v_571: bitstring = catch-fail((if success?(2-proj-3-tuple(v_567)) then (if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (v_568,v_569,v_570) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {87}let v_572: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_571)) then cipherstatepack(1-proj-3-tuple(v_571),minnonce) else fail-any)) in
        {88}let v_573: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_571)) then cipherstatepack(2-proj-3-tuple(v_571),minnonce) else fail-any)) in
        {89}let v_574: bitstring = catch-fail((if success?(1-proj-3-tuple(v_565)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (1-proj-3-tuple(v_565),v_572,v_573) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let (hs_575: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-7-tuple(v_536))))) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if not-caught-fail(v_538) then (if not-caught-fail(v_539) then (if not-caught-fail(v_541) then (if not-caught-fail(v_548) then (if not-caught-fail(v_555) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if (v_538 && 3-proj-3-tuple(v_565)) then (if not-caught-fail(v_566) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (v_566,2-proj-3-tuple(v_565),true,2-proj-3-tuple(v_574),3-proj-3-tuple(v_574)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {91}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {92}insert statestore(alice,bob,sid,statepack_c(hs_575,cs1,cs2))
    ) | (
        {94}!
        {113}get statestore(=alice,=bob,=sid,statepack_c(hs_576: handshakestate,cs1_577: cipherstate,cs2_578: cipherstate)) in
        {95}let hs_579: handshakestate = handshakestatesetcs(hs_576,cs1_577) in
        {96}let v_580: bitstring = catch-fail(handshakestateunpack(hs_579)) in
        {97}let v_581: bitstring = catch-fail((empty,empty,empty)) in
        {98}let v_582: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_580))) in
        {99}let v_583: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_582))) in
        {100}let v_584: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_583),2-proj-2-tuple(v_583),3-proj-3-tuple(v_582),msg_c(alice,bob,sid))) in
        {101}let v_585: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_582))) in
        {102}let v_586: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_583))) && success?(1-proj-3-tuple(v_582))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then cipherstatepack(1-proj-2-tuple(v_585),increment_nonce(2-proj-2-tuple(v_583))) else fail-any) else fail-any)) in
        {103}let v_587: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_582)) && success?(1-proj-3-tuple(v_582))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then (if not-caught-fail(v_584) then (if not-caught-fail(v_586) then (v_586,v_584) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {104}let v_588: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_587),2-proj-3-tuple(v_582),3-proj-3-tuple(v_582)))) in
        {105}let v_589: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_587)) && success?(symmetricstatepack(1-proj-2-tuple(v_587),2-proj-3-tuple(v_582),3-proj-3-tuple(v_582)))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then symmetricstatepack(1-proj-3-tuple(v_588),2-proj-3-tuple(v_588),hash(3-proj-3-tuple(v_588),2-proj-2-tuple(v_587))) else fail-any) else fail-any)) in
        {106}let v_590: bitstring = catch-fail((if success?(1-proj-7-tuple(v_580)) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-2-tuple(v_587))))) then (if not-caught-fail(v_589) then (v_589,2-proj-2-tuple(v_587)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {107}let v_591: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_590),2-proj-7-tuple(v_580),3-proj-7-tuple(v_580),4-proj-7-tuple(v_580),5-proj-7-tuple(v_580),6-proj-7-tuple(v_580),7-proj-7-tuple(v_580))) in
        {108}let v_592: bitstring = catch-fail(concat3(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),2-proj-2-tuple(v_590))) in
        {109}let (hs_593: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-7-tuple(v_580))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-2-tuple(v_590))))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (v_591,v_592) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {110}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {111}insert statestore(alice,bob,sid,statepack_d(hs_593,handshakestategetcs(hs_593),cs2_578));
        {112}out(pub, message_c)
    ) | (
        {114}!
        {134}get statestore(=alice,=bob,=sid,statepack_d(hs_594: handshakestate,cs1_595: cipherstate,cs2_596: cipherstate)) in
        {115}let hs_597: handshakestate = handshakestatesetcs(hs_594,cs2_596) in
        {116}in(pub, message_d: bitstring);
        {117}let v_598: bitstring = catch-fail(handshakestateunpack(hs_597)) in
        {118}let v_599: bitstring = catch-fail(deconcat3(message_d)) in
        {119}let v_600: bool = catch-fail(true) in
        {120}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_598))) in
        {121}let v_602: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {122}let v_603: aead = catch-fail(decrypt(1-proj-2-tuple(v_602),2-proj-2-tuple(v_602),3-proj-3-tuple(v_601),3-proj-3-tuple(v_599))) in
        {123}let v_604: bitstring = catch-fail(aeadunpack(v_603)) in
        {124}let v_605: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_601))) in
        {125}let v_606: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_602))) && success?(1-proj-3-tuple(v_601))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then cipherstatepack(1-proj-2-tuple(v_605),increment_nonce(2-proj-2-tuple(v_602))) else fail-any) else fail-any)) in
        {126}let v_607: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_599)) && (success?(3-proj-3-tuple(v_601)) && success?(1-proj-3-tuple(v_601)))) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-2-tuple(v_602))))) then (if not-caught-fail(v_603) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then (if not-caught-fail(v_606) then (v_606,3-proj-3-tuple(v_604),1-proj-3-tuple(v_604)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_608: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) in
        {128}let v_609: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_599)) && success?(symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_601),3-proj-3-tuple(v_601)))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then symmetricstatepack(1-proj-3-tuple(v_608),2-proj-3-tuple(v_608),hash(3-proj-3-tuple(v_608),3-proj-3-tuple(v_599))) else fail-any) else fail-any)) in
        {129}let v_610: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_599)) && success?(1-proj-7-tuple(v_598))) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if not-caught-fail(v_609) then (v_609,2-proj-3-tuple(v_607),3-proj-3-tuple(v_607)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {130}let v_611: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_610),2-proj-7-tuple(v_598),3-proj-7-tuple(v_598),4-proj-7-tuple(v_598),5-proj-7-tuple(v_598),6-proj-7-tuple(v_598),7-proj-7-tuple(v_598))) in
        {131}let (hs_612: handshakestate,plaintext_d: bitstring,valid_613: bool) = (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-7-tuple(v_598))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_600) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if (v_600 && 3-proj-3-tuple(v_610)) then (if not-caught-fail(v_611) then (v_611,2-proj-3-tuple(v_610),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {132}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {133}event RecvEnd(valid_613)
    ) | (
        {135}event LeakS(phase0,alice);
        {136}out(pub, key_s(alice))
    ) | (
        {137}phase 1;
        {138}event LeakS(phase1,alice);
        {139}out(pub, key_s(alice))
    )
) | (
    {140}let s_614: keypair = keypairpack(empty,empty) in
    {141}out(pub, getpublickey(s_614));
    (
        {142}let e_615: keypair = keypairpack(empty,empty) in
        {143}let rs_616: key = empty in
        {144}let re_617: key = empty in
        {145}let v_618: bitstring = catch-fail(hash(somename,empty)) in
        {146}let v_619: key = catch-fail(v_618) in
        {147}let v_620: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {148}let v_621: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (if not-caught-fail(v_620) then symmetricstatepack(v_620,v_619,v_618) else fail-any) else fail-any) else fail-any))) in
        {149}let v_622: symmetricstate = catch-fail((if success?((if not-caught-fail(v_618) then (if not-caught-fail(v_619) then (if not-caught-fail(v_620) then symmetricstatepack(v_620,v_619,v_618) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-3-tuple(v_621))))) then symmetricstatepack(1-proj-3-tuple(v_621),2-proj-3-tuple(v_621),hash(3-proj-3-tuple(v_621),empty)) else fail-any) else fail-any)) in
        {150}let hs_623: handshakestate = (if not-caught-fail(v_622) then handshakestatepack(v_622,s_614,e_615,rs_616,re_617,empty,true) else fail-any) in
        {151}insert statestore(alice,charlie,sid,statepack_a(hs_623))
    ) | (
        {185}get statestore(=alice,=charlie,=sid,statepack_a(hs_624: handshakestate)) in
        {152}let v_625: bitstring = catch-fail(handshakestateunpack(hs_624)) in
        {153}let v_626: bitstring = catch-fail((empty,empty,empty)) in
        {154}let v_627: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {155}let v_628: keypair = catch-fail((if not-caught-fail(v_627) then keypairpack(v_627,key_e(alice,charlie,sid)) else fail-any)) in
        {156}let v_629: bitstring = catch-fail(getpublickey(v_628)) in
        {157}let v_630: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_625))) in
        {158}let v_631: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_625)) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then symmetricstatepack(1-proj-3-tuple(v_630),2-proj-3-tuple(v_630),hash(3-proj-3-tuple(v_630),v_629)) else fail-any) else fail-any)) in
        {159}let v_632: key = catch-fail(dhexp(key_s(alice),g)) in
        {160}let v_633: keypair = catch-fail((if not-caught-fail(v_632) then keypairpack(v_632,key_s(alice)) else fail-any)) in
        {161}let v_634: bitstring = catch-fail(symmetricstateunpack(v_631)) in
        {162}let v_635: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {163}let v_636: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_635),2-proj-2-tuple(v_635),3-proj-3-tuple(v_634),getpublickey(v_633))) in
        {164}let v_637: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_634))) in
        {165}let v_638: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_635))) && success?(1-proj-3-tuple(v_634))) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-2-tuple(v_637))))) then cipherstatepack(1-proj-2-tuple(v_637),increment_nonce(2-proj-2-tuple(v_635))) else fail-any) else fail-any)) in
        {166}let v_639: bitstring = catch-fail((if (success?(getpublickey(v_633)) && (success?(3-proj-3-tuple(v_634)) && success?(1-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_636) then (if not-caught-fail(v_638) then (v_638,v_636) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {167}let v_640: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_639),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) in
        {168}let v_641: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_639)) && success?(symmetricstatepack(1-proj-2-tuple(v_639),2-proj-3-tuple(v_634),3-proj-3-tuple(v_634)))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_640),hash(3-proj-3-tuple(v_640),2-proj-2-tuple(v_639))) else fail-any) else fail-any)) in
        {169}let v_642: bitstring = catch-fail((if success?(getpublickey(v_633)) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then (if not-caught-fail(v_641) then (v_641,2-proj-2-tuple(v_639)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {170}let v_643: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_642))) in
        {171}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_643))) in
        {172}let v_645: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_644),2-proj-2-tuple(v_644),3-proj-3-tuple(v_643),msg_a(alice,charlie,sid))) in
        {173}let v_646: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_643))) in
        {174}let v_647: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_644))) && success?(1-proj-3-tuple(v_643))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then cipherstatepack(1-proj-2-tuple(v_646),increment_nonce(2-proj-2-tuple(v_644))) else fail-any) else fail-any)) in
        {175}let v_648: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_643)) && success?(1-proj-3-tuple(v_643))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then (if not-caught-fail(v_645) then (if not-caught-fail(v_647) then (v_647,v_645) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {176}let v_649: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_648),2-proj-3-tuple(v_643),3-proj-3-tuple(v_643)))) in
        {177}let v_650: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_648)) && success?(symmetricstatepack(1-proj-2-tuple(v_648),2-proj-3-tuple(v_643),3-proj-3-tuple(v_643)))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then symmetricstatepack(1-proj-3-tuple(v_649),2-proj-3-tuple(v_649),hash(3-proj-3-tuple(v_649),2-proj-2-tuple(v_648))) else fail-any) else fail-any)) in
        {178}let v_651: bitstring = catch-fail((if success?(1-proj-2-tuple(v_642)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_650) then (v_650,2-proj-2-tuple(v_648)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {179}let v_652: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_651),v_633,v_628,4-proj-7-tuple(v_625),5-proj-7-tuple(v_625),6-proj-7-tuple(v_625),7-proj-7-tuple(v_625))) in
        {180}let v_653: bitstring = catch-fail(concat3(v_629,2-proj-2-tuple(v_642),2-proj-2-tuple(v_651))) in
        {181}let (hs_654: handshakestate,message_a_655: bitstring) = (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-7-tuple(v_625))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (if not-caught-fail(v_631) then (if not-caught-fail(v_633) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-2-tuple(v_651))))) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (v_652,v_653) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {182}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {183}insert statestore(alice,charlie,sid,statepack_b(hs_654));
        {184}out(pub, message_a_655)
    ) | (
        {229}get statestore(=alice,=charlie,=sid,statepack_b(hs_656: handshakestate)) in
        {186}in(pub, message_b_657: bitstring);
        {187}let v_658: bitstring = catch-fail(handshakestateunpack(hs_656)) in
        {188}let v_659: bitstring = catch-fail(deconcat3(message_b_657)) in
        {189}let v_660: bool = catch-fail(true) in
        {190}let v_661: key = catch-fail(1-proj-3-tuple(v_659)) in
        {191}let v_662: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_658))) in
        {192}let v_663: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_658)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then symmetricstatepack(1-proj-3-tuple(v_662),2-proj-3-tuple(v_662),hash(3-proj-3-tuple(v_662),v_661)) else fail-any) else fail-any)) in
        {193}let v_664: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_658))) in
        {194}let v_665: bitstring = catch-fail(symmetricstateunpack(v_663)) in
        {195}let v_666: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_665),(if success?(3-proj-7-tuple(v_658)) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),v_661) else fail-any) else fail-any))) in
        {196}let v_667: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_665),(if success?(3-proj-7-tuple(v_658)) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),v_661) else fail-any) else fail-any))) in
        {197}let v_668: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_665),(if success?(3-proj-7-tuple(v_658)) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),v_661) else fail-any) else fail-any))) in
        {198}let v_669: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_658)) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),v_661) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_665))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (v_666,v_667,v_668) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_670: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_658)) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),v_661) else fail-any) else fail-any)) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_669)) then cipherstatepack(2-proj-3-tuple(v_669),minnonce) else fail-any),1-proj-3-tuple(v_669),3-proj-3-tuple(v_665)) else fail-any) else fail-any) else fail-any)) in
        {200}let v_671: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_658))) in
        {201}let v_672: bitstring = catch-fail(symmetricstateunpack(v_670)) in
        {202}let v_673: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_672),(if success?(2-proj-7-tuple(v_658)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then dhexp(2-proj-2-tuple(v_671),v_661) else fail-any) else fail-any))) in
        {203}let v_674: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_672),(if success?(2-proj-7-tuple(v_658)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then dhexp(2-proj-2-tuple(v_671),v_661) else fail-any) else fail-any))) in
        {204}let v_675: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_672),(if success?(2-proj-7-tuple(v_658)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then dhexp(2-proj-2-tuple(v_671),v_661) else fail-any) else fail-any))) in
        {205}let v_676: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_658)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then dhexp(2-proj-2-tuple(v_671),v_661) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_672))) then (if not-caught-fail(v_673) then (if not-caught-fail(v_674) then (if not-caught-fail(v_675) then (v_673,v_674,v_675) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_677: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_658)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then dhexp(2-proj-2-tuple(v_671),v_661) else fail-any) else fail-any)) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_676)) then cipherstatepack(2-proj-3-tuple(v_676),minnonce) else fail-any),1-proj-3-tuple(v_676),3-proj-3-tuple(v_672)) else fail-any) else fail-any) else fail-any)) in
        {207}let v_678: bitstring = catch-fail(symmetricstateunpack(v_677)) in
        {208}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_678))) in
        {209}let v_680: aead = catch-fail(decrypt(1-proj-2-tuple(v_679),2-proj-2-tuple(v_679),3-proj-3-tuple(v_678),3-proj-3-tuple(v_659))) in
        {210}let v_681: bitstring = catch-fail(aeadunpack(v_680)) in
        {211}let v_682: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_678))) in
        {212}let v_683: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_679))) && success?(1-proj-3-tuple(v_678))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then cipherstatepack(1-proj-2-tuple(v_682),increment_nonce(2-proj-2-tuple(v_679))) else fail-any) else fail-any)) in
        {213}let v_684: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_659)) && (success?(3-proj-3-tuple(v_678)) && success?(1-proj-3-tuple(v_678)))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then (if not-caught-fail(v_680) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if not-caught-fail(v_683) then (v_683,3-proj-3-tuple(v_681),1-proj-3-tuple(v_681)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {214}let v_685: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_678),3-proj-3-tuple(v_678)))) in
        {215}let v_686: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_659)) && success?(symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_678),3-proj-3-tuple(v_678)))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),hash(3-proj-3-tuple(v_685),3-proj-3-tuple(v_659))) else fail-any) else fail-any)) in
        {216}let v_687: bitstring = catch-fail((if success?(3-proj-3-tuple(v_659)) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if not-caught-fail(v_686) then (v_686,2-proj-3-tuple(v_684),3-proj-3-tuple(v_684)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {217}let v_688: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_687),2-proj-7-tuple(v_658),3-proj-7-tuple(v_658),4-proj-7-tuple(v_658),v_661,6-proj-7-tuple(v_658),7-proj-7-tuple(v_658))) in
        {218}let v_689: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_687))) in
        {219}let v_690: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_689),zero)) in
        {220}let v_691: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_689),zero)) in
        {221}let v_692: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_689),zero)) in
        {222}let v_693: bitstring = catch-fail((if success?(2-proj-3-tuple(v_689)) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (v_690,v_691,v_692) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {223}let v_694: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_693)) then cipherstatepack(1-proj-3-tuple(v_693),minnonce) else fail-any)) in
        {224}let v_695: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_693)) then cipherstatepack(2-proj-3-tuple(v_693),minnonce) else fail-any)) in
        {225}let v_696: bitstring = catch-fail((if success?(1-proj-3-tuple(v_687)) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if not-caught-fail(v_694) then (if not-caught-fail(v_695) then (1-proj-3-tuple(v_687),v_694,v_695) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let (hs_697: handshakestate,plaintext_b_698: bitstring,valid_699: bool,cs1_700: cipherstate,cs2_701: cipherstate) = (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-7-tuple(v_658))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if not-caught-fail(v_660) then (if not-caught-fail(v_661) then (if not-caught-fail(v_663) then (if not-caught-fail(v_670) then (if not-caught-fail(v_677) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (v_660 && 3-proj-3-tuple(v_687)) then (if not-caught-fail(v_688) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (v_688,2-proj-3-tuple(v_687),true,2-proj-3-tuple(v_696),3-proj-3-tuple(v_696)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {227}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_698);
        {228}insert statestore(alice,charlie,sid,statepack_c(hs_697,cs1_700,cs2_701))
    ) | (
        {230}!
        {249}get statestore(=alice,=charlie,=sid,statepack_c(hs_702: handshakestate,cs1_703: cipherstate,cs2_704: cipherstate)) in
        {231}let hs_705: handshakestate = handshakestatesetcs(hs_702,cs1_703) in
        {232}let v_706: bitstring = catch-fail(handshakestateunpack(hs_705)) in
        {233}let v_707: bitstring = catch-fail((empty,empty,empty)) in
        {234}let v_708: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_706))) in
        {235}let v_709: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_708))) in
        {236}let v_710: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_709),2-proj-2-tuple(v_709),3-proj-3-tuple(v_708),msg_c(alice,charlie,sid))) in
        {237}let v_711: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_708))) in
        {238}let v_712: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_709))) && success?(1-proj-3-tuple(v_708))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then cipherstatepack(1-proj-2-tuple(v_711),increment_nonce(2-proj-2-tuple(v_709))) else fail-any) else fail-any)) in
        {239}let v_713: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_708)) && success?(1-proj-3-tuple(v_708))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_712) then (v_712,v_710) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {240}let v_714: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_713),2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)))) in
        {241}let v_715: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_713)) && success?(symmetricstatepack(1-proj-2-tuple(v_713),2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then symmetricstatepack(1-proj-3-tuple(v_714),2-proj-3-tuple(v_714),hash(3-proj-3-tuple(v_714),2-proj-2-tuple(v_713))) else fail-any) else fail-any)) in
        {242}let v_716: bitstring = catch-fail((if success?(1-proj-7-tuple(v_706)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then (if not-caught-fail(v_715) then (v_715,2-proj-2-tuple(v_713)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_717: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_716),2-proj-7-tuple(v_706),3-proj-7-tuple(v_706),4-proj-7-tuple(v_706),5-proj-7-tuple(v_706),6-proj-7-tuple(v_706),7-proj-7-tuple(v_706))) in
        {244}let v_718: bitstring = catch-fail(concat3(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),2-proj-2-tuple(v_716))) in
        {245}let (hs_719: handshakestate,message_c_720: bitstring) = (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-7-tuple(v_706))))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (v_717,v_718) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {246}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {247}insert statestore(alice,charlie,sid,statepack_d(hs_719,handshakestategetcs(hs_719),cs2_704));
        {248}out(pub, message_c_720)
    ) | (
        {250}!
        {270}get statestore(=alice,=charlie,=sid,statepack_d(hs_721: handshakestate,cs1_722: cipherstate,cs2_723: cipherstate)) in
        {251}let hs_724: handshakestate = handshakestatesetcs(hs_721,cs2_723) in
        {252}in(pub, message_d_725: bitstring);
        {253}let v_726: bitstring = catch-fail(handshakestateunpack(hs_724)) in
        {254}let v_727: bitstring = catch-fail(deconcat3(message_d_725)) in
        {255}let v_728: bool = catch-fail(true) in
        {256}let v_729: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_726))) in
        {257}let v_730: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_729))) in
        {258}let v_731: aead = catch-fail(decrypt(1-proj-2-tuple(v_730),2-proj-2-tuple(v_730),3-proj-3-tuple(v_729),3-proj-3-tuple(v_727))) in
        {259}let v_732: bitstring = catch-fail(aeadunpack(v_731)) in
        {260}let v_733: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_729))) in
        {261}let v_734: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_730))) && success?(1-proj-3-tuple(v_729))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then cipherstatepack(1-proj-2-tuple(v_733),increment_nonce(2-proj-2-tuple(v_730))) else fail-any) else fail-any)) in
        {262}let v_735: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_727)) && (success?(3-proj-3-tuple(v_729)) && success?(1-proj-3-tuple(v_729)))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-2-tuple(v_730))))) then (if not-caught-fail(v_731) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then (if not-caught-fail(v_734) then (v_734,3-proj-3-tuple(v_732),1-proj-3-tuple(v_732)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_736: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)))) in
        {264}let v_737: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_727)) && success?(symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_729),3-proj-3-tuple(v_729)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_736),hash(3-proj-3-tuple(v_736),3-proj-3-tuple(v_727))) else fail-any) else fail-any)) in
        {265}let v_738: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_727)) && success?(1-proj-7-tuple(v_726))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if not-caught-fail(v_737) then (v_737,2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_739: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_738),2-proj-7-tuple(v_726),3-proj-7-tuple(v_726),4-proj-7-tuple(v_726),5-proj-7-tuple(v_726),6-proj-7-tuple(v_726),7-proj-7-tuple(v_726))) in
        {267}let (hs_740: handshakestate,plaintext_d_741: bitstring,valid_742: bool) = (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-7-tuple(v_726))))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if not-caught-fail(v_728) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if (v_728 && 3-proj-3-tuple(v_738)) then (if not-caught-fail(v_739) then (v_739,2-proj-3-tuple(v_738),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {268}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_741);
        {269}event RecvEnd(valid_742)
    ) | (
        {271}event LeakS(phase0,alice);
        {272}out(pub, key_s(alice))
    ) | (
        {273}phase 1;
        {274}event LeakS(phase1,alice);
        {275}out(pub, key_s(alice))
    )
) | (
    {276}let s_743: keypair = keypairpack(empty,empty) in
    (
        {277}let e_744: keypair = keypairpack(empty,empty) in
        {278}let rs_745: key = empty in
        {279}let re_746: key = empty in
        {280}let v_747: bitstring = catch-fail(hash(somename,empty)) in
        {281}let v_748: key = catch-fail(v_747) in
        {282}let v_749: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {283}let v_750: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (if not-caught-fail(v_749) then symmetricstatepack(v_749,v_748,v_747) else fail-any) else fail-any) else fail-any))) in
        {284}let v_751: symmetricstate = catch-fail((if success?((if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (if not-caught-fail(v_749) then symmetricstatepack(v_749,v_748,v_747) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then symmetricstatepack(1-proj-3-tuple(v_750),2-proj-3-tuple(v_750),hash(3-proj-3-tuple(v_750),empty)) else fail-any) else fail-any)) in
        {285}let hs_752: handshakestate = (if not-caught-fail(v_751) then handshakestatepack(v_751,s_743,e_744,rs_745,re_746,empty,false) else fail-any) in
        {286}insert statestore(bob,alice,sid,statepack_a(hs_752))
    ) | (
        {320}get statestore(=bob,=alice,=sid,statepack_a(hs_753: handshakestate)) in
        {287}in(pub, message_a_754: bitstring);
        {288}let v_755: bitstring = catch-fail(handshakestateunpack(hs_753)) in
        {289}let v_756: bitstring = catch-fail(deconcat3(message_a_754)) in
        {290}let v_757: bool = catch-fail(true) in
        {291}let v_758: key = catch-fail(1-proj-3-tuple(v_756)) in
        {292}let v_759: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_755))) in
        {293}let v_760: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_755)) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack(1-proj-3-tuple(v_759),2-proj-3-tuple(v_759),hash(3-proj-3-tuple(v_759),v_758)) else fail-any) else fail-any)) in
        {294}let v_761: bitstring = catch-fail(symmetricstateunpack(v_760)) in
        {295}let v_762: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {296}let v_763: aead = catch-fail(decrypt(1-proj-2-tuple(v_762),2-proj-2-tuple(v_762),3-proj-3-tuple(v_761),2-proj-3-tuple(v_756))) in
        {297}let v_764: bitstring = catch-fail(aeadunpack(v_763)) in
        {298}let v_765: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {299}let v_766: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_762))) && success?(1-proj-3-tuple(v_761))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-2-tuple(v_765))))) then cipherstatepack(1-proj-2-tuple(v_765),increment_nonce(2-proj-2-tuple(v_762))) else fail-any) else fail-any)) in
        {300}let v_767: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_756)) && (success?(3-proj-3-tuple(v_761)) && success?(1-proj-3-tuple(v_761)))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_763) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then (if not-caught-fail(v_766) then (v_766,3-proj-3-tuple(v_764),1-proj-3-tuple(v_764)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_768: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_767),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) in
        {302}let v_769: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_756)) && success?(symmetricstatepack(1-proj-3-tuple(v_767),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then symmetricstatepack(1-proj-3-tuple(v_768),2-proj-3-tuple(v_768),hash(3-proj-3-tuple(v_768),2-proj-3-tuple(v_756))) else fail-any) else fail-any)) in
        {303}let v_770: bitstring = catch-fail((if success?(2-proj-3-tuple(v_756)) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_769) then (v_769,2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_771: key = catch-fail(2-proj-3-tuple(v_770)) in
        {305}let v_772: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_770))) in
        {306}let v_773: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_772))) in
        {307}let v_774: aead = catch-fail(decrypt(1-proj-2-tuple(v_773),2-proj-2-tuple(v_773),3-proj-3-tuple(v_772),3-proj-3-tuple(v_756))) in
        {308}let v_775: bitstring = catch-fail(aeadunpack(v_774)) in
        {309}let v_776: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_772))) in
        {310}let v_777: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_773))) && success?(1-proj-3-tuple(v_772))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then cipherstatepack(1-proj-2-tuple(v_776),increment_nonce(2-proj-2-tuple(v_773))) else fail-any) else fail-any)) in
        {311}let v_778: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_756)) && (success?(3-proj-3-tuple(v_772)) && success?(1-proj-3-tuple(v_772)))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-2-tuple(v_773))))) then (if not-caught-fail(v_774) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if not-caught-fail(v_777) then (v_777,3-proj-3-tuple(v_775),1-proj-3-tuple(v_775)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {312}let v_779: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_778),2-proj-3-tuple(v_772),3-proj-3-tuple(v_772)))) in
        {313}let v_780: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_756)) && success?(symmetricstatepack(1-proj-3-tuple(v_778),2-proj-3-tuple(v_772),3-proj-3-tuple(v_772)))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_779),hash(3-proj-3-tuple(v_779),3-proj-3-tuple(v_756))) else fail-any) else fail-any)) in
        {314}let v_781: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_756)) && success?(1-proj-3-tuple(v_770))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if not-caught-fail(v_780) then (v_780,2-proj-3-tuple(v_778),3-proj-3-tuple(v_778)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {315}let v_782: key = catch-fail(dhexp(key_s(alice),g)) in
        {316}let v_783: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_781),2-proj-7-tuple(v_755),3-proj-7-tuple(v_755),v_771,v_758,6-proj-7-tuple(v_755),7-proj-7-tuple(v_755))) in
        {317}let (hs_784: handshakestate,plaintext_a: bitstring,valid_785: bool) = (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-7-tuple(v_755))))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (if not-caught-fail(v_760) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if not-caught-fail(v_771) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if ((3-proj-3-tuple(v_770) && 3-proj-3-tuple(v_781)) && (v_771 = getpublickey((if not-caught-fail(v_782) then keypairpack(v_782,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_783) then (v_783,2-proj-3-tuple(v_781),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {318}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {319}insert statestore(bob,alice,sid,statepack_b(hs_784))
    ) | (
        {365}get statestore(=bob,=alice,=sid,statepack_b(hs_786: handshakestate)) in
        {321}let v_787: bitstring = catch-fail(handshakestateunpack(hs_786)) in
        {322}let v_788: bitstring = catch-fail((empty,empty,empty)) in
        {323}let v_789: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {324}let v_790: keypair = catch-fail((if not-caught-fail(v_789) then keypairpack(v_789,key_e(bob,alice,sid)) else fail-any)) in
        {325}let v_791: bitstring = catch-fail(getpublickey(v_790)) in
        {326}let v_792: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_787))) in
        {327}let v_793: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_787)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then symmetricstatepack(1-proj-3-tuple(v_792),2-proj-3-tuple(v_792),hash(3-proj-3-tuple(v_792),v_791)) else fail-any) else fail-any)) in
        {328}let v_794: bitstring = catch-fail(keypairunpack(v_790)) in
        {329}let v_795: bitstring = catch-fail(symmetricstateunpack(v_793)) in
        {330}let v_796: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {331}let v_797: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {332}let v_798: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {333}let v_799: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_795))) then (if not-caught-fail(v_796) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (v_796,v_797,v_798) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {334}let v_800: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_799)) then cipherstatepack(2-proj-3-tuple(v_799),minnonce) else fail-any),1-proj-3-tuple(v_799),3-proj-3-tuple(v_795)) else fail-any) else fail-any) else fail-any)) in
        {335}let v_801: bitstring = catch-fail(keypairunpack(v_790)) in
        {336}let v_802: bitstring = catch-fail(symmetricstateunpack(v_800)) in
        {337}let v_803: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_802),(if success?(4-proj-7-tuple(v_787)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),4-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {338}let v_804: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_802),(if success?(4-proj-7-tuple(v_787)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),4-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {339}let v_805: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_802),(if success?(4-proj-7-tuple(v_787)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),4-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {340}let v_806: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_787)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),4-proj-7-tuple(v_787)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_802))) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (v_803,v_804,v_805) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {341}let v_807: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_787)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),4-proj-7-tuple(v_787)) else fail-any) else fail-any)) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_806)) then cipherstatepack(2-proj-3-tuple(v_806),minnonce) else fail-any),1-proj-3-tuple(v_806),3-proj-3-tuple(v_802)) else fail-any) else fail-any) else fail-any)) in
        {342}let v_808: bitstring = catch-fail(symmetricstateunpack(v_807)) in
        {343}let v_809: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {344}let v_810: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_809),2-proj-2-tuple(v_809),3-proj-3-tuple(v_808),msg_b(bob,alice,sid))) in
        {345}let v_811: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {346}let v_812: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_809))) && success?(1-proj-3-tuple(v_808))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-2-tuple(v_811))))) then cipherstatepack(1-proj-2-tuple(v_811),increment_nonce(2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {347}let v_813: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_808)) && success?(1-proj-3-tuple(v_808))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_810) then (if not-caught-fail(v_812) then (v_812,v_810) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {348}let v_814: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_813),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) in
        {349}let v_815: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_813)) && success?(symmetricstatepack(1-proj-2-tuple(v_813),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_814),hash(3-proj-3-tuple(v_814),2-proj-2-tuple(v_813))) else fail-any) else fail-any)) in
        {350}let v_816: bitstring = catch-fail((if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_815) then (v_815,2-proj-2-tuple(v_813)) else fail-any) else fail-any) else fail-any)) in
        {351}let v_817: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_816),2-proj-7-tuple(v_787),v_790,4-proj-7-tuple(v_787),5-proj-7-tuple(v_787),6-proj-7-tuple(v_787),7-proj-7-tuple(v_787))) in
        {352}let v_818: bitstring = catch-fail(concat3(v_791,2-proj-3-tuple(v_788),2-proj-2-tuple(v_816))) in
        {353}let v_819: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_816))) in
        {354}let v_820: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_819),zero)) in
        {355}let v_821: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_819),zero)) in
        {356}let v_822: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_819),zero)) in
        {357}let v_823: bitstring = catch-fail((if success?(2-proj-3-tuple(v_819)) then (if not-caught-fail(v_820) then (if not-caught-fail(v_821) then (if not-caught-fail(v_822) then (v_820,v_821,v_822) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {358}let v_824: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_823)) then cipherstatepack(1-proj-3-tuple(v_823),minnonce) else fail-any)) in
        {359}let v_825: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_823)) then cipherstatepack(2-proj-3-tuple(v_823),minnonce) else fail-any)) in
        {360}let v_826: bitstring = catch-fail((if success?(1-proj-2-tuple(v_816)) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then (if not-caught-fail(v_824) then (if not-caught-fail(v_825) then (1-proj-2-tuple(v_816),v_824,v_825) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {361}let (hs_827: handshakestate,message_b_828: bitstring,cs1_829: cipherstate,cs2_830: cipherstate) = (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-7-tuple(v_787))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if not-caught-fail(v_790) then (if not-caught-fail(v_791) then (if not-caught-fail(v_793) then (if not-caught-fail(v_800) then (if not-caught-fail(v_807) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (v_817,v_818,2-proj-3-tuple(v_826),3-proj-3-tuple(v_826)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {362}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {363}insert statestore(bob,alice,sid,statepack_c(hs_827,cs1_829,cs2_830));
        {364}out(pub, message_b_828)
    ) | (
        {366}!
        {386}get statestore(=bob,=alice,=sid,statepack_c(hs_831: handshakestate,cs1_832: cipherstate,cs2_833: cipherstate)) in
        {367}let hs_834: handshakestate = handshakestatesetcs(hs_831,cs1_832) in
        {368}in(pub, message_c_835: bitstring);
        {369}let v_836: bitstring = catch-fail(handshakestateunpack(hs_834)) in
        {370}let v_837: bitstring = catch-fail(deconcat3(message_c_835)) in
        {371}let v_838: bool = catch-fail(true) in
        {372}let v_839: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_836))) in
        {373}let v_840: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_839))) in
        {374}let v_841: aead = catch-fail(decrypt(1-proj-2-tuple(v_840),2-proj-2-tuple(v_840),3-proj-3-tuple(v_839),3-proj-3-tuple(v_837))) in
        {375}let v_842: bitstring = catch-fail(aeadunpack(v_841)) in
        {376}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_839))) in
        {377}let v_844: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_840))) && success?(1-proj-3-tuple(v_839))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then cipherstatepack(1-proj-2-tuple(v_843),increment_nonce(2-proj-2-tuple(v_840))) else fail-any) else fail-any)) in
        {378}let v_845: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_837)) && (success?(3-proj-3-tuple(v_839)) && success?(1-proj-3-tuple(v_839)))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then (if not-caught-fail(v_841) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if not-caught-fail(v_844) then (v_844,3-proj-3-tuple(v_842),1-proj-3-tuple(v_842)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {379}let v_846: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)))) in
        {380}let v_847: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_837)) && success?(symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then symmetricstatepack(1-proj-3-tuple(v_846),2-proj-3-tuple(v_846),hash(3-proj-3-tuple(v_846),3-proj-3-tuple(v_837))) else fail-any) else fail-any)) in
        {381}let v_848: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_837)) && success?(1-proj-7-tuple(v_836))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if not-caught-fail(v_847) then (v_847,2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_849: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_848),2-proj-7-tuple(v_836),3-proj-7-tuple(v_836),4-proj-7-tuple(v_836),5-proj-7-tuple(v_836),6-proj-7-tuple(v_836),7-proj-7-tuple(v_836))) in
        {383}let (hs_850: handshakestate,plaintext_c: bitstring,valid_851: bool) = (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-7-tuple(v_836))))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if not-caught-fail(v_838) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if (v_838 && 3-proj-3-tuple(v_848)) then (if not-caught-fail(v_849) then (v_849,2-proj-3-tuple(v_848),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {384}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {385}insert statestore(bob,alice,sid,statepack_d(hs_850,handshakestategetcs(hs_850),cs2_833))
    ) | (
        {387}!
        {405}get statestore(=bob,=alice,=sid,statepack_d(hs_852: handshakestate,cs1_853: cipherstate,cs2_854: cipherstate)) in
        {388}let hs_855: handshakestate = handshakestatesetcs(hs_852,cs2_854) in
        {389}let v_856: bitstring = catch-fail(handshakestateunpack(hs_855)) in
        {390}let v_857: bitstring = catch-fail((empty,empty,empty)) in
        {391}let v_858: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_856))) in
        {392}let v_859: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_858))) in
        {393}let v_860: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_859),2-proj-2-tuple(v_859),3-proj-3-tuple(v_858),msg_d(bob,alice,sid))) in
        {394}let v_861: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_858))) in
        {395}let v_862: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_859))) && success?(1-proj-3-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then cipherstatepack(1-proj-2-tuple(v_861),increment_nonce(2-proj-2-tuple(v_859))) else fail-any) else fail-any)) in
        {396}let v_863: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_858)) && success?(1-proj-3-tuple(v_858))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-2-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_862) then (v_862,v_860) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {397}let v_864: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_863),2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)))) in
        {398}let v_865: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_863)) && success?(symmetricstatepack(1-proj-2-tuple(v_863),2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then symmetricstatepack(1-proj-3-tuple(v_864),2-proj-3-tuple(v_864),hash(3-proj-3-tuple(v_864),2-proj-2-tuple(v_863))) else fail-any) else fail-any)) in
        {399}let v_866: bitstring = catch-fail((if success?(1-proj-7-tuple(v_856)) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then (if not-caught-fail(v_865) then (v_865,2-proj-2-tuple(v_863)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let v_867: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_866),2-proj-7-tuple(v_856),3-proj-7-tuple(v_856),4-proj-7-tuple(v_856),5-proj-7-tuple(v_856),6-proj-7-tuple(v_856),7-proj-7-tuple(v_856))) in
        {401}let v_868: bitstring = catch-fail(concat3(1-proj-3-tuple(v_857),2-proj-3-tuple(v_857),2-proj-2-tuple(v_866))) in
        {402}let (hs_869: handshakestate,message_d_870: bitstring) = (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-7-tuple(v_856))))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-2-tuple(v_866))))) then (if not-caught-fail(v_867) then (if not-caught-fail(v_868) then (v_867,v_868) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {403}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {404}out(pub, message_d_870)
    ) | (
        {406}event LeakS(phase0,bob);
        {407}out(pub, key_s(bob))
    ) | (
        {408}phase 1;
        {409}event LeakS(phase1,bob);
        {410}out(pub, key_s(bob))
    )
) | (
    {411}let s_871: keypair = keypairpack(empty,empty) in
    (
        {412}let e_872: keypair = keypairpack(empty,empty) in
        {413}let rs_873: key = empty in
        {414}let re_874: key = empty in
        {415}let v_875: bitstring = catch-fail(hash(somename,empty)) in
        {416}let v_876: key = catch-fail(v_875) in
        {417}let v_877: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {418}let v_878: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then symmetricstatepack(v_877,v_876,v_875) else fail-any) else fail-any) else fail-any))) in
        {419}let v_879: symmetricstate = catch-fail((if success?((if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then symmetricstatepack(v_877,v_876,v_875) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then symmetricstatepack(1-proj-3-tuple(v_878),2-proj-3-tuple(v_878),hash(3-proj-3-tuple(v_878),empty)) else fail-any) else fail-any)) in
        {420}let hs_880: handshakestate = (if not-caught-fail(v_879) then handshakestatepack(v_879,s_871,e_872,rs_873,re_874,empty,false) else fail-any) in
        {421}insert statestore(bob,charlie,sid,statepack_a(hs_880))
    ) | (
        {455}get statestore(=bob,=charlie,=sid,statepack_a(hs_881: handshakestate)) in
        {422}in(pub, message_a_882: bitstring);
        {423}let v_883: bitstring = catch-fail(handshakestateunpack(hs_881)) in
        {424}let v_884: bitstring = catch-fail(deconcat3(message_a_882)) in
        {425}let v_885: bool = catch-fail(true) in
        {426}let v_886: key = catch-fail(1-proj-3-tuple(v_884)) in
        {427}let v_887: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_883))) in
        {428}let v_888: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_883)) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_887),hash(3-proj-3-tuple(v_887),v_886)) else fail-any) else fail-any)) in
        {429}let v_889: bitstring = catch-fail(symmetricstateunpack(v_888)) in
        {430}let v_890: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_889))) in
        {431}let v_891: aead = catch-fail(decrypt(1-proj-2-tuple(v_890),2-proj-2-tuple(v_890),3-proj-3-tuple(v_889),2-proj-3-tuple(v_884))) in
        {432}let v_892: bitstring = catch-fail(aeadunpack(v_891)) in
        {433}let v_893: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_889))) in
        {434}let v_894: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_890))) && success?(1-proj-3-tuple(v_889))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then cipherstatepack(1-proj-2-tuple(v_893),increment_nonce(2-proj-2-tuple(v_890))) else fail-any) else fail-any)) in
        {435}let v_895: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_884)) && (success?(3-proj-3-tuple(v_889)) && success?(1-proj-3-tuple(v_889)))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-2-tuple(v_890))))) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if not-caught-fail(v_894) then (v_894,3-proj-3-tuple(v_892),1-proj-3-tuple(v_892)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_896: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_895),2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)))) in
        {437}let v_897: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_884)) && success?(symmetricstatepack(1-proj-3-tuple(v_895),2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then symmetricstatepack(1-proj-3-tuple(v_896),2-proj-3-tuple(v_896),hash(3-proj-3-tuple(v_896),2-proj-3-tuple(v_884))) else fail-any) else fail-any)) in
        {438}let v_898: bitstring = catch-fail((if success?(2-proj-3-tuple(v_884)) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if not-caught-fail(v_897) then (v_897,2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {439}let v_899: key = catch-fail(2-proj-3-tuple(v_898)) in
        {440}let v_900: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_898))) in
        {441}let v_901: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {442}let v_902: aead = catch-fail(decrypt(1-proj-2-tuple(v_901),2-proj-2-tuple(v_901),3-proj-3-tuple(v_900),3-proj-3-tuple(v_884))) in
        {443}let v_903: bitstring = catch-fail(aeadunpack(v_902)) in
        {444}let v_904: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {445}let v_905: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_901))) && success?(1-proj-3-tuple(v_900))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then cipherstatepack(1-proj-2-tuple(v_904),increment_nonce(2-proj-2-tuple(v_901))) else fail-any) else fail-any)) in
        {446}let v_906: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_884)) && (success?(3-proj-3-tuple(v_900)) && success?(1-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then (if not-caught-fail(v_902) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if not-caught-fail(v_905) then (v_905,3-proj-3-tuple(v_903),1-proj-3-tuple(v_903)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let v_907: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) in
        {448}let v_908: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_884)) && success?(symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then symmetricstatepack(1-proj-3-tuple(v_907),2-proj-3-tuple(v_907),hash(3-proj-3-tuple(v_907),3-proj-3-tuple(v_884))) else fail-any) else fail-any)) in
        {449}let v_909: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_884)) && success?(1-proj-3-tuple(v_898))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then (if not-caught-fail(v_908) then (v_908,2-proj-3-tuple(v_906),3-proj-3-tuple(v_906)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_910: key = catch-fail(dhexp(key_s(charlie),g)) in
        {451}let v_911: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_909),2-proj-7-tuple(v_883),3-proj-7-tuple(v_883),v_899,v_886,6-proj-7-tuple(v_883),7-proj-7-tuple(v_883))) in
        {452}let (hs_912: handshakestate,plaintext_a_913: bitstring,valid_914: bool) = (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-7-tuple(v_883))))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then (if not-caught-fail(v_885) then (if not-caught-fail(v_886) then (if not-caught-fail(v_888) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if not-caught-fail(v_899) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if ((3-proj-3-tuple(v_898) && 3-proj-3-tuple(v_909)) && (v_899 = getpublickey((if not-caught-fail(v_910) then keypairpack(v_910,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_911) then (v_911,2-proj-3-tuple(v_909),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {453}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_913);
        {454}insert statestore(bob,charlie,sid,statepack_b(hs_912))
    ) | (
        {500}get statestore(=bob,=charlie,=sid,statepack_b(hs_915: handshakestate)) in
        {456}let v_916: bitstring = catch-fail(handshakestateunpack(hs_915)) in
        {457}let v_917: bitstring = catch-fail((empty,empty,empty)) in
        {458}let v_918: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {459}let v_919: keypair = catch-fail((if not-caught-fail(v_918) then keypairpack(v_918,key_e(bob,charlie,sid)) else fail-any)) in
        {460}let v_920: bitstring = catch-fail(getpublickey(v_919)) in
        {461}let v_921: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_916))) in
        {462}let v_922: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_916)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then symmetricstatepack(1-proj-3-tuple(v_921),2-proj-3-tuple(v_921),hash(3-proj-3-tuple(v_921),v_920)) else fail-any) else fail-any)) in
        {463}let v_923: bitstring = catch-fail(keypairunpack(v_919)) in
        {464}let v_924: bitstring = catch-fail(symmetricstateunpack(v_922)) in
        {465}let v_925: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_924),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {466}let v_926: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_924),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {467}let v_927: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_924),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {468}let v_928: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_924))) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (v_925,v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {469}let v_929: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any)) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_928)) then cipherstatepack(2-proj-3-tuple(v_928),minnonce) else fail-any),1-proj-3-tuple(v_928),3-proj-3-tuple(v_924)) else fail-any) else fail-any) else fail-any)) in
        {470}let v_930: bitstring = catch-fail(keypairunpack(v_919)) in
        {471}let v_931: bitstring = catch-fail(symmetricstateunpack(v_929)) in
        {472}let v_932: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_931),(if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {473}let v_933: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_931),(if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {474}let v_934: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_931),(if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {475}let v_935: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_931))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (if not-caught-fail(v_934) then (v_932,v_933,v_934) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {476}let v_936: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any)) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_935)) then cipherstatepack(2-proj-3-tuple(v_935),minnonce) else fail-any),1-proj-3-tuple(v_935),3-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any)) in
        {477}let v_937: bitstring = catch-fail(symmetricstateunpack(v_936)) in
        {478}let v_938: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_937))) in
        {479}let v_939: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_938),2-proj-2-tuple(v_938),3-proj-3-tuple(v_937),msg_b(bob,charlie,sid))) in
        {480}let v_940: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_937))) in
        {481}let v_941: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_938))) && success?(1-proj-3-tuple(v_937))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then cipherstatepack(1-proj-2-tuple(v_940),increment_nonce(2-proj-2-tuple(v_938))) else fail-any) else fail-any)) in
        {482}let v_942: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_937)) && success?(1-proj-3-tuple(v_937))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then (if not-caught-fail(v_939) then (if not-caught-fail(v_941) then (v_941,v_939) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_943: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_942),2-proj-3-tuple(v_937),3-proj-3-tuple(v_937)))) in
        {484}let v_944: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_942)) && success?(symmetricstatepack(1-proj-2-tuple(v_942),2-proj-3-tuple(v_937),3-proj-3-tuple(v_937)))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then symmetricstatepack(1-proj-3-tuple(v_943),2-proj-3-tuple(v_943),hash(3-proj-3-tuple(v_943),2-proj-2-tuple(v_942))) else fail-any) else fail-any)) in
        {485}let v_945: bitstring = catch-fail((if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then (if not-caught-fail(v_944) then (v_944,2-proj-2-tuple(v_942)) else fail-any) else fail-any) else fail-any)) in
        {486}let v_946: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_945),2-proj-7-tuple(v_916),v_919,4-proj-7-tuple(v_916),5-proj-7-tuple(v_916),6-proj-7-tuple(v_916),7-proj-7-tuple(v_916))) in
        {487}let v_947: bitstring = catch-fail(concat3(v_920,2-proj-3-tuple(v_917),2-proj-2-tuple(v_945))) in
        {488}let v_948: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_945))) in
        {489}let v_949: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_948),zero)) in
        {490}let v_950: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_948),zero)) in
        {491}let v_951: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_948),zero)) in
        {492}let v_952: bitstring = catch-fail((if success?(2-proj-3-tuple(v_948)) then (if not-caught-fail(v_949) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then (v_949,v_950,v_951) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {493}let v_953: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_952)) then cipherstatepack(1-proj-3-tuple(v_952),minnonce) else fail-any)) in
        {494}let v_954: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_952)) then cipherstatepack(2-proj-3-tuple(v_952),minnonce) else fail-any)) in
        {495}let v_955: bitstring = catch-fail((if success?(1-proj-2-tuple(v_945)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if not-caught-fail(v_953) then (if not-caught-fail(v_954) then (1-proj-2-tuple(v_945),v_953,v_954) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {496}let (hs_956: handshakestate,message_b_957: bitstring,cs1_958: cipherstate,cs2_959: cipherstate) = (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-7-tuple(v_916))))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if not-caught-fail(v_919) then (if not-caught-fail(v_920) then (if not-caught-fail(v_922) then (if not-caught-fail(v_929) then (if not-caught-fail(v_936) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then (if not-caught-fail(v_946) then (if not-caught-fail(v_947) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (v_946,v_947,2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {497}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {498}insert statestore(bob,charlie,sid,statepack_c(hs_956,cs1_958,cs2_959));
        {499}out(pub, message_b_957)
    ) | (
        {501}!
        {521}get statestore(=bob,=charlie,=sid,statepack_c(hs_960: handshakestate,cs1_961: cipherstate,cs2_962: cipherstate)) in
        {502}let hs_963: handshakestate = handshakestatesetcs(hs_960,cs1_961) in
        {503}in(pub, message_c_964: bitstring);
        {504}let v_965: bitstring = catch-fail(handshakestateunpack(hs_963)) in
        {505}let v_966: bitstring = catch-fail(deconcat3(message_c_964)) in
        {506}let v_967: bool = catch-fail(true) in
        {507}let v_968: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_965))) in
        {508}let v_969: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_968))) in
        {509}let v_970: aead = catch-fail(decrypt(1-proj-2-tuple(v_969),2-proj-2-tuple(v_969),3-proj-3-tuple(v_968),3-proj-3-tuple(v_966))) in
        {510}let v_971: bitstring = catch-fail(aeadunpack(v_970)) in
        {511}let v_972: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_968))) in
        {512}let v_973: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_969))) && success?(1-proj-3-tuple(v_968))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-2-tuple(v_972))))) then cipherstatepack(1-proj-2-tuple(v_972),increment_nonce(2-proj-2-tuple(v_969))) else fail-any) else fail-any)) in
        {513}let v_974: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_966)) && (success?(3-proj-3-tuple(v_968)) && success?(1-proj-3-tuple(v_968)))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-2-tuple(v_969))))) then (if not-caught-fail(v_970) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then (if not-caught-fail(v_973) then (v_973,3-proj-3-tuple(v_971),1-proj-3-tuple(v_971)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {514}let v_975: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_974),2-proj-3-tuple(v_968),3-proj-3-tuple(v_968)))) in
        {515}let v_976: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_966)) && success?(symmetricstatepack(1-proj-3-tuple(v_974),2-proj-3-tuple(v_968),3-proj-3-tuple(v_968)))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then symmetricstatepack(1-proj-3-tuple(v_975),2-proj-3-tuple(v_975),hash(3-proj-3-tuple(v_975),3-proj-3-tuple(v_966))) else fail-any) else fail-any)) in
        {516}let v_977: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_966)) && success?(1-proj-7-tuple(v_965))) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if not-caught-fail(v_976) then (v_976,2-proj-3-tuple(v_974),3-proj-3-tuple(v_974)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {517}let v_978: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_977),2-proj-7-tuple(v_965),3-proj-7-tuple(v_965),4-proj-7-tuple(v_965),5-proj-7-tuple(v_965),6-proj-7-tuple(v_965),7-proj-7-tuple(v_965))) in
        {518}let (hs_979: handshakestate,plaintext_c_980: bitstring,valid_981: bool) = (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-7-tuple(v_965))))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if not-caught-fail(v_967) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if (v_967 && 3-proj-3-tuple(v_977)) then (if not-caught-fail(v_978) then (v_978,2-proj-3-tuple(v_977),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {519}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_980);
        {520}insert statestore(bob,charlie,sid,statepack_d(hs_979,handshakestategetcs(hs_979),cs2_962))
    ) | (
        {522}!
        {540}get statestore(=bob,=charlie,=sid,statepack_d(hs_982: handshakestate,cs1_983: cipherstate,cs2_984: cipherstate)) in
        {523}let hs_985: handshakestate = handshakestatesetcs(hs_982,cs2_984) in
        {524}let v_986: bitstring = catch-fail(handshakestateunpack(hs_985)) in
        {525}let v_987: bitstring = catch-fail((empty,empty,empty)) in
        {526}let v_988: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_986))) in
        {527}let v_989: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_988))) in
        {528}let v_990: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_989),2-proj-2-tuple(v_989),3-proj-3-tuple(v_988),msg_d(bob,charlie,sid))) in
        {529}let v_991: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_988))) in
        {530}let v_992: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_989))) && success?(1-proj-3-tuple(v_988))) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-2-tuple(v_991))))) then cipherstatepack(1-proj-2-tuple(v_991),increment_nonce(2-proj-2-tuple(v_989))) else fail-any) else fail-any)) in
        {531}let v_993: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_988)) && success?(1-proj-3-tuple(v_988))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then (if not-caught-fail(v_990) then (if not-caught-fail(v_992) then (v_992,v_990) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_994: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_993),2-proj-3-tuple(v_988),3-proj-3-tuple(v_988)))) in
        {533}let v_995: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_993)) && success?(symmetricstatepack(1-proj-2-tuple(v_993),2-proj-3-tuple(v_988),3-proj-3-tuple(v_988)))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then symmetricstatepack(1-proj-3-tuple(v_994),2-proj-3-tuple(v_994),hash(3-proj-3-tuple(v_994),2-proj-2-tuple(v_993))) else fail-any) else fail-any)) in
        {534}let v_996: bitstring = catch-fail((if success?(1-proj-7-tuple(v_986)) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (if (not-caught-fail(v_993) && success?(is-true(success?(1-proj-2-tuple(v_993))))) then (if not-caught-fail(v_995) then (v_995,2-proj-2-tuple(v_993)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_997: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_996),2-proj-7-tuple(v_986),3-proj-7-tuple(v_986),4-proj-7-tuple(v_986),5-proj-7-tuple(v_986),6-proj-7-tuple(v_986),7-proj-7-tuple(v_986))) in
        {536}let v_998: bitstring = catch-fail(concat3(1-proj-3-tuple(v_987),2-proj-3-tuple(v_987),2-proj-2-tuple(v_996))) in
        {537}let (hs_999: handshakestate,message_d_1000: bitstring) = (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-7-tuple(v_986))))) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-3-tuple(v_987))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then (if not-caught-fail(v_997) then (if not-caught-fail(v_998) then (v_997,v_998) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {538}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {539}out(pub, message_d_1000)
    ) | (
        {541}event LeakS(phase0,bob);
        {542}out(pub, key_s(bob))
    ) | (
        {543}phase 1;
        {544}event LeakS(phase1,bob);
        {545}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 100 rules in the queue.
400 rules inserted. The rule base contains 383 rules. 93 rules in the queue.
600 rules inserted. The rule base contains 555 rules. 117 rules in the queue.
800 rules inserted. The rule base contains 709 rules. 101 rules in the queue.
1000 rules inserted. The rule base contains 825 rules. 119 rules in the queue.
1200 rules inserted. The rule base contains 959 rules. 149 rules in the queue.
1400 rules inserted. The rule base contains 1053 rules. 162 rules in the queue.
1600 rules inserted. The rule base contains 1205 rules. 169 rules in the queue.
1800 rules inserted. The rule base contains 1360 rules. 167 rules in the queue.
2000 rules inserted. The rule base contains 1501 rules. 166 rules in the queue.
2200 rules inserted. The rule base contains 1623 rules. 163 rules in the queue.
2400 rules inserted. The rule base contains 1719 rules. 143 rules in the queue.
2600 rules inserted. The rule base contains 1861 rules. 159 rules in the queue.
2800 rules inserted. The rule base contains 2020 rules. 176 rules in the queue.
3000 rules inserted. The rule base contains 2141 rules. 148 rules in the queue.
3200 rules inserted. The rule base contains 2254 rules. 111 rules in the queue.
3400 rules inserted. The rule base contains 2363 rules. 102 rules in the queue.
3600 rules inserted. The rule base contains 2441 rules. 8 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602504538]),msg_a(alice,charlie,sid[!1 = @sid_602504538]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_602504539]),msg_a(alice,charlie,sid[!1 = @sid_602504538])))
Abbreviations:
sid_602504577 = sid[!1 = @sid_602504567]
sid_602504578 = sid[!1 = @sid_602504551]

1. The entry statestore(bob,alice,sid_602504577,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_602504577,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_602504578,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_602504578,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_602504578,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602504578),msg_a(alice,charlie,sid_602504578)) may be executed at {182}.
So the message concat3(dhexp(key_e(alice,charlie,sid_602504578),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504578))) may be sent on channel pub at output {184}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_602504578),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504578)))).

4. The entry statestore(bob,alice,sid_602504577,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(dhexp(key_e(alice,charlie,sid_602504578),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504578),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504578))) that may be sent on channel pub by 3 may be received at input {287}.
We have dhexp(key_e(alice,charlie,sid_602504578),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_602504577),msg_a(alice,charlie,sid_602504578)) may be executed at {318}.
end(RecvMsg(bob,alice,stagepack_a(sid_602504577),msg_a(alice,charlie,sid_602504578))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602504581]),msg_a(alice,charlie,sid[!1 = @sid_602504581]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_602504582]),msg_a(alice,charlie,sid[!1 = @sid_602504581])))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602504585]),msg_a(alice,bob,sid[!1 = @sid_602504585]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_602504586]),msg_a(alice,bob,sid[!1 = @sid_602504585])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602504595]),msg_a(alice,charlie,sid[!1 = @sid_602504595]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_602504596]),msg_a(alice,charlie,sid[!1 = @sid_602504595])))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602504599]),msg_a(alice,bob,sid[!1 = @sid_602504599]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_602504600]),msg_a(alice,bob,sid[!1 = @sid_602504599])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602504609]),msg_a(alice,charlie,sid[!1 = @sid_602504609]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_602504610]),msg_a(alice,charlie,sid[!1 = @sid_602504609])))
Abbreviations:
sid_602504648 = sid[!1 = @sid_602504638]
sid_602504649 = sid[!1 = @sid_602504622]

1. The entry statestore(bob,alice,sid_602504648,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_602504648,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_602504649,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_602504649,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_602504649,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602504649),msg_a(alice,charlie,sid_602504649)) may be executed at {182}.
So the message concat3(dhexp(key_e(alice,charlie,sid_602504649),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504649))) may be sent on channel pub at output {184}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_602504649),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504649)))).

4. The entry statestore(bob,alice,sid_602504648,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(dhexp(key_e(alice,charlie,sid_602504649),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504649),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504649))) that may be sent on channel pub by 3 may be received at input {287}.
We have dhexp(key_e(alice,charlie,sid_602504649),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_602504648),msg_a(alice,charlie,sid_602504649)) may be executed at {318}.
end(RecvMsg(bob,alice,stagepack_a(sid_602504648),msg_a(alice,charlie,sid_602504649))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602504652]),msg_a(alice,charlie,sid[!1 = @sid_602504652]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_602504653]),msg_a(alice,charlie,sid[!1 = @sid_602504652])))
Abbreviations:
sid_602504691 = sid[!1 = @sid_602504681]
sid_602504692 = sid[!1 = @sid_602504665]

1. The entry statestore(bob,alice,sid_602504691,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_602504691,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_602504692,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_602504692,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_602504692,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602504692),msg_a(alice,charlie,sid_602504692)) may be executed at {182}.
So the message concat3(dhexp(key_e(alice,charlie,sid_602504692),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504692))) may be sent on channel pub at output {184}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_602504692),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504692)))).

4. The entry statestore(bob,alice,sid_602504691,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(dhexp(key_e(alice,charlie,sid_602504692),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602504692),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602504692))) that may be sent on channel pub by 3 may be received at input {287}.
We have dhexp(key_e(alice,charlie,sid_602504692),g) <> caught-fail.
So event RecvMsg(bob,alice,stagepack_a(sid_602504691),msg_a(alice,charlie,sid_602504692)) may be executed at {318}.
end(RecvMsg(bob,alice,stagepack_a(sid_602504691),msg_a(alice,charlie,sid_602504692))).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602504695]),msg_a(alice,bob,sid[!1 = @sid_602504695]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_602504695]))
Abbreviations:
sid_602504767 = sid[!1 = @sid_602504742]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_602504767,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_602504767,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_602504767,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_602504767),msg_a(alice,bob,sid_602504767)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_602504767),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_602504767),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_602504767),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_602504767),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_602504767),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504767),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504767),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504767),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_602504767),g).
attacker(dhexp(key_e(alice,bob,sid_602504767),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_602504767),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504767),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504767)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_602504767).
attacker(msg_a(alice,bob,sid_602504767)).

18. By 17, the attacker may know msg_a(alice,bob,sid_602504767).
So the attacker may know msg_a(alice,bob,sid_602504767) in phase 1.
attacker_p1(msg_a(alice,bob,sid_602504767)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602504770]),msg_a(alice,bob,sid[!1 = @sid_602504770]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_602504770]))
Abbreviations:
sid_602504842 = sid[!1 = @sid_602504817]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_602504842,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_602504842,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_602504842,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_602504842),msg_a(alice,bob,sid_602504842)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_602504842),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_602504842),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_602504842),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_602504842),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_602504842),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504842),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504842),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504842),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_602504842),g).
attacker(dhexp(key_e(alice,bob,sid_602504842),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_602504842),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504842),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504842)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_602504842).
attacker(msg_a(alice,bob,sid_602504842)).

18. By 17, the attacker may know msg_a(alice,bob,sid_602504842).
So the attacker may know msg_a(alice,bob,sid_602504842) in phase 1.
attacker_p1(msg_a(alice,bob,sid_602504842)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602504845]),msg_a(alice,bob,sid[!1 = @sid_602504845]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_602504845]))
Abbreviations:
sid_602504918 = sid[!1 = @sid_602504893]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_602504918,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_602504918,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_602504918,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_602504918),msg_a(alice,bob,sid_602504918)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_602504918),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_602504918),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_602504918),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_602504918),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_602504918),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504918),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504918),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504918),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_602504918),g).
attacker(dhexp(key_e(alice,bob,sid_602504918),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_602504918),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504918),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504918)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_602504918).
attacker(msg_a(alice,bob,sid_602504918)).

18. By 17, the attacker may know msg_a(alice,bob,sid_602504918).
So the attacker may know msg_a(alice,bob,sid_602504918) in phase 1.
attacker_p1(msg_a(alice,bob,sid_602504918)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602504921]),msg_a(alice,bob,sid[!1 = @sid_602504921]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_602504921]))
Abbreviations:
sid_602504993 = sid[!1 = @sid_602504968]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_602504993,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {15}.
table(statestore(alice,bob,sid_602504993,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,sid_602504993,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {49}.
The event SendMsg(alice,bob,stagepack_a(sid_602504993),msg_a(alice,bob,sid_602504993)) may be executed at {46}.
So the message concat3(dhexp(key_e(alice,bob,sid_602504993),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993))) may be sent on channel pub at output {48}.
mess(pub,concat3(dhexp(key_e(alice,bob,sid_602504993),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob,sid_602504993),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob,sid_602504993),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob,sid_602504993),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504993),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504993),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob,sid_602504993),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob,sid_602504993),g).
attacker(dhexp(key_e(alice,bob,sid_602504993),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob,sid_602504993),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)).
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g)))).

14. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

15. By 14, the attacker may know minnonce.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce).
attacker(increment_nonce(minnonce)).

16. By 8, the attacker may know empty.
By 15, the attacker may know increment_nonce(minnonce).
By 13, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))).
By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob,sid_602504993),g)),dhexp(key_s(alice),g))),msg_a(alice,bob,sid_602504993)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_602504993).
attacker(msg_a(alice,bob,sid_602504993)).

18. By 17, the attacker may know msg_a(alice,bob,sid_602504993).
So the attacker may know msg_a(alice,bob,sid_602504993) in phase 1.
attacker_p1(msg_a(alice,bob,sid_602504993)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602504996]),msg_b(bob,alice,sid[!1 = @sid_602504996]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602504997]),msg_a(alice,bob,sid[!1 = @sid_602504997]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_602504997]),msg_b(bob,alice,sid[!1 = @sid_602504996])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505005]),msg_b(bob,alice,sid[!1 = @sid_602505005]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505006]),msg_a(alice,bob,sid[!1 = @sid_602505006]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_602505006]),msg_b(bob,alice,sid[!1 = @sid_602505005])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505015]),msg_b(bob,alice,sid[!1 = @sid_602505015]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505016]),msg_a(alice,bob,sid[!1 = @sid_602505016]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_602505016]),msg_b(bob,alice,sid[!1 = @sid_602505015])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505025]),msg_b(bob,alice,sid[!1 = @sid_602505025]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505026]),msg_a(alice,bob,sid[!1 = @sid_602505026]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_602505026]),msg_b(bob,alice,sid[!1 = @sid_602505025])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505034]),msg_b(bob,alice,sid[!1 = @sid_602505034]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505035]),msg_a(alice,bob,sid[!1 = @sid_602505035]))) -> end(RecvMsg(alice,bob,stagepack_b(sid[!1 = @sid_602505035]),msg_b(bob,alice,sid[!1 = @sid_602505034])))
RESULT event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice,sid_b))
RESULT not attacker_p1(msg_b(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_602505056]),msg_c(alice,charlie,sid[!1 = @sid_602505056]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505057]),msg_b(bob,alice,sid[!1 = @sid_602505057]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602505056]),msg_a(alice,charlie,sid[!1 = @sid_602505056]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_602505057]),msg_c(alice,charlie,sid[!1 = @sid_602505056])))
Abbreviations:
sid_602505199 = sid[!1 = @sid_602505186]
sid_602505200 = sid[!1 = @sid_602505146]

1. The entry statestore(bob,alice,sid_602505199,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_602505199,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_602505200,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_602505200,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_602505200,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602505200),msg_a(alice,charlie,sid_602505200)) may be executed at {182}.
So the message concat3(dhexp(key_e(alice,charlie,sid_602505200),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))) may be sent on channel pub at output {184}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_602505200),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200)))).

4. The entry statestore(bob,alice,sid_602505199,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(dhexp(key_e(alice,charlie,sid_602505200),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))) that may be sent on channel pub by 3 may be received at input {287}.
We have dhexp(key_e(alice,charlie,sid_602505200),g) <> caught-fail.
So the entry statestore(bob,alice,sid_602505199,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505200),g),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,sid_602505199,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505200),g),empty,false)))).

5. The entry statestore(bob,alice,sid_602505199,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505200),g),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_602505199),msg_b(bob,alice,sid_602505199)) may be executed at {362}.
So the entry statestore(bob,alice,sid_602505199,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505199),g),key_e(bob,alice,sid_602505199)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505200),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {363}.
table(statestore(bob,alice,sid_602505199,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505199),g),key_e(bob,alice,sid_602505199)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505200),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_602505200,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602505200),msg_a(alice,charlie,sid_602505200)) may be executed at {182}.
So the entry statestore(alice,charlie,sid_602505200,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505200),g),key_e(alice,charlie,sid_602505200)),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,sid_602505200,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505200),g),key_e(alice,charlie,sid_602505200)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_602505199,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505200),g),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_602505199),msg_b(bob,alice,sid_602505199)) may be executed at {362}.
So the message concat3(dhexp(key_e(bob,alice,sid_602505199),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199))) may be sent on channel pub at output {364}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_602505199),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199)))).

8. The entry statestore(alice,charlie,sid_602505200,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505200),g),key_e(alice,charlie,sid_602505200)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {229}.
The message concat3(dhexp(key_e(bob,alice,sid_602505199),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199))) that may be sent on channel pub by 7 may be received at input {186}.
So the entry statestore(alice,charlie,sid_602505200,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505200),g),key_e(alice,charlie,sid_602505200)),empty,dhexp(key_e(bob,alice,sid_602505199),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {228}.
table(statestore(alice,charlie,sid_602505200,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505200),g),key_e(alice,charlie,sid_602505200)),empty,dhexp(key_e(bob,alice,sid_602505199),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_602505200,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505200),g),key_e(alice,charlie,sid_602505200)),empty,dhexp(key_e(bob,alice,sid_602505199),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_602505200),msg_c(alice,charlie,sid_602505200)) may be executed at {246}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199))),msg_c(alice,charlie,sid_602505200))) may be sent on channel pub at output {248}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199))),msg_c(alice,charlie,sid_602505200)))).

10. The entry statestore(bob,alice,sid_602505199,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505199),g),key_e(bob,alice,sid_602505199)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505200),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 5 may be read at get {386}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_e(bob,alice,sid_602505199),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505200),dhexp(key_e(bob,alice,sid_602505199),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505199),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505200),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505200))),dhexp(key_e(bob,alice,sid_602505199),g)),msg_b(bob,alice,sid_602505199))),msg_c(alice,charlie,sid_602505200))) that may be sent on channel pub by 9 may be received at input {368}.
So event RecvMsg(bob,alice,stagepack_c(sid_602505199),msg_c(alice,charlie,sid_602505200)) may be executed at {384}.
end(RecvMsg(bob,alice,stagepack_c(sid_602505199),msg_c(alice,charlie,sid_602505200))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_602505203]),msg_c(alice,charlie,sid[!1 = @sid_602505203]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505204]),msg_b(bob,alice,sid[!1 = @sid_602505204]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602505203]),msg_a(alice,charlie,sid[!1 = @sid_602505203]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_602505204]),msg_c(alice,charlie,sid[!1 = @sid_602505203])))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_602505207]),msg_c(alice,bob,sid[!1 = @sid_602505207]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505208]),msg_b(bob,alice,sid[!1 = @sid_602505208]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505207]),msg_a(alice,bob,sid[!1 = @sid_602505207]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_602505208]),msg_c(alice,bob,sid[!1 = @sid_602505207])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_602505217]),msg_c(alice,charlie,sid[!1 = @sid_602505217]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505218]),msg_b(bob,alice,sid[!1 = @sid_602505218]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602505217]),msg_a(alice,charlie,sid[!1 = @sid_602505217]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_602505218]),msg_c(alice,charlie,sid[!1 = @sid_602505217])))
goal reachable: begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_602505221]),msg_c(alice,bob,sid[!1 = @sid_602505221]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505222]),msg_b(bob,alice,sid[!1 = @sid_602505222]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505221]),msg_a(alice,bob,sid[!1 = @sid_602505221]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_602505222]),msg_c(alice,bob,sid[!1 = @sid_602505221])))
RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1103,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_602505231]),msg_c(alice,charlie,sid[!1 = @sid_602505231]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505232]),msg_b(bob,alice,sid[!1 = @sid_602505232]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602505231]),msg_a(alice,charlie,sid[!1 = @sid_602505231]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_602505232]),msg_c(alice,charlie,sid[!1 = @sid_602505231])))
Abbreviations:
sid_602505374 = sid[!1 = @sid_602505361]
sid_602505375 = sid[!1 = @sid_602505321]

1. The entry statestore(bob,alice,sid_602505374,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_602505374,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_602505375,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_602505375,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_602505375,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602505375),msg_a(alice,charlie,sid_602505375)) may be executed at {182}.
So the message concat3(dhexp(key_e(alice,charlie,sid_602505375),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))) may be sent on channel pub at output {184}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_602505375),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375)))).

4. The entry statestore(bob,alice,sid_602505374,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(dhexp(key_e(alice,charlie,sid_602505375),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))) that may be sent on channel pub by 3 may be received at input {287}.
We have dhexp(key_e(alice,charlie,sid_602505375),g) <> caught-fail.
So the entry statestore(bob,alice,sid_602505374,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505375),g),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,sid_602505374,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505375),g),empty,false)))).

5. The entry statestore(bob,alice,sid_602505374,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505375),g),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_602505374),msg_b(bob,alice,sid_602505374)) may be executed at {362}.
So the entry statestore(bob,alice,sid_602505374,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505374),g),key_e(bob,alice,sid_602505374)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505375),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {363}.
table(statestore(bob,alice,sid_602505374,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505374),g),key_e(bob,alice,sid_602505374)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505375),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_602505375,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602505375),msg_a(alice,charlie,sid_602505375)) may be executed at {182}.
So the entry statestore(alice,charlie,sid_602505375,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505375),g),key_e(alice,charlie,sid_602505375)),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,sid_602505375,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505375),g),key_e(alice,charlie,sid_602505375)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_602505374,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505375),g),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_602505374),msg_b(bob,alice,sid_602505374)) may be executed at {362}.
So the message concat3(dhexp(key_e(bob,alice,sid_602505374),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374))) may be sent on channel pub at output {364}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_602505374),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374)))).

8. The entry statestore(alice,charlie,sid_602505375,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505375),g),key_e(alice,charlie,sid_602505375)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {229}.
The message concat3(dhexp(key_e(bob,alice,sid_602505374),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374))) that may be sent on channel pub by 7 may be received at input {186}.
So the entry statestore(alice,charlie,sid_602505375,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505375),g),key_e(alice,charlie,sid_602505375)),empty,dhexp(key_e(bob,alice,sid_602505374),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {228}.
table(statestore(alice,charlie,sid_602505375,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505375),g),key_e(alice,charlie,sid_602505375)),empty,dhexp(key_e(bob,alice,sid_602505374),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_602505375,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505375),g),key_e(alice,charlie,sid_602505375)),empty,dhexp(key_e(bob,alice,sid_602505374),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_602505375),msg_c(alice,charlie,sid_602505375)) may be executed at {246}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374))),msg_c(alice,charlie,sid_602505375))) may be sent on channel pub at output {248}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374))),msg_c(alice,charlie,sid_602505375)))).

10. The entry statestore(bob,alice,sid_602505374,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505374),g),key_e(bob,alice,sid_602505374)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505375),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 5 may be read at get {386}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_e(bob,alice,sid_602505374),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505375),dhexp(key_e(bob,alice,sid_602505374),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505374),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505375),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505375))),dhexp(key_e(bob,alice,sid_602505374),g)),msg_b(bob,alice,sid_602505374))),msg_c(alice,charlie,sid_602505375))) that may be sent on channel pub by 9 may be received at input {368}.
So event RecvMsg(bob,alice,stagepack_c(sid_602505374),msg_c(alice,charlie,sid_602505375)) may be executed at {384}.
end(RecvMsg(bob,alice,stagepack_c(sid_602505374),msg_c(alice,charlie,sid_602505375))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_602505378]),msg_c(alice,charlie,sid[!1 = @sid_602505378]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505379]),msg_b(bob,alice,sid[!1 = @sid_602505379]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602505378]),msg_a(alice,charlie,sid[!1 = @sid_602505378]))) -> end(RecvMsg(bob,alice,stagepack_c(sid[!1 = @sid_602505379]),msg_c(alice,charlie,sid[!1 = @sid_602505378])))
Abbreviations:
sid_602505521 = sid[!1 = @sid_602505508]
sid_602505522 = sid[!1 = @sid_602505468]

1. The entry statestore(bob,alice,sid_602505521,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_602505521,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,sid_602505522,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_602505522,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,sid_602505522,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602505522),msg_a(alice,charlie,sid_602505522)) may be executed at {182}.
So the message concat3(dhexp(key_e(alice,charlie,sid_602505522),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))) may be sent on channel pub at output {184}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_602505522),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522)))).

4. The entry statestore(bob,alice,sid_602505521,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {320}.
The message concat3(dhexp(key_e(alice,charlie,sid_602505522),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))) that may be sent on channel pub by 3 may be received at input {287}.
We have dhexp(key_e(alice,charlie,sid_602505522),g) <> caught-fail.
So the entry statestore(bob,alice,sid_602505521,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505522),g),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,sid_602505521,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505522),g),empty,false)))).

5. The entry statestore(bob,alice,sid_602505521,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505522),g),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_602505521),msg_b(bob,alice,sid_602505521)) may be executed at {362}.
So the entry statestore(bob,alice,sid_602505521,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505521),g),key_e(bob,alice,sid_602505521)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505522),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {363}.
table(statestore(bob,alice,sid_602505521,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505521),g),key_e(bob,alice,sid_602505521)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505522),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce)))).

6. The entry statestore(alice,charlie,sid_602505522,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602505522),msg_a(alice,charlie,sid_602505522)) may be executed at {182}.
So the entry statestore(alice,charlie,sid_602505522,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505522),g),key_e(alice,charlie,sid_602505522)),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,sid_602505522,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505522),g),key_e(alice,charlie,sid_602505522)),empty,empty,empty,true)))).

7. The entry statestore(bob,alice,sid_602505521,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505522),g),empty,false))) that may be in a table by 4 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_602505521),msg_b(bob,alice,sid_602505521)) may be executed at {362}.
So the message concat3(dhexp(key_e(bob,alice,sid_602505521),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521))) may be sent on channel pub at output {364}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_602505521),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521)))).

8. The entry statestore(alice,charlie,sid_602505522,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505522),g),key_e(alice,charlie,sid_602505522)),empty,empty,empty,true))) that may be in a table by 6 may be read at get {229}.
The message concat3(dhexp(key_e(bob,alice,sid_602505521),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521))) that may be sent on channel pub by 7 may be received at input {186}.
So the entry statestore(alice,charlie,sid_602505522,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505522),g),key_e(alice,charlie,sid_602505522)),empty,dhexp(key_e(bob,alice,sid_602505521),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {228}.
table(statestore(alice,charlie,sid_602505522,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505522),g),key_e(alice,charlie,sid_602505522)),empty,dhexp(key_e(bob,alice,sid_602505521),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(alice,charlie,sid_602505522,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505522),g),key_e(alice,charlie,sid_602505522)),empty,dhexp(key_e(bob,alice,sid_602505521),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_602505522),msg_c(alice,charlie,sid_602505522)) may be executed at {246}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521))),msg_c(alice,charlie,sid_602505522))) may be sent on channel pub at output {248}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521))),msg_c(alice,charlie,sid_602505522)))).

10. The entry statestore(bob,alice,sid_602505521,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505521),g),key_e(bob,alice,sid_602505521)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505522),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 5 may be read at get {386}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_e(bob,alice,sid_602505521),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505522),dhexp(key_e(bob,alice,sid_602505521),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505521),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505522),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505522))),dhexp(key_e(bob,alice,sid_602505521),g)),msg_b(bob,alice,sid_602505521))),msg_c(alice,charlie,sid_602505522))) that may be sent on channel pub by 9 may be received at input {368}.
So event RecvMsg(bob,alice,stagepack_c(sid_602505521),msg_c(alice,charlie,sid_602505522)) may be executed at {384}.
end(RecvMsg(bob,alice,stagepack_c(sid_602505521),msg_c(alice,charlie,sid_602505522))).


RESULT event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob,sid_a))
RESULT not attacker_p1(msg_c(alice,bob,sid_a)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_602505538]),msg_d(bob,alice,sid[!1 = @sid_602505538]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_602505539]),msg_c(alice,bob,sid[!1 = @sid_602505539]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505538]),msg_b(bob,alice,sid[!1 = @sid_602505538]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505539]),msg_a(alice,bob,sid[!1 = @sid_602505539]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_602505539]),msg_d(bob,alice,sid[!1 = @sid_602505538])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_602505547]),msg_d(bob,alice,sid[!1 = @sid_602505547]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_602505548]),msg_c(alice,bob,sid[!1 = @sid_602505548]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505547]),msg_b(bob,alice,sid[!1 = @sid_602505547]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505548]),msg_a(alice,bob,sid[!1 = @sid_602505548]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_602505548]),msg_d(bob,alice,sid[!1 = @sid_602505547])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_602505557]),msg_d(bob,alice,sid[!1 = @sid_602505557]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_602505558]),msg_c(alice,bob,sid[!1 = @sid_602505558]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505557]),msg_b(bob,alice,sid[!1 = @sid_602505557]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505558]),msg_a(alice,bob,sid[!1 = @sid_602505558]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_602505558]),msg_d(bob,alice,sid[!1 = @sid_602505557])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1103,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_602505567]),msg_d(bob,alice,sid[!1 = @sid_602505567]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_602505568]),msg_c(alice,bob,sid[!1 = @sid_602505568]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505567]),msg_b(bob,alice,sid[!1 = @sid_602505567]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505568]),msg_a(alice,bob,sid[!1 = @sid_602505568]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_602505568]),msg_d(bob,alice,sid[!1 = @sid_602505567])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_602505576]),msg_d(bob,alice,sid[!1 = @sid_602505576]))) && begin(SendMsg(alice,bob,stagepack_c(sid[!1 = @sid_602505577]),msg_c(alice,bob,sid[!1 = @sid_602505577]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505576]),msg_b(bob,alice,sid[!1 = @sid_602505576]))) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_602505577]),msg_a(alice,bob,sid[!1 = @sid_602505577]))) -> end(RecvMsg(alice,bob,stagepack_d(sid[!1 = @sid_602505577]),msg_d(bob,alice,sid[!1 = @sid_602505576])))
RESULT event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice,sid_b))
RESULT not attacker_p1(msg_d(bob,alice,sid_b)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stagepack_d(sid[!1 = @sid_602505596]),msg_d(bob,alice,sid[!1 = @sid_602505596]))) && begin(SendMsg(alice,charlie,stagepack_c(sid[!1 = @sid_602505597]),msg_c(alice,charlie,sid[!1 = @sid_602505597]))) && begin(SendMsg(bob,alice,stagepack_b(sid[!1 = @sid_602505596]),msg_b(bob,alice,sid[!1 = @sid_602505596]))) && begin(SendMsg(alice,charlie,stagepack_a(sid[!1 = @sid_602505597]),msg_a(alice,charlie,sid[!1 = @sid_602505597]))) -> end(RecvEnd(true))
Abbreviations:
sid_602505846 = sid[!1 = @sid_602505835]
sid_602505847 = sid[!1 = @sid_602505790]

1. The entry statestore(alice,charlie,sid_602505846,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {151}.
table(statestore(alice,charlie,sid_602505846,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,charlie,sid_602505846,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602505846),msg_a(alice,charlie,sid_602505846)) may be executed at {182}.
So the entry statestore(alice,charlie,sid_602505846,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,empty,empty,true))) may be inserted in a table at insert {183}.
table(statestore(alice,charlie,sid_602505846,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,sid_602505847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,sid_602505847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,charlie,sid_602505846,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {185}.
The event SendMsg(alice,charlie,stagepack_a(sid_602505846),msg_a(alice,charlie,sid_602505846)) may be executed at {182}.
So the message concat3(dhexp(key_e(alice,charlie,sid_602505846),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))) may be sent on channel pub at output {184}.
mess(pub,concat3(dhexp(key_e(alice,charlie,sid_602505846),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846)))).

5. The entry statestore(bob,alice,sid_602505847,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {320}.
The message concat3(dhexp(key_e(alice,charlie,sid_602505846),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))) that may be sent on channel pub by 4 may be received at input {287}.
We have dhexp(key_e(alice,charlie,sid_602505846),g) <> caught-fail.
So the entry statestore(bob,alice,sid_602505847,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false))) may be inserted in a table at insert {319}.
table(statestore(bob,alice,sid_602505847,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false)))).

6. The entry statestore(bob,alice,sid_602505847,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false))) that may be in a table by 5 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_602505847),msg_b(bob,alice,sid_602505847)) may be executed at {362}.
So the message concat3(dhexp(key_e(bob,alice,sid_602505847),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))) may be sent on channel pub at output {364}.
mess(pub,concat3(dhexp(key_e(bob,alice,sid_602505847),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847)))).

7. The entry statestore(alice,charlie,sid_602505846,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {229}.
The message concat3(dhexp(key_e(bob,alice,sid_602505847),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))) that may be sent on channel pub by 6 may be received at input {186}.
So the entry statestore(alice,charlie,sid_602505846,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,dhexp(key_e(bob,alice,sid_602505847),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {228}.
table(statestore(alice,charlie,sid_602505846,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,dhexp(key_e(bob,alice,sid_602505847),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce)))).

8. The entry statestore(alice,charlie,sid_602505846,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,dhexp(key_e(bob,alice,sid_602505847),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 7 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_602505846),msg_c(alice,charlie,sid_602505846)) may be executed at {246}.
So the entry statestore(alice,charlie,sid_602505846,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,dhexp(key_e(bob,alice,sid_602505847),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {247}.
table(statestore(alice,charlie,sid_602505846,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,dhexp(key_e(bob,alice,sid_602505847),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce)))).

9. The entry statestore(bob,alice,sid_602505847,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false))) that may be in a table by 5 may be read at get {365}.
The event SendMsg(bob,alice,stagepack_b(sid_602505847),msg_b(bob,alice,sid_602505847)) may be executed at {362}.
So the entry statestore(bob,alice,sid_602505847,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505847),g),key_e(bob,alice,sid_602505847)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {363}.
table(statestore(bob,alice,sid_602505847,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505847),g),key_e(bob,alice,sid_602505847)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce)))).

10. The entry statestore(alice,charlie,sid_602505846,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,dhexp(key_e(bob,alice,sid_602505847),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 7 may be read at get {249}.
The event SendMsg(alice,charlie,stagepack_c(sid_602505846),msg_c(alice,charlie,sid_602505846)) may be executed at {246}.
So the message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846))) may be sent on channel pub at output {248}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846)))).

11. The entry statestore(bob,alice,sid_602505847,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505847),g),key_e(bob,alice,sid_602505847)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 9 may be read at get {386}.
The message concat3(empty,empty,encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846))) that may be sent on channel pub by 10 may be received at input {368}.
So the entry statestore(bob,alice,sid_602505847,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505847),g),key_e(bob,alice,sid_602505847)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) may be inserted in a table at insert {385}.
table(statestore(bob,alice,sid_602505847,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505847),g),key_e(bob,alice,sid_602505847)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce)))).

12. The entry statestore(bob,alice,sid_602505847,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice,sid_602505847),g),key_e(bob,alice,sid_602505847)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie,sid_602505846),g),empty,false),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 11 may be read at get {405}.
The event SendMsg(bob,alice,stagepack_d(sid_602505847),msg_d(bob,alice,sid_602505847)) may be executed at {403}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846))),msg_d(bob,alice,sid_602505847))) may be sent on channel pub at output {404}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846))),msg_d(bob,alice,sid_602505847)))).

13. The entry statestore(alice,charlie,sid_602505846,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie,sid_602505846),g),key_e(alice,charlie,sid_602505846)),empty,dhexp(key_e(bob,alice,sid_602505847),g),empty,true),cipherstatepack(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),increment_nonce(minnonce)),cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce))) that may be in a table by 8 may be read at get {270}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),encrypt(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_e(bob,alice,sid_602505847),dhexp(key_s(alice),g))),zero),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,charlie,sid_602505846),dhexp(key_e(bob,alice,sid_602505847),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice,sid_602505847),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie,sid_602505846),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie,sid_602505846))),dhexp(key_e(bob,alice,sid_602505847),g)),msg_b(bob,alice,sid_602505847))),msg_c(alice,charlie,sid_602505846))),msg_d(bob,alice,sid_602505847))) that may be sent on channel pub by 12 may be received at input {252}.
So event RecvEnd(true) may be executed at {269}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
