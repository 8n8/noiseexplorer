File "IN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "IN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 294, character 6:
Warning: identifier s rebound.
File "IN.noise.passive.pv", line 295, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 295, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IN.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 320, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 340, characters 48-53:
Warning: identifier valid1 rebound.
File "IN.noise.passive.pv", line 341, characters 6-7:
Warning: identifier rs rebound.
File "IN.noise.passive.pv", line 342, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 344, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 352, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 355, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 359, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 367, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 369, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 524, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 516, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 319, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 319, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 320, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 509, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 352, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 353, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 355, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 357, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 359, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 501, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 294, character 6:
Warning: identifier s rebound.
File "IN.noise.passive.pv", line 295, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 295, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IN.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 328, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 367, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 369, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "IN.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "IN.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IN.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IN.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 552, characters 8-9:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 337, characters 6-7:
Warning: identifier re rebound.
File "IN.noise.passive.pv", line 338, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 340, characters 48-53:
Warning: identifier valid1 rebound.
File "IN.noise.passive.pv", line 341, characters 6-7:
Warning: identifier rs rebound.
File "IN.noise.passive.pv", line 342, characters 7-8:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 344, characters 7-8:
Warning: identifier hs rebound.
File "IN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IN.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IN.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_468: keypair = keypairpack(empty,empty) in
    {6}out(pub, getpublickey(s_468));
    (
        {7}let e_469: keypair = keypairpack(empty,empty) in
        {8}let rs_470: key = empty in
        {9}let re_471: key = empty in
        {10}let v_472: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_473: key = catch-fail(v_472) in
        {12}let v_474: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_475: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then symmetricstatepack(v_474,v_473,v_472) else fail-any) else fail-any) else fail-any))) in
        {14}let v_476: symmetricstate = catch-fail((if success?((if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then symmetricstatepack(v_474,v_473,v_472) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then symmetricstatepack(1-proj-3-tuple(v_475),2-proj-3-tuple(v_475),hash(3-proj-3-tuple(v_475),empty)) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_476) then handshakestatepack(v_476,s_468,e_469,rs_470,re_471,empty,true) else fail-any) in
        {16}insert statestore(me,them,statepack_a(hs))
    ) | (
        {51}get statestore(=me,=them,statepack_a(hs_477: handshakestate)) in
        {17}let v_478: bitstring = catch-fail(handshakestateunpack(hs_477)) in
        {18}let v_479: bitstring = catch-fail((empty,empty,empty)) in
        {19}new key_e[me,them]: key;
        {20}let v_480: key = catch-fail(dhexp(key_e,g)) in
        {21}let v_481: keypair = catch-fail((if not-caught-fail(v_480) then keypairpack(v_480,key_e) else fail-any)) in
        {22}let v_482: bitstring = catch-fail(getpublickey(v_481)) in
        {23}let v_483: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_478))) in
        {24}let v_484: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_478)) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),v_482)) else fail-any) else fail-any)) in
        {25}let v_485: key = catch-fail(dhexp(key_s(me),g)) in
        {26}let v_486: keypair = catch-fail((if not-caught-fail(v_485) then keypairpack(v_485,key_s(me)) else fail-any)) in
        {27}let v_487: bitstring = catch-fail(symmetricstateunpack(v_484)) in
        {28}let v_488: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_487))) in
        {29}let v_489: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_488),2-proj-2-tuple(v_488),3-proj-3-tuple(v_487),getpublickey(v_486))) in
        {30}let v_490: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_487))) in
        {31}let v_491: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_488))) && success?(1-proj-3-tuple(v_487))) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then cipherstatepack(1-proj-2-tuple(v_490),increment_nonce(2-proj-2-tuple(v_488))) else fail-any) else fail-any)) in
        {32}let v_492: bitstring = catch-fail((if (success?(getpublickey(v_486)) && (success?(3-proj-3-tuple(v_487)) && success?(1-proj-3-tuple(v_487)))) then (if (not-caught-fail(v_488) && success?(is-true(success?(1-proj-2-tuple(v_488))))) then (if not-caught-fail(v_489) then (if not-caught-fail(v_491) then (v_491,v_489) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {33}let v_493: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_492),2-proj-3-tuple(v_487),3-proj-3-tuple(v_487)))) in
        {34}let v_494: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_492)) && success?(symmetricstatepack(1-proj-2-tuple(v_492),2-proj-3-tuple(v_487),3-proj-3-tuple(v_487)))) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-3-tuple(v_493))))) then symmetricstatepack(1-proj-3-tuple(v_493),2-proj-3-tuple(v_493),hash(3-proj-3-tuple(v_493),2-proj-2-tuple(v_492))) else fail-any) else fail-any)) in
        {35}let v_495: bitstring = catch-fail((if success?(getpublickey(v_486)) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (if (not-caught-fail(v_492) && success?(is-true(success?(1-proj-2-tuple(v_492))))) then (if not-caught-fail(v_494) then (v_494,2-proj-2-tuple(v_492)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {36}let v_496: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_495))) in
        {37}let v_497: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_496))) in
        {38}let v_498: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_497),2-proj-2-tuple(v_497),3-proj-3-tuple(v_496),msg_a(me,them))) in
        {39}let v_499: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_496))) in
        {40}let v_500: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_497))) && success?(1-proj-3-tuple(v_496))) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-2-tuple(v_499))))) then cipherstatepack(1-proj-2-tuple(v_499),increment_nonce(2-proj-2-tuple(v_497))) else fail-any) else fail-any)) in
        {41}let v_501: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_496)) && success?(1-proj-3-tuple(v_496))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then (if not-caught-fail(v_498) then (if not-caught-fail(v_500) then (v_500,v_498) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_502: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_501),2-proj-3-tuple(v_496),3-proj-3-tuple(v_496)))) in
        {43}let v_503: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_501)) && success?(symmetricstatepack(1-proj-2-tuple(v_501),2-proj-3-tuple(v_496),3-proj-3-tuple(v_496)))) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then symmetricstatepack(1-proj-3-tuple(v_502),2-proj-3-tuple(v_502),hash(3-proj-3-tuple(v_502),2-proj-2-tuple(v_501))) else fail-any) else fail-any)) in
        {44}let v_504: bitstring = catch-fail((if success?(1-proj-2-tuple(v_495)) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-3-tuple(v_496))))) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-2-tuple(v_501))))) then (if not-caught-fail(v_503) then (v_503,2-proj-2-tuple(v_501)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {45}let v_505: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_504),v_486,v_481,4-proj-7-tuple(v_478),5-proj-7-tuple(v_478),6-proj-7-tuple(v_478),7-proj-7-tuple(v_478))) in
        {46}let v_506: bitstring = catch-fail(concat3(v_482,2-proj-2-tuple(v_495),2-proj-2-tuple(v_504))) in
        {47}let (hs_507: handshakestate,re_508: key,message_a: bitstring) = (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-7-tuple(v_478))))) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if not-caught-fail(v_481) then (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then (if not-caught-fail(v_486) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-2-tuple(v_495))))) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-2-tuple(v_504))))) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (v_505,5-proj-7-tuple(v_478),v_506) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {48}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {49}insert statestore(me,them,statepack_b(hs_507));
        {50}out(pub, message_a)
    ) | (
        {87}get statestore(=me,=them,statepack_b(hs_509: handshakestate)) in
        {52}in(pub, message_b: bitstring);
        {53}let v_510: bitstring = catch-fail(handshakestateunpack(hs_509)) in
        {54}let v_511: bitstring = catch-fail(deconcat3(message_b)) in
        {55}let v_512: bool = catch-fail(true) in
        {56}let v_513: key = catch-fail(1-proj-3-tuple(v_511)) in
        {57}let v_514: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_510))) in
        {58}let v_515: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_510)) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then symmetricstatepack(1-proj-3-tuple(v_514),2-proj-3-tuple(v_514),hash(3-proj-3-tuple(v_514),v_513)) else fail-any) else fail-any)) in
        {59}let v_516: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_510))) in
        {60}let v_517: bitstring = catch-fail(symmetricstateunpack(v_515)) in
        {61}let v_518: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_517),(if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any))) in
        {62}let v_519: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_517),(if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any))) in
        {63}let v_520: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_517),(if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any))) in
        {64}let v_521: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_517))) then (if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then (v_518,v_519,v_520) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_522: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_510)) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then dhexp(2-proj-2-tuple(v_516),v_513) else fail-any) else fail-any)) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_521)) then cipherstatepack(2-proj-3-tuple(v_521),minnonce) else fail-any),1-proj-3-tuple(v_521),3-proj-3-tuple(v_517)) else fail-any) else fail-any) else fail-any)) in
        {66}let v_523: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_510))) in
        {67}let v_524: bitstring = catch-fail(symmetricstateunpack(v_522)) in
        {68}let v_525: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_524),(if success?(2-proj-7-tuple(v_510)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-2-tuple(v_523))))) then dhexp(2-proj-2-tuple(v_523),v_513) else fail-any) else fail-any))) in
        {69}let v_526: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_524),(if success?(2-proj-7-tuple(v_510)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-2-tuple(v_523))))) then dhexp(2-proj-2-tuple(v_523),v_513) else fail-any) else fail-any))) in
        {70}let v_527: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_524),(if success?(2-proj-7-tuple(v_510)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-2-tuple(v_523))))) then dhexp(2-proj-2-tuple(v_523),v_513) else fail-any) else fail-any))) in
        {71}let v_528: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_510)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-2-tuple(v_523))))) then dhexp(2-proj-2-tuple(v_523),v_513) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_524))) then (if not-caught-fail(v_525) then (if not-caught-fail(v_526) then (if not-caught-fail(v_527) then (v_525,v_526,v_527) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_529: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_510)) then (if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-2-tuple(v_523))))) then dhexp(2-proj-2-tuple(v_523),v_513) else fail-any) else fail-any)) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_528)) then cipherstatepack(2-proj-3-tuple(v_528),minnonce) else fail-any),1-proj-3-tuple(v_528),3-proj-3-tuple(v_524)) else fail-any) else fail-any) else fail-any)) in
        {73}let v_530: bitstring = catch-fail(symmetricstateunpack(v_529)) in
        {74}let v_531: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {75}let v_532: aead = catch-fail(decrypt(1-proj-2-tuple(v_531),2-proj-2-tuple(v_531),3-proj-3-tuple(v_530),3-proj-3-tuple(v_511))) in
        {76}let v_533: bitstring = catch-fail(aeadunpack(v_532)) in
        {77}let v_534: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {78}let v_535: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_531))) && success?(1-proj-3-tuple(v_530))) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-2-tuple(v_534))))) then cipherstatepack(1-proj-2-tuple(v_534),increment_nonce(2-proj-2-tuple(v_531))) else fail-any) else fail-any)) in
        {79}let v_536: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_511)) && (success?(3-proj-3-tuple(v_530)) && success?(1-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_532) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then (if not-caught-fail(v_535) then (v_535,3-proj-3-tuple(v_533),1-proj-3-tuple(v_533)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_537: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) in
        {81}let v_538: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_511)) && success?(symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then symmetricstatepack(1-proj-3-tuple(v_537),2-proj-3-tuple(v_537),hash(3-proj-3-tuple(v_537),3-proj-3-tuple(v_511))) else fail-any) else fail-any)) in
        {82}let v_539: bitstring = catch-fail((if success?(3-proj-3-tuple(v_511)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then (if not-caught-fail(v_538) then (v_538,2-proj-3-tuple(v_536),3-proj-3-tuple(v_536)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_540: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_539),2-proj-7-tuple(v_510),3-proj-7-tuple(v_510),4-proj-7-tuple(v_510),v_513,6-proj-7-tuple(v_510),7-proj-7-tuple(v_510))) in
        {84}let (hs_541: handshakestate,re_542: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-7-tuple(v_510))))) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-3-tuple(v_511))))) then (if not-caught-fail(v_512) then (if not-caught-fail(v_513) then (if not-caught-fail(v_515) then (if not-caught-fail(v_522) then (if not-caught-fail(v_529) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if (v_512 && 3-proj-3-tuple(v_539)) then (if not-caught-fail(v_540) then (v_540,getpublickey(3-proj-7-tuple(v_510)),2-proj-3-tuple(v_539),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {85}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {86}insert statestore(me,them,statepack_c(hs_541))
    ) | (
        {105}get statestore(=me,=them,statepack_c(hs_543: handshakestate)) in
        {88}let v_544: bitstring = catch-fail(handshakestateunpack(hs_543)) in
        {89}let v_545: bitstring = catch-fail((empty,empty,empty)) in
        {90}let v_546: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_544))) in
        {91}let v_547: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_546))) in
        {92}let v_548: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_547),2-proj-2-tuple(v_547),3-proj-3-tuple(v_546),msg_c(me,them))) in
        {93}let v_549: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_546))) in
        {94}let v_550: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_547))) && success?(1-proj-3-tuple(v_546))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then cipherstatepack(1-proj-2-tuple(v_549),increment_nonce(2-proj-2-tuple(v_547))) else fail-any) else fail-any)) in
        {95}let v_551: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_546)) && success?(1-proj-3-tuple(v_546))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then (if not-caught-fail(v_548) then (if not-caught-fail(v_550) then (v_550,v_548) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_552: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_551),2-proj-3-tuple(v_546),3-proj-3-tuple(v_546)))) in
        {97}let v_553: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_551)) && success?(symmetricstatepack(1-proj-2-tuple(v_551),2-proj-3-tuple(v_546),3-proj-3-tuple(v_546)))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then symmetricstatepack(1-proj-3-tuple(v_552),2-proj-3-tuple(v_552),hash(3-proj-3-tuple(v_552),2-proj-2-tuple(v_551))) else fail-any) else fail-any)) in
        {98}let v_554: bitstring = catch-fail((if success?(1-proj-7-tuple(v_544)) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_553) then (v_553,2-proj-2-tuple(v_551)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_555: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_554),2-proj-7-tuple(v_544),3-proj-7-tuple(v_544),4-proj-7-tuple(v_544),5-proj-7-tuple(v_544),6-proj-7-tuple(v_544),7-proj-7-tuple(v_544))) in
        {100}let v_556: bitstring = catch-fail(concat3(1-proj-3-tuple(v_545),2-proj-3-tuple(v_545),2-proj-2-tuple(v_554))) in
        {101}let (hs_557: handshakestate,re_558: key,message_c: bitstring) = (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-7-tuple(v_544))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (v_555,5-proj-7-tuple(v_544),v_556) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {102}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {103}insert statestore(me,them,statepack_d(hs_557));
        {104}out(pub, message_c)
    ) | (
        {133}get statestore(=me,=them,statepack_d(hs_559: handshakestate)) in
        {106}in(pub, message_d: bitstring);
        {107}let v_560: bitstring = catch-fail(handshakestateunpack(hs_559)) in
        {108}let v_561: bitstring = catch-fail(deconcat3(message_d)) in
        {109}let v_562: bool = catch-fail(true) in
        {110}let v_563: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_560))) in
        {111}let v_564: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {112}let v_565: aead = catch-fail(decrypt(1-proj-2-tuple(v_564),2-proj-2-tuple(v_564),3-proj-3-tuple(v_563),3-proj-3-tuple(v_561))) in
        {113}let v_566: bitstring = catch-fail(aeadunpack(v_565)) in
        {114}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {115}let v_568: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_564))) && success?(1-proj-3-tuple(v_563))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then cipherstatepack(1-proj-2-tuple(v_567),increment_nonce(2-proj-2-tuple(v_564))) else fail-any) else fail-any)) in
        {116}let v_569: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_561)) && (success?(3-proj-3-tuple(v_563)) && success?(1-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then (if not-caught-fail(v_565) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if not-caught-fail(v_568) then (v_568,3-proj-3-tuple(v_566),1-proj-3-tuple(v_566)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let v_570: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) in
        {118}let v_571: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_561)) && success?(symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),3-proj-3-tuple(v_561))) else fail-any) else fail-any)) in
        {119}let v_572: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_561)) && success?(1-proj-7-tuple(v_560))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,2-proj-3-tuple(v_569),3-proj-3-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {120}let v_573: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_572),2-proj-7-tuple(v_560),3-proj-7-tuple(v_560),4-proj-7-tuple(v_560),5-proj-7-tuple(v_560),6-proj-7-tuple(v_560),7-proj-7-tuple(v_560))) in
        {121}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_572))) in
        {122}let v_575: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_574),zero)) in
        {123}let v_576: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_574),zero)) in
        {124}let v_577: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_574),zero)) in
        {125}let v_578: bitstring = catch-fail((if success?(2-proj-3-tuple(v_574)) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (v_575,v_576,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_579: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_578)) then cipherstatepack(1-proj-3-tuple(v_578),minnonce) else fail-any)) in
        {127}let v_580: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_578)) then cipherstatepack(2-proj-3-tuple(v_578),minnonce) else fail-any)) in
        {128}let v_581: bitstring = catch-fail((if success?(1-proj-3-tuple(v_572)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (1-proj-3-tuple(v_572),v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {129}let (hs_582: handshakestate,re_583: key,plaintext_d: bitstring,valid_584: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-7-tuple(v_560))))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if not-caught-fail(v_562) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if (v_562 && 3-proj-3-tuple(v_572)) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (v_573,getpublickey(3-proj-7-tuple(v_560)),2-proj-3-tuple(v_572),true,2-proj-3-tuple(v_581),3-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {130}event RecvMsg(me,them,stage_d,plaintext_d,valid_584);
        {131}insert statestore(me,them,statepack_e(hs_582));
        {132}event RecvEnd(valid_584)
    ) | (
        {134}event LeakS(phase0,me);
        {135}out(pub, key_s(me))
    ) | (
        {136}phase 1;
        {137}event LeakS(phase1,me);
        {138}out(pub, key_s(me))
    )
) | (
    {139}let them_585: principal = charlie in
    {140}let me_586: principal = alice in
    {141}let s_587: keypair = keypairpack(empty,empty) in
    {142}out(pub, getpublickey(s_587));
    (
        {143}let e_588: keypair = keypairpack(empty,empty) in
        {144}let rs_589: key = empty in
        {145}let re_590: key = empty in
        {146}let v_591: bitstring = catch-fail(hash(somename,empty)) in
        {147}let v_592: key = catch-fail(v_591) in
        {148}let v_593: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {149}let v_594: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then symmetricstatepack(v_593,v_592,v_591) else fail-any) else fail-any) else fail-any))) in
        {150}let v_595: symmetricstate = catch-fail((if success?((if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (if not-caught-fail(v_593) then symmetricstatepack(v_593,v_592,v_591) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),empty)) else fail-any) else fail-any)) in
        {151}let hs_596: handshakestate = (if not-caught-fail(v_595) then handshakestatepack(v_595,s_587,e_588,rs_589,re_590,empty,true) else fail-any) in
        {152}insert statestore(me_586,them_585,statepack_a(hs_596))
    ) | (
        {187}get statestore(=me_586,=them_585,statepack_a(hs_597: handshakestate)) in
        {153}let v_598: bitstring = catch-fail(handshakestateunpack(hs_597)) in
        {154}let v_599: bitstring = catch-fail((empty,empty,empty)) in
        {155}new key_e_600[me_586,them_585]: key;
        {156}let v_601: key = catch-fail(dhexp(key_e_600,g)) in
        {157}let v_602: keypair = catch-fail((if not-caught-fail(v_601) then keypairpack(v_601,key_e_600) else fail-any)) in
        {158}let v_603: bitstring = catch-fail(getpublickey(v_602)) in
        {159}let v_604: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_598))) in
        {160}let v_605: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_598)) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then symmetricstatepack(1-proj-3-tuple(v_604),2-proj-3-tuple(v_604),hash(3-proj-3-tuple(v_604),v_603)) else fail-any) else fail-any)) in
        {161}let v_606: key = catch-fail(dhexp(key_s(me_586),g)) in
        {162}let v_607: keypair = catch-fail((if not-caught-fail(v_606) then keypairpack(v_606,key_s(me_586)) else fail-any)) in
        {163}let v_608: bitstring = catch-fail(symmetricstateunpack(v_605)) in
        {164}let v_609: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_608))) in
        {165}let v_610: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_609),2-proj-2-tuple(v_609),3-proj-3-tuple(v_608),getpublickey(v_607))) in
        {166}let v_611: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_608))) in
        {167}let v_612: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_609))) && success?(1-proj-3-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then cipherstatepack(1-proj-2-tuple(v_611),increment_nonce(2-proj-2-tuple(v_609))) else fail-any) else fail-any)) in
        {168}let v_613: bitstring = catch-fail((if (success?(getpublickey(v_607)) && (success?(3-proj-3-tuple(v_608)) && success?(1-proj-3-tuple(v_608)))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (v_612,v_610) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {169}let v_614: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_613),2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)))) in
        {170}let v_615: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_613)) && success?(symmetricstatepack(1-proj-2-tuple(v_613),2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then symmetricstatepack(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),hash(3-proj-3-tuple(v_614),2-proj-2-tuple(v_613))) else fail-any) else fail-any)) in
        {171}let v_616: bitstring = catch-fail((if success?(getpublickey(v_607)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if not-caught-fail(v_615) then (v_615,2-proj-2-tuple(v_613)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {172}let v_617: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_616))) in
        {173}let v_618: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {174}let v_619: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_618),2-proj-2-tuple(v_618),3-proj-3-tuple(v_617),msg_a(me_586,them_585))) in
        {175}let v_620: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {176}let v_621: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_618))) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then cipherstatepack(1-proj-2-tuple(v_620),increment_nonce(2-proj-2-tuple(v_618))) else fail-any) else fail-any)) in
        {177}let v_622: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (v_621,v_619) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {178}let v_623: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) in
        {179}let v_624: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_622)) && success?(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {180}let v_625: bitstring = catch-fail((if success?(1-proj-2-tuple(v_616)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_624) then (v_624,2-proj-2-tuple(v_622)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {181}let v_626: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_625),v_607,v_602,4-proj-7-tuple(v_598),5-proj-7-tuple(v_598),6-proj-7-tuple(v_598),7-proj-7-tuple(v_598))) in
        {182}let v_627: bitstring = catch-fail(concat3(v_603,2-proj-2-tuple(v_616),2-proj-2-tuple(v_625))) in
        {183}let (hs_628: handshakestate,re_629: key,message_a_630: bitstring) = (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-7-tuple(v_598))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_605) then (if not-caught-fail(v_607) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_626,5-proj-7-tuple(v_598),v_627) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {184}event SendMsg(me_586,them_585,stage_a,msg_a(me_586,them_585),true);
        {185}insert statestore(me_586,them_585,statepack_b(hs_628));
        {186}out(pub, message_a_630)
    ) | (
        {223}get statestore(=me_586,=them_585,statepack_b(hs_631: handshakestate)) in
        {188}in(pub, message_b_632: bitstring);
        {189}let v_633: bitstring = catch-fail(handshakestateunpack(hs_631)) in
        {190}let v_634: bitstring = catch-fail(deconcat3(message_b_632)) in
        {191}let v_635: bool = catch-fail(true) in
        {192}let v_636: key = catch-fail(1-proj-3-tuple(v_634)) in
        {193}let v_637: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_633))) in
        {194}let v_638: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_633)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-3-tuple(v_637))))) then symmetricstatepack(1-proj-3-tuple(v_637),2-proj-3-tuple(v_637),hash(3-proj-3-tuple(v_637),v_636)) else fail-any) else fail-any)) in
        {195}let v_639: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_633))) in
        {196}let v_640: bitstring = catch-fail(symmetricstateunpack(v_638)) in
        {197}let v_641: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_633)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_636) else fail-any) else fail-any))) in
        {198}let v_642: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_633)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_636) else fail-any) else fail-any))) in
        {199}let v_643: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_640),(if success?(3-proj-7-tuple(v_633)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_636) else fail-any) else fail-any))) in
        {200}let v_644: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_633)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_636) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_640))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (if not-caught-fail(v_643) then (v_641,v_642,v_643) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {201}let v_645: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_633)) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then dhexp(2-proj-2-tuple(v_639),v_636) else fail-any) else fail-any)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_644)) then cipherstatepack(2-proj-3-tuple(v_644),minnonce) else fail-any),1-proj-3-tuple(v_644),3-proj-3-tuple(v_640)) else fail-any) else fail-any) else fail-any)) in
        {202}let v_646: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_633))) in
        {203}let v_647: bitstring = catch-fail(symmetricstateunpack(v_645)) in
        {204}let v_648: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_647),(if success?(2-proj-7-tuple(v_633)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_636) else fail-any) else fail-any))) in
        {205}let v_649: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_647),(if success?(2-proj-7-tuple(v_633)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_636) else fail-any) else fail-any))) in
        {206}let v_650: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_647),(if success?(2-proj-7-tuple(v_633)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_636) else fail-any) else fail-any))) in
        {207}let v_651: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_633)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_636) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_647))) then (if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then (v_648,v_649,v_650) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let v_652: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_633)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then dhexp(2-proj-2-tuple(v_646),v_636) else fail-any) else fail-any)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_651)) then cipherstatepack(2-proj-3-tuple(v_651),minnonce) else fail-any),1-proj-3-tuple(v_651),3-proj-3-tuple(v_647)) else fail-any) else fail-any) else fail-any)) in
        {209}let v_653: bitstring = catch-fail(symmetricstateunpack(v_652)) in
        {210}let v_654: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_653))) in
        {211}let v_655: aead = catch-fail(decrypt(1-proj-2-tuple(v_654),2-proj-2-tuple(v_654),3-proj-3-tuple(v_653),3-proj-3-tuple(v_634))) in
        {212}let v_656: bitstring = catch-fail(aeadunpack(v_655)) in
        {213}let v_657: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_653))) in
        {214}let v_658: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_654))) && success?(1-proj-3-tuple(v_653))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then cipherstatepack(1-proj-2-tuple(v_657),increment_nonce(2-proj-2-tuple(v_654))) else fail-any) else fail-any)) in
        {215}let v_659: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_634)) && (success?(3-proj-3-tuple(v_653)) && success?(1-proj-3-tuple(v_653)))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then (if not-caught-fail(v_655) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if not-caught-fail(v_658) then (v_658,3-proj-3-tuple(v_656),1-proj-3-tuple(v_656)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_660: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_659),2-proj-3-tuple(v_653),3-proj-3-tuple(v_653)))) in
        {217}let v_661: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_634)) && success?(symmetricstatepack(1-proj-3-tuple(v_659),2-proj-3-tuple(v_653),3-proj-3-tuple(v_653)))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then symmetricstatepack(1-proj-3-tuple(v_660),2-proj-3-tuple(v_660),hash(3-proj-3-tuple(v_660),3-proj-3-tuple(v_634))) else fail-any) else fail-any)) in
        {218}let v_662: bitstring = catch-fail((if success?(3-proj-3-tuple(v_634)) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if not-caught-fail(v_661) then (v_661,2-proj-3-tuple(v_659),3-proj-3-tuple(v_659)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {219}let v_663: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_662),2-proj-7-tuple(v_633),3-proj-7-tuple(v_633),4-proj-7-tuple(v_633),v_636,6-proj-7-tuple(v_633),7-proj-7-tuple(v_633))) in
        {220}let (hs_664: handshakestate,re_665: key,plaintext_b_666: bitstring,valid_667: bool) = (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-7-tuple(v_633))))) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (if not-caught-fail(v_638) then (if not-caught-fail(v_645) then (if not-caught-fail(v_652) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (v_635 && 3-proj-3-tuple(v_662)) then (if not-caught-fail(v_663) then (v_663,getpublickey(3-proj-7-tuple(v_633)),2-proj-3-tuple(v_662),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {221}event RecvMsg(me_586,them_585,stage_b,plaintext_b_666,valid_667);
        {222}insert statestore(me_586,them_585,statepack_c(hs_664))
    ) | (
        {241}get statestore(=me_586,=them_585,statepack_c(hs_668: handshakestate)) in
        {224}let v_669: bitstring = catch-fail(handshakestateunpack(hs_668)) in
        {225}let v_670: bitstring = catch-fail((empty,empty,empty)) in
        {226}let v_671: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_669))) in
        {227}let v_672: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_671))) in
        {228}let v_673: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_672),2-proj-2-tuple(v_672),3-proj-3-tuple(v_671),msg_c(me_586,them_585))) in
        {229}let v_674: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_671))) in
        {230}let v_675: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_672))) && success?(1-proj-3-tuple(v_671))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then cipherstatepack(1-proj-2-tuple(v_674),increment_nonce(2-proj-2-tuple(v_672))) else fail-any) else fail-any)) in
        {231}let v_676: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_671)) && success?(1-proj-3-tuple(v_671))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then (if not-caught-fail(v_673) then (if not-caught-fail(v_675) then (v_675,v_673) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_677: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_676),2-proj-3-tuple(v_671),3-proj-3-tuple(v_671)))) in
        {233}let v_678: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_676)) && success?(symmetricstatepack(1-proj-2-tuple(v_676),2-proj-3-tuple(v_671),3-proj-3-tuple(v_671)))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then symmetricstatepack(1-proj-3-tuple(v_677),2-proj-3-tuple(v_677),hash(3-proj-3-tuple(v_677),2-proj-2-tuple(v_676))) else fail-any) else fail-any)) in
        {234}let v_679: bitstring = catch-fail((if success?(1-proj-7-tuple(v_669)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_678) then (v_678,2-proj-2-tuple(v_676)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {235}let v_680: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_679),2-proj-7-tuple(v_669),3-proj-7-tuple(v_669),4-proj-7-tuple(v_669),5-proj-7-tuple(v_669),6-proj-7-tuple(v_669),7-proj-7-tuple(v_669))) in
        {236}let v_681: bitstring = catch-fail(concat3(1-proj-3-tuple(v_670),2-proj-3-tuple(v_670),2-proj-2-tuple(v_679))) in
        {237}let (hs_682: handshakestate,re_683: key,message_c_684: bitstring) = (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-7-tuple(v_669))))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then (v_680,5-proj-7-tuple(v_669),v_681) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {238}event SendMsg(me_586,them_585,stage_c,msg_c(me_586,them_585),true);
        {239}insert statestore(me_586,them_585,statepack_d(hs_682));
        {240}out(pub, message_c_684)
    ) | (
        {269}get statestore(=me_586,=them_585,statepack_d(hs_685: handshakestate)) in
        {242}in(pub, message_d_686: bitstring);
        {243}let v_687: bitstring = catch-fail(handshakestateunpack(hs_685)) in
        {244}let v_688: bitstring = catch-fail(deconcat3(message_d_686)) in
        {245}let v_689: bool = catch-fail(true) in
        {246}let v_690: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_687))) in
        {247}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_690))) in
        {248}let v_692: aead = catch-fail(decrypt(1-proj-2-tuple(v_691),2-proj-2-tuple(v_691),3-proj-3-tuple(v_690),3-proj-3-tuple(v_688))) in
        {249}let v_693: bitstring = catch-fail(aeadunpack(v_692)) in
        {250}let v_694: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_690))) in
        {251}let v_695: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_691))) && success?(1-proj-3-tuple(v_690))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then cipherstatepack(1-proj-2-tuple(v_694),increment_nonce(2-proj-2-tuple(v_691))) else fail-any) else fail-any)) in
        {252}let v_696: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_688)) && (success?(3-proj-3-tuple(v_690)) && success?(1-proj-3-tuple(v_690)))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then (if not-caught-fail(v_692) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,3-proj-3-tuple(v_693),1-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_697: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_690),3-proj-3-tuple(v_690)))) in
        {254}let v_698: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_688)) && success?(symmetricstatepack(1-proj-3-tuple(v_696),2-proj-3-tuple(v_690),3-proj-3-tuple(v_690)))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_697),hash(3-proj-3-tuple(v_697),3-proj-3-tuple(v_688))) else fail-any) else fail-any)) in
        {255}let v_699: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_688)) && success?(1-proj-7-tuple(v_687))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if not-caught-fail(v_698) then (v_698,2-proj-3-tuple(v_696),3-proj-3-tuple(v_696)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_700: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_699),2-proj-7-tuple(v_687),3-proj-7-tuple(v_687),4-proj-7-tuple(v_687),5-proj-7-tuple(v_687),6-proj-7-tuple(v_687),7-proj-7-tuple(v_687))) in
        {257}let v_701: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_699))) in
        {258}let v_702: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_701),zero)) in
        {259}let v_703: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_701),zero)) in
        {260}let v_704: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_701),zero)) in
        {261}let v_705: bitstring = catch-fail((if success?(2-proj-3-tuple(v_701)) then (if not-caught-fail(v_702) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (v_702,v_703,v_704) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let v_706: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_705)) then cipherstatepack(1-proj-3-tuple(v_705),minnonce) else fail-any)) in
        {263}let v_707: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_705)) then cipherstatepack(2-proj-3-tuple(v_705),minnonce) else fail-any)) in
        {264}let v_708: bitstring = catch-fail((if success?(1-proj-3-tuple(v_699)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (1-proj-3-tuple(v_699),v_706,v_707) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {265}let (hs_709: handshakestate,re_710: key,plaintext_d_711: bitstring,valid_712: bool,cs1_713: cipherstate,cs2_714: cipherstate) = (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-7-tuple(v_687))))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if not-caught-fail(v_689) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if (v_689 && 3-proj-3-tuple(v_699)) then (if not-caught-fail(v_700) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (v_700,getpublickey(3-proj-7-tuple(v_687)),2-proj-3-tuple(v_699),true,2-proj-3-tuple(v_708),3-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {266}event RecvMsg(me_586,them_585,stage_d,plaintext_d_711,valid_712);
        {267}insert statestore(me_586,them_585,statepack_e(hs_709));
        {268}event RecvEnd(valid_712)
    ) | (
        {270}event LeakS(phase0,me_586);
        {271}out(pub, key_s(me_586))
    ) | (
        {272}phase 1;
        {273}event LeakS(phase1,me_586);
        {274}out(pub, key_s(me_586))
    )
) | (
    {275}let them_715: principal = alice in
    {276}let me_716: principal = bob in
    {277}let s_717: keypair = keypairpack(empty,empty) in
    (
        {278}let e_718: keypair = keypairpack(empty,empty) in
        {279}let rs_719: key = empty in
        {280}let re_720: key = empty in
        {281}let v_721: bitstring = catch-fail(hash(somename,empty)) in
        {282}let v_722: key = catch-fail(v_721) in
        {283}let v_723: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {284}let v_724: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then symmetricstatepack(v_723,v_722,v_721) else fail-any) else fail-any) else fail-any))) in
        {285}let v_725: symmetricstate = catch-fail((if success?((if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then symmetricstatepack(v_723,v_722,v_721) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack(1-proj-3-tuple(v_724),2-proj-3-tuple(v_724),hash(3-proj-3-tuple(v_724),empty)) else fail-any) else fail-any)) in
        {286}let hs_726: handshakestate = (if not-caught-fail(v_725) then handshakestatepack(v_725,s_717,e_718,rs_719,re_720,empty,false) else fail-any) in
        {287}insert statestore(me_716,them_715,statepack_a(hs_726))
    ) | (
        {321}get statestore(=me_716,=them_715,statepack_a(hs_727: handshakestate)) in
        {288}in(pub, message_a_728: bitstring);
        {289}let v_729: bitstring = catch-fail(handshakestateunpack(hs_727)) in
        {290}let v_730: bitstring = catch-fail(deconcat3(message_a_728)) in
        {291}let v_731: bool = catch-fail(true) in
        {292}let v_732: key = catch-fail(1-proj-3-tuple(v_730)) in
        {293}let v_733: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_729))) in
        {294}let v_734: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_729)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then symmetricstatepack(1-proj-3-tuple(v_733),2-proj-3-tuple(v_733),hash(3-proj-3-tuple(v_733),v_732)) else fail-any) else fail-any)) in
        {295}let v_735: bitstring = catch-fail(symmetricstateunpack(v_734)) in
        {296}let v_736: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_735))) in
        {297}let v_737: aead = catch-fail(decrypt(1-proj-2-tuple(v_736),2-proj-2-tuple(v_736),3-proj-3-tuple(v_735),2-proj-3-tuple(v_730))) in
        {298}let v_738: bitstring = catch-fail(aeadunpack(v_737)) in
        {299}let v_739: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_735))) in
        {300}let v_740: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_736))) && success?(1-proj-3-tuple(v_735))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then cipherstatepack(1-proj-2-tuple(v_739),increment_nonce(2-proj-2-tuple(v_736))) else fail-any) else fail-any)) in
        {301}let v_741: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_730)) && (success?(3-proj-3-tuple(v_735)) && success?(1-proj-3-tuple(v_735)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-2-tuple(v_736))))) then (if not-caught-fail(v_737) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then (if not-caught-fail(v_740) then (v_740,3-proj-3-tuple(v_738),1-proj-3-tuple(v_738)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {302}let v_742: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)))) in
        {303}let v_743: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_730)) && success?(symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_735),3-proj-3-tuple(v_735)))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then symmetricstatepack(1-proj-3-tuple(v_742),2-proj-3-tuple(v_742),hash(3-proj-3-tuple(v_742),2-proj-3-tuple(v_730))) else fail-any) else fail-any)) in
        {304}let v_744: bitstring = catch-fail((if success?(2-proj-3-tuple(v_730)) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_743) then (v_743,2-proj-3-tuple(v_741),3-proj-3-tuple(v_741)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {305}let v_745: key = catch-fail(2-proj-3-tuple(v_744)) in
        {306}let v_746: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_744))) in
        {307}let v_747: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_746))) in
        {308}let v_748: aead = catch-fail(decrypt(1-proj-2-tuple(v_747),2-proj-2-tuple(v_747),3-proj-3-tuple(v_746),3-proj-3-tuple(v_730))) in
        {309}let v_749: bitstring = catch-fail(aeadunpack(v_748)) in
        {310}let v_750: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_746))) in
        {311}let v_751: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_747))) && success?(1-proj-3-tuple(v_746))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then cipherstatepack(1-proj-2-tuple(v_750),increment_nonce(2-proj-2-tuple(v_747))) else fail-any) else fail-any)) in
        {312}let v_752: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_730)) && (success?(3-proj-3-tuple(v_746)) && success?(1-proj-3-tuple(v_746)))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then (if not-caught-fail(v_748) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if not-caught-fail(v_751) then (v_751,3-proj-3-tuple(v_749),1-proj-3-tuple(v_749)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {313}let v_753: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_752),2-proj-3-tuple(v_746),3-proj-3-tuple(v_746)))) in
        {314}let v_754: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_730)) && success?(symmetricstatepack(1-proj-3-tuple(v_752),2-proj-3-tuple(v_746),3-proj-3-tuple(v_746)))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then symmetricstatepack(1-proj-3-tuple(v_753),2-proj-3-tuple(v_753),hash(3-proj-3-tuple(v_753),3-proj-3-tuple(v_730))) else fail-any) else fail-any)) in
        {315}let v_755: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_744))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if not-caught-fail(v_754) then (v_754,2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_756: key = catch-fail(dhexp(key_s(them_715),g)) in
        {317}let v_757: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_755),2-proj-7-tuple(v_729),3-proj-7-tuple(v_729),v_745,v_732,6-proj-7-tuple(v_729),7-proj-7-tuple(v_729))) in
        {318}let (hs_758: handshakestate,re_759: key,plaintext_a: bitstring,valid_760: bool) = (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-7-tuple(v_729))))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if not-caught-fail(v_731) then (if not-caught-fail(v_732) then (if not-caught-fail(v_734) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_745) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if ((3-proj-3-tuple(v_744) && 3-proj-3-tuple(v_755)) && (v_745 = getpublickey((if not-caught-fail(v_756) then keypairpack(v_756,key_s(them_715)) else fail-any)))) then (if not-caught-fail(v_757) then (v_757,getpublickey(3-proj-7-tuple(v_729)),2-proj-3-tuple(v_755),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {319}event RecvMsg(me_716,them_715,stage_a,plaintext_a,valid_760);
        {320}insert statestore(me_716,them_715,statepack_b(hs_758))
    ) | (
        {359}get statestore(=me_716,=them_715,statepack_b(hs_761: handshakestate)) in
        {322}let v_762: bitstring = catch-fail(handshakestateunpack(hs_761)) in
        {323}let v_763: bitstring = catch-fail((empty,empty,empty)) in
        {324}new key_e_764[me_716,them_715]: key;
        {325}let v_765: key = catch-fail(dhexp(key_e_764,g)) in
        {326}let v_766: keypair = catch-fail((if not-caught-fail(v_765) then keypairpack(v_765,key_e_764) else fail-any)) in
        {327}let v_767: bitstring = catch-fail(getpublickey(v_766)) in
        {328}let v_768: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_762))) in
        {329}let v_769: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_762)) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then symmetricstatepack(1-proj-3-tuple(v_768),2-proj-3-tuple(v_768),hash(3-proj-3-tuple(v_768),v_767)) else fail-any) else fail-any)) in
        {330}let v_770: bitstring = catch-fail(keypairunpack(v_766)) in
        {331}let v_771: bitstring = catch-fail(symmetricstateunpack(v_769)) in
        {332}let v_772: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_762)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_762)) else fail-any) else fail-any))) in
        {333}let v_773: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_762)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_762)) else fail-any) else fail-any))) in
        {334}let v_774: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_771),(if success?(5-proj-7-tuple(v_762)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_762)) else fail-any) else fail-any))) in
        {335}let v_775: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_762)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_762)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_771))) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (v_772,v_773,v_774) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let v_776: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_762)) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then dhexp(2-proj-2-tuple(v_770),5-proj-7-tuple(v_762)) else fail-any) else fail-any)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_775)) then cipherstatepack(2-proj-3-tuple(v_775),minnonce) else fail-any),1-proj-3-tuple(v_775),3-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any)) in
        {337}let v_777: bitstring = catch-fail(keypairunpack(v_766)) in
        {338}let v_778: bitstring = catch-fail(symmetricstateunpack(v_776)) in
        {339}let v_779: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_778),(if success?(4-proj-7-tuple(v_762)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),4-proj-7-tuple(v_762)) else fail-any) else fail-any))) in
        {340}let v_780: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_778),(if success?(4-proj-7-tuple(v_762)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),4-proj-7-tuple(v_762)) else fail-any) else fail-any))) in
        {341}let v_781: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_778),(if success?(4-proj-7-tuple(v_762)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),4-proj-7-tuple(v_762)) else fail-any) else fail-any))) in
        {342}let v_782: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_762)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),4-proj-7-tuple(v_762)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_778))) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (v_779,v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {343}let v_783: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_762)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),4-proj-7-tuple(v_762)) else fail-any) else fail-any)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_782)) then cipherstatepack(2-proj-3-tuple(v_782),minnonce) else fail-any),1-proj-3-tuple(v_782),3-proj-3-tuple(v_778)) else fail-any) else fail-any) else fail-any)) in
        {344}let v_784: bitstring = catch-fail(symmetricstateunpack(v_783)) in
        {345}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {346}let v_786: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_785),2-proj-2-tuple(v_785),3-proj-3-tuple(v_784),msg_b(me_716,them_715))) in
        {347}let v_787: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {348}let v_788: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_785))) && success?(1-proj-3-tuple(v_784))) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-2-tuple(v_787))))) then cipherstatepack(1-proj-2-tuple(v_787),increment_nonce(2-proj-2-tuple(v_785))) else fail-any) else fail-any)) in
        {349}let v_789: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_784)) && success?(1-proj-3-tuple(v_784))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then (if not-caught-fail(v_786) then (if not-caught-fail(v_788) then (v_788,v_786) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {350}let v_790: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_789),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) in
        {351}let v_791: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_789)) && success?(symmetricstatepack(1-proj-2-tuple(v_789),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_790),hash(3-proj-3-tuple(v_790),2-proj-2-tuple(v_789))) else fail-any) else fail-any)) in
        {352}let v_792: bitstring = catch-fail((if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then (if not-caught-fail(v_791) then (v_791,2-proj-2-tuple(v_789)) else fail-any) else fail-any) else fail-any)) in
        {353}let v_793: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_792),2-proj-7-tuple(v_762),v_766,4-proj-7-tuple(v_762),5-proj-7-tuple(v_762),6-proj-7-tuple(v_762),7-proj-7-tuple(v_762))) in
        {354}let v_794: bitstring = catch-fail(concat3(v_767,2-proj-3-tuple(v_763),2-proj-2-tuple(v_792))) in
        {355}let (hs_795: handshakestate,re_796: key,message_b_797: bitstring) = (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-7-tuple(v_762))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (if not-caught-fail(v_769) then (if not-caught-fail(v_776) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-2-tuple(v_792))))) then (if not-caught-fail(v_793) then (if not-caught-fail(v_794) then (v_793,5-proj-7-tuple(v_762),v_794) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {356}event SendMsg(me_716,them_715,stage_b,msg_b(me_716,them_715),true);
        {357}insert statestore(me_716,them_715,statepack_c(hs_795));
        {358}out(pub, message_b_797)
    ) | (
        {378}get statestore(=me_716,=them_715,statepack_c(hs_798: handshakestate)) in
        {360}in(pub, message_c_799: bitstring);
        {361}let v_800: bitstring = catch-fail(handshakestateunpack(hs_798)) in
        {362}let v_801: bitstring = catch-fail(deconcat3(message_c_799)) in
        {363}let v_802: bool = catch-fail(true) in
        {364}let v_803: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_800))) in
        {365}let v_804: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_803))) in
        {366}let v_805: aead = catch-fail(decrypt(1-proj-2-tuple(v_804),2-proj-2-tuple(v_804),3-proj-3-tuple(v_803),3-proj-3-tuple(v_801))) in
        {367}let v_806: bitstring = catch-fail(aeadunpack(v_805)) in
        {368}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_803))) in
        {369}let v_808: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_804))) && success?(1-proj-3-tuple(v_803))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then cipherstatepack(1-proj-2-tuple(v_807),increment_nonce(2-proj-2-tuple(v_804))) else fail-any) else fail-any)) in
        {370}let v_809: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_801)) && (success?(3-proj-3-tuple(v_803)) && success?(1-proj-3-tuple(v_803)))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then (if not-caught-fail(v_805) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then (if not-caught-fail(v_808) then (v_808,3-proj-3-tuple(v_806),1-proj-3-tuple(v_806)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {371}let v_810: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)))) in
        {372}let v_811: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_801)) && success?(symmetricstatepack(1-proj-3-tuple(v_809),2-proj-3-tuple(v_803),3-proj-3-tuple(v_803)))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),3-proj-3-tuple(v_801))) else fail-any) else fail-any)) in
        {373}let v_812: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_801)) && success?(1-proj-7-tuple(v_800))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-3-tuple(v_809))))) then (if not-caught-fail(v_811) then (v_811,2-proj-3-tuple(v_809),3-proj-3-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_813: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_812),2-proj-7-tuple(v_800),3-proj-7-tuple(v_800),4-proj-7-tuple(v_800),5-proj-7-tuple(v_800),6-proj-7-tuple(v_800),7-proj-7-tuple(v_800))) in
        {375}let (hs_814: handshakestate,re_815: key,plaintext_c: bitstring,valid_816: bool) = (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-7-tuple(v_800))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if not-caught-fail(v_802) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (v_802 && 3-proj-3-tuple(v_812)) then (if not-caught-fail(v_813) then (v_813,getpublickey(3-proj-7-tuple(v_800)),2-proj-3-tuple(v_812),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {376}event RecvMsg(me_716,them_715,stage_c,plaintext_c,valid_816);
        {377}insert statestore(me_716,them_715,statepack_d(hs_814))
    ) | (
        {404}get statestore(=me_716,=them_715,statepack_d(hs_817: handshakestate)) in
        {379}let v_818: bitstring = catch-fail(handshakestateunpack(hs_817)) in
        {380}let v_819: bitstring = catch-fail((empty,empty,empty)) in
        {381}let v_820: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_818))) in
        {382}let v_821: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {383}let v_822: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_821),2-proj-2-tuple(v_821),3-proj-3-tuple(v_820),msg_d(me_716,them_715))) in
        {384}let v_823: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_820))) in
        {385}let v_824: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_821))) && success?(1-proj-3-tuple(v_820))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-2-tuple(v_823))))) then cipherstatepack(1-proj-2-tuple(v_823),increment_nonce(2-proj-2-tuple(v_821))) else fail-any) else fail-any)) in
        {386}let v_825: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_820)) && success?(1-proj-3-tuple(v_820))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_822) then (if not-caught-fail(v_824) then (v_824,v_822) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_826: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_825),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) in
        {388}let v_827: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_825)) && success?(symmetricstatepack(1-proj-2-tuple(v_825),2-proj-3-tuple(v_820),3-proj-3-tuple(v_820)))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then symmetricstatepack(1-proj-3-tuple(v_826),2-proj-3-tuple(v_826),hash(3-proj-3-tuple(v_826),2-proj-2-tuple(v_825))) else fail-any) else fail-any)) in
        {389}let v_828: bitstring = catch-fail((if success?(1-proj-7-tuple(v_818)) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-2-tuple(v_825))))) then (if not-caught-fail(v_827) then (v_827,2-proj-2-tuple(v_825)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let v_829: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_828),2-proj-7-tuple(v_818),3-proj-7-tuple(v_818),4-proj-7-tuple(v_818),5-proj-7-tuple(v_818),6-proj-7-tuple(v_818),7-proj-7-tuple(v_818))) in
        {391}let v_830: bitstring = catch-fail(concat3(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),2-proj-2-tuple(v_828))) in
        {392}let v_831: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_828))) in
        {393}let v_832: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_831),zero)) in
        {394}let v_833: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_831),zero)) in
        {395}let v_834: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_831),zero)) in
        {396}let v_835: bitstring = catch-fail((if success?(2-proj-3-tuple(v_831)) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (v_832,v_833,v_834) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {397}let v_836: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_835)) then cipherstatepack(1-proj-3-tuple(v_835),minnonce) else fail-any)) in
        {398}let v_837: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_835)) then cipherstatepack(2-proj-3-tuple(v_835),minnonce) else fail-any)) in
        {399}let v_838: bitstring = catch-fail((if success?(1-proj-2-tuple(v_828)) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_836) then (if not-caught-fail(v_837) then (1-proj-2-tuple(v_828),v_836,v_837) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let (hs_839: handshakestate,re_840: key,message_d_841: bitstring,cs1_842: cipherstate,cs2_843: cipherstate) = (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-7-tuple(v_818))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-2-tuple(v_828))))) then (if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (v_829,5-proj-7-tuple(v_818),v_830,2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {401}event SendMsg(me_716,them_715,stage_d,msg_d(me_716,them_715),true);
        {402}insert statestore(me_716,them_715,statepack_e(hs_839));
        {403}out(pub, message_d_841)
    ) | (
        {405}event LeakS(phase0,me_716);
        {406}out(pub, key_s(me_716))
    ) | (
        {407}phase 1;
        {408}event LeakS(phase1,me_716);
        {409}out(pub, key_s(me_716))
    )
) | (
    {410}let them_844: principal = charlie in
    {411}let me_845: principal = bob in
    {412}let s_846: keypair = keypairpack(empty,empty) in
    (
        {413}let e_847: keypair = keypairpack(empty,empty) in
        {414}let rs_848: key = empty in
        {415}let re_849: key = empty in
        {416}let v_850: bitstring = catch-fail(hash(somename,empty)) in
        {417}let v_851: key = catch-fail(v_850) in
        {418}let v_852: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {419}let v_853: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then symmetricstatepack(v_852,v_851,v_850) else fail-any) else fail-any) else fail-any))) in
        {420}let v_854: symmetricstate = catch-fail((if success?((if not-caught-fail(v_850) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then symmetricstatepack(v_852,v_851,v_850) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_853),hash(3-proj-3-tuple(v_853),empty)) else fail-any) else fail-any)) in
        {421}let hs_855: handshakestate = (if not-caught-fail(v_854) then handshakestatepack(v_854,s_846,e_847,rs_848,re_849,empty,false) else fail-any) in
        {422}insert statestore(me_845,them_844,statepack_a(hs_855))
    ) | (
        {456}get statestore(=me_845,=them_844,statepack_a(hs_856: handshakestate)) in
        {423}in(pub, message_a_857: bitstring);
        {424}let v_858: bitstring = catch-fail(handshakestateunpack(hs_856)) in
        {425}let v_859: bitstring = catch-fail(deconcat3(message_a_857)) in
        {426}let v_860: bool = catch-fail(true) in
        {427}let v_861: key = catch-fail(1-proj-3-tuple(v_859)) in
        {428}let v_862: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_858))) in
        {429}let v_863: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_858)) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_862),hash(3-proj-3-tuple(v_862),v_861)) else fail-any) else fail-any)) in
        {430}let v_864: bitstring = catch-fail(symmetricstateunpack(v_863)) in
        {431}let v_865: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {432}let v_866: aead = catch-fail(decrypt(1-proj-2-tuple(v_865),2-proj-2-tuple(v_865),3-proj-3-tuple(v_864),2-proj-3-tuple(v_859))) in
        {433}let v_867: bitstring = catch-fail(aeadunpack(v_866)) in
        {434}let v_868: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_864))) in
        {435}let v_869: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_865))) && success?(1-proj-3-tuple(v_864))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-2-tuple(v_868))))) then cipherstatepack(1-proj-2-tuple(v_868),increment_nonce(2-proj-2-tuple(v_865))) else fail-any) else fail-any)) in
        {436}let v_870: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_859)) && (success?(3-proj-3-tuple(v_864)) && success?(1-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_866) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if not-caught-fail(v_869) then (v_869,3-proj-3-tuple(v_867),1-proj-3-tuple(v_867)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_871: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) in
        {438}let v_872: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_859)) && success?(symmetricstatepack(1-proj-3-tuple(v_870),2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)))) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then symmetricstatepack(1-proj-3-tuple(v_871),2-proj-3-tuple(v_871),hash(3-proj-3-tuple(v_871),2-proj-3-tuple(v_859))) else fail-any) else fail-any)) in
        {439}let v_873: bitstring = catch-fail((if success?(2-proj-3-tuple(v_859)) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-3-tuple(v_870))))) then (if not-caught-fail(v_872) then (v_872,2-proj-3-tuple(v_870),3-proj-3-tuple(v_870)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {440}let v_874: key = catch-fail(2-proj-3-tuple(v_873)) in
        {441}let v_875: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_873))) in
        {442}let v_876: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_875))) in
        {443}let v_877: aead = catch-fail(decrypt(1-proj-2-tuple(v_876),2-proj-2-tuple(v_876),3-proj-3-tuple(v_875),3-proj-3-tuple(v_859))) in
        {444}let v_878: bitstring = catch-fail(aeadunpack(v_877)) in
        {445}let v_879: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_875))) in
        {446}let v_880: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_876))) && success?(1-proj-3-tuple(v_875))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-2-tuple(v_879))))) then cipherstatepack(1-proj-2-tuple(v_879),increment_nonce(2-proj-2-tuple(v_876))) else fail-any) else fail-any)) in
        {447}let v_881: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_859)) && (success?(3-proj-3-tuple(v_875)) && success?(1-proj-3-tuple(v_875)))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then (if not-caught-fail(v_877) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then (if not-caught-fail(v_880) then (v_880,3-proj-3-tuple(v_878),1-proj-3-tuple(v_878)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {448}let v_882: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_875),3-proj-3-tuple(v_875)))) in
        {449}let v_883: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_859)) && success?(symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_875),3-proj-3-tuple(v_875)))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_882),hash(3-proj-3-tuple(v_882),3-proj-3-tuple(v_859))) else fail-any) else fail-any)) in
        {450}let v_884: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_859)) && success?(1-proj-3-tuple(v_873))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if not-caught-fail(v_883) then (v_883,2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {451}let v_885: key = catch-fail(dhexp(key_s(them_844),g)) in
        {452}let v_886: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_884),2-proj-7-tuple(v_858),3-proj-7-tuple(v_858),v_874,v_861,6-proj-7-tuple(v_858),7-proj-7-tuple(v_858))) in
        {453}let (hs_887: handshakestate,re_888: key,plaintext_a_889: bitstring,valid_890: bool) = (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-7-tuple(v_858))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (if not-caught-fail(v_863) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if not-caught-fail(v_874) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then (if ((3-proj-3-tuple(v_873) && 3-proj-3-tuple(v_884)) && (v_874 = getpublickey((if not-caught-fail(v_885) then keypairpack(v_885,key_s(them_844)) else fail-any)))) then (if not-caught-fail(v_886) then (v_886,getpublickey(3-proj-7-tuple(v_858)),2-proj-3-tuple(v_884),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {454}event RecvMsg(me_845,them_844,stage_a,plaintext_a_889,valid_890);
        {455}insert statestore(me_845,them_844,statepack_b(hs_887))
    ) | (
        {494}get statestore(=me_845,=them_844,statepack_b(hs_891: handshakestate)) in
        {457}let v_892: bitstring = catch-fail(handshakestateunpack(hs_891)) in
        {458}let v_893: bitstring = catch-fail((empty,empty,empty)) in
        {459}new key_e_894[me_845,them_844]: key;
        {460}let v_895: key = catch-fail(dhexp(key_e_894,g)) in
        {461}let v_896: keypair = catch-fail((if not-caught-fail(v_895) then keypairpack(v_895,key_e_894) else fail-any)) in
        {462}let v_897: bitstring = catch-fail(getpublickey(v_896)) in
        {463}let v_898: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_892))) in
        {464}let v_899: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_892)) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_898),hash(3-proj-3-tuple(v_898),v_897)) else fail-any) else fail-any)) in
        {465}let v_900: bitstring = catch-fail(keypairunpack(v_896)) in
        {466}let v_901: bitstring = catch-fail(symmetricstateunpack(v_899)) in
        {467}let v_902: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_901),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then dhexp(2-proj-2-tuple(v_900),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {468}let v_903: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_901),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then dhexp(2-proj-2-tuple(v_900),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {469}let v_904: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_901),(if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then dhexp(2-proj-2-tuple(v_900),5-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {470}let v_905: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then dhexp(2-proj-2-tuple(v_900),5-proj-7-tuple(v_892)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_901))) then (if not-caught-fail(v_902) then (if not-caught-fail(v_903) then (if not-caught-fail(v_904) then (v_902,v_903,v_904) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_906: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_892)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then dhexp(2-proj-2-tuple(v_900),5-proj-7-tuple(v_892)) else fail-any) else fail-any)) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_905)) then cipherstatepack(2-proj-3-tuple(v_905),minnonce) else fail-any),1-proj-3-tuple(v_905),3-proj-3-tuple(v_901)) else fail-any) else fail-any) else fail-any)) in
        {472}let v_907: bitstring = catch-fail(keypairunpack(v_896)) in
        {473}let v_908: bitstring = catch-fail(symmetricstateunpack(v_906)) in
        {474}let v_909: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_908),(if success?(4-proj-7-tuple(v_892)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),4-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {475}let v_910: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_908),(if success?(4-proj-7-tuple(v_892)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),4-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {476}let v_911: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_908),(if success?(4-proj-7-tuple(v_892)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),4-proj-7-tuple(v_892)) else fail-any) else fail-any))) in
        {477}let v_912: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_892)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),4-proj-7-tuple(v_892)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_908))) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (if not-caught-fail(v_911) then (v_909,v_910,v_911) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {478}let v_913: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_892)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-2-tuple(v_907))))) then dhexp(2-proj-2-tuple(v_907),4-proj-7-tuple(v_892)) else fail-any) else fail-any)) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_912)) then cipherstatepack(2-proj-3-tuple(v_912),minnonce) else fail-any),1-proj-3-tuple(v_912),3-proj-3-tuple(v_908)) else fail-any) else fail-any) else fail-any)) in
        {479}let v_914: bitstring = catch-fail(symmetricstateunpack(v_913)) in
        {480}let v_915: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_914))) in
        {481}let v_916: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_915),2-proj-2-tuple(v_915),3-proj-3-tuple(v_914),msg_b(me_845,them_844))) in
        {482}let v_917: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_914))) in
        {483}let v_918: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_915))) && success?(1-proj-3-tuple(v_914))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-2-tuple(v_917))))) then cipherstatepack(1-proj-2-tuple(v_917),increment_nonce(2-proj-2-tuple(v_915))) else fail-any) else fail-any)) in
        {484}let v_919: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_914)) && success?(1-proj-3-tuple(v_914))) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-2-tuple(v_915))))) then (if not-caught-fail(v_916) then (if not-caught-fail(v_918) then (v_918,v_916) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_920: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_919),2-proj-3-tuple(v_914),3-proj-3-tuple(v_914)))) in
        {486}let v_921: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_919)) && success?(symmetricstatepack(1-proj-2-tuple(v_919),2-proj-3-tuple(v_914),3-proj-3-tuple(v_914)))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then symmetricstatepack(1-proj-3-tuple(v_920),2-proj-3-tuple(v_920),hash(3-proj-3-tuple(v_920),2-proj-2-tuple(v_919))) else fail-any) else fail-any)) in
        {487}let v_922: bitstring = catch-fail((if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-2-tuple(v_919))))) then (if not-caught-fail(v_921) then (v_921,2-proj-2-tuple(v_919)) else fail-any) else fail-any) else fail-any)) in
        {488}let v_923: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_922),2-proj-7-tuple(v_892),v_896,4-proj-7-tuple(v_892),5-proj-7-tuple(v_892),6-proj-7-tuple(v_892),7-proj-7-tuple(v_892))) in
        {489}let v_924: bitstring = catch-fail(concat3(v_897,2-proj-3-tuple(v_893),2-proj-2-tuple(v_922))) in
        {490}let (hs_925: handshakestate,re_926: key,message_b_927: bitstring) = (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-7-tuple(v_892))))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if not-caught-fail(v_896) then (if not-caught-fail(v_897) then (if not-caught-fail(v_899) then (if not-caught-fail(v_906) then (if not-caught-fail(v_913) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (v_923,5-proj-7-tuple(v_892),v_924) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {491}event SendMsg(me_845,them_844,stage_b,msg_b(me_845,them_844),true);
        {492}insert statestore(me_845,them_844,statepack_c(hs_925));
        {493}out(pub, message_b_927)
    ) | (
        {513}get statestore(=me_845,=them_844,statepack_c(hs_928: handshakestate)) in
        {495}in(pub, message_c_929: bitstring);
        {496}let v_930: bitstring = catch-fail(handshakestateunpack(hs_928)) in
        {497}let v_931: bitstring = catch-fail(deconcat3(message_c_929)) in
        {498}let v_932: bool = catch-fail(true) in
        {499}let v_933: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_930))) in
        {500}let v_934: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_933))) in
        {501}let v_935: aead = catch-fail(decrypt(1-proj-2-tuple(v_934),2-proj-2-tuple(v_934),3-proj-3-tuple(v_933),3-proj-3-tuple(v_931))) in
        {502}let v_936: bitstring = catch-fail(aeadunpack(v_935)) in
        {503}let v_937: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_933))) in
        {504}let v_938: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_934))) && success?(1-proj-3-tuple(v_933))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then cipherstatepack(1-proj-2-tuple(v_937),increment_nonce(2-proj-2-tuple(v_934))) else fail-any) else fail-any)) in
        {505}let v_939: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_931)) && (success?(3-proj-3-tuple(v_933)) && success?(1-proj-3-tuple(v_933)))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-2-tuple(v_934))))) then (if not-caught-fail(v_935) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if not-caught-fail(v_938) then (v_938,3-proj-3-tuple(v_936),1-proj-3-tuple(v_936)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {506}let v_940: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_939),2-proj-3-tuple(v_933),3-proj-3-tuple(v_933)))) in
        {507}let v_941: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_931)) && success?(symmetricstatepack(1-proj-3-tuple(v_939),2-proj-3-tuple(v_933),3-proj-3-tuple(v_933)))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then symmetricstatepack(1-proj-3-tuple(v_940),2-proj-3-tuple(v_940),hash(3-proj-3-tuple(v_940),3-proj-3-tuple(v_931))) else fail-any) else fail-any)) in
        {508}let v_942: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_931)) && success?(1-proj-7-tuple(v_930))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-3-tuple(v_933))))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if not-caught-fail(v_941) then (v_941,2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_943: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_942),2-proj-7-tuple(v_930),3-proj-7-tuple(v_930),4-proj-7-tuple(v_930),5-proj-7-tuple(v_930),6-proj-7-tuple(v_930),7-proj-7-tuple(v_930))) in
        {510}let (hs_944: handshakestate,re_945: key,plaintext_c_946: bitstring,valid_947: bool) = (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-7-tuple(v_930))))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if not-caught-fail(v_932) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if (v_932 && 3-proj-3-tuple(v_942)) then (if not-caught-fail(v_943) then (v_943,getpublickey(3-proj-7-tuple(v_930)),2-proj-3-tuple(v_942),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {511}event RecvMsg(me_845,them_844,stage_c,plaintext_c_946,valid_947);
        {512}insert statestore(me_845,them_844,statepack_d(hs_944))
    ) | (
        {539}get statestore(=me_845,=them_844,statepack_d(hs_948: handshakestate)) in
        {514}let v_949: bitstring = catch-fail(handshakestateunpack(hs_948)) in
        {515}let v_950: bitstring = catch-fail((empty,empty,empty)) in
        {516}let v_951: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_949))) in
        {517}let v_952: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_951))) in
        {518}let v_953: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_952),2-proj-2-tuple(v_952),3-proj-3-tuple(v_951),msg_d(me_845,them_844))) in
        {519}let v_954: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_951))) in
        {520}let v_955: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_952))) && success?(1-proj-3-tuple(v_951))) then (if (not-caught-fail(v_954) && success?(is-true(success?(1-proj-2-tuple(v_954))))) then cipherstatepack(1-proj-2-tuple(v_954),increment_nonce(2-proj-2-tuple(v_952))) else fail-any) else fail-any)) in
        {521}let v_956: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_951)) && success?(1-proj-3-tuple(v_951))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-2-tuple(v_952))))) then (if not-caught-fail(v_953) then (if not-caught-fail(v_955) then (v_955,v_953) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {522}let v_957: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_956),2-proj-3-tuple(v_951),3-proj-3-tuple(v_951)))) in
        {523}let v_958: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_956)) && success?(symmetricstatepack(1-proj-2-tuple(v_956),2-proj-3-tuple(v_951),3-proj-3-tuple(v_951)))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then symmetricstatepack(1-proj-3-tuple(v_957),2-proj-3-tuple(v_957),hash(3-proj-3-tuple(v_957),2-proj-2-tuple(v_956))) else fail-any) else fail-any)) in
        {524}let v_959: bitstring = catch-fail((if success?(1-proj-7-tuple(v_949)) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then (if not-caught-fail(v_958) then (v_958,2-proj-2-tuple(v_956)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {525}let v_960: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_959),2-proj-7-tuple(v_949),3-proj-7-tuple(v_949),4-proj-7-tuple(v_949),5-proj-7-tuple(v_949),6-proj-7-tuple(v_949),7-proj-7-tuple(v_949))) in
        {526}let v_961: bitstring = catch-fail(concat3(1-proj-3-tuple(v_950),2-proj-3-tuple(v_950),2-proj-2-tuple(v_959))) in
        {527}let v_962: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_959))) in
        {528}let v_963: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_962),zero)) in
        {529}let v_964: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_962),zero)) in
        {530}let v_965: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_962),zero)) in
        {531}let v_966: bitstring = catch-fail((if success?(2-proj-3-tuple(v_962)) then (if not-caught-fail(v_963) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (v_963,v_964,v_965) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_967: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_966)) then cipherstatepack(1-proj-3-tuple(v_966),minnonce) else fail-any)) in
        {533}let v_968: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_966)) then cipherstatepack(2-proj-3-tuple(v_966),minnonce) else fail-any)) in
        {534}let v_969: bitstring = catch-fail((if success?(1-proj-2-tuple(v_959)) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (1-proj-2-tuple(v_959),v_967,v_968) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let (hs_970: handshakestate,re_971: key,message_d_972: bitstring,cs1_973: cipherstate,cs2_974: cipherstate) = (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-7-tuple(v_949))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (v_960,5-proj-7-tuple(v_949),v_961,2-proj-3-tuple(v_969),3-proj-3-tuple(v_969)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {536}event SendMsg(me_845,them_844,stage_d,msg_d(me_845,them_844),true);
        {537}insert statestore(me_845,them_844,statepack_e(hs_970));
        {538}out(pub, message_d_972)
    ) | (
        {540}event LeakS(phase0,me_845);
        {541}out(pub, key_s(me_845))
    ) | (
        {542}phase 1;
        {543}event LeakS(phase1,me_845);
        {544}out(pub, key_s(me_845))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 146 rules in the queue.
400 rules inserted. The rule base contains 387 rules. 64 rules in the queue.
600 rules inserted. The rule base contains 562 rules. 89 rules in the queue.
800 rules inserted. The rule base contains 721 rules. 104 rules in the queue.
1000 rules inserted. The rule base contains 845 rules. 83 rules in the queue.
1200 rules inserted. The rule base contains 981 rules. 122 rules in the queue.
1400 rules inserted. The rule base contains 1097 rules. 145 rules in the queue.
1600 rules inserted. The rule base contains 1245 rules. 165 rules in the queue.
1800 rules inserted. The rule base contains 1406 rules. 171 rules in the queue.
2000 rules inserted. The rule base contains 1529 rules. 174 rules in the queue.
2200 rules inserted. The rule base contains 1632 rules. 153 rules in the queue.
2400 rules inserted. The rule base contains 1752 rules. 153 rules in the queue.
2600 rules inserted. The rule base contains 1892 rules. 170 rules in the queue.
2800 rules inserted. The rule base contains 2021 rules. 154 rules in the queue.
3000 rules inserted. The rule base contains 2132 rules. 109 rules in the queue.
3200 rules inserted. The rule base contains 2257 rules. 95 rules in the queue.
3400 rules inserted. The rule base contains 2315 rules. 18 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_375620122 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_375620106]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620122,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620122,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {321}.
The message concat3(dhexp(key_e_375620122,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620122,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_375620122,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {319}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1055,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_375620159 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_375620143]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620159,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620159,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {321}.
The message concat3(dhexp(key_e_375620159,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620159,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_375620159,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {319}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_375620190 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_375620174]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620190,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620190,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {321}.
The message concat3(dhexp(key_e_375620190,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620190,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_375620190,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {319}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_375620260 = key_e[me = alice,them = bob,!1 = @sid_375620246]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_375620260,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_375620260,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_375620260,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_375620260,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_375620260,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_375620260,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_375620260,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_375620260,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_375620260,g).
attacker(dhexp(key_375620260,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_375620260,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620260,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_375620330 = key_e[me = alice,them = bob,!1 = @sid_375620316]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_375620330,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_375620330,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_375620330,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_375620330,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_375620330,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_375620330,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_375620330,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_375620330,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_375620330,g).
attacker(dhexp(key_375620330,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_375620330,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620330,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_375620401 = key_e[me = alice,them = bob,!1 = @sid_375620387]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_375620401,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_375620401,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_375620401,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_375620401,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_375620401,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_375620401,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_375620401,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_375620401,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_375620401,g).
attacker(dhexp(key_375620401,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_375620401,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620401,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_375620471 = key_e[me = alice,them = bob,!1 = @sid_375620457]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_375620471,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_375620471,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_375620471,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_375620471,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_375620471,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_375620471,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_375620471,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_375620471,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_375620471,g).
attacker(dhexp(key_375620471,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_375620471,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_375620471,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1055,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_375620615 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_375620574]
key_e_375620616 = key_e_764[me_716 = bob,them_715 = alice,!1 = @sid_375620598]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620615,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620615,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {321}.
The message concat3(dhexp(key_e_375620615,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_375620615,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false))) may be inserted in a table at insert {320}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false))) that may be in a table by 4 may be read at get {359}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {356}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620616,g),key_e_375620616),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false))) may be inserted in a table at insert {357}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620616,g),key_e_375620616),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620615,g),key_e_375620615),empty,empty,empty,true))) may be inserted in a table at insert {185}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620615,g),key_e_375620615),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620615,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620615,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {321}.
The message concat3(dhexp(key_e_375620615,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {288}.
We have dhexp(key_e_375620615,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false))) may be inserted in a table at insert {320}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false))) that may be in a table by 11 may be read at get {359}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {356}.
So the message concat3(dhexp(key_e_375620616,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice))) may be sent on channel pub at output {358}.
mess(pub,concat3(dhexp(key_e_375620616,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620615,g),key_e_375620615),empty,empty,empty,true))) that may be in a table by 7 may be read at get {223}.
The message concat3(dhexp(key_e_375620616,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {188}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_e_375620616,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620615,g),key_e_375620615),empty,dhexp(key_e_375620616,g),empty,true))) may be inserted in a table at insert {222}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_e_375620616,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620615,g),key_e_375620615),empty,dhexp(key_e_375620616,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_e_375620616,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620615,g),key_e_375620615),empty,dhexp(key_e_375620616,g),empty,true))) that may be in a table by 13 may be read at get {241}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {238}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {240}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620616,g),key_e_375620616),dhexp(key_s(alice),g),dhexp(key_e_375620615,g),empty,false))) that may be in a table by 5 may be read at get {378}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620615,dhexp(key_e_375620616,g))),dhexp(key_s(alice),dhexp(key_e_375620616,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620615,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620616,g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {360}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {376}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1055,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_375620753 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_375620712]
key_e_375620754 = key_e_764[me_716 = bob,them_715 = alice,!1 = @sid_375620736]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620753,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620753,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {321}.
The message concat3(dhexp(key_e_375620753,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_375620753,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false))) may be inserted in a table at insert {320}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false))) that may be in a table by 4 may be read at get {359}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {356}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620754,g),key_e_375620754),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false))) may be inserted in a table at insert {357}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620754,g),key_e_375620754),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620753,g),key_e_375620753),empty,empty,empty,true))) may be inserted in a table at insert {185}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620753,g),key_e_375620753),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620753,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620753,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {321}.
The message concat3(dhexp(key_e_375620753,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {288}.
We have dhexp(key_e_375620753,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false))) may be inserted in a table at insert {320}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false))) that may be in a table by 11 may be read at get {359}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {356}.
So the message concat3(dhexp(key_e_375620754,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice))) may be sent on channel pub at output {358}.
mess(pub,concat3(dhexp(key_e_375620754,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620753,g),key_e_375620753),empty,empty,empty,true))) that may be in a table by 7 may be read at get {223}.
The message concat3(dhexp(key_e_375620754,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {188}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_e_375620754,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620753,g),key_e_375620753),empty,dhexp(key_e_375620754,g),empty,true))) may be inserted in a table at insert {222}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_e_375620754,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620753,g),key_e_375620753),empty,dhexp(key_e_375620754,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_e_375620754,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620753,g),key_e_375620753),empty,dhexp(key_e_375620754,g),empty,true))) that may be in a table by 13 may be read at get {241}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {238}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {240}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620754,g),key_e_375620754),dhexp(key_s(alice),g),dhexp(key_e_375620753,g),empty,false))) that may be in a table by 5 may be read at get {378}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620753,dhexp(key_e_375620754,g))),dhexp(key_s(alice),dhexp(key_e_375620754,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620753,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620754,g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {360}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {376}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
Abbreviations:
key_e_375620885 = key_e_600[me_586 = alice,them_585 = charlie,!1 = @sid_375620844]
key_e_375620886 = key_e_764[me_716 = bob,them_715 = alice,!1 = @sid_375620868]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620885,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620885,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {321}.
The message concat3(dhexp(key_e_375620885,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {288}.
We have dhexp(key_e_375620885,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false))) may be inserted in a table at insert {320}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false))) that may be in a table by 4 may be read at get {359}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {356}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620886,g),key_e_375620886),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false))) may be inserted in a table at insert {357}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620886,g),key_e_375620886),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620885,g),key_e_375620885),empty,empty,empty,true))) may be inserted in a table at insert {185}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620885,g),key_e_375620885),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {287}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {152}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {187}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {184}.
So the message concat3(dhexp(key_e_375620885,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {186}.
mess(pub,concat3(dhexp(key_e_375620885,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {321}.
The message concat3(dhexp(key_e_375620885,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {288}.
We have dhexp(key_e_375620885,g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false))) may be inserted in a table at insert {320}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false))) that may be in a table by 11 may be read at get {359}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {356}.
So the message concat3(dhexp(key_e_375620886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice))) may be sent on channel pub at output {358}.
mess(pub,concat3(dhexp(key_e_375620886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620885,g),key_e_375620885),empty,empty,empty,true))) that may be in a table by 7 may be read at get {223}.
The message concat3(dhexp(key_e_375620886,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {188}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_e_375620886,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620885,g),key_e_375620885),empty,dhexp(key_e_375620886,g),empty,true))) may be inserted in a table at insert {222}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_e_375620886,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620885,g),key_e_375620885),empty,dhexp(key_e_375620886,g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_e_375620886,dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e_375620885,g),key_e_375620885),empty,dhexp(key_e_375620886,g),empty,true))) that may be in a table by 13 may be read at get {241}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {238}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {240}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e_375620886,g),key_e_375620886),dhexp(key_s(alice),g),dhexp(key_e_375620885,g),empty,false))) that may be in a table by 5 may be read at get {378}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e_375620885,dhexp(key_e_375620886,g))),dhexp(key_s(alice),dhexp(key_e_375620886,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_375620885,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))),dhexp(key_e_375620886,g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {360}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {376}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1055,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
