File "KK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KK1.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "KK1.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "KK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "KK1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "KK1.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK1.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 317, character 6:
Warning: identifier e rebound.
File "KK1.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ne rebound.
File "KK1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 324, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 324, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "KK1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 353, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 355, characters 7-8:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 363, characters 6-7:
Warning: identifier re rebound.
File "KK1.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 368, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 539, characters 8-9:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 389, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 391, characters 7-8:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 531, characters 8-9:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 332, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 332, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK1.noise.passive.pv", line 333, characters 6-7:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 524, characters 8-9:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 363, characters 6-7:
Warning: identifier re rebound.
File "KK1.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 366, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 368, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 516, characters 8-9:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "KK1.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "KK1.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK1.noise.passive.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 589, characters 8-9:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK1.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 582, characters 8-9:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 317, character 6:
Warning: identifier e rebound.
File "KK1.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ne rebound.
File "KK1.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 322, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 323, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 324, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 324, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "KK1.noise.passive.pv", line 325, characters 6-7:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KK1.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "KK1.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 567, characters 8-9:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 350, characters 6-7:
Warning: identifier re rebound.
File "KK1.noise.passive.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 353, characters 7-8:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 355, characters 7-8:
Warning: identifier hs rebound.
File "KK1.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "KK1.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "KK1.noise.passive.pv", line 299, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_470: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_471: keypair = (if not-caught-fail(v_470) then keypairpack(v_470,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_471));
    (
        {5}let e_472: keypair = keypairpack(empty,empty) in
        {6}let v_473: key = catch-fail(dhexp(key_s(bob),g)) in
        {7}let rs_474: key = getpublickey((if not-caught-fail(v_473) then keypairpack(v_473,key_s(bob)) else fail-any)) in
        {8}let re_475: key = empty in
        {9}let v_476: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_477: key = catch-fail(v_476) in
        {11}let v_478: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_479: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_476) then (if not-caught-fail(v_477) then (if not-caught-fail(v_478) then symmetricstatepack(v_478,v_477,v_476) else fail-any) else fail-any) else fail-any))) in
        {13}let v_480: symmetricstate = catch-fail((if success?((if not-caught-fail(v_476) then (if not-caught-fail(v_477) then (if not-caught-fail(v_478) then symmetricstatepack(v_478,v_477,v_476) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then symmetricstatepack(1-proj-3-tuple(v_479),2-proj-3-tuple(v_479),hash(3-proj-3-tuple(v_479),empty)) else fail-any) else fail-any)) in
        {14}let v_481: bitstring = catch-fail(symmetricstateunpack(v_480)) in
        {15}let v_482: symmetricstate = catch-fail((if success?(getpublickey(s_471)) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_481),hash(3-proj-3-tuple(v_481),getpublickey(s_471))) else fail-any) else fail-any)) in
        {16}let v_483: bitstring = catch-fail(symmetricstateunpack(v_482)) in
        {17}let v_484: symmetricstate = catch-fail((if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),rs_474)) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_480) then (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then handshakestatepack(v_484,s_471,e_472,rs_474,re_475,empty,true) else fail-any) else fail-any) else fail-any) in
        {19}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {42}get statestore(=alice,=bob,statepack_a(hs_485: handshakestate)) in
        {20}let v_486: bitstring = catch-fail(handshakestateunpack(hs_485)) in
        {21}let v_487: bitstring = catch-fail((empty,empty,empty)) in
        {22}let v_488: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {23}let v_489: keypair = catch-fail((if not-caught-fail(v_488) then keypairpack(v_488,key_e(alice,bob)) else fail-any)) in
        {24}let v_490: bitstring = catch-fail(getpublickey(v_489)) in
        {25}let v_491: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_486))) in
        {26}let v_492: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_486)) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then symmetricstatepack(1-proj-3-tuple(v_491),2-proj-3-tuple(v_491),hash(3-proj-3-tuple(v_491),v_490)) else fail-any) else fail-any)) in
        {27}let v_493: bitstring = catch-fail(symmetricstateunpack(v_492)) in
        {28}let v_494: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {29}let v_495: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_494),2-proj-2-tuple(v_494),3-proj-3-tuple(v_493),msg_a(alice,bob))) in
        {30}let v_496: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {31}let v_497: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_494))) && success?(1-proj-3-tuple(v_493))) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-2-tuple(v_496))))) then cipherstatepack(1-proj-2-tuple(v_496),increment_nonce(2-proj-2-tuple(v_494))) else fail-any) else fail-any)) in
        {32}let v_498: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_493)) && success?(1-proj-3-tuple(v_493))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-2-tuple(v_494))))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_497) then (v_497,v_495) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {33}let v_499: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_498),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) in
        {34}let v_500: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_498)) && success?(symmetricstatepack(1-proj-2-tuple(v_498),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-3-tuple(v_499))))) then symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_499),hash(3-proj-3-tuple(v_499),2-proj-2-tuple(v_498))) else fail-any) else fail-any)) in
        {35}let v_501: bitstring = catch-fail((if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-3-tuple(v_493))))) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-2-tuple(v_498))))) then (if not-caught-fail(v_500) then (v_500,2-proj-2-tuple(v_498)) else fail-any) else fail-any) else fail-any)) in
        {36}let v_502: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_501),2-proj-7-tuple(v_486),v_489,4-proj-7-tuple(v_486),5-proj-7-tuple(v_486),6-proj-7-tuple(v_486),7-proj-7-tuple(v_486))) in
        {37}let v_503: bitstring = catch-fail(concat3(v_490,2-proj-3-tuple(v_487),2-proj-2-tuple(v_501))) in
        {38}let (hs_504: handshakestate,re_505: key,message_a: bitstring) = (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-7-tuple(v_486))))) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (if not-caught-fail(v_489) then (if not-caught-fail(v_490) then (if not-caught-fail(v_492) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-2-tuple(v_501))))) then (if not-caught-fail(v_502) then (if not-caught-fail(v_503) then (v_502,5-proj-7-tuple(v_486),v_503) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {39}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {40}insert statestore(alice,bob,statepack_b(hs_504));
        {41}out(pub, message_a)
    ) | (
        {85}get statestore(=alice,=bob,statepack_b(hs_506: handshakestate)) in
        {43}in(pub, message_b: bitstring);
        {44}let v_507: bitstring = catch-fail(handshakestateunpack(hs_506)) in
        {45}let v_508: bitstring = catch-fail(deconcat3(message_b)) in
        {46}let v_509: bool = catch-fail(true) in
        {47}let v_510: key = catch-fail(1-proj-3-tuple(v_508)) in
        {48}let v_511: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_507))) in
        {49}let v_512: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_507)) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-3-tuple(v_511))))) then symmetricstatepack(1-proj-3-tuple(v_511),2-proj-3-tuple(v_511),hash(3-proj-3-tuple(v_511),v_510)) else fail-any) else fail-any)) in
        {50}let v_513: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_507))) in
        {51}let v_514: bitstring = catch-fail(symmetricstateunpack(v_512)) in
        {52}let v_515: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_514),(if success?(3-proj-7-tuple(v_507)) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),v_510) else fail-any) else fail-any))) in
        {53}let v_516: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_514),(if success?(3-proj-7-tuple(v_507)) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),v_510) else fail-any) else fail-any))) in
        {54}let v_517: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_514),(if success?(3-proj-7-tuple(v_507)) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),v_510) else fail-any) else fail-any))) in
        {55}let v_518: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_507)) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),v_510) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_514))) then (if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (if not-caught-fail(v_517) then (v_515,v_516,v_517) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {56}let v_519: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_507)) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then dhexp(2-proj-2-tuple(v_513),v_510) else fail-any) else fail-any)) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_518)) then cipherstatepack(2-proj-3-tuple(v_518),minnonce) else fail-any),1-proj-3-tuple(v_518),3-proj-3-tuple(v_514)) else fail-any) else fail-any) else fail-any)) in
        {57}let v_520: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_507))) in
        {58}let v_521: bitstring = catch-fail(symmetricstateunpack(v_519)) in
        {59}let v_522: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_521),(if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then dhexp(2-proj-2-tuple(v_520),v_510) else fail-any) else fail-any))) in
        {60}let v_523: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_521),(if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then dhexp(2-proj-2-tuple(v_520),v_510) else fail-any) else fail-any))) in
        {61}let v_524: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_521),(if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then dhexp(2-proj-2-tuple(v_520),v_510) else fail-any) else fail-any))) in
        {62}let v_525: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then dhexp(2-proj-2-tuple(v_520),v_510) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_521))) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (if not-caught-fail(v_524) then (v_522,v_523,v_524) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_526: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_507)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-2-tuple(v_520))))) then dhexp(2-proj-2-tuple(v_520),v_510) else fail-any) else fail-any)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-3-tuple(v_525))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_525)) then cipherstatepack(2-proj-3-tuple(v_525),minnonce) else fail-any),1-proj-3-tuple(v_525),3-proj-3-tuple(v_521)) else fail-any) else fail-any) else fail-any)) in
        {64}let v_527: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_507))) in
        {65}let v_528: bitstring = catch-fail(symmetricstateunpack(v_526)) in
        {66}let v_529: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_528),(if (success?(4-proj-7-tuple(v_507)) && success?(3-proj-7-tuple(v_507))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),4-proj-7-tuple(v_507)) else fail-any) else fail-any))) in
        {67}let v_530: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_528),(if (success?(4-proj-7-tuple(v_507)) && success?(3-proj-7-tuple(v_507))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),4-proj-7-tuple(v_507)) else fail-any) else fail-any))) in
        {68}let v_531: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_528),(if (success?(4-proj-7-tuple(v_507)) && success?(3-proj-7-tuple(v_507))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),4-proj-7-tuple(v_507)) else fail-any) else fail-any))) in
        {69}let v_532: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_507)) && success?(3-proj-7-tuple(v_507))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),4-proj-7-tuple(v_507)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_528))) then (if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (if not-caught-fail(v_531) then (v_529,v_530,v_531) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_533: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_507)) && success?(3-proj-7-tuple(v_507))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then dhexp(2-proj-2-tuple(v_527),4-proj-7-tuple(v_507)) else fail-any) else fail-any)) then (if (not-caught-fail(v_528) && success?(is-true(success?(1-proj-3-tuple(v_528))))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_532)) then cipherstatepack(2-proj-3-tuple(v_532),minnonce) else fail-any),1-proj-3-tuple(v_532),3-proj-3-tuple(v_528)) else fail-any) else fail-any) else fail-any)) in
        {71}let v_534: bitstring = catch-fail(symmetricstateunpack(v_533)) in
        {72}let v_535: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_534))) in
        {73}let v_536: aead = catch-fail(decrypt(1-proj-2-tuple(v_535),2-proj-2-tuple(v_535),3-proj-3-tuple(v_534),3-proj-3-tuple(v_508))) in
        {74}let v_537: bitstring = catch-fail(aeadunpack(v_536)) in
        {75}let v_538: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_534))) in
        {76}let v_539: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_535))) && success?(1-proj-3-tuple(v_534))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then cipherstatepack(1-proj-2-tuple(v_538),increment_nonce(2-proj-2-tuple(v_535))) else fail-any) else fail-any)) in
        {77}let v_540: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_508)) && (success?(3-proj-3-tuple(v_534)) && success?(1-proj-3-tuple(v_534)))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_536) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if not-caught-fail(v_539) then (v_539,3-proj-3-tuple(v_537),1-proj-3-tuple(v_537)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_541: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_534),3-proj-3-tuple(v_534)))) in
        {79}let v_542: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_508)) && success?(symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_534),3-proj-3-tuple(v_534)))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack(1-proj-3-tuple(v_541),2-proj-3-tuple(v_541),hash(3-proj-3-tuple(v_541),3-proj-3-tuple(v_508))) else fail-any) else fail-any)) in
        {80}let v_543: bitstring = catch-fail((if success?(3-proj-3-tuple(v_508)) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if not-caught-fail(v_542) then (v_542,2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let v_544: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_543),2-proj-7-tuple(v_507),3-proj-7-tuple(v_507),4-proj-7-tuple(v_507),v_510,6-proj-7-tuple(v_507),7-proj-7-tuple(v_507))) in
        {82}let (hs_545: handshakestate,re_546: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-7-tuple(v_507))))) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then (if not-caught-fail(v_509) then (if not-caught-fail(v_510) then (if not-caught-fail(v_512) then (if not-caught-fail(v_519) then (if not-caught-fail(v_526) then (if not-caught-fail(v_533) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-3-tuple(v_543))))) then (if (v_509 && 3-proj-3-tuple(v_543)) then (if not-caught-fail(v_544) then (v_544,getpublickey(3-proj-7-tuple(v_507)),2-proj-3-tuple(v_543),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {83}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {84}insert statestore(alice,bob,statepack_c(hs_545))
    ) | (
        {103}get statestore(=alice,=bob,statepack_c(hs_547: handshakestate)) in
        {86}let v_548: bitstring = catch-fail(handshakestateunpack(hs_547)) in
        {87}let v_549: bitstring = catch-fail((empty,empty,empty)) in
        {88}let v_550: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_548))) in
        {89}let v_551: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_550))) in
        {90}let v_552: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_551),2-proj-2-tuple(v_551),3-proj-3-tuple(v_550),msg_c(alice,bob))) in
        {91}let v_553: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_550))) in
        {92}let v_554: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_551))) && success?(1-proj-3-tuple(v_550))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then cipherstatepack(1-proj-2-tuple(v_553),increment_nonce(2-proj-2-tuple(v_551))) else fail-any) else fail-any)) in
        {93}let v_555: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_550)) && success?(1-proj-3-tuple(v_550))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_552) then (if not-caught-fail(v_554) then (v_554,v_552) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {94}let v_556: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_555),2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)))) in
        {95}let v_557: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_555)) && success?(symmetricstatepack(1-proj-2-tuple(v_555),2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_556),hash(3-proj-3-tuple(v_556),2-proj-2-tuple(v_555))) else fail-any) else fail-any)) in
        {96}let v_558: bitstring = catch-fail((if success?(1-proj-7-tuple(v_548)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then (if not-caught-fail(v_557) then (v_557,2-proj-2-tuple(v_555)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_559: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_558),2-proj-7-tuple(v_548),3-proj-7-tuple(v_548),4-proj-7-tuple(v_548),5-proj-7-tuple(v_548),6-proj-7-tuple(v_548),7-proj-7-tuple(v_548))) in
        {98}let v_560: bitstring = catch-fail(concat3(1-proj-3-tuple(v_549),2-proj-3-tuple(v_549),2-proj-2-tuple(v_558))) in
        {99}let (hs_561: handshakestate,re_562: key,message_c: bitstring) = (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-7-tuple(v_548))))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-3-tuple(v_549))))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-2-tuple(v_558))))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (v_559,5-proj-7-tuple(v_548),v_560) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {100}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {101}insert statestore(alice,bob,statepack_d(hs_561));
        {102}out(pub, message_c)
    ) | (
        {131}get statestore(=alice,=bob,statepack_d(hs_563: handshakestate)) in
        {104}in(pub, message_d: bitstring);
        {105}let v_564: bitstring = catch-fail(handshakestateunpack(hs_563)) in
        {106}let v_565: bitstring = catch-fail(deconcat3(message_d)) in
        {107}let v_566: bool = catch-fail(true) in
        {108}let v_567: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_564))) in
        {109}let v_568: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {110}let v_569: aead = catch-fail(decrypt(1-proj-2-tuple(v_568),2-proj-2-tuple(v_568),3-proj-3-tuple(v_567),3-proj-3-tuple(v_565))) in
        {111}let v_570: bitstring = catch-fail(aeadunpack(v_569)) in
        {112}let v_571: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_567))) in
        {113}let v_572: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_568))) && success?(1-proj-3-tuple(v_567))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then cipherstatepack(1-proj-2-tuple(v_571),increment_nonce(2-proj-2-tuple(v_568))) else fail-any) else fail-any)) in
        {114}let v_573: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_565)) && (success?(3-proj-3-tuple(v_567)) && success?(1-proj-3-tuple(v_567)))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then (if not-caught-fail(v_569) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if not-caught-fail(v_572) then (v_572,3-proj-3-tuple(v_570),1-proj-3-tuple(v_570)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_574: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) in
        {116}let v_575: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_565)) && success?(symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_567),3-proj-3-tuple(v_567)))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),3-proj-3-tuple(v_565))) else fail-any) else fail-any)) in
        {117}let v_576: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_565)) && success?(1-proj-7-tuple(v_564))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if not-caught-fail(v_575) then (v_575,2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_577: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_576),2-proj-7-tuple(v_564),3-proj-7-tuple(v_564),4-proj-7-tuple(v_564),5-proj-7-tuple(v_564),6-proj-7-tuple(v_564),7-proj-7-tuple(v_564))) in
        {119}let v_578: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_576))) in
        {120}let v_579: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_578),zero)) in
        {121}let v_580: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_578),zero)) in
        {122}let v_581: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_578),zero)) in
        {123}let v_582: bitstring = catch-fail((if success?(2-proj-3-tuple(v_578)) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (v_579,v_580,v_581) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {124}let v_583: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_582)) then cipherstatepack(1-proj-3-tuple(v_582),minnonce) else fail-any)) in
        {125}let v_584: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_582)) then cipherstatepack(2-proj-3-tuple(v_582),minnonce) else fail-any)) in
        {126}let v_585: bitstring = catch-fail((if success?(1-proj-3-tuple(v_576)) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if not-caught-fail(v_583) then (if not-caught-fail(v_584) then (1-proj-3-tuple(v_576),v_583,v_584) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let (hs_586: handshakestate,re_587: key,plaintext_d: bitstring,valid_588: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-7-tuple(v_564))))) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then (if not-caught-fail(v_566) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if (v_566 && 3-proj-3-tuple(v_576)) then (if not-caught-fail(v_577) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (v_577,getpublickey(3-proj-7-tuple(v_564)),2-proj-3-tuple(v_576),true,2-proj-3-tuple(v_585),3-proj-3-tuple(v_585)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {128}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_588);
        {129}insert statestore(alice,bob,statepack_e(hs_586));
        {130}event RecvEnd(valid_588)
    ) | (
        {132}event LeakS(phase0,alice);
        {133}out(pub, key_s(alice))
    ) | (
        {134}phase 1;
        {135}event LeakS(phase1,alice);
        {136}out(pub, key_s(alice))
    )
) | (
    {137}let v_589: key = catch-fail(dhexp(key_s(alice),g)) in
    {138}let s_590: keypair = (if not-caught-fail(v_589) then keypairpack(v_589,key_s(alice)) else fail-any) in
    {139}out(pub, getpublickey(s_590));
    (
        {140}let e_591: keypair = keypairpack(empty,empty) in
        {141}let v_592: key = catch-fail(dhexp(key_s(charlie),g)) in
        {142}let rs_593: key = getpublickey((if not-caught-fail(v_592) then keypairpack(v_592,key_s(charlie)) else fail-any)) in
        {143}let re_594: key = empty in
        {144}let v_595: bitstring = catch-fail(hash(somename,empty)) in
        {145}let v_596: key = catch-fail(v_595) in
        {146}let v_597: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {147}let v_598: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_595) then (if not-caught-fail(v_596) then (if not-caught-fail(v_597) then symmetricstatepack(v_597,v_596,v_595) else fail-any) else fail-any) else fail-any))) in
        {148}let v_599: symmetricstate = catch-fail((if success?((if not-caught-fail(v_595) then (if not-caught-fail(v_596) then (if not-caught-fail(v_597) then symmetricstatepack(v_597,v_596,v_595) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack(1-proj-3-tuple(v_598),2-proj-3-tuple(v_598),hash(3-proj-3-tuple(v_598),empty)) else fail-any) else fail-any)) in
        {149}let v_600: bitstring = catch-fail(symmetricstateunpack(v_599)) in
        {150}let v_601: symmetricstate = catch-fail((if success?(getpublickey(s_590)) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then symmetricstatepack(1-proj-3-tuple(v_600),2-proj-3-tuple(v_600),hash(3-proj-3-tuple(v_600),getpublickey(s_590))) else fail-any) else fail-any)) in
        {151}let v_602: bitstring = catch-fail(symmetricstateunpack(v_601)) in
        {152}let v_603: symmetricstate = catch-fail((if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then symmetricstatepack(1-proj-3-tuple(v_602),2-proj-3-tuple(v_602),hash(3-proj-3-tuple(v_602),rs_593)) else fail-any)) in
        {153}let hs_604: handshakestate = (if not-caught-fail(v_599) then (if not-caught-fail(v_601) then (if not-caught-fail(v_603) then handshakestatepack(v_603,s_590,e_591,rs_593,re_594,empty,true) else fail-any) else fail-any) else fail-any) in
        {154}insert statestore(alice,charlie,statepack_a(hs_604))
    ) | (
        {177}get statestore(=alice,=charlie,statepack_a(hs_605: handshakestate)) in
        {155}let v_606: bitstring = catch-fail(handshakestateunpack(hs_605)) in
        {156}let v_607: bitstring = catch-fail((empty,empty,empty)) in
        {157}let v_608: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {158}let v_609: keypair = catch-fail((if not-caught-fail(v_608) then keypairpack(v_608,key_e(alice,charlie)) else fail-any)) in
        {159}let v_610: bitstring = catch-fail(getpublickey(v_609)) in
        {160}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_606))) in
        {161}let v_612: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_606)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),v_610)) else fail-any) else fail-any)) in
        {162}let v_613: bitstring = catch-fail(symmetricstateunpack(v_612)) in
        {163}let v_614: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_613))) in
        {164}let v_615: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_614),2-proj-2-tuple(v_614),3-proj-3-tuple(v_613),msg_a(alice,charlie))) in
        {165}let v_616: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_613))) in
        {166}let v_617: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_614))) && success?(1-proj-3-tuple(v_613))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then cipherstatepack(1-proj-2-tuple(v_616),increment_nonce(2-proj-2-tuple(v_614))) else fail-any) else fail-any)) in
        {167}let v_618: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_613)) && success?(1-proj-3-tuple(v_613))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-2-tuple(v_614))))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_617) then (v_617,v_615) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {168}let v_619: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_618),2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)))) in
        {169}let v_620: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_618)) && success?(symmetricstatepack(1-proj-2-tuple(v_618),2-proj-3-tuple(v_613),3-proj-3-tuple(v_613)))) then (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-3-tuple(v_619))))) then symmetricstatepack(1-proj-3-tuple(v_619),2-proj-3-tuple(v_619),hash(3-proj-3-tuple(v_619),2-proj-2-tuple(v_618))) else fail-any) else fail-any)) in
        {170}let v_621: bitstring = catch-fail((if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-3-tuple(v_613))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_620) then (v_620,2-proj-2-tuple(v_618)) else fail-any) else fail-any) else fail-any)) in
        {171}let v_622: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_621),2-proj-7-tuple(v_606),v_609,4-proj-7-tuple(v_606),5-proj-7-tuple(v_606),6-proj-7-tuple(v_606),7-proj-7-tuple(v_606))) in
        {172}let v_623: bitstring = catch-fail(concat3(v_610,2-proj-3-tuple(v_607),2-proj-2-tuple(v_621))) in
        {173}let (hs_624: handshakestate,re_625: key,message_a_626: bitstring) = (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-7-tuple(v_606))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_622) then (if not-caught-fail(v_623) then (v_622,5-proj-7-tuple(v_606),v_623) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {174}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {175}insert statestore(alice,charlie,statepack_b(hs_624));
        {176}out(pub, message_a_626)
    ) | (
        {220}get statestore(=alice,=charlie,statepack_b(hs_627: handshakestate)) in
        {178}in(pub, message_b_628: bitstring);
        {179}let v_629: bitstring = catch-fail(handshakestateunpack(hs_627)) in
        {180}let v_630: bitstring = catch-fail(deconcat3(message_b_628)) in
        {181}let v_631: bool = catch-fail(true) in
        {182}let v_632: key = catch-fail(1-proj-3-tuple(v_630)) in
        {183}let v_633: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_629))) in
        {184}let v_634: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_629)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-3-tuple(v_633))))) then symmetricstatepack(1-proj-3-tuple(v_633),2-proj-3-tuple(v_633),hash(3-proj-3-tuple(v_633),v_632)) else fail-any) else fail-any)) in
        {185}let v_635: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_629))) in
        {186}let v_636: bitstring = catch-fail(symmetricstateunpack(v_634)) in
        {187}let v_637: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_636),(if success?(3-proj-7-tuple(v_629)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_632) else fail-any) else fail-any))) in
        {188}let v_638: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_636),(if success?(3-proj-7-tuple(v_629)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_632) else fail-any) else fail-any))) in
        {189}let v_639: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_636),(if success?(3-proj-7-tuple(v_629)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_632) else fail-any) else fail-any))) in
        {190}let v_640: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_629)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_632) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_636))) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (v_637,v_638,v_639) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_641: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_629)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then dhexp(2-proj-2-tuple(v_635),v_632) else fail-any) else fail-any)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_640)) then cipherstatepack(2-proj-3-tuple(v_640),minnonce) else fail-any),1-proj-3-tuple(v_640),3-proj-3-tuple(v_636)) else fail-any) else fail-any) else fail-any)) in
        {192}let v_642: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_629))) in
        {193}let v_643: bitstring = catch-fail(symmetricstateunpack(v_641)) in
        {194}let v_644: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_643),(if success?(2-proj-7-tuple(v_629)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),v_632) else fail-any) else fail-any))) in
        {195}let v_645: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_643),(if success?(2-proj-7-tuple(v_629)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),v_632) else fail-any) else fail-any))) in
        {196}let v_646: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_643),(if success?(2-proj-7-tuple(v_629)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),v_632) else fail-any) else fail-any))) in
        {197}let v_647: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_629)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),v_632) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_643))) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (v_644,v_645,v_646) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {198}let v_648: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_629)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),v_632) else fail-any) else fail-any)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_647)) then cipherstatepack(2-proj-3-tuple(v_647),minnonce) else fail-any),1-proj-3-tuple(v_647),3-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any)) in
        {199}let v_649: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_629))) in
        {200}let v_650: bitstring = catch-fail(symmetricstateunpack(v_648)) in
        {201}let v_651: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_650),(if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),4-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {202}let v_652: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_650),(if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),4-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {203}let v_653: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_650),(if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),4-proj-7-tuple(v_629)) else fail-any) else fail-any))) in
        {204}let v_654: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),4-proj-7-tuple(v_629)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_650))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (v_651,v_652,v_653) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_655: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_629)) && success?(3-proj-7-tuple(v_629))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-2-tuple(v_649))))) then dhexp(2-proj-2-tuple(v_649),4-proj-7-tuple(v_629)) else fail-any) else fail-any)) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_654)) then cipherstatepack(2-proj-3-tuple(v_654),minnonce) else fail-any),1-proj-3-tuple(v_654),3-proj-3-tuple(v_650)) else fail-any) else fail-any) else fail-any)) in
        {206}let v_656: bitstring = catch-fail(symmetricstateunpack(v_655)) in
        {207}let v_657: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_656))) in
        {208}let v_658: aead = catch-fail(decrypt(1-proj-2-tuple(v_657),2-proj-2-tuple(v_657),3-proj-3-tuple(v_656),3-proj-3-tuple(v_630))) in
        {209}let v_659: bitstring = catch-fail(aeadunpack(v_658)) in
        {210}let v_660: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_656))) in
        {211}let v_661: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_657))) && success?(1-proj-3-tuple(v_656))) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then cipherstatepack(1-proj-2-tuple(v_660),increment_nonce(2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
        {212}let v_662: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_630)) && (success?(3-proj-3-tuple(v_656)) && success?(1-proj-3-tuple(v_656)))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_658) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (if not-caught-fail(v_661) then (v_661,3-proj-3-tuple(v_659),1-proj-3-tuple(v_659)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {213}let v_663: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_662),2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)))) in
        {214}let v_664: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_630)) && success?(symmetricstatepack(1-proj-3-tuple(v_662),2-proj-3-tuple(v_656),3-proj-3-tuple(v_656)))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then symmetricstatepack(1-proj-3-tuple(v_663),2-proj-3-tuple(v_663),hash(3-proj-3-tuple(v_663),3-proj-3-tuple(v_630))) else fail-any) else fail-any)) in
        {215}let v_665: bitstring = catch-fail((if success?(3-proj-3-tuple(v_630)) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if not-caught-fail(v_664) then (v_664,2-proj-3-tuple(v_662),3-proj-3-tuple(v_662)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {216}let v_666: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_665),2-proj-7-tuple(v_629),3-proj-7-tuple(v_629),4-proj-7-tuple(v_629),v_632,6-proj-7-tuple(v_629),7-proj-7-tuple(v_629))) in
        {217}let (hs_667: handshakestate,re_668: key,plaintext_b_669: bitstring,valid_670: bool) = (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-7-tuple(v_629))))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if not-caught-fail(v_631) then (if not-caught-fail(v_632) then (if not-caught-fail(v_634) then (if not-caught-fail(v_641) then (if not-caught-fail(v_648) then (if not-caught-fail(v_655) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if (v_631 && 3-proj-3-tuple(v_665)) then (if not-caught-fail(v_666) then (v_666,getpublickey(3-proj-7-tuple(v_629)),2-proj-3-tuple(v_665),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {218}event RecvMsg(alice,charlie,stage_b,plaintext_b_669,valid_670);
        {219}insert statestore(alice,charlie,statepack_c(hs_667))
    ) | (
        {238}get statestore(=alice,=charlie,statepack_c(hs_671: handshakestate)) in
        {221}let v_672: bitstring = catch-fail(handshakestateunpack(hs_671)) in
        {222}let v_673: bitstring = catch-fail((empty,empty,empty)) in
        {223}let v_674: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_672))) in
        {224}let v_675: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_674))) in
        {225}let v_676: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_675),2-proj-2-tuple(v_675),3-proj-3-tuple(v_674),msg_c(alice,charlie))) in
        {226}let v_677: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_674))) in
        {227}let v_678: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_675))) && success?(1-proj-3-tuple(v_674))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-2-tuple(v_677))))) then cipherstatepack(1-proj-2-tuple(v_677),increment_nonce(2-proj-2-tuple(v_675))) else fail-any) else fail-any)) in
        {228}let v_679: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_674)) && success?(1-proj-3-tuple(v_674))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then (if not-caught-fail(v_676) then (if not-caught-fail(v_678) then (v_678,v_676) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {229}let v_680: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_679),2-proj-3-tuple(v_674),3-proj-3-tuple(v_674)))) in
        {230}let v_681: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_679)) && success?(symmetricstatepack(1-proj-2-tuple(v_679),2-proj-3-tuple(v_674),3-proj-3-tuple(v_674)))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then symmetricstatepack(1-proj-3-tuple(v_680),2-proj-3-tuple(v_680),hash(3-proj-3-tuple(v_680),2-proj-2-tuple(v_679))) else fail-any) else fail-any)) in
        {231}let v_682: bitstring = catch-fail((if success?(1-proj-7-tuple(v_672)) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then (if not-caught-fail(v_681) then (v_681,2-proj-2-tuple(v_679)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {232}let v_683: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_682),2-proj-7-tuple(v_672),3-proj-7-tuple(v_672),4-proj-7-tuple(v_672),5-proj-7-tuple(v_672),6-proj-7-tuple(v_672),7-proj-7-tuple(v_672))) in
        {233}let v_684: bitstring = catch-fail(concat3(1-proj-3-tuple(v_673),2-proj-3-tuple(v_673),2-proj-2-tuple(v_682))) in
        {234}let (hs_685: handshakestate,re_686: key,message_c_687: bitstring) = (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-7-tuple(v_672))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then (if not-caught-fail(v_683) then (if not-caught-fail(v_684) then (v_683,5-proj-7-tuple(v_672),v_684) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {235}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {236}insert statestore(alice,charlie,statepack_d(hs_685));
        {237}out(pub, message_c_687)
    ) | (
        {266}get statestore(=alice,=charlie,statepack_d(hs_688: handshakestate)) in
        {239}in(pub, message_d_689: bitstring);
        {240}let v_690: bitstring = catch-fail(handshakestateunpack(hs_688)) in
        {241}let v_691: bitstring = catch-fail(deconcat3(message_d_689)) in
        {242}let v_692: bool = catch-fail(true) in
        {243}let v_693: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_690))) in
        {244}let v_694: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_693))) in
        {245}let v_695: aead = catch-fail(decrypt(1-proj-2-tuple(v_694),2-proj-2-tuple(v_694),3-proj-3-tuple(v_693),3-proj-3-tuple(v_691))) in
        {246}let v_696: bitstring = catch-fail(aeadunpack(v_695)) in
        {247}let v_697: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_693))) in
        {248}let v_698: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_694))) && success?(1-proj-3-tuple(v_693))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-2-tuple(v_697))))) then cipherstatepack(1-proj-2-tuple(v_697),increment_nonce(2-proj-2-tuple(v_694))) else fail-any) else fail-any)) in
        {249}let v_699: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_691)) && (success?(3-proj-3-tuple(v_693)) && success?(1-proj-3-tuple(v_693)))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then (if not-caught-fail(v_695) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if not-caught-fail(v_698) then (v_698,3-proj-3-tuple(v_696),1-proj-3-tuple(v_696)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {250}let v_700: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)))) in
        {251}let v_701: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_691)) && success?(symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)))) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then symmetricstatepack(1-proj-3-tuple(v_700),2-proj-3-tuple(v_700),hash(3-proj-3-tuple(v_700),3-proj-3-tuple(v_691))) else fail-any) else fail-any)) in
        {252}let v_702: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_691)) && success?(1-proj-7-tuple(v_690))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then (if not-caught-fail(v_701) then (v_701,2-proj-3-tuple(v_699),3-proj-3-tuple(v_699)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_703: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_702),2-proj-7-tuple(v_690),3-proj-7-tuple(v_690),4-proj-7-tuple(v_690),5-proj-7-tuple(v_690),6-proj-7-tuple(v_690),7-proj-7-tuple(v_690))) in
        {254}let v_704: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_702))) in
        {255}let v_705: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_704),zero)) in
        {256}let v_706: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_704),zero)) in
        {257}let v_707: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_704),zero)) in
        {258}let v_708: bitstring = catch-fail((if success?(2-proj-3-tuple(v_704)) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (v_705,v_706,v_707) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {259}let v_709: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_708)) then cipherstatepack(1-proj-3-tuple(v_708),minnonce) else fail-any)) in
        {260}let v_710: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_708)) then cipherstatepack(2-proj-3-tuple(v_708),minnonce) else fail-any)) in
        {261}let v_711: bitstring = catch-fail((if success?(1-proj-3-tuple(v_702)) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_709) then (if not-caught-fail(v_710) then (1-proj-3-tuple(v_702),v_709,v_710) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {262}let (hs_712: handshakestate,re_713: key,plaintext_d_714: bitstring,valid_715: bool,cs1_716: cipherstate,cs2_717: cipherstate) = (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-7-tuple(v_690))))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (if not-caught-fail(v_692) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (v_692 && 3-proj-3-tuple(v_702)) then (if not-caught-fail(v_703) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (v_703,getpublickey(3-proj-7-tuple(v_690)),2-proj-3-tuple(v_702),true,2-proj-3-tuple(v_711),3-proj-3-tuple(v_711)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {263}event RecvMsg(alice,charlie,stage_d,plaintext_d_714,valid_715);
        {264}insert statestore(alice,charlie,statepack_e(hs_712));
        {265}event RecvEnd(valid_715)
    ) | (
        {267}event LeakS(phase0,alice);
        {268}out(pub, key_s(alice))
    ) | (
        {269}phase 1;
        {270}event LeakS(phase1,alice);
        {271}out(pub, key_s(alice))
    )
) | (
    {272}let v_718: key = catch-fail(dhexp(key_s(bob),g)) in
    {273}let s_719: keypair = (if not-caught-fail(v_718) then keypairpack(v_718,key_s(bob)) else fail-any) in
    {274}out(pub, getpublickey(s_719));
    (
        {275}let e_720: keypair = keypairpack(empty,empty) in
        {276}let v_721: key = catch-fail(dhexp(key_s(alice),g)) in
        {277}let rs_722: key = getpublickey((if not-caught-fail(v_721) then keypairpack(v_721,key_s(alice)) else fail-any)) in
        {278}let re_723: key = empty in
        {279}let v_724: bitstring = catch-fail(hash(somename,empty)) in
        {280}let v_725: key = catch-fail(v_724) in
        {281}let v_726: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {282}let v_727: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_724) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then symmetricstatepack(v_726,v_725,v_724) else fail-any) else fail-any) else fail-any))) in
        {283}let v_728: symmetricstate = catch-fail((if success?((if not-caught-fail(v_724) then (if not-caught-fail(v_725) then (if not-caught-fail(v_726) then symmetricstatepack(v_726,v_725,v_724) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then symmetricstatepack(1-proj-3-tuple(v_727),2-proj-3-tuple(v_727),hash(3-proj-3-tuple(v_727),empty)) else fail-any) else fail-any)) in
        {284}let v_729: bitstring = catch-fail(symmetricstateunpack(v_728)) in
        {285}let v_730: symmetricstate = catch-fail((if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then symmetricstatepack(1-proj-3-tuple(v_729),2-proj-3-tuple(v_729),hash(3-proj-3-tuple(v_729),rs_722)) else fail-any)) in
        {286}let v_731: bitstring = catch-fail(symmetricstateunpack(v_730)) in
        {287}let v_732: symmetricstate = catch-fail((if success?(getpublickey(s_719)) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then symmetricstatepack(1-proj-3-tuple(v_731),2-proj-3-tuple(v_731),hash(3-proj-3-tuple(v_731),getpublickey(s_719))) else fail-any) else fail-any)) in
        {288}let hs_733: handshakestate = (if not-caught-fail(v_728) then (if not-caught-fail(v_730) then (if not-caught-fail(v_732) then handshakestatepack(v_732,s_719,e_720,rs_722,re_723,empty,false) else fail-any) else fail-any) else fail-any) in
        {289}insert statestore(bob,alice,statepack_a(hs_733))
    ) | (
        {311}get statestore(=bob,=alice,statepack_a(hs_734: handshakestate)) in
        {290}in(pub, message_a_735: bitstring);
        {291}let v_736: bitstring = catch-fail(handshakestateunpack(hs_734)) in
        {292}let v_737: bitstring = catch-fail(deconcat3(message_a_735)) in
        {293}let v_738: bool = catch-fail(true) in
        {294}let v_739: key = catch-fail(1-proj-3-tuple(v_737)) in
        {295}let v_740: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_736))) in
        {296}let v_741: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_736)) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then symmetricstatepack(1-proj-3-tuple(v_740),2-proj-3-tuple(v_740),hash(3-proj-3-tuple(v_740),v_739)) else fail-any) else fail-any)) in
        {297}let v_742: bitstring = catch-fail(symmetricstateunpack(v_741)) in
        {298}let v_743: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_742))) in
        {299}let v_744: aead = catch-fail(decrypt(1-proj-2-tuple(v_743),2-proj-2-tuple(v_743),3-proj-3-tuple(v_742),3-proj-3-tuple(v_737))) in
        {300}let v_745: bitstring = catch-fail(aeadunpack(v_744)) in
        {301}let v_746: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_742))) in
        {302}let v_747: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_743))) && success?(1-proj-3-tuple(v_742))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then cipherstatepack(1-proj-2-tuple(v_746),increment_nonce(2-proj-2-tuple(v_743))) else fail-any) else fail-any)) in
        {303}let v_748: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_737)) && (success?(3-proj-3-tuple(v_742)) && success?(1-proj-3-tuple(v_742)))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then (if not-caught-fail(v_744) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (if not-caught-fail(v_747) then (v_747,3-proj-3-tuple(v_745),1-proj-3-tuple(v_745)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {304}let v_749: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_748),2-proj-3-tuple(v_742),3-proj-3-tuple(v_742)))) in
        {305}let v_750: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_737)) && success?(symmetricstatepack(1-proj-3-tuple(v_748),2-proj-3-tuple(v_742),3-proj-3-tuple(v_742)))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then symmetricstatepack(1-proj-3-tuple(v_749),2-proj-3-tuple(v_749),hash(3-proj-3-tuple(v_749),3-proj-3-tuple(v_737))) else fail-any) else fail-any)) in
        {306}let v_751: bitstring = catch-fail((if success?(3-proj-3-tuple(v_737)) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if not-caught-fail(v_750) then (v_750,2-proj-3-tuple(v_748),3-proj-3-tuple(v_748)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {307}let v_752: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_751),2-proj-7-tuple(v_736),3-proj-7-tuple(v_736),4-proj-7-tuple(v_736),v_739,6-proj-7-tuple(v_736),7-proj-7-tuple(v_736))) in
        {308}let (hs_753: handshakestate,re_754: key,plaintext_a: bitstring,valid_755: bool) = (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-7-tuple(v_736))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_738) then (if not-caught-fail(v_739) then (if not-caught-fail(v_741) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if (v_738 && 3-proj-3-tuple(v_751)) then (if not-caught-fail(v_752) then (v_752,getpublickey(3-proj-7-tuple(v_736)),2-proj-3-tuple(v_751),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {309}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_755);
        {310}insert statestore(bob,alice,statepack_b(hs_753))
    ) | (
        {355}get statestore(=bob,=alice,statepack_b(hs_756: handshakestate)) in
        {312}let v_757: bitstring = catch-fail(handshakestateunpack(hs_756)) in
        {313}let v_758: bitstring = catch-fail((empty,empty,empty)) in
        {314}let v_759: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {315}let v_760: keypair = catch-fail((if not-caught-fail(v_759) then keypairpack(v_759,key_e(bob,alice)) else fail-any)) in
        {316}let v_761: bitstring = catch-fail(getpublickey(v_760)) in
        {317}let v_762: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_757))) in
        {318}let v_763: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_757)) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-3-tuple(v_762))))) then symmetricstatepack(1-proj-3-tuple(v_762),2-proj-3-tuple(v_762),hash(3-proj-3-tuple(v_762),v_761)) else fail-any) else fail-any)) in
        {319}let v_764: bitstring = catch-fail(keypairunpack(v_760)) in
        {320}let v_765: bitstring = catch-fail(symmetricstateunpack(v_763)) in
        {321}let v_766: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_765),(if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {322}let v_767: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_765),(if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {323}let v_768: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_765),(if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {324}let v_769: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_765))) then (if not-caught-fail(v_766) then (if not-caught-fail(v_767) then (if not-caught-fail(v_768) then (v_766,v_767,v_768) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {325}let v_770: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_757)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then dhexp(2-proj-2-tuple(v_764),5-proj-7-tuple(v_757)) else fail-any) else fail-any)) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_769)) then cipherstatepack(2-proj-3-tuple(v_769),minnonce) else fail-any),1-proj-3-tuple(v_769),3-proj-3-tuple(v_765)) else fail-any) else fail-any) else fail-any)) in
        {326}let v_771: bitstring = catch-fail(keypairunpack(v_760)) in
        {327}let v_772: bitstring = catch-fail(symmetricstateunpack(v_770)) in
        {328}let v_773: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_772),(if success?(4-proj-7-tuple(v_757)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then dhexp(2-proj-2-tuple(v_771),4-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {329}let v_774: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_772),(if success?(4-proj-7-tuple(v_757)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then dhexp(2-proj-2-tuple(v_771),4-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {330}let v_775: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_772),(if success?(4-proj-7-tuple(v_757)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then dhexp(2-proj-2-tuple(v_771),4-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {331}let v_776: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_757)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then dhexp(2-proj-2-tuple(v_771),4-proj-7-tuple(v_757)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_772))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (v_773,v_774,v_775) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {332}let v_777: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_757)) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-2-tuple(v_771))))) then dhexp(2-proj-2-tuple(v_771),4-proj-7-tuple(v_757)) else fail-any) else fail-any)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_776)) then cipherstatepack(2-proj-3-tuple(v_776),minnonce) else fail-any),1-proj-3-tuple(v_776),3-proj-3-tuple(v_772)) else fail-any) else fail-any) else fail-any)) in
        {333}let v_778: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_757))) in
        {334}let v_779: bitstring = catch-fail(symmetricstateunpack(v_777)) in
        {335}let v_780: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_779),(if (success?(5-proj-7-tuple(v_757)) && success?(2-proj-7-tuple(v_757))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {336}let v_781: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_779),(if (success?(5-proj-7-tuple(v_757)) && success?(2-proj-7-tuple(v_757))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {337}let v_782: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_779),(if (success?(5-proj-7-tuple(v_757)) && success?(2-proj-7-tuple(v_757))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),5-proj-7-tuple(v_757)) else fail-any) else fail-any))) in
        {338}let v_783: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_757)) && success?(2-proj-7-tuple(v_757))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),5-proj-7-tuple(v_757)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_779))) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (if not-caught-fail(v_782) then (v_780,v_781,v_782) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {339}let v_784: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_757)) && success?(2-proj-7-tuple(v_757))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-2-tuple(v_778))))) then dhexp(2-proj-2-tuple(v_778),5-proj-7-tuple(v_757)) else fail-any) else fail-any)) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_783)) then cipherstatepack(2-proj-3-tuple(v_783),minnonce) else fail-any),1-proj-3-tuple(v_783),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any)) in
        {340}let v_785: bitstring = catch-fail(symmetricstateunpack(v_784)) in
        {341}let v_786: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_785))) in
        {342}let v_787: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_786),2-proj-2-tuple(v_786),3-proj-3-tuple(v_785),msg_b(bob,alice))) in
        {343}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_785))) in
        {344}let v_789: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_786))) && success?(1-proj-3-tuple(v_785))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then cipherstatepack(1-proj-2-tuple(v_788),increment_nonce(2-proj-2-tuple(v_786))) else fail-any) else fail-any)) in
        {345}let v_790: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_785)) && success?(1-proj-3-tuple(v_785))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-2-tuple(v_786))))) then (if not-caught-fail(v_787) then (if not-caught-fail(v_789) then (v_789,v_787) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {346}let v_791: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_790),2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)))) in
        {347}let v_792: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_790)) && success?(symmetricstatepack(1-proj-2-tuple(v_790),2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_791),hash(3-proj-3-tuple(v_791),2-proj-2-tuple(v_790))) else fail-any) else fail-any)) in
        {348}let v_793: bitstring = catch-fail((if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-2-tuple(v_790))))) then (if not-caught-fail(v_792) then (v_792,2-proj-2-tuple(v_790)) else fail-any) else fail-any) else fail-any)) in
        {349}let v_794: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_793),2-proj-7-tuple(v_757),v_760,4-proj-7-tuple(v_757),5-proj-7-tuple(v_757),6-proj-7-tuple(v_757),7-proj-7-tuple(v_757))) in
        {350}let v_795: bitstring = catch-fail(concat3(v_761,2-proj-3-tuple(v_758),2-proj-2-tuple(v_793))) in
        {351}let (hs_796: handshakestate,re_797: key,message_b_798: bitstring) = (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-7-tuple(v_757))))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_761) then (if not-caught-fail(v_763) then (if not-caught-fail(v_770) then (if not-caught-fail(v_777) then (if not-caught-fail(v_784) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-2-tuple(v_793))))) then (if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (v_794,5-proj-7-tuple(v_757),v_795) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {352}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {353}insert statestore(bob,alice,statepack_c(hs_796));
        {354}out(pub, message_b_798)
    ) | (
        {374}get statestore(=bob,=alice,statepack_c(hs_799: handshakestate)) in
        {356}in(pub, message_c_800: bitstring);
        {357}let v_801: bitstring = catch-fail(handshakestateunpack(hs_799)) in
        {358}let v_802: bitstring = catch-fail(deconcat3(message_c_800)) in
        {359}let v_803: bool = catch-fail(true) in
        {360}let v_804: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_801))) in
        {361}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_804))) in
        {362}let v_806: aead = catch-fail(decrypt(1-proj-2-tuple(v_805),2-proj-2-tuple(v_805),3-proj-3-tuple(v_804),3-proj-3-tuple(v_802))) in
        {363}let v_807: bitstring = catch-fail(aeadunpack(v_806)) in
        {364}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_804))) in
        {365}let v_809: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_805))) && success?(1-proj-3-tuple(v_804))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then cipherstatepack(1-proj-2-tuple(v_808),increment_nonce(2-proj-2-tuple(v_805))) else fail-any) else fail-any)) in
        {366}let v_810: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_802)) && (success?(3-proj-3-tuple(v_804)) && success?(1-proj-3-tuple(v_804)))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then (if not-caught-fail(v_806) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_809) then (v_809,3-proj-3-tuple(v_807),1-proj-3-tuple(v_807)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {367}let v_811: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_804),3-proj-3-tuple(v_804)))) in
        {368}let v_812: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_802)) && success?(symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_804),3-proj-3-tuple(v_804)))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then symmetricstatepack(1-proj-3-tuple(v_811),2-proj-3-tuple(v_811),hash(3-proj-3-tuple(v_811),3-proj-3-tuple(v_802))) else fail-any) else fail-any)) in
        {369}let v_813: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_802)) && success?(1-proj-7-tuple(v_801))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if not-caught-fail(v_812) then (v_812,2-proj-3-tuple(v_810),3-proj-3-tuple(v_810)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {370}let v_814: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_813),2-proj-7-tuple(v_801),3-proj-7-tuple(v_801),4-proj-7-tuple(v_801),5-proj-7-tuple(v_801),6-proj-7-tuple(v_801),7-proj-7-tuple(v_801))) in
        {371}let (hs_815: handshakestate,re_816: key,plaintext_c: bitstring,valid_817: bool) = (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-7-tuple(v_801))))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if not-caught-fail(v_803) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (v_803 && 3-proj-3-tuple(v_813)) then (if not-caught-fail(v_814) then (v_814,getpublickey(3-proj-7-tuple(v_801)),2-proj-3-tuple(v_813),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {372}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_817);
        {373}insert statestore(bob,alice,statepack_d(hs_815))
    ) | (
        {400}get statestore(=bob,=alice,statepack_d(hs_818: handshakestate)) in
        {375}let v_819: bitstring = catch-fail(handshakestateunpack(hs_818)) in
        {376}let v_820: bitstring = catch-fail((empty,empty,empty)) in
        {377}let v_821: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_819))) in
        {378}let v_822: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {379}let v_823: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_822),2-proj-2-tuple(v_822),3-proj-3-tuple(v_821),msg_d(bob,alice))) in
        {380}let v_824: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_821))) in
        {381}let v_825: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_822))) && success?(1-proj-3-tuple(v_821))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-2-tuple(v_824))))) then cipherstatepack(1-proj-2-tuple(v_824),increment_nonce(2-proj-2-tuple(v_822))) else fail-any) else fail-any)) in
        {382}let v_826: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_821)) && success?(1-proj-3-tuple(v_821))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then (if not-caught-fail(v_823) then (if not-caught-fail(v_825) then (v_825,v_823) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {383}let v_827: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_826),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) in
        {384}let v_828: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_826)) && success?(symmetricstatepack(1-proj-2-tuple(v_826),2-proj-3-tuple(v_821),3-proj-3-tuple(v_821)))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then symmetricstatepack(1-proj-3-tuple(v_827),2-proj-3-tuple(v_827),hash(3-proj-3-tuple(v_827),2-proj-2-tuple(v_826))) else fail-any) else fail-any)) in
        {385}let v_829: bitstring = catch-fail((if success?(1-proj-7-tuple(v_819)) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-2-tuple(v_826))))) then (if not-caught-fail(v_828) then (v_828,2-proj-2-tuple(v_826)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {386}let v_830: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_829),2-proj-7-tuple(v_819),3-proj-7-tuple(v_819),4-proj-7-tuple(v_819),5-proj-7-tuple(v_819),6-proj-7-tuple(v_819),7-proj-7-tuple(v_819))) in
        {387}let v_831: bitstring = catch-fail(concat3(1-proj-3-tuple(v_820),2-proj-3-tuple(v_820),2-proj-2-tuple(v_829))) in
        {388}let v_832: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_829))) in
        {389}let v_833: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_832),zero)) in
        {390}let v_834: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_832),zero)) in
        {391}let v_835: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_832),zero)) in
        {392}let v_836: bitstring = catch-fail((if success?(2-proj-3-tuple(v_832)) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then (v_833,v_834,v_835) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {393}let v_837: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_836)) then cipherstatepack(1-proj-3-tuple(v_836),minnonce) else fail-any)) in
        {394}let v_838: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_836)) then cipherstatepack(2-proj-3-tuple(v_836),minnonce) else fail-any)) in
        {395}let v_839: bitstring = catch-fail((if success?(1-proj-2-tuple(v_829)) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (1-proj-2-tuple(v_829),v_837,v_838) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {396}let (hs_840: handshakestate,re_841: key,message_d_842: bitstring,cs1_843: cipherstate,cs2_844: cipherstate) = (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-7-tuple(v_819))))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-2-tuple(v_829))))) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (v_830,5-proj-7-tuple(v_819),v_831,2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {397}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {398}insert statestore(bob,alice,statepack_e(hs_840));
        {399}out(pub, message_d_842)
    ) | (
        {401}event LeakS(phase0,bob);
        {402}out(pub, key_s(bob))
    ) | (
        {403}phase 1;
        {404}event LeakS(phase1,bob);
        {405}out(pub, key_s(bob))
    )
) | (
    {406}let v_845: key = catch-fail(dhexp(key_s(bob),g)) in
    {407}let s_846: keypair = (if not-caught-fail(v_845) then keypairpack(v_845,key_s(bob)) else fail-any) in
    {408}out(pub, getpublickey(s_846));
    (
        {409}let e_847: keypair = keypairpack(empty,empty) in
        {410}let v_848: key = catch-fail(dhexp(key_s(charlie),g)) in
        {411}let rs_849: key = getpublickey((if not-caught-fail(v_848) then keypairpack(v_848,key_s(charlie)) else fail-any)) in
        {412}let re_850: key = empty in
        {413}let v_851: bitstring = catch-fail(hash(somename,empty)) in
        {414}let v_852: key = catch-fail(v_851) in
        {415}let v_853: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {416}let v_854: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then symmetricstatepack(v_853,v_852,v_851) else fail-any) else fail-any) else fail-any))) in
        {417}let v_855: symmetricstate = catch-fail((if success?((if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then symmetricstatepack(v_853,v_852,v_851) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),empty)) else fail-any) else fail-any)) in
        {418}let v_856: bitstring = catch-fail(symmetricstateunpack(v_855)) in
        {419}let v_857: symmetricstate = catch-fail((if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack(1-proj-3-tuple(v_856),2-proj-3-tuple(v_856),hash(3-proj-3-tuple(v_856),rs_849)) else fail-any)) in
        {420}let v_858: bitstring = catch-fail(symmetricstateunpack(v_857)) in
        {421}let v_859: symmetricstate = catch-fail((if success?(getpublickey(s_846)) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_858),hash(3-proj-3-tuple(v_858),getpublickey(s_846))) else fail-any) else fail-any)) in
        {422}let hs_860: handshakestate = (if not-caught-fail(v_855) then (if not-caught-fail(v_857) then (if not-caught-fail(v_859) then handshakestatepack(v_859,s_846,e_847,rs_849,re_850,empty,false) else fail-any) else fail-any) else fail-any) in
        {423}insert statestore(bob,charlie,statepack_a(hs_860))
    ) | (
        {445}get statestore(=bob,=charlie,statepack_a(hs_861: handshakestate)) in
        {424}in(pub, message_a_862: bitstring);
        {425}let v_863: bitstring = catch-fail(handshakestateunpack(hs_861)) in
        {426}let v_864: bitstring = catch-fail(deconcat3(message_a_862)) in
        {427}let v_865: bool = catch-fail(true) in
        {428}let v_866: key = catch-fail(1-proj-3-tuple(v_864)) in
        {429}let v_867: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_863))) in
        {430}let v_868: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_863)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then symmetricstatepack(1-proj-3-tuple(v_867),2-proj-3-tuple(v_867),hash(3-proj-3-tuple(v_867),v_866)) else fail-any) else fail-any)) in
        {431}let v_869: bitstring = catch-fail(symmetricstateunpack(v_868)) in
        {432}let v_870: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_869))) in
        {433}let v_871: aead = catch-fail(decrypt(1-proj-2-tuple(v_870),2-proj-2-tuple(v_870),3-proj-3-tuple(v_869),3-proj-3-tuple(v_864))) in
        {434}let v_872: bitstring = catch-fail(aeadunpack(v_871)) in
        {435}let v_873: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_869))) in
        {436}let v_874: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_870))) && success?(1-proj-3-tuple(v_869))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-2-tuple(v_873))))) then cipherstatepack(1-proj-2-tuple(v_873),increment_nonce(2-proj-2-tuple(v_870))) else fail-any) else fail-any)) in
        {437}let v_875: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_864)) && (success?(3-proj-3-tuple(v_869)) && success?(1-proj-3-tuple(v_869)))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-2-tuple(v_870))))) then (if not-caught-fail(v_871) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then (if not-caught-fail(v_874) then (v_874,3-proj-3-tuple(v_872),1-proj-3-tuple(v_872)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {438}let v_876: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_875),2-proj-3-tuple(v_869),3-proj-3-tuple(v_869)))) in
        {439}let v_877: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_864)) && success?(symmetricstatepack(1-proj-3-tuple(v_875),2-proj-3-tuple(v_869),3-proj-3-tuple(v_869)))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then symmetricstatepack(1-proj-3-tuple(v_876),2-proj-3-tuple(v_876),hash(3-proj-3-tuple(v_876),3-proj-3-tuple(v_864))) else fail-any) else fail-any)) in
        {440}let v_878: bitstring = catch-fail((if success?(3-proj-3-tuple(v_864)) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-3-tuple(v_869))))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if not-caught-fail(v_877) then (v_877,2-proj-3-tuple(v_875),3-proj-3-tuple(v_875)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {441}let v_879: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_878),2-proj-7-tuple(v_863),3-proj-7-tuple(v_863),4-proj-7-tuple(v_863),v_866,6-proj-7-tuple(v_863),7-proj-7-tuple(v_863))) in
        {442}let (hs_880: handshakestate,re_881: key,plaintext_a_882: bitstring,valid_883: bool) = (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-7-tuple(v_863))))) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (if not-caught-fail(v_865) then (if not-caught-fail(v_866) then (if not-caught-fail(v_868) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then (if (v_865 && 3-proj-3-tuple(v_878)) then (if not-caught-fail(v_879) then (v_879,getpublickey(3-proj-7-tuple(v_863)),2-proj-3-tuple(v_878),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {443}event RecvMsg(bob,charlie,stage_a,plaintext_a_882,valid_883);
        {444}insert statestore(bob,charlie,statepack_b(hs_880))
    ) | (
        {489}get statestore(=bob,=charlie,statepack_b(hs_884: handshakestate)) in
        {446}let v_885: bitstring = catch-fail(handshakestateunpack(hs_884)) in
        {447}let v_886: bitstring = catch-fail((empty,empty,empty)) in
        {448}let v_887: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {449}let v_888: keypair = catch-fail((if not-caught-fail(v_887) then keypairpack(v_887,key_e(bob,charlie)) else fail-any)) in
        {450}let v_889: bitstring = catch-fail(getpublickey(v_888)) in
        {451}let v_890: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_885))) in
        {452}let v_891: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_885)) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then symmetricstatepack(1-proj-3-tuple(v_890),2-proj-3-tuple(v_890),hash(3-proj-3-tuple(v_890),v_889)) else fail-any) else fail-any)) in
        {453}let v_892: bitstring = catch-fail(keypairunpack(v_888)) in
        {454}let v_893: bitstring = catch-fail(symmetricstateunpack(v_891)) in
        {455}let v_894: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_893),(if success?(5-proj-7-tuple(v_885)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),5-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {456}let v_895: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_893),(if success?(5-proj-7-tuple(v_885)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),5-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {457}let v_896: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_893),(if success?(5-proj-7-tuple(v_885)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),5-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {458}let v_897: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_885)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),5-proj-7-tuple(v_885)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_893))) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (v_894,v_895,v_896) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_898: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_885)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-2-tuple(v_892))))) then dhexp(2-proj-2-tuple(v_892),5-proj-7-tuple(v_885)) else fail-any) else fail-any)) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-3-tuple(v_893))))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_897)) then cipherstatepack(2-proj-3-tuple(v_897),minnonce) else fail-any),1-proj-3-tuple(v_897),3-proj-3-tuple(v_893)) else fail-any) else fail-any) else fail-any)) in
        {460}let v_899: bitstring = catch-fail(keypairunpack(v_888)) in
        {461}let v_900: bitstring = catch-fail(symmetricstateunpack(v_898)) in
        {462}let v_901: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_900),(if success?(4-proj-7-tuple(v_885)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),4-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {463}let v_902: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_900),(if success?(4-proj-7-tuple(v_885)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),4-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {464}let v_903: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_900),(if success?(4-proj-7-tuple(v_885)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),4-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {465}let v_904: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_885)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),4-proj-7-tuple(v_885)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_900))) then (if not-caught-fail(v_901) then (if not-caught-fail(v_902) then (if not-caught-fail(v_903) then (v_901,v_902,v_903) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {466}let v_905: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_885)) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-2-tuple(v_899))))) then dhexp(2-proj-2-tuple(v_899),4-proj-7-tuple(v_885)) else fail-any) else fail-any)) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_904)) then cipherstatepack(2-proj-3-tuple(v_904),minnonce) else fail-any),1-proj-3-tuple(v_904),3-proj-3-tuple(v_900)) else fail-any) else fail-any) else fail-any)) in
        {467}let v_906: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_885))) in
        {468}let v_907: bitstring = catch-fail(symmetricstateunpack(v_905)) in
        {469}let v_908: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_907),(if (success?(5-proj-7-tuple(v_885)) && success?(2-proj-7-tuple(v_885))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),5-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {470}let v_909: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_907),(if (success?(5-proj-7-tuple(v_885)) && success?(2-proj-7-tuple(v_885))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),5-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {471}let v_910: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_907),(if (success?(5-proj-7-tuple(v_885)) && success?(2-proj-7-tuple(v_885))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),5-proj-7-tuple(v_885)) else fail-any) else fail-any))) in
        {472}let v_911: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_885)) && success?(2-proj-7-tuple(v_885))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),5-proj-7-tuple(v_885)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_907))) then (if not-caught-fail(v_908) then (if not-caught-fail(v_909) then (if not-caught-fail(v_910) then (v_908,v_909,v_910) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {473}let v_912: symmetricstate = catch-fail((if success?((if (success?(5-proj-7-tuple(v_885)) && success?(2-proj-7-tuple(v_885))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then dhexp(2-proj-2-tuple(v_906),5-proj-7-tuple(v_885)) else fail-any) else fail-any)) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_911)) then cipherstatepack(2-proj-3-tuple(v_911),minnonce) else fail-any),1-proj-3-tuple(v_911),3-proj-3-tuple(v_907)) else fail-any) else fail-any) else fail-any)) in
        {474}let v_913: bitstring = catch-fail(symmetricstateunpack(v_912)) in
        {475}let v_914: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {476}let v_915: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_914),2-proj-2-tuple(v_914),3-proj-3-tuple(v_913),msg_b(bob,charlie))) in
        {477}let v_916: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_913))) in
        {478}let v_917: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_914))) && success?(1-proj-3-tuple(v_913))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then cipherstatepack(1-proj-2-tuple(v_916),increment_nonce(2-proj-2-tuple(v_914))) else fail-any) else fail-any)) in
        {479}let v_918: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_913)) && success?(1-proj-3-tuple(v_913))) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then (if not-caught-fail(v_915) then (if not-caught-fail(v_917) then (v_917,v_915) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {480}let v_919: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_918),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) in
        {481}let v_920: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_918)) && success?(symmetricstatepack(1-proj-2-tuple(v_918),2-proj-3-tuple(v_913),3-proj-3-tuple(v_913)))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_919),hash(3-proj-3-tuple(v_919),2-proj-2-tuple(v_918))) else fail-any) else fail-any)) in
        {482}let v_921: bitstring = catch-fail((if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-3-tuple(v_913))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-2-tuple(v_918))))) then (if not-caught-fail(v_920) then (v_920,2-proj-2-tuple(v_918)) else fail-any) else fail-any) else fail-any)) in
        {483}let v_922: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_921),2-proj-7-tuple(v_885),v_888,4-proj-7-tuple(v_885),5-proj-7-tuple(v_885),6-proj-7-tuple(v_885),7-proj-7-tuple(v_885))) in
        {484}let v_923: bitstring = catch-fail(concat3(v_889,2-proj-3-tuple(v_886),2-proj-2-tuple(v_921))) in
        {485}let (hs_924: handshakestate,re_925: key,message_b_926: bitstring) = (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-7-tuple(v_885))))) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (if not-caught-fail(v_891) then (if not-caught-fail(v_898) then (if not-caught-fail(v_905) then (if not-caught-fail(v_912) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-2-tuple(v_921))))) then (if not-caught-fail(v_922) then (if not-caught-fail(v_923) then (v_922,5-proj-7-tuple(v_885),v_923) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {486}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {487}insert statestore(bob,charlie,statepack_c(hs_924));
        {488}out(pub, message_b_926)
    ) | (
        {508}get statestore(=bob,=charlie,statepack_c(hs_927: handshakestate)) in
        {490}in(pub, message_c_928: bitstring);
        {491}let v_929: bitstring = catch-fail(handshakestateunpack(hs_927)) in
        {492}let v_930: bitstring = catch-fail(deconcat3(message_c_928)) in
        {493}let v_931: bool = catch-fail(true) in
        {494}let v_932: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_929))) in
        {495}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_932))) in
        {496}let v_934: aead = catch-fail(decrypt(1-proj-2-tuple(v_933),2-proj-2-tuple(v_933),3-proj-3-tuple(v_932),3-proj-3-tuple(v_930))) in
        {497}let v_935: bitstring = catch-fail(aeadunpack(v_934)) in
        {498}let v_936: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_932))) in
        {499}let v_937: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_933))) && success?(1-proj-3-tuple(v_932))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-2-tuple(v_936))))) then cipherstatepack(1-proj-2-tuple(v_936),increment_nonce(2-proj-2-tuple(v_933))) else fail-any) else fail-any)) in
        {500}let v_938: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_930)) && (success?(3-proj-3-tuple(v_932)) && success?(1-proj-3-tuple(v_932)))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then (if not-caught-fail(v_934) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if not-caught-fail(v_937) then (v_937,3-proj-3-tuple(v_935),1-proj-3-tuple(v_935)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_939: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_938),2-proj-3-tuple(v_932),3-proj-3-tuple(v_932)))) in
        {502}let v_940: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_930)) && success?(symmetricstatepack(1-proj-3-tuple(v_938),2-proj-3-tuple(v_932),3-proj-3-tuple(v_932)))) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then symmetricstatepack(1-proj-3-tuple(v_939),2-proj-3-tuple(v_939),hash(3-proj-3-tuple(v_939),3-proj-3-tuple(v_930))) else fail-any) else fail-any)) in
        {503}let v_941: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_930)) && success?(1-proj-7-tuple(v_929))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if not-caught-fail(v_940) then (v_940,2-proj-3-tuple(v_938),3-proj-3-tuple(v_938)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {504}let v_942: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_941),2-proj-7-tuple(v_929),3-proj-7-tuple(v_929),4-proj-7-tuple(v_929),5-proj-7-tuple(v_929),6-proj-7-tuple(v_929),7-proj-7-tuple(v_929))) in
        {505}let (hs_943: handshakestate,re_944: key,plaintext_c_945: bitstring,valid_946: bool) = (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-7-tuple(v_929))))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if not-caught-fail(v_931) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then (if (v_931 && 3-proj-3-tuple(v_941)) then (if not-caught-fail(v_942) then (v_942,getpublickey(3-proj-7-tuple(v_929)),2-proj-3-tuple(v_941),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {506}event RecvMsg(bob,charlie,stage_c,plaintext_c_945,valid_946);
        {507}insert statestore(bob,charlie,statepack_d(hs_943))
    ) | (
        {534}get statestore(=bob,=charlie,statepack_d(hs_947: handshakestate)) in
        {509}let v_948: bitstring = catch-fail(handshakestateunpack(hs_947)) in
        {510}let v_949: bitstring = catch-fail((empty,empty,empty)) in
        {511}let v_950: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_948))) in
        {512}let v_951: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_950))) in
        {513}let v_952: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_951),2-proj-2-tuple(v_951),3-proj-3-tuple(v_950),msg_d(bob,charlie))) in
        {514}let v_953: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_950))) in
        {515}let v_954: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_951))) && success?(1-proj-3-tuple(v_950))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-2-tuple(v_953))))) then cipherstatepack(1-proj-2-tuple(v_953),increment_nonce(2-proj-2-tuple(v_951))) else fail-any) else fail-any)) in
        {516}let v_955: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(1-proj-3-tuple(v_950))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then (if not-caught-fail(v_952) then (if not-caught-fail(v_954) then (v_954,v_952) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {517}let v_956: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_955),2-proj-3-tuple(v_950),3-proj-3-tuple(v_950)))) in
        {518}let v_957: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_955)) && success?(symmetricstatepack(1-proj-2-tuple(v_955),2-proj-3-tuple(v_950),3-proj-3-tuple(v_950)))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then symmetricstatepack(1-proj-3-tuple(v_956),2-proj-3-tuple(v_956),hash(3-proj-3-tuple(v_956),2-proj-2-tuple(v_955))) else fail-any) else fail-any)) in
        {519}let v_958: bitstring = catch-fail((if success?(1-proj-7-tuple(v_948)) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-2-tuple(v_955))))) then (if not-caught-fail(v_957) then (v_957,2-proj-2-tuple(v_955)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {520}let v_959: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_958),2-proj-7-tuple(v_948),3-proj-7-tuple(v_948),4-proj-7-tuple(v_948),5-proj-7-tuple(v_948),6-proj-7-tuple(v_948),7-proj-7-tuple(v_948))) in
        {521}let v_960: bitstring = catch-fail(concat3(1-proj-3-tuple(v_949),2-proj-3-tuple(v_949),2-proj-2-tuple(v_958))) in
        {522}let v_961: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_958))) in
        {523}let v_962: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_961),zero)) in
        {524}let v_963: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_961),zero)) in
        {525}let v_964: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_961),zero)) in
        {526}let v_965: bitstring = catch-fail((if success?(2-proj-3-tuple(v_961)) then (if not-caught-fail(v_962) then (if not-caught-fail(v_963) then (if not-caught-fail(v_964) then (v_962,v_963,v_964) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {527}let v_966: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_965)) then cipherstatepack(1-proj-3-tuple(v_965),minnonce) else fail-any)) in
        {528}let v_967: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_965)) then cipherstatepack(2-proj-3-tuple(v_965),minnonce) else fail-any)) in
        {529}let v_968: bitstring = catch-fail((if success?(1-proj-2-tuple(v_958)) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-3-tuple(v_965))))) then (if not-caught-fail(v_966) then (if not-caught-fail(v_967) then (1-proj-2-tuple(v_958),v_966,v_967) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {530}let (hs_969: handshakestate,re_970: key,message_d_971: bitstring,cs1_972: cipherstate,cs2_973: cipherstate) = (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-7-tuple(v_948))))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then (if not-caught-fail(v_959) then (if not-caught-fail(v_960) then (if (not-caught-fail(v_968) && success?(is-true(success?(1-proj-3-tuple(v_968))))) then (v_959,5-proj-7-tuple(v_948),v_960,2-proj-3-tuple(v_968),3-proj-3-tuple(v_968)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {531}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {532}insert statestore(bob,charlie,statepack_e(hs_969));
        {533}out(pub, message_d_971)
    ) | (
        {535}event LeakS(phase0,bob);
        {536}out(pub, key_s(bob))
    ) | (
        {537}phase 1;
        {538}event LeakS(phase1,bob);
        {539}out(pub, key_s(bob))
    )
) | (
    {540}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1054,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1054,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 195 rules in the queue.
400 rules inserted. The rule base contains 399 rules. 21 rules in the queue.
600 rules inserted. The rule base contains 577 rules. 68 rules in the queue.
800 rules inserted. The rule base contains 767 rules. 101 rules in the queue.
1000 rules inserted. The rule base contains 921 rules. 124 rules in the queue.
1200 rules inserted. The rule base contains 1000 rules. 136 rules in the queue.
1400 rules inserted. The rule base contains 1158 rules. 142 rules in the queue.
1600 rules inserted. The rule base contains 1334 rules. 203 rules in the queue.
1800 rules inserted. The rule base contains 1514 rules. 242 rules in the queue.
2000 rules inserted. The rule base contains 1670 rules. 282 rules in the queue.
2200 rules inserted. The rule base contains 1845 rules. 323 rules in the queue.
2400 rules inserted. The rule base contains 2014 rules. 326 rules in the queue.
2600 rules inserted. The rule base contains 2188 rules. 303 rules in the queue.
2800 rules inserted. The rule base contains 2357 rules. 303 rules in the queue.
3000 rules inserted. The rule base contains 2486 rules. 325 rules in the queue.
3200 rules inserted. The rule base contains 2609 rules. 321 rules in the queue.
3400 rules inserted. The rule base contains 2733 rules. 327 rules in the queue.
3600 rules inserted. The rule base contains 2866 rules. 341 rules in the queue.
3800 rules inserted. The rule base contains 2998 rules. 344 rules in the queue.
4000 rules inserted. The rule base contains 3175 rules. 343 rules in the queue.
4200 rules inserted. The rule base contains 3308 rules. 338 rules in the queue.
4400 rules inserted. The rule base contains 3428 rules. 289 rules in the queue.
4600 rules inserted. The rule base contains 3570 rules. 297 rules in the queue.
4800 rules inserted. The rule base contains 3699 rules. 282 rules in the queue.
5000 rules inserted. The rule base contains 3800 rules. 274 rules in the queue.
5200 rules inserted. The rule base contains 3931 rules. 283 rules in the queue.
5400 rules inserted. The rule base contains 4021 rules. 245 rules in the queue.
5600 rules inserted. The rule base contains 4131 rules. 170 rules in the queue.
5800 rules inserted. The rule base contains 4224 rules. 115 rules in the queue.
6000 rules inserted. The rule base contains 4222 rules. 26 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1054,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {42}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {39}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {41}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {274}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {42}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {39}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {41}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {274}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {42}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {39}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {41}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {274}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {42}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {39}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {41}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {274}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

11. By 1, the attacker may have the channel pub.
By 10, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

12. Using the function empty the attacker may obtain empty.
attacker(empty).

13. Using the function somename the attacker may obtain somename.
attacker(somename).

14. By 13, the attacker may know somename.
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty).
By 12, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 11, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

22. By 21, the attacker may know empty in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

23. By 22, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1054,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1054,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1054,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1054,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1054,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1054,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
