File "NK.noise.active.pv", line 253, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 262, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 263, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 263, character 36:
Warning: identifier h rebound.
File "NK.noise.active.pv", line 272, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 278, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 304, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 305, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 308, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 317, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 318, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 339, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 340, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 362, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 366, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 368, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 536, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 538, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 278, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 528, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 529, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 272, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 521, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 362, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 365, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 366, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 368, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 253, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 278, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 513, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 304, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 305, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 308, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 309, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 309, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 310, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 253, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 272, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 293, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 589, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 590, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 339, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 339, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 340, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 272, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 580, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 582, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 278, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 573, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 317, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 318, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 321, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 253, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 272, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 566, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 351, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 352, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 354, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 253, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 278, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 279, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_116,dhexp(a_115,g)) = dhexp(a_115,dhexp(b_116,g))
Completing equations...
Completed equations:
dhexp(b_116,dhexp(a_115,g)) = dhexp(a_115,dhexp(b_116,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
{4}out(pub, sid);
(
    {5}let s_513: keypair = keypairpack(empty,empty) in
    (
        {6}let e_514: keypair = keypairpack(empty,empty) in
        {7}let v_515: key = catch-fail(dhexp(key_s(bob),g)) in
        {8}let rs_516: key = getpublickey((if not-caught-fail(v_515) then keypairpack(v_515,key_s(bob)) else fail-any)) in
        {9}let re_517: key = empty in
        {10}let v_518: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_519: key = catch-fail(v_518) in
        {12}let v_520: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_521: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then symmetricstatepack(v_520,v_519,v_518) else fail-any) else fail-any) else fail-any))) in
        {14}let v_522: symmetricstate = catch-fail((if success?((if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then symmetricstatepack(v_520,v_519,v_518) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then symmetricstatepack(1-proj-3-tuple(v_521),2-proj-3-tuple(v_521),hash(3-proj-3-tuple(v_521),empty)) else fail-any) else fail-any)) in
        {15}let v_523: bitstring = catch-fail(symmetricstateunpack(v_522)) in
        {16}let v_524: symmetricstate = catch-fail((if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then symmetricstatepack(1-proj-3-tuple(v_523),2-proj-3-tuple(v_523),hash(3-proj-3-tuple(v_523),rs_516)) else fail-any)) in
        {17}let hs: handshakestate = (if not-caught-fail(v_522) then (if not-caught-fail(v_524) then handshakestatepack(v_524,s_513,e_514,rs_516,re_517,empty,true) else fail-any) else fail-any) in
        {18}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {48}get statestore(=alice,=bob,=sid,statepack_a(hs_525: handshakestate)) in
        {19}let v_526: bitstring = catch-fail(handshakestateunpack(hs_525)) in
        {20}let v_527: bitstring = catch-fail((empty,empty,empty)) in
        {21}let v_528: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {22}let v_529: keypair = catch-fail((if not-caught-fail(v_528) then keypairpack(v_528,key_e(alice,bob,sid)) else fail-any)) in
        {23}let v_530: bitstring = catch-fail(getpublickey(v_529)) in
        {24}let v_531: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_526))) in
        {25}let v_532: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_526)) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then symmetricstatepack(1-proj-3-tuple(v_531),2-proj-3-tuple(v_531),hash(3-proj-3-tuple(v_531),v_530)) else fail-any) else fail-any)) in
        {26}let v_533: bitstring = catch-fail(keypairunpack(v_529)) in
        {27}let v_534: bitstring = catch-fail(symmetricstateunpack(v_532)) in
        {28}let v_535: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_534),(if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
        {29}let v_536: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_534),(if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
        {30}let v_537: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_534),(if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
        {31}let v_538: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_534))) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (v_535,v_536,v_537) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_539: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any)) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_538)) then cipherstatepack(2-proj-3-tuple(v_538),minnonce) else fail-any),1-proj-3-tuple(v_538),3-proj-3-tuple(v_534)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_540: bitstring = catch-fail(symmetricstateunpack(v_539)) in
        {34}let v_541: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_540))) in
        {35}let v_542: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_541),2-proj-2-tuple(v_541),3-proj-3-tuple(v_540),msg_a(alice,bob))) in
        {36}let v_543: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_540))) in
        {37}let v_544: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_541))) && success?(1-proj-3-tuple(v_540))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then cipherstatepack(1-proj-2-tuple(v_543),increment_nonce(2-proj-2-tuple(v_541))) else fail-any) else fail-any)) in
        {38}let v_545: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_540)) && success?(1-proj-3-tuple(v_540))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-2-tuple(v_541))))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_544) then (v_544,v_542) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {39}let v_546: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_545),2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)))) in
        {40}let v_547: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_545)) && success?(symmetricstatepack(1-proj-2-tuple(v_545),2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then symmetricstatepack(1-proj-3-tuple(v_546),2-proj-3-tuple(v_546),hash(3-proj-3-tuple(v_546),2-proj-2-tuple(v_545))) else fail-any) else fail-any)) in
        {41}let v_548: bitstring = catch-fail((if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then (if not-caught-fail(v_547) then (v_547,2-proj-2-tuple(v_545)) else fail-any) else fail-any) else fail-any)) in
        {42}let v_549: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_548),2-proj-7-tuple(v_526),v_529,4-proj-7-tuple(v_526),5-proj-7-tuple(v_526),6-proj-7-tuple(v_526),7-proj-7-tuple(v_526))) in
        {43}let v_550: bitstring = catch-fail(concat3(v_530,2-proj-3-tuple(v_527),2-proj-2-tuple(v_548))) in
        {44}let (hs_551: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-7-tuple(v_526))))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (if not-caught-fail(v_532) then (if not-caught-fail(v_539) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (v_549,v_550) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {45}event SendMsg(alice,bob,stage_a(getpublickey(handshakestategets(hs_551)),handshakestategetrs(hs_551),getpublickey(handshakestategete(hs_551)),handshakestategetre(hs_551)),msg_a(alice,bob),true);
        {46}insert statestore(alice,bob,sid,statepack_b(hs_551));
        {47}out(pub, message_a)
    ) | (
        {85}get statestore(=alice,=bob,=sid,statepack_b(hs_552: handshakestate)) in
        {49}in(pub, message_b: bitstring);
        {50}let v_553: bitstring = catch-fail(handshakestateunpack(hs_552)) in
        {51}let v_554: bitstring = catch-fail(deconcat3(message_b)) in
        {52}let v_555: bool = catch-fail(true) in
        {53}let v_556: key = catch-fail(1-proj-3-tuple(v_554)) in
        {54}let v_557: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_553))) in
        {55}let v_558: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_553)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),v_556)) else fail-any) else fail-any)) in
        {56}let v_559: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_553))) in
        {57}let v_560: bitstring = catch-fail(symmetricstateunpack(v_558)) in
        {58}let v_561: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
        {59}let v_562: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
        {60}let v_563: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
        {61}let v_564: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_560))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then (v_561,v_562,v_563) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {62}let v_565: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_564)) then cipherstatepack(2-proj-3-tuple(v_564),minnonce) else fail-any),1-proj-3-tuple(v_564),3-proj-3-tuple(v_560)) else fail-any) else fail-any) else fail-any)) in
        {63}let v_566: bitstring = catch-fail(symmetricstateunpack(v_565)) in
        {64}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_566))) in
        {65}let v_568: aead = catch-fail(decrypt(1-proj-2-tuple(v_567),2-proj-2-tuple(v_567),3-proj-3-tuple(v_566),3-proj-3-tuple(v_554))) in
        {66}let v_569: bitstring = catch-fail(aeadunpack(v_568)) in
        {67}let v_570: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_566))) in
        {68}let v_571: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_567))) && success?(1-proj-3-tuple(v_566))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then cipherstatepack(1-proj-2-tuple(v_570),increment_nonce(2-proj-2-tuple(v_567))) else fail-any) else fail-any)) in
        {69}let v_572: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_554)) && (success?(3-proj-3-tuple(v_566)) && success?(1-proj-3-tuple(v_566)))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then (if not-caught-fail(v_568) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,3-proj-3-tuple(v_569),1-proj-3-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {70}let v_573: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_572),2-proj-3-tuple(v_566),3-proj-3-tuple(v_566)))) in
        {71}let v_574: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_554)) && success?(symmetricstatepack(1-proj-3-tuple(v_572),2-proj-3-tuple(v_566),3-proj-3-tuple(v_566)))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),3-proj-3-tuple(v_554))) else fail-any) else fail-any)) in
        {72}let v_575: bitstring = catch-fail((if success?(3-proj-3-tuple(v_554)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if not-caught-fail(v_574) then (v_574,2-proj-3-tuple(v_572),3-proj-3-tuple(v_572)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_576: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_575),2-proj-7-tuple(v_553),3-proj-7-tuple(v_553),4-proj-7-tuple(v_553),v_556,6-proj-7-tuple(v_553),7-proj-7-tuple(v_553))) in
        {74}let v_577: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_575))) in
        {75}let v_578: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_577),zero)) in
        {76}let v_579: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_577),zero)) in
        {77}let v_580: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_577),zero)) in
        {78}let v_581: bitstring = catch-fail((if success?(2-proj-3-tuple(v_577)) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (v_578,v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_582: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_581)) then cipherstatepack(1-proj-3-tuple(v_581),minnonce) else fail-any)) in
        {80}let v_583: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_581)) then cipherstatepack(2-proj-3-tuple(v_581),minnonce) else fail-any)) in
        {81}let v_584: bitstring = catch-fail((if success?(1-proj-3-tuple(v_575)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (1-proj-3-tuple(v_575),v_582,v_583) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {82}let (hs_585: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-7-tuple(v_553))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (if not-caught-fail(v_558) then (if not-caught-fail(v_565) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then (if (v_555 && 3-proj-3-tuple(v_575)) then (if not-caught-fail(v_576) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (v_576,2-proj-3-tuple(v_575),true,2-proj-3-tuple(v_584),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {83}event RecvMsg(alice,bob,stage_b(getpublickey(handshakestategets(hs_585)),handshakestategetrs(hs_585),getpublickey(handshakestategete(hs_585)),handshakestategetre(hs_585)),plaintext_b,valid);
        {84}insert statestore(alice,bob,sid,statepack_c(hs_585,cs1,cs2))
    ) | (
        {86}!
        {105}get statestore(=alice,=bob,=sid,statepack_c(hs_586: handshakestate,cs1_587: cipherstate,cs2_588: cipherstate)) in
        {87}let hs_589: handshakestate = handshakestatesetcs(hs_586,cs1_587) in
        {88}let v_590: bitstring = catch-fail(handshakestateunpack(hs_589)) in
        {89}let v_591: bitstring = catch-fail((empty,empty,empty)) in
        {90}let v_592: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_590))) in
        {91}let v_593: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
        {92}let v_594: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_593),2-proj-2-tuple(v_593),3-proj-3-tuple(v_592),msg_c(alice,bob))) in
        {93}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
        {94}let v_596: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_593))) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then cipherstatepack(1-proj-2-tuple(v_595),increment_nonce(2-proj-2-tuple(v_593))) else fail-any) else fail-any)) in
        {95}let v_597: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_592)) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_596) then (v_596,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {96}let v_598: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) in
        {97}let v_599: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_597)) && success?(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack(1-proj-3-tuple(v_598),2-proj-3-tuple(v_598),hash(3-proj-3-tuple(v_598),2-proj-2-tuple(v_597))) else fail-any) else fail-any)) in
        {98}let v_600: bitstring = catch-fail((if success?(1-proj-7-tuple(v_590)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,2-proj-2-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_601: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_600),2-proj-7-tuple(v_590),3-proj-7-tuple(v_590),4-proj-7-tuple(v_590),5-proj-7-tuple(v_590),6-proj-7-tuple(v_590),7-proj-7-tuple(v_590))) in
        {100}let v_602: bitstring = catch-fail(concat3(1-proj-3-tuple(v_591),2-proj-3-tuple(v_591),2-proj-2-tuple(v_600))) in
        {101}let (hs_603: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-7-tuple(v_590))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {102}event SendMsg(alice,bob,stage_c(getpublickey(handshakestategets(hs_603)),handshakestategetrs(hs_603),getpublickey(handshakestategete(hs_603)),handshakestategetre(hs_603)),msg_c(alice,bob),true);
        {103}insert statestore(alice,bob,sid,statepack_d(hs_603,handshakestategetcs(hs_603),cs2_588));
        {104}out(pub, message_c)
    ) | (
        {106}!
        {126}get statestore(=alice,=bob,=sid,statepack_d(hs_604: handshakestate,cs1_605: cipherstate,cs2_606: cipherstate)) in
        {107}let hs_607: handshakestate = handshakestatesetcs(hs_604,cs2_606) in
        {108}in(pub, message_d: bitstring);
        {109}let v_608: bitstring = catch-fail(handshakestateunpack(hs_607)) in
        {110}let v_609: bitstring = catch-fail(deconcat3(message_d)) in
        {111}let v_610: bool = catch-fail(true) in
        {112}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_608))) in
        {113}let v_612: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_611))) in
        {114}let v_613: aead = catch-fail(decrypt(1-proj-2-tuple(v_612),2-proj-2-tuple(v_612),3-proj-3-tuple(v_611),3-proj-3-tuple(v_609))) in
        {115}let v_614: bitstring = catch-fail(aeadunpack(v_613)) in
        {116}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_611))) in
        {117}let v_616: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_612))) && success?(1-proj-3-tuple(v_611))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then cipherstatepack(1-proj-2-tuple(v_615),increment_nonce(2-proj-2-tuple(v_612))) else fail-any) else fail-any)) in
        {118}let v_617: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_609)) && (success?(3-proj-3-tuple(v_611)) && success?(1-proj-3-tuple(v_611)))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-2-tuple(v_612))))) then (if not-caught-fail(v_613) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if not-caught-fail(v_616) then (v_616,3-proj-3-tuple(v_614),1-proj-3-tuple(v_614)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let v_618: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_617),2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)))) in
        {120}let v_619: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_609)) && success?(symmetricstatepack(1-proj-3-tuple(v_617),2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),3-proj-3-tuple(v_609))) else fail-any) else fail-any)) in
        {121}let v_620: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_609)) && success?(1-proj-7-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if not-caught-fail(v_619) then (v_619,2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_621: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_620),2-proj-7-tuple(v_608),3-proj-7-tuple(v_608),4-proj-7-tuple(v_608),5-proj-7-tuple(v_608),6-proj-7-tuple(v_608),7-proj-7-tuple(v_608))) in
        {123}let (hs_622: handshakestate,plaintext_d: bitstring,valid_623: bool) = (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-7-tuple(v_608))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if not-caught-fail(v_610) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (v_610 && 3-proj-3-tuple(v_620)) then (if not-caught-fail(v_621) then (v_621,2-proj-3-tuple(v_620),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {124}event RecvMsg(alice,bob,stage_d(getpublickey(handshakestategets(hs_622)),handshakestategetrs(hs_622),getpublickey(handshakestategete(hs_622)),handshakestategetre(hs_622)),plaintext_d,valid_623);
        {125}event RecvEnd(valid_623)
    ) | (
        {127}event LeakS(phase0,alice);
        {128}out(pub, key_s(alice))
    ) | (
        {129}phase 1;
        {130}event LeakS(phase1,alice);
        {131}out(pub, key_s(alice))
    )
) | (
    {132}let s_624: keypair = keypairpack(empty,empty) in
    (
        {133}let e_625: keypair = keypairpack(empty,empty) in
        {134}let v_626: key = catch-fail(dhexp(key_s(charlie),g)) in
        {135}let rs_627: key = getpublickey((if not-caught-fail(v_626) then keypairpack(v_626,key_s(charlie)) else fail-any)) in
        {136}let re_628: key = empty in
        {137}let v_629: bitstring = catch-fail(hash(somename,empty)) in
        {138}let v_630: key = catch-fail(v_629) in
        {139}let v_631: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {140}let v_632: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then symmetricstatepack(v_631,v_630,v_629) else fail-any) else fail-any) else fail-any))) in
        {141}let v_633: symmetricstate = catch-fail((if success?((if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then symmetricstatepack(v_631,v_630,v_629) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then symmetricstatepack(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),hash(3-proj-3-tuple(v_632),empty)) else fail-any) else fail-any)) in
        {142}let v_634: bitstring = catch-fail(symmetricstateunpack(v_633)) in
        {143}let v_635: symmetricstate = catch-fail((if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then symmetricstatepack(1-proj-3-tuple(v_634),2-proj-3-tuple(v_634),hash(3-proj-3-tuple(v_634),rs_627)) else fail-any)) in
        {144}let hs_636: handshakestate = (if not-caught-fail(v_633) then (if not-caught-fail(v_635) then handshakestatepack(v_635,s_624,e_625,rs_627,re_628,empty,true) else fail-any) else fail-any) in
        {145}insert statestore(alice,charlie,sid,statepack_a(hs_636))
    ) | (
        {175}get statestore(=alice,=charlie,=sid,statepack_a(hs_637: handshakestate)) in
        {146}let v_638: bitstring = catch-fail(handshakestateunpack(hs_637)) in
        {147}let v_639: bitstring = catch-fail((empty,empty,empty)) in
        {148}let v_640: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {149}let v_641: keypair = catch-fail((if not-caught-fail(v_640) then keypairpack(v_640,key_e(alice,charlie,sid)) else fail-any)) in
        {150}let v_642: bitstring = catch-fail(getpublickey(v_641)) in
        {151}let v_643: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_638))) in
        {152}let v_644: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_638)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then symmetricstatepack(1-proj-3-tuple(v_643),2-proj-3-tuple(v_643),hash(3-proj-3-tuple(v_643),v_642)) else fail-any) else fail-any)) in
        {153}let v_645: bitstring = catch-fail(keypairunpack(v_641)) in
        {154}let v_646: bitstring = catch-fail(symmetricstateunpack(v_644)) in
        {155}let v_647: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_646),(if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
        {156}let v_648: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_646),(if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
        {157}let v_649: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_646),(if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
        {158}let v_650: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_646))) then (if not-caught-fail(v_647) then (if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (v_647,v_648,v_649) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_651: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_650)) then cipherstatepack(2-proj-3-tuple(v_650),minnonce) else fail-any),1-proj-3-tuple(v_650),3-proj-3-tuple(v_646)) else fail-any) else fail-any) else fail-any)) in
        {160}let v_652: bitstring = catch-fail(symmetricstateunpack(v_651)) in
        {161}let v_653: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {162}let v_654: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_653),2-proj-2-tuple(v_653),3-proj-3-tuple(v_652),msg_a(alice,charlie))) in
        {163}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {164}let v_656: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_653))) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then cipherstatepack(1-proj-2-tuple(v_655),increment_nonce(2-proj-2-tuple(v_653))) else fail-any) else fail-any)) in
        {165}let v_657: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_652)) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then (v_656,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {166}let v_658: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) in
        {167}let v_659: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_657)) && success?(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
        {168}let v_660: bitstring = catch-fail((if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_659) then (v_659,2-proj-2-tuple(v_657)) else fail-any) else fail-any) else fail-any)) in
        {169}let v_661: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_660),2-proj-7-tuple(v_638),v_641,4-proj-7-tuple(v_638),5-proj-7-tuple(v_638),6-proj-7-tuple(v_638),7-proj-7-tuple(v_638))) in
        {170}let v_662: bitstring = catch-fail(concat3(v_642,2-proj-3-tuple(v_639),2-proj-2-tuple(v_660))) in
        {171}let (hs_663: handshakestate,message_a_664: bitstring) = (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-7-tuple(v_638))))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (if not-caught-fail(v_644) then (if not-caught-fail(v_651) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then (if not-caught-fail(v_661) then (if not-caught-fail(v_662) then (v_661,v_662) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {172}event SendMsg(alice,charlie,stage_a(getpublickey(handshakestategets(hs_663)),handshakestategetrs(hs_663),getpublickey(handshakestategete(hs_663)),handshakestategetre(hs_663)),msg_a(alice,charlie),true);
        {173}insert statestore(alice,charlie,sid,statepack_b(hs_663));
        {174}out(pub, message_a_664)
    ) | (
        {212}get statestore(=alice,=charlie,=sid,statepack_b(hs_665: handshakestate)) in
        {176}in(pub, message_b_666: bitstring);
        {177}let v_667: bitstring = catch-fail(handshakestateunpack(hs_665)) in
        {178}let v_668: bitstring = catch-fail(deconcat3(message_b_666)) in
        {179}let v_669: bool = catch-fail(true) in
        {180}let v_670: key = catch-fail(1-proj-3-tuple(v_668)) in
        {181}let v_671: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_667))) in
        {182}let v_672: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_667)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then symmetricstatepack(1-proj-3-tuple(v_671),2-proj-3-tuple(v_671),hash(3-proj-3-tuple(v_671),v_670)) else fail-any) else fail-any)) in
        {183}let v_673: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_667))) in
        {184}let v_674: bitstring = catch-fail(symmetricstateunpack(v_672)) in
        {185}let v_675: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
        {186}let v_676: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
        {187}let v_677: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
        {188}let v_678: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_674))) then (if not-caught-fail(v_675) then (if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (v_675,v_676,v_677) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_679: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any)) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_678)) then cipherstatepack(2-proj-3-tuple(v_678),minnonce) else fail-any),1-proj-3-tuple(v_678),3-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any)) in
        {190}let v_680: bitstring = catch-fail(symmetricstateunpack(v_679)) in
        {191}let v_681: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_680))) in
        {192}let v_682: aead = catch-fail(decrypt(1-proj-2-tuple(v_681),2-proj-2-tuple(v_681),3-proj-3-tuple(v_680),3-proj-3-tuple(v_668))) in
        {193}let v_683: bitstring = catch-fail(aeadunpack(v_682)) in
        {194}let v_684: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_680))) in
        {195}let v_685: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_681))) && success?(1-proj-3-tuple(v_680))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then cipherstatepack(1-proj-2-tuple(v_684),increment_nonce(2-proj-2-tuple(v_681))) else fail-any) else fail-any)) in
        {196}let v_686: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && (success?(3-proj-3-tuple(v_680)) && success?(1-proj-3-tuple(v_680)))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then (if not-caught-fail(v_682) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if not-caught-fail(v_685) then (v_685,3-proj-3-tuple(v_683),1-proj-3-tuple(v_683)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_687: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_686),2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)))) in
        {198}let v_688: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(symmetricstatepack(1-proj-3-tuple(v_686),2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then symmetricstatepack(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),hash(3-proj-3-tuple(v_687),3-proj-3-tuple(v_668))) else fail-any) else fail-any)) in
        {199}let v_689: bitstring = catch-fail((if success?(3-proj-3-tuple(v_668)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if not-caught-fail(v_688) then (v_688,2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {200}let v_690: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_689),2-proj-7-tuple(v_667),3-proj-7-tuple(v_667),4-proj-7-tuple(v_667),v_670,6-proj-7-tuple(v_667),7-proj-7-tuple(v_667))) in
        {201}let v_691: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_689))) in
        {202}let v_692: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_691),zero)) in
        {203}let v_693: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_691),zero)) in
        {204}let v_694: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_691),zero)) in
        {205}let v_695: bitstring = catch-fail((if success?(2-proj-3-tuple(v_691)) then (if not-caught-fail(v_692) then (if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (v_692,v_693,v_694) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_696: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_695)) then cipherstatepack(1-proj-3-tuple(v_695),minnonce) else fail-any)) in
        {207}let v_697: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_695)) then cipherstatepack(2-proj-3-tuple(v_695),minnonce) else fail-any)) in
        {208}let v_698: bitstring = catch-fail((if success?(1-proj-3-tuple(v_689)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (1-proj-3-tuple(v_689),v_696,v_697) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let (hs_699: handshakestate,plaintext_b_700: bitstring,valid_701: bool,cs1_702: cipherstate,cs2_703: cipherstate) = (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-7-tuple(v_667))))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (if not-caught-fail(v_672) then (if not-caught-fail(v_679) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if (v_669 && 3-proj-3-tuple(v_689)) then (if not-caught-fail(v_690) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (v_690,2-proj-3-tuple(v_689),true,2-proj-3-tuple(v_698),3-proj-3-tuple(v_698)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {210}event RecvMsg(alice,charlie,stage_b(getpublickey(handshakestategets(hs_699)),handshakestategetrs(hs_699),getpublickey(handshakestategete(hs_699)),handshakestategetre(hs_699)),plaintext_b_700,valid_701);
        {211}insert statestore(alice,charlie,sid,statepack_c(hs_699,cs1_702,cs2_703))
    ) | (
        {213}!
        {232}get statestore(=alice,=charlie,=sid,statepack_c(hs_704: handshakestate,cs1_705: cipherstate,cs2_706: cipherstate)) in
        {214}let hs_707: handshakestate = handshakestatesetcs(hs_704,cs1_705) in
        {215}let v_708: bitstring = catch-fail(handshakestateunpack(hs_707)) in
        {216}let v_709: bitstring = catch-fail((empty,empty,empty)) in
        {217}let v_710: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_708))) in
        {218}let v_711: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_710))) in
        {219}let v_712: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_711),2-proj-2-tuple(v_711),3-proj-3-tuple(v_710),msg_c(alice,charlie))) in
        {220}let v_713: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_710))) in
        {221}let v_714: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_711))) && success?(1-proj-3-tuple(v_710))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then cipherstatepack(1-proj-2-tuple(v_713),increment_nonce(2-proj-2-tuple(v_711))) else fail-any) else fail-any)) in
        {222}let v_715: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_710)) && success?(1-proj-3-tuple(v_710))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_714) then (v_714,v_712) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {223}let v_716: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_715),2-proj-3-tuple(v_710),3-proj-3-tuple(v_710)))) in
        {224}let v_717: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_715)) && success?(symmetricstatepack(1-proj-2-tuple(v_715),2-proj-3-tuple(v_710),3-proj-3-tuple(v_710)))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then symmetricstatepack(1-proj-3-tuple(v_716),2-proj-3-tuple(v_716),hash(3-proj-3-tuple(v_716),2-proj-2-tuple(v_715))) else fail-any) else fail-any)) in
        {225}let v_718: bitstring = catch-fail((if success?(1-proj-7-tuple(v_708)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then (if not-caught-fail(v_717) then (v_717,2-proj-2-tuple(v_715)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {226}let v_719: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_718),2-proj-7-tuple(v_708),3-proj-7-tuple(v_708),4-proj-7-tuple(v_708),5-proj-7-tuple(v_708),6-proj-7-tuple(v_708),7-proj-7-tuple(v_708))) in
        {227}let v_720: bitstring = catch-fail(concat3(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),2-proj-2-tuple(v_718))) in
        {228}let (hs_721: handshakestate,message_c_722: bitstring) = (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-7-tuple(v_708))))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (v_719,v_720) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {229}event SendMsg(alice,charlie,stage_c(getpublickey(handshakestategets(hs_721)),handshakestategetrs(hs_721),getpublickey(handshakestategete(hs_721)),handshakestategetre(hs_721)),msg_c(alice,charlie),true);
        {230}insert statestore(alice,charlie,sid,statepack_d(hs_721,handshakestategetcs(hs_721),cs2_706));
        {231}out(pub, message_c_722)
    ) | (
        {233}!
        {253}get statestore(=alice,=charlie,=sid,statepack_d(hs_723: handshakestate,cs1_724: cipherstate,cs2_725: cipherstate)) in
        {234}let hs_726: handshakestate = handshakestatesetcs(hs_723,cs2_725) in
        {235}in(pub, message_d_727: bitstring);
        {236}let v_728: bitstring = catch-fail(handshakestateunpack(hs_726)) in
        {237}let v_729: bitstring = catch-fail(deconcat3(message_d_727)) in
        {238}let v_730: bool = catch-fail(true) in
        {239}let v_731: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_728))) in
        {240}let v_732: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_731))) in
        {241}let v_733: aead = catch-fail(decrypt(1-proj-2-tuple(v_732),2-proj-2-tuple(v_732),3-proj-3-tuple(v_731),3-proj-3-tuple(v_729))) in
        {242}let v_734: bitstring = catch-fail(aeadunpack(v_733)) in
        {243}let v_735: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_731))) in
        {244}let v_736: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_732))) && success?(1-proj-3-tuple(v_731))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then cipherstatepack(1-proj-2-tuple(v_735),increment_nonce(2-proj-2-tuple(v_732))) else fail-any) else fail-any)) in
        {245}let v_737: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_729)) && (success?(3-proj-3-tuple(v_731)) && success?(1-proj-3-tuple(v_731)))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-2-tuple(v_732))))) then (if not-caught-fail(v_733) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then (if not-caught-fail(v_736) then (v_736,3-proj-3-tuple(v_734),1-proj-3-tuple(v_734)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_738: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_731),3-proj-3-tuple(v_731)))) in
        {247}let v_739: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_729)) && success?(symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_731),3-proj-3-tuple(v_731)))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack(1-proj-3-tuple(v_738),2-proj-3-tuple(v_738),hash(3-proj-3-tuple(v_738),3-proj-3-tuple(v_729))) else fail-any) else fail-any)) in
        {248}let v_740: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_729)) && success?(1-proj-7-tuple(v_728))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_739) then (v_739,2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_741: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_740),2-proj-7-tuple(v_728),3-proj-7-tuple(v_728),4-proj-7-tuple(v_728),5-proj-7-tuple(v_728),6-proj-7-tuple(v_728),7-proj-7-tuple(v_728))) in
        {250}let (hs_742: handshakestate,plaintext_d_743: bitstring,valid_744: bool) = (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-7-tuple(v_728))))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if not-caught-fail(v_730) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if (v_730 && 3-proj-3-tuple(v_740)) then (if not-caught-fail(v_741) then (v_741,2-proj-3-tuple(v_740),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {251}event RecvMsg(alice,charlie,stage_d(getpublickey(handshakestategets(hs_742)),handshakestategetrs(hs_742),getpublickey(handshakestategete(hs_742)),handshakestategetre(hs_742)),plaintext_d_743,valid_744);
        {252}event RecvEnd(valid_744)
    ) | (
        {254}event LeakS(phase0,alice);
        {255}out(pub, key_s(alice))
    ) | (
        {256}phase 1;
        {257}event LeakS(phase1,alice);
        {258}out(pub, key_s(alice))
    )
) | (
    {259}let v_745: key = catch-fail(dhexp(key_s(bob),g)) in
    {260}let s_746: keypair = (if not-caught-fail(v_745) then keypairpack(v_745,key_s(bob)) else fail-any) in
    {261}out(pub, getpublickey(s_746));
    (
        {262}let e_747: keypair = keypairpack(empty,empty) in
        {263}let rs_748: key = empty in
        {264}let re_749: key = empty in
        {265}let v_750: bitstring = catch-fail(hash(somename,empty)) in
        {266}let v_751: key = catch-fail(v_750) in
        {267}let v_752: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {268}let v_753: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then symmetricstatepack(v_752,v_751,v_750) else fail-any) else fail-any) else fail-any))) in
        {269}let v_754: symmetricstate = catch-fail((if success?((if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then symmetricstatepack(v_752,v_751,v_750) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then symmetricstatepack(1-proj-3-tuple(v_753),2-proj-3-tuple(v_753),hash(3-proj-3-tuple(v_753),empty)) else fail-any) else fail-any)) in
        {270}let v_755: bitstring = catch-fail(symmetricstateunpack(v_754)) in
        {271}let v_756: symmetricstate = catch-fail((if success?(getpublickey(s_746)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_755),hash(3-proj-3-tuple(v_755),getpublickey(s_746))) else fail-any) else fail-any)) in
        {272}let hs_757: handshakestate = (if not-caught-fail(v_754) then (if not-caught-fail(v_756) then handshakestatepack(v_756,s_746,e_747,rs_748,re_749,empty,false) else fail-any) else fail-any) in
        {273}insert statestore(bob,alice,sid,statepack_a(hs_757))
    ) | (
        {302}get statestore(=bob,=alice,=sid,statepack_a(hs_758: handshakestate)) in
        {274}in(pub, message_a_759: bitstring);
        {275}let v_760: bitstring = catch-fail(handshakestateunpack(hs_758)) in
        {276}let v_761: bitstring = catch-fail(deconcat3(message_a_759)) in
        {277}let v_762: bool = catch-fail(true) in
        {278}let v_763: key = catch-fail(1-proj-3-tuple(v_761)) in
        {279}let v_764: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_760))) in
        {280}let v_765: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_760)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_764),hash(3-proj-3-tuple(v_764),v_763)) else fail-any) else fail-any)) in
        {281}let v_766: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_760))) in
        {282}let v_767: bitstring = catch-fail(symmetricstateunpack(v_765)) in
        {283}let v_768: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any))) in
        {284}let v_769: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any))) in
        {285}let v_770: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any))) in
        {286}let v_771: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_767))) then (if not-caught-fail(v_768) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (v_768,v_769,v_770) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {287}let v_772: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_771)) then cipherstatepack(2-proj-3-tuple(v_771),minnonce) else fail-any),1-proj-3-tuple(v_771),3-proj-3-tuple(v_767)) else fail-any) else fail-any) else fail-any)) in
        {288}let v_773: bitstring = catch-fail(symmetricstateunpack(v_772)) in
        {289}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {290}let v_775: aead = catch-fail(decrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),3-proj-3-tuple(v_761))) in
        {291}let v_776: bitstring = catch-fail(aeadunpack(v_775)) in
        {292}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
        {293}let v_778: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then cipherstatepack(1-proj-2-tuple(v_777),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
        {294}let v_779: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_761)) && (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,3-proj-3-tuple(v_776),1-proj-3-tuple(v_776)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_780: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
        {296}let v_781: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_761)) && success?(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_780),hash(3-proj-3-tuple(v_780),3-proj-3-tuple(v_761))) else fail-any) else fail-any)) in
        {297}let v_782: bitstring = catch-fail((if success?(3-proj-3-tuple(v_761)) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {298}let v_783: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_782),2-proj-7-tuple(v_760),3-proj-7-tuple(v_760),4-proj-7-tuple(v_760),v_763,6-proj-7-tuple(v_760),7-proj-7-tuple(v_760))) in
        {299}let (hs_784: handshakestate,plaintext_a: bitstring,valid_785: bool) = (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-7-tuple(v_760))))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then (if not-caught-fail(v_765) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (v_762 && 3-proj-3-tuple(v_782)) then (if not-caught-fail(v_783) then (v_783,2-proj-3-tuple(v_782),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {300}event RecvMsg(bob,alice,stage_a(getpublickey(handshakestategets(hs_784)),handshakestategetrs(hs_784),getpublickey(handshakestategete(hs_784)),handshakestategetre(hs_784)),plaintext_a,valid_785);
        {301}insert statestore(bob,alice,sid,statepack_b(hs_784))
    ) | (
        {340}get statestore(=bob,=alice,=sid,statepack_b(hs_786: handshakestate)) in
        {303}let v_787: bitstring = catch-fail(handshakestateunpack(hs_786)) in
        {304}let v_788: bitstring = catch-fail((empty,empty,empty)) in
        {305}let v_789: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {306}let v_790: keypair = catch-fail((if not-caught-fail(v_789) then keypairpack(v_789,key_e(bob,alice,sid)) else fail-any)) in
        {307}let v_791: bitstring = catch-fail(getpublickey(v_790)) in
        {308}let v_792: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_787))) in
        {309}let v_793: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_787)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then symmetricstatepack(1-proj-3-tuple(v_792),2-proj-3-tuple(v_792),hash(3-proj-3-tuple(v_792),v_791)) else fail-any) else fail-any)) in
        {310}let v_794: bitstring = catch-fail(keypairunpack(v_790)) in
        {311}let v_795: bitstring = catch-fail(symmetricstateunpack(v_793)) in
        {312}let v_796: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {313}let v_797: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {314}let v_798: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
        {315}let v_799: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_795))) then (if not-caught-fail(v_796) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (v_796,v_797,v_798) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {316}let v_800: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_799)) then cipherstatepack(2-proj-3-tuple(v_799),minnonce) else fail-any),1-proj-3-tuple(v_799),3-proj-3-tuple(v_795)) else fail-any) else fail-any) else fail-any)) in
        {317}let v_801: bitstring = catch-fail(symmetricstateunpack(v_800)) in
        {318}let v_802: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {319}let v_803: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_802),2-proj-2-tuple(v_802),3-proj-3-tuple(v_801),msg_b(bob,alice))) in
        {320}let v_804: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
        {321}let v_805: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_802))) && success?(1-proj-3-tuple(v_801))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then cipherstatepack(1-proj-2-tuple(v_804),increment_nonce(2-proj-2-tuple(v_802))) else fail-any) else fail-any)) in
        {322}let v_806: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_801)) && success?(1-proj-3-tuple(v_801))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then (if not-caught-fail(v_803) then (if not-caught-fail(v_805) then (v_805,v_803) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {323}let v_807: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_806),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) in
        {324}let v_808: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_806)) && success?(symmetricstatepack(1-proj-2-tuple(v_806),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_807),hash(3-proj-3-tuple(v_807),2-proj-2-tuple(v_806))) else fail-any) else fail-any)) in
        {325}let v_809: bitstring = catch-fail((if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then (if not-caught-fail(v_808) then (v_808,2-proj-2-tuple(v_806)) else fail-any) else fail-any) else fail-any)) in
        {326}let v_810: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_809),2-proj-7-tuple(v_787),v_790,4-proj-7-tuple(v_787),5-proj-7-tuple(v_787),6-proj-7-tuple(v_787),7-proj-7-tuple(v_787))) in
        {327}let v_811: bitstring = catch-fail(concat3(v_791,2-proj-3-tuple(v_788),2-proj-2-tuple(v_809))) in
        {328}let v_812: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_809))) in
        {329}let v_813: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_812),zero)) in
        {330}let v_814: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_812),zero)) in
        {331}let v_815: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_812),zero)) in
        {332}let v_816: bitstring = catch-fail((if success?(2-proj-3-tuple(v_812)) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_813,v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {333}let v_817: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_816)) then cipherstatepack(1-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {334}let v_818: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_816)) then cipherstatepack(2-proj-3-tuple(v_816),minnonce) else fail-any)) in
        {335}let v_819: bitstring = catch-fail((if success?(1-proj-2-tuple(v_809)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (1-proj-2-tuple(v_809),v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let (hs_820: handshakestate,message_b_821: bitstring,cs1_822: cipherstate,cs2_823: cipherstate) = (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-7-tuple(v_787))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if not-caught-fail(v_790) then (if not-caught-fail(v_791) then (if not-caught-fail(v_793) then (if not-caught-fail(v_800) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_810) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (v_810,v_811,2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {337}event SendMsg(bob,alice,stage_b(getpublickey(handshakestategets(hs_820)),handshakestategetrs(hs_820),getpublickey(handshakestategete(hs_820)),handshakestategetre(hs_820)),msg_b(bob,alice),true);
        {338}insert statestore(bob,alice,sid,statepack_c(hs_820,cs1_822,cs2_823));
        {339}out(pub, message_b_821)
    ) | (
        {341}!
        {361}get statestore(=bob,=alice,=sid,statepack_c(hs_824: handshakestate,cs1_825: cipherstate,cs2_826: cipherstate)) in
        {342}let hs_827: handshakestate = handshakestatesetcs(hs_824,cs1_825) in
        {343}in(pub, message_c_828: bitstring);
        {344}let v_829: bitstring = catch-fail(handshakestateunpack(hs_827)) in
        {345}let v_830: bitstring = catch-fail(deconcat3(message_c_828)) in
        {346}let v_831: bool = catch-fail(true) in
        {347}let v_832: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_829))) in
        {348}let v_833: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
        {349}let v_834: aead = catch-fail(decrypt(1-proj-2-tuple(v_833),2-proj-2-tuple(v_833),3-proj-3-tuple(v_832),3-proj-3-tuple(v_830))) in
        {350}let v_835: bitstring = catch-fail(aeadunpack(v_834)) in
        {351}let v_836: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
        {352}let v_837: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_833))) && success?(1-proj-3-tuple(v_832))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then cipherstatepack(1-proj-2-tuple(v_836),increment_nonce(2-proj-2-tuple(v_833))) else fail-any) else fail-any)) in
        {353}let v_838: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_830)) && (success?(3-proj-3-tuple(v_832)) && success?(1-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then (if not-caught-fail(v_834) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_837) then (v_837,3-proj-3-tuple(v_835),1-proj-3-tuple(v_835)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {354}let v_839: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) in
        {355}let v_840: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_830)) && success?(symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),3-proj-3-tuple(v_830))) else fail-any) else fail-any)) in
        {356}let v_841: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_830)) && success?(1-proj-7-tuple(v_829))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if not-caught-fail(v_840) then (v_840,2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {357}let v_842: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_841),2-proj-7-tuple(v_829),3-proj-7-tuple(v_829),4-proj-7-tuple(v_829),5-proj-7-tuple(v_829),6-proj-7-tuple(v_829),7-proj-7-tuple(v_829))) in
        {358}let (hs_843: handshakestate,plaintext_c: bitstring,valid_844: bool) = (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-7-tuple(v_829))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_831) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (v_831 && 3-proj-3-tuple(v_841)) then (if not-caught-fail(v_842) then (v_842,2-proj-3-tuple(v_841),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {359}event RecvMsg(bob,alice,stage_c(getpublickey(handshakestategets(hs_843)),handshakestategetrs(hs_843),getpublickey(handshakestategete(hs_843)),handshakestategetre(hs_843)),plaintext_c,valid_844);
        {360}insert statestore(bob,alice,sid,statepack_d(hs_843,handshakestategetcs(hs_843),cs2_826))
    ) | (
        {362}!
        {380}get statestore(=bob,=alice,=sid,statepack_d(hs_845: handshakestate,cs1_846: cipherstate,cs2_847: cipherstate)) in
        {363}let hs_848: handshakestate = handshakestatesetcs(hs_845,cs2_847) in
        {364}let v_849: bitstring = catch-fail(handshakestateunpack(hs_848)) in
        {365}let v_850: bitstring = catch-fail((empty,empty,empty)) in
        {366}let v_851: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_849))) in
        {367}let v_852: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
        {368}let v_853: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_852),2-proj-2-tuple(v_852),3-proj-3-tuple(v_851),msg_d(bob,alice))) in
        {369}let v_854: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
        {370}let v_855: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_852))) && success?(1-proj-3-tuple(v_851))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then cipherstatepack(1-proj-2-tuple(v_854),increment_nonce(2-proj-2-tuple(v_852))) else fail-any) else fail-any)) in
        {371}let v_856: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_851)) && success?(1-proj-3-tuple(v_851))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then (if not-caught-fail(v_853) then (if not-caught-fail(v_855) then (v_855,v_853) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_857: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_856),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) in
        {373}let v_858: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_856)) && success?(symmetricstatepack(1-proj-2-tuple(v_856),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_857),hash(3-proj-3-tuple(v_857),2-proj-2-tuple(v_856))) else fail-any) else fail-any)) in
        {374}let v_859: bitstring = catch-fail((if success?(1-proj-7-tuple(v_849)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then (if not-caught-fail(v_858) then (v_858,2-proj-2-tuple(v_856)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_860: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_859),2-proj-7-tuple(v_849),3-proj-7-tuple(v_849),4-proj-7-tuple(v_849),5-proj-7-tuple(v_849),6-proj-7-tuple(v_849),7-proj-7-tuple(v_849))) in
        {376}let v_861: bitstring = catch-fail(concat3(1-proj-3-tuple(v_850),2-proj-3-tuple(v_850),2-proj-2-tuple(v_859))) in
        {377}let (hs_862: handshakestate,message_d_863: bitstring) = (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-7-tuple(v_849))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-2-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (v_860,v_861) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {378}event SendMsg(bob,alice,stage_d(getpublickey(handshakestategets(hs_862)),handshakestategetrs(hs_862),getpublickey(handshakestategete(hs_862)),handshakestategetre(hs_862)),msg_d(bob,alice),true);
        {379}out(pub, message_d_863)
    ) | (
        {381}event LeakS(phase0,bob);
        {382}out(pub, key_s(bob))
    ) | (
        {383}phase 1;
        {384}event LeakS(phase1,bob);
        {385}out(pub, key_s(bob))
    )
) | (
    {386}let v_864: key = catch-fail(dhexp(key_s(bob),g)) in
    {387}let s_865: keypair = (if not-caught-fail(v_864) then keypairpack(v_864,key_s(bob)) else fail-any) in
    {388}out(pub, getpublickey(s_865));
    (
        {389}let e_866: keypair = keypairpack(empty,empty) in
        {390}let rs_867: key = empty in
        {391}let re_868: key = empty in
        {392}let v_869: bitstring = catch-fail(hash(somename,empty)) in
        {393}let v_870: key = catch-fail(v_869) in
        {394}let v_871: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {395}let v_872: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then symmetricstatepack(v_871,v_870,v_869) else fail-any) else fail-any) else fail-any))) in
        {396}let v_873: symmetricstate = catch-fail((if success?((if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then symmetricstatepack(v_871,v_870,v_869) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack(1-proj-3-tuple(v_872),2-proj-3-tuple(v_872),hash(3-proj-3-tuple(v_872),empty)) else fail-any) else fail-any)) in
        {397}let v_874: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {398}let v_875: symmetricstate = catch-fail((if success?(getpublickey(s_865)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_874),hash(3-proj-3-tuple(v_874),getpublickey(s_865))) else fail-any) else fail-any)) in
        {399}let hs_876: handshakestate = (if not-caught-fail(v_873) then (if not-caught-fail(v_875) then handshakestatepack(v_875,s_865,e_866,rs_867,re_868,empty,false) else fail-any) else fail-any) in
        {400}insert statestore(bob,charlie,sid,statepack_a(hs_876))
    ) | (
        {429}get statestore(=bob,=charlie,=sid,statepack_a(hs_877: handshakestate)) in
        {401}in(pub, message_a_878: bitstring);
        {402}let v_879: bitstring = catch-fail(handshakestateunpack(hs_877)) in
        {403}let v_880: bitstring = catch-fail(deconcat3(message_a_878)) in
        {404}let v_881: bool = catch-fail(true) in
        {405}let v_882: key = catch-fail(1-proj-3-tuple(v_880)) in
        {406}let v_883: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_879))) in
        {407}let v_884: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_879)) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),v_882)) else fail-any) else fail-any)) in
        {408}let v_885: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_879))) in
        {409}let v_886: bitstring = catch-fail(symmetricstateunpack(v_884)) in
        {410}let v_887: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_886),(if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any))) in
        {411}let v_888: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_886),(if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any))) in
        {412}let v_889: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_886),(if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any))) in
        {413}let v_890: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_886))) then (if not-caught-fail(v_887) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (v_887,v_888,v_889) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let v_891: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_890)) then cipherstatepack(2-proj-3-tuple(v_890),minnonce) else fail-any),1-proj-3-tuple(v_890),3-proj-3-tuple(v_886)) else fail-any) else fail-any) else fail-any)) in
        {415}let v_892: bitstring = catch-fail(symmetricstateunpack(v_891)) in
        {416}let v_893: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {417}let v_894: aead = catch-fail(decrypt(1-proj-2-tuple(v_893),2-proj-2-tuple(v_893),3-proj-3-tuple(v_892),3-proj-3-tuple(v_880))) in
        {418}let v_895: bitstring = catch-fail(aeadunpack(v_894)) in
        {419}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {420}let v_897: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_893))) && success?(1-proj-3-tuple(v_892))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then cipherstatepack(1-proj-2-tuple(v_896),increment_nonce(2-proj-2-tuple(v_893))) else fail-any) else fail-any)) in
        {421}let v_898: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_880)) && (success?(3-proj-3-tuple(v_892)) && success?(1-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if not-caught-fail(v_897) then (v_897,3-proj-3-tuple(v_895),1-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {422}let v_899: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) in
        {423}let v_900: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_880)) && success?(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_899),hash(3-proj-3-tuple(v_899),3-proj-3-tuple(v_880))) else fail-any) else fail-any)) in
        {424}let v_901: bitstring = catch-fail((if success?(3-proj-3-tuple(v_880)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if not-caught-fail(v_900) then (v_900,2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {425}let v_902: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_901),2-proj-7-tuple(v_879),3-proj-7-tuple(v_879),4-proj-7-tuple(v_879),v_882,6-proj-7-tuple(v_879),7-proj-7-tuple(v_879))) in
        {426}let (hs_903: handshakestate,plaintext_a_904: bitstring,valid_905: bool) = (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-7-tuple(v_879))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (if not-caught-fail(v_884) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if (v_881 && 3-proj-3-tuple(v_901)) then (if not-caught-fail(v_902) then (v_902,2-proj-3-tuple(v_901),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {427}event RecvMsg(bob,charlie,stage_a(getpublickey(handshakestategets(hs_903)),handshakestategetrs(hs_903),getpublickey(handshakestategete(hs_903)),handshakestategetre(hs_903)),plaintext_a_904,valid_905);
        {428}insert statestore(bob,charlie,sid,statepack_b(hs_903))
    ) | (
        {467}get statestore(=bob,=charlie,=sid,statepack_b(hs_906: handshakestate)) in
        {430}let v_907: bitstring = catch-fail(handshakestateunpack(hs_906)) in
        {431}let v_908: bitstring = catch-fail((empty,empty,empty)) in
        {432}let v_909: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {433}let v_910: keypair = catch-fail((if not-caught-fail(v_909) then keypairpack(v_909,key_e(bob,charlie,sid)) else fail-any)) in
        {434}let v_911: bitstring = catch-fail(getpublickey(v_910)) in
        {435}let v_912: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
        {436}let v_913: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_907)) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then symmetricstatepack(1-proj-3-tuple(v_912),2-proj-3-tuple(v_912),hash(3-proj-3-tuple(v_912),v_911)) else fail-any) else fail-any)) in
        {437}let v_914: bitstring = catch-fail(keypairunpack(v_910)) in
        {438}let v_915: bitstring = catch-fail(symmetricstateunpack(v_913)) in
        {439}let v_916: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {440}let v_917: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {441}let v_918: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
        {442}let v_919: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_915))) then (if not-caught-fail(v_916) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (v_916,v_917,v_918) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {443}let v_920: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_919)) then cipherstatepack(2-proj-3-tuple(v_919),minnonce) else fail-any),1-proj-3-tuple(v_919),3-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any)) in
        {444}let v_921: bitstring = catch-fail(symmetricstateunpack(v_920)) in
        {445}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {446}let v_923: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_922),2-proj-2-tuple(v_922),3-proj-3-tuple(v_921),msg_b(bob,charlie))) in
        {447}let v_924: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
        {448}let v_925: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_922))) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then cipherstatepack(1-proj-2-tuple(v_924),increment_nonce(2-proj-2-tuple(v_922))) else fail-any) else fail-any)) in
        {449}let v_926: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_921)) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_925) then (v_925,v_923) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_927: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_926),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) in
        {451}let v_928: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_926)) && success?(symmetricstatepack(1-proj-2-tuple(v_926),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_927),hash(3-proj-3-tuple(v_927),2-proj-2-tuple(v_926))) else fail-any) else fail-any)) in
        {452}let v_929: bitstring = catch-fail((if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-2-tuple(v_926))))) then (if not-caught-fail(v_928) then (v_928,2-proj-2-tuple(v_926)) else fail-any) else fail-any) else fail-any)) in
        {453}let v_930: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_929),2-proj-7-tuple(v_907),v_910,4-proj-7-tuple(v_907),5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
        {454}let v_931: bitstring = catch-fail(concat3(v_911,2-proj-3-tuple(v_908),2-proj-2-tuple(v_929))) in
        {455}let v_932: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_929))) in
        {456}let v_933: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_932),zero)) in
        {457}let v_934: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_932),zero)) in
        {458}let v_935: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_932),zero)) in
        {459}let v_936: bitstring = catch-fail((if success?(2-proj-3-tuple(v_932)) then (if not-caught-fail(v_933) then (if not-caught-fail(v_934) then (if not-caught-fail(v_935) then (v_933,v_934,v_935) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_937: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_936)) then cipherstatepack(1-proj-3-tuple(v_936),minnonce) else fail-any)) in
        {461}let v_938: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_936)) then cipherstatepack(2-proj-3-tuple(v_936),minnonce) else fail-any)) in
        {462}let v_939: bitstring = catch-fail((if success?(1-proj-2-tuple(v_929)) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if not-caught-fail(v_937) then (if not-caught-fail(v_938) then (1-proj-2-tuple(v_929),v_937,v_938) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {463}let (hs_940: handshakestate,message_b_941: bitstring,cs1_942: cipherstate,cs2_943: cipherstate) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_910) then (if not-caught-fail(v_911) then (if not-caught-fail(v_913) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (v_930,v_931,2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {464}event SendMsg(bob,charlie,stage_b(getpublickey(handshakestategets(hs_940)),handshakestategetrs(hs_940),getpublickey(handshakestategete(hs_940)),handshakestategetre(hs_940)),msg_b(bob,charlie),true);
        {465}insert statestore(bob,charlie,sid,statepack_c(hs_940,cs1_942,cs2_943));
        {466}out(pub, message_b_941)
    ) | (
        {468}!
        {488}get statestore(=bob,=charlie,=sid,statepack_c(hs_944: handshakestate,cs1_945: cipherstate,cs2_946: cipherstate)) in
        {469}let hs_947: handshakestate = handshakestatesetcs(hs_944,cs1_945) in
        {470}in(pub, message_c_948: bitstring);
        {471}let v_949: bitstring = catch-fail(handshakestateunpack(hs_947)) in
        {472}let v_950: bitstring = catch-fail(deconcat3(message_c_948)) in
        {473}let v_951: bool = catch-fail(true) in
        {474}let v_952: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_949))) in
        {475}let v_953: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_952))) in
        {476}let v_954: aead = catch-fail(decrypt(1-proj-2-tuple(v_953),2-proj-2-tuple(v_953),3-proj-3-tuple(v_952),3-proj-3-tuple(v_950))) in
        {477}let v_955: bitstring = catch-fail(aeadunpack(v_954)) in
        {478}let v_956: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_952))) in
        {479}let v_957: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_953))) && success?(1-proj-3-tuple(v_952))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then cipherstatepack(1-proj-2-tuple(v_956),increment_nonce(2-proj-2-tuple(v_953))) else fail-any) else fail-any)) in
        {480}let v_958: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && (success?(3-proj-3-tuple(v_952)) && success?(1-proj-3-tuple(v_952)))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-2-tuple(v_953))))) then (if not-caught-fail(v_954) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if not-caught-fail(v_957) then (v_957,3-proj-3-tuple(v_955),1-proj-3-tuple(v_955)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {481}let v_959: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)))) in
        {482}let v_960: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then symmetricstatepack(1-proj-3-tuple(v_959),2-proj-3-tuple(v_959),hash(3-proj-3-tuple(v_959),3-proj-3-tuple(v_950))) else fail-any) else fail-any)) in
        {483}let v_961: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(1-proj-7-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if not-caught-fail(v_960) then (v_960,2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {484}let v_962: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_961),2-proj-7-tuple(v_949),3-proj-7-tuple(v_949),4-proj-7-tuple(v_949),5-proj-7-tuple(v_949),6-proj-7-tuple(v_949),7-proj-7-tuple(v_949))) in
        {485}let (hs_963: handshakestate,plaintext_c_964: bitstring,valid_965: bool) = (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-7-tuple(v_949))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_951) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if (v_951 && 3-proj-3-tuple(v_961)) then (if not-caught-fail(v_962) then (v_962,2-proj-3-tuple(v_961),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {486}event RecvMsg(bob,charlie,stage_c(getpublickey(handshakestategets(hs_963)),handshakestategetrs(hs_963),getpublickey(handshakestategete(hs_963)),handshakestategetre(hs_963)),plaintext_c_964,valid_965);
        {487}insert statestore(bob,charlie,sid,statepack_d(hs_963,handshakestategetcs(hs_963),cs2_946))
    ) | (
        {489}!
        {507}get statestore(=bob,=charlie,=sid,statepack_d(hs_966: handshakestate,cs1_967: cipherstate,cs2_968: cipherstate)) in
        {490}let hs_969: handshakestate = handshakestatesetcs(hs_966,cs2_968) in
        {491}let v_970: bitstring = catch-fail(handshakestateunpack(hs_969)) in
        {492}let v_971: bitstring = catch-fail((empty,empty,empty)) in
        {493}let v_972: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_970))) in
        {494}let v_973: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_972))) in
        {495}let v_974: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_973),2-proj-2-tuple(v_973),3-proj-3-tuple(v_972),msg_d(bob,charlie))) in
        {496}let v_975: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_972))) in
        {497}let v_976: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_973))) && success?(1-proj-3-tuple(v_972))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-2-tuple(v_975))))) then cipherstatepack(1-proj-2-tuple(v_975),increment_nonce(2-proj-2-tuple(v_973))) else fail-any) else fail-any)) in
        {498}let v_977: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_972)) && success?(1-proj-3-tuple(v_972))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-2-tuple(v_973))))) then (if not-caught-fail(v_974) then (if not-caught-fail(v_976) then (v_976,v_974) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {499}let v_978: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_977),2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)))) in
        {500}let v_979: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_977)) && success?(symmetricstatepack(1-proj-2-tuple(v_977),2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then symmetricstatepack(1-proj-3-tuple(v_978),2-proj-3-tuple(v_978),hash(3-proj-3-tuple(v_978),2-proj-2-tuple(v_977))) else fail-any) else fail-any)) in
        {501}let v_980: bitstring = catch-fail((if success?(1-proj-7-tuple(v_970)) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-2-tuple(v_977))))) then (if not-caught-fail(v_979) then (v_979,2-proj-2-tuple(v_977)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {502}let v_981: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_980),2-proj-7-tuple(v_970),3-proj-7-tuple(v_970),4-proj-7-tuple(v_970),5-proj-7-tuple(v_970),6-proj-7-tuple(v_970),7-proj-7-tuple(v_970))) in
        {503}let v_982: bitstring = catch-fail(concat3(1-proj-3-tuple(v_971),2-proj-3-tuple(v_971),2-proj-2-tuple(v_980))) in
        {504}let (hs_983: handshakestate,message_d_984: bitstring) = (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-7-tuple(v_970))))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then (v_981,v_982) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {505}event SendMsg(bob,charlie,stage_d(getpublickey(handshakestategets(hs_983)),handshakestategetrs(hs_983),getpublickey(handshakestategete(hs_983)),handshakestategetre(hs_983)),msg_d(bob,charlie),true);
        {506}out(pub, message_d_984)
    ) | (
        {508}event LeakS(phase0,bob);
        {509}out(pub, key_s(bob))
    ) | (
        {510}phase 1;
        {511}event LeakS(phase1,bob);
        {512}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,bob,stage_a(s_1120,rs_1121,e_1122,re_1123),m,true)); event(RecvMsg(bob,alice,stage_a(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,c_1119,stage_a(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,c_1119,stage_a(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,bob,stage_a(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,bob,stage_a(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,alice,stage_b(s_1120,rs_1121,e_1122,re_1123),m,true)); event(RecvMsg(alice,bob,stage_b(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,c_1119,stage_b(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,c_1119,stage_b(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,alice,stage_b(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,alice,stage_b(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,bob,stage_c(s_1120,rs_1121,e_1122,re_1123),m,true)); event(RecvMsg(bob,alice,stage_c(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,c_1119,stage_c(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,c_1119,stage_c(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,bob,stage_c(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(alice,bob,stage_c(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,alice,stage_d(s_1120,rs_1121,e_1122,re_1123),m,true)); event(RecvMsg(alice,bob,stage_d(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,c_1119,stage_d(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,c_1119,stage_d(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,alice,stage_d(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d(rs_1121,s_1120,re_1123,e_1122),m,true)) ==> event(SendMsg(bob,alice,stage_d(s_1120,rs_1121,e_1122,re_1123),m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 129 rules in the queue.
400 rules inserted. The rule base contains 391 rules. 81 rules in the queue.
600 rules inserted. The rule base contains 587 rules. 299 rules in the queue.
800 rules inserted. The rule base contains 777 rules. 263 rules in the queue.
1000 rules inserted. The rule base contains 941 rules. 214 rules in the queue.
1200 rules inserted. The rule base contains 1127 rules. 292 rules in the queue.
1400 rules inserted. The rule base contains 1317 rules. 377 rules in the queue.
1600 rules inserted. The rule base contains 1449 rules. 390 rules in the queue.
1800 rules inserted. The rule base contains 1600 rules. 394 rules in the queue.
2000 rules inserted. The rule base contains 1755 rules. 403 rules in the queue.
2200 rules inserted. The rule base contains 1935 rules. 411 rules in the queue.
2400 rules inserted. The rule base contains 2037 rules. 398 rules in the queue.
2600 rules inserted. The rule base contains 2162 rules. 409 rules in the queue.
2800 rules inserted. The rule base contains 2254 rules. 435 rules in the queue.
3000 rules inserted. The rule base contains 2382 rules. 528 rules in the queue.
3200 rules inserted. The rule base contains 2539 rules. 530 rules in the queue.
3400 rules inserted. The rule base contains 2588 rules. 517 rules in the queue.
3600 rules inserted. The rule base contains 2686 rules. 587 rules in the queue.
3800 rules inserted. The rule base contains 2815 rules. 605 rules in the queue.
4000 rules inserted. The rule base contains 2888 rules. 701 rules in the queue.
4200 rules inserted. The rule base contains 3051 rules. 995 rules in the queue.
4400 rules inserted. The rule base contains 3152 rules. 970 rules in the queue.
4600 rules inserted. The rule base contains 3222 rules. 993 rules in the queue.
4800 rules inserted. The rule base contains 3405 rules. 1162 rules in the queue.
5000 rules inserted. The rule base contains 3596 rules. 1298 rules in the queue.
5200 rules inserted. The rule base contains 3770 rules. 1461 rules in the queue.
5400 rules inserted. The rule base contains 3923 rules. 1379 rules in the queue.
5600 rules inserted. The rule base contains 4096 rules. 1393 rules in the queue.
5800 rules inserted. The rule base contains 4284 rules. 1273 rules in the queue.
6000 rules inserted. The rule base contains 4464 rules. 1168 rules in the queue.
6200 rules inserted. The rule base contains 4644 rules. 1162 rules in the queue.
6400 rules inserted. The rule base contains 4832 rules. 1042 rules in the queue.
6600 rules inserted. The rule base contains 5008 rules. 965 rules in the queue.
6800 rules inserted. The rule base contains 5146 rules. 998 rules in the queue.
7000 rules inserted. The rule base contains 5316 rules. 1133 rules in the queue.
7200 rules inserted. The rule base contains 5500 rules. 1189 rules in the queue.
7400 rules inserted. The rule base contains 5674 rules. 1309 rules in the queue.
7600 rules inserted. The rule base contains 5856 rules. 1284 rules in the queue.
7800 rules inserted. The rule base contains 5948 rules. 1266 rules in the queue.
8000 rules inserted. The rule base contains 6099 rules. 1509 rules in the queue.
8200 rules inserted. The rule base contains 6270 rules. 1531 rules in the queue.
8400 rules inserted. The rule base contains 6390 rules. 1595 rules in the queue.
8600 rules inserted. The rule base contains 6546 rules. 1775 rules in the queue.
8800 rules inserted. The rule base contains 6717 rules. 1784 rules in the queue.
9000 rules inserted. The rule base contains 6817 rules. 1841 rules in the queue.
9200 rules inserted. The rule base contains 6956 rules. 1876 rules in the queue.
9400 rules inserted. The rule base contains 7071 rules. 1870 rules in the queue.
9600 rules inserted. The rule base contains 7189 rules. 1938 rules in the queue.
9800 rules inserted. The rule base contains 7304 rules. 2027 rules in the queue.
10000 rules inserted. The rule base contains 7443 rules. 2036 rules in the queue.
10200 rules inserted. The rule base contains 7565 rules. 2079 rules in the queue.
10400 rules inserted. The rule base contains 7675 rules. 2095 rules in the queue.
10600 rules inserted. The rule base contains 7795 rules. 2172 rules in the queue.
10800 rules inserted. The rule base contains 7938 rules. 2224 rules in the queue.
11000 rules inserted. The rule base contains 8078 rules. 2218 rules in the queue.
11200 rules inserted. The rule base contains 8210 rules. 2488 rules in the queue.
11400 rules inserted. The rule base contains 8374 rules. 2538 rules in the queue.
11600 rules inserted. The rule base contains 8553 rules. 2550 rules in the queue.
11800 rules inserted. The rule base contains 8695 rules. 2593 rules in the queue.
12000 rules inserted. The rule base contains 8832 rules. 2650 rules in the queue.
12200 rules inserted. The rule base contains 8980 rules. 2951 rules in the queue.
12400 rules inserted. The rule base contains 9148 rules. 2916 rules in the queue.
12600 rules inserted. The rule base contains 9312 rules. 2938 rules in the queue.
12800 rules inserted. The rule base contains 9454 rules. 2979 rules in the queue.
13000 rules inserted. The rule base contains 9576 rules. 2971 rules in the queue.
13200 rules inserted. The rule base contains 9734 rules. 3168 rules in the queue.
13400 rules inserted. The rule base contains 9900 rules. 3217 rules in the queue.
13600 rules inserted. The rule base contains 10048 rules. 3343 rules in the queue.
13800 rules inserted. The rule base contains 10181 rules. 3297 rules in the queue.
14000 rules inserted. The rule base contains 10374 rules. 3296 rules in the queue.
14200 rules inserted. The rule base contains 10515 rules. 3290 rules in the queue.
14400 rules inserted. The rule base contains 10652 rules. 3370 rules in the queue.
14600 rules inserted. The rule base contains 10825 rules. 3487 rules in the queue.
14800 rules inserted. The rule base contains 10972 rules. 3622 rules in the queue.
15000 rules inserted. The rule base contains 11132 rules. 3624 rules in the queue.
15200 rules inserted. The rule base contains 11270 rules. 3604 rules in the queue.
15400 rules inserted. The rule base contains 11470 rules. 3613 rules in the queue.
15600 rules inserted. The rule base contains 11597 rules. 3610 rules in the queue.
15800 rules inserted. The rule base contains 11737 rules. 3638 rules in the queue.
16000 rules inserted. The rule base contains 11881 rules. 3825 rules in the queue.
16200 rules inserted. The rule base contains 12034 rules. 3837 rules in the queue.
16400 rules inserted. The rule base contains 12155 rules. 3828 rules in the queue.
16600 rules inserted. The rule base contains 12293 rules. 3807 rules in the queue.
16800 rules inserted. The rule base contains 12425 rules. 3779 rules in the queue.
17000 rules inserted. The rule base contains 12567 rules. 3840 rules in the queue.
17200 rules inserted. The rule base contains 12733 rules. 3929 rules in the queue.
17400 rules inserted. The rule base contains 12914 rules. 3978 rules in the queue.
17600 rules inserted. The rule base contains 13044 rules. 4125 rules in the queue.
17800 rules inserted. The rule base contains 13210 rules. 4246 rules in the queue.
18000 rules inserted. The rule base contains 13339 rules. 4214 rules in the queue.
18200 rules inserted. The rule base contains 13469 rules. 4196 rules in the queue.
18400 rules inserted. The rule base contains 13590 rules. 4178 rules in the queue.
18600 rules inserted. The rule base contains 13736 rules. 4158 rules in the queue.
18800 rules inserted. The rule base contains 13892 rules. 4309 rules in the queue.
19000 rules inserted. The rule base contains 14091 rules. 4366 rules in the queue.
19200 rules inserted. The rule base contains 14218 rules. 4359 rules in the queue.
19400 rules inserted. The rule base contains 14376 rules. 4451 rules in the queue.
19600 rules inserted. The rule base contains 14517 rules. 4474 rules in the queue.
19800 rules inserted. The rule base contains 14639 rules. 4469 rules in the queue.
20000 rules inserted. The rule base contains 14777 rules. 4449 rules in the queue.
20200 rules inserted. The rule base contains 14931 rules. 4611 rules in the queue.
20400 rules inserted. The rule base contains 15083 rules. 4765 rules in the queue.
20600 rules inserted. The rule base contains 15231 rules. 4984 rules in the queue.
20800 rules inserted. The rule base contains 15407 rules. 5111 rules in the queue.
21000 rules inserted. The rule base contains 15535 rules. 5161 rules in the queue.
21200 rules inserted. The rule base contains 15735 rules. 5192 rules in the queue.
21400 rules inserted. The rule base contains 15900 rules. 5266 rules in the queue.
21600 rules inserted. The rule base contains 16063 rules. 5319 rules in the queue.
21800 rules inserted. The rule base contains 16183 rules. 5294 rules in the queue.
22000 rules inserted. The rule base contains 16305 rules. 5286 rules in the queue.
22200 rules inserted. The rule base contains 16472 rules. 5406 rules in the queue.
22400 rules inserted. The rule base contains 16608 rules. 5597 rules in the queue.
22600 rules inserted. The rule base contains 16760 rules. 5763 rules in the queue.
