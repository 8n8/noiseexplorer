File "NK.noise.active.pv", line 245, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 254, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 255, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 255, character 36:
Warning: identifier h rebound.
File "NK.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 296, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 297, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 301, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 309, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 310, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 340, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 346, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 354, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 355, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 528, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 530, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 379, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 381, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 520, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 521, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 323, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 323, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 324, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 513, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 354, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 355, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 358, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 360, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 245, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 505, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 296, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 297, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 298, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 300, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 301, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 301, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 302, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 245, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 581, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 582, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 572, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 574, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 369, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 371, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 565, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 309, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 310, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 311, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 245, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 264, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 265, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 558, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 340, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 343, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 344, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 346, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 245, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 270, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 271, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_116,dhexp(a_115,g)) = dhexp(a_115,dhexp(b_116,g))
Completing equations...
Completed equations:
dhexp(b_116,dhexp(a_115,g)) = dhexp(a_115,dhexp(b_116,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
(
    {2}!
    {3}new sid_a: sessionid;
    (
        {4}let s_513: keypair = keypairpack(empty,empty) in
        (
            {5}let e_514: keypair = keypairpack(empty,empty) in
            {6}let v_515: key = catch-fail(dhexp(key_s(bob),g)) in
            {7}let rs_516: key = getpublickey((if not-caught-fail(v_515) then keypairpack(v_515,key_s(bob)) else fail-any)) in
            {8}let re_517: key = empty in
            {9}let v_518: bitstring = catch-fail(hash(somename,empty)) in
            {10}let v_519: key = catch-fail(v_518) in
            {11}let v_520: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
            {12}let v_521: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then symmetricstatepack(v_520,v_519,v_518) else fail-any) else fail-any) else fail-any))) in
            {13}let v_522: symmetricstate = catch-fail((if success?((if not-caught-fail(v_518) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then symmetricstatepack(v_520,v_519,v_518) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then symmetricstatepack(1-proj-3-tuple(v_521),2-proj-3-tuple(v_521),hash(3-proj-3-tuple(v_521),empty)) else fail-any) else fail-any)) in
            {14}let v_523: bitstring = catch-fail(symmetricstateunpack(v_522)) in
            {15}let v_524: symmetricstate = catch-fail((if (not-caught-fail(v_523) && success?(is-true(success?(1-proj-3-tuple(v_523))))) then symmetricstatepack(1-proj-3-tuple(v_523),2-proj-3-tuple(v_523),hash(3-proj-3-tuple(v_523),rs_516)) else fail-any)) in
            {16}let hs: handshakestate = (if not-caught-fail(v_522) then (if not-caught-fail(v_524) then handshakestatepack(v_524,s_513,e_514,rs_516,re_517,empty,true) else fail-any) else fail-any) in
            {17}insert statestore(alice,bob,sid_a,statepack_a(hs))
        ) | (
            {47}get statestore(=alice,=bob,=sid_a,statepack_a(hs_525: handshakestate)) in
            {18}let v_526: bitstring = catch-fail(handshakestateunpack(hs_525)) in
            {19}let v_527: bitstring = catch-fail((empty,empty,empty)) in
            {20}let v_528: key = catch-fail(dhexp(key_e(alice,bob,sid_a),g)) in
            {21}let v_529: keypair = catch-fail((if not-caught-fail(v_528) then keypairpack(v_528,key_e(alice,bob,sid_a)) else fail-any)) in
            {22}let v_530: bitstring = catch-fail(getpublickey(v_529)) in
            {23}let v_531: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_526))) in
            {24}let v_532: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_526)) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then symmetricstatepack(1-proj-3-tuple(v_531),2-proj-3-tuple(v_531),hash(3-proj-3-tuple(v_531),v_530)) else fail-any) else fail-any)) in
            {25}let v_533: bitstring = catch-fail(keypairunpack(v_529)) in
            {26}let v_534: bitstring = catch-fail(symmetricstateunpack(v_532)) in
            {27}let v_535: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_534),(if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
            {28}let v_536: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_534),(if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
            {29}let v_537: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_534),(if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
            {30}let v_538: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_534))) then (if not-caught-fail(v_535) then (if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (v_535,v_536,v_537) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {31}let v_539: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_526)) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then dhexp(2-proj-2-tuple(v_533),4-proj-7-tuple(v_526)) else fail-any) else fail-any)) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-3-tuple(v_534))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_538)) then cipherstatepack(2-proj-3-tuple(v_538),minnonce) else fail-any),1-proj-3-tuple(v_538),3-proj-3-tuple(v_534)) else fail-any) else fail-any) else fail-any)) in
            {32}let v_540: bitstring = catch-fail(symmetricstateunpack(v_539)) in
            {33}let v_541: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_540))) in
            {34}let v_542: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_541),2-proj-2-tuple(v_541),3-proj-3-tuple(v_540),msg_a(alice,bob))) in
            {35}let v_543: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_540))) in
            {36}let v_544: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_541))) && success?(1-proj-3-tuple(v_540))) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then cipherstatepack(1-proj-2-tuple(v_543),increment_nonce(2-proj-2-tuple(v_541))) else fail-any) else fail-any)) in
            {37}let v_545: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_540)) && success?(1-proj-3-tuple(v_540))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-2-tuple(v_541))))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_544) then (v_544,v_542) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {38}let v_546: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_545),2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)))) in
            {39}let v_547: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_545)) && success?(symmetricstatepack(1-proj-2-tuple(v_545),2-proj-3-tuple(v_540),3-proj-3-tuple(v_540)))) then (if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then symmetricstatepack(1-proj-3-tuple(v_546),2-proj-3-tuple(v_546),hash(3-proj-3-tuple(v_546),2-proj-2-tuple(v_545))) else fail-any) else fail-any)) in
            {40}let v_548: bitstring = catch-fail((if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-2-tuple(v_545))))) then (if not-caught-fail(v_547) then (v_547,2-proj-2-tuple(v_545)) else fail-any) else fail-any) else fail-any)) in
            {41}let v_549: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_548),2-proj-7-tuple(v_526),v_529,4-proj-7-tuple(v_526),5-proj-7-tuple(v_526),6-proj-7-tuple(v_526),7-proj-7-tuple(v_526))) in
            {42}let v_550: bitstring = catch-fail(concat3(v_530,2-proj-3-tuple(v_527),2-proj-2-tuple(v_548))) in
            {43}let (hs_551: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-7-tuple(v_526))))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if not-caught-fail(v_529) then (if not-caught-fail(v_530) then (if not-caught-fail(v_532) then (if not-caught-fail(v_539) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-2-tuple(v_548))))) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (v_549,v_550) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {44}event SendMsg(alice,bob,stagepack_a(getpublickey(handshakestategete(hs_551)),handshakestategetre(hs_551)),msg_a(alice,bob));
            {45}insert statestore(alice,bob,sid_a,statepack_b(hs_551));
            {46}out(pub, message_a)
        ) | (
            {84}get statestore(=alice,=bob,=sid_a,statepack_b(hs_552: handshakestate)) in
            {48}in(pub, message_b: bitstring);
            {49}let v_553: bitstring = catch-fail(handshakestateunpack(hs_552)) in
            {50}let v_554: bitstring = catch-fail(deconcat3(message_b)) in
            {51}let v_555: bool = catch-fail(true) in
            {52}let v_556: key = catch-fail(1-proj-3-tuple(v_554)) in
            {53}let v_557: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_553))) in
            {54}let v_558: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_553)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),v_556)) else fail-any) else fail-any)) in
            {55}let v_559: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_553))) in
            {56}let v_560: bitstring = catch-fail(symmetricstateunpack(v_558)) in
            {57}let v_561: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
            {58}let v_562: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
            {59}let v_563: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
            {60}let v_564: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_560))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then (v_561,v_562,v_563) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {61}let v_565: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_564)) then cipherstatepack(2-proj-3-tuple(v_564),minnonce) else fail-any),1-proj-3-tuple(v_564),3-proj-3-tuple(v_560)) else fail-any) else fail-any) else fail-any)) in
            {62}let v_566: bitstring = catch-fail(symmetricstateunpack(v_565)) in
            {63}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_566))) in
            {64}let v_568: aead = catch-fail(decrypt(1-proj-2-tuple(v_567),2-proj-2-tuple(v_567),3-proj-3-tuple(v_566),3-proj-3-tuple(v_554))) in
            {65}let v_569: bitstring = catch-fail(aeadunpack(v_568)) in
            {66}let v_570: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_566))) in
            {67}let v_571: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_567))) && success?(1-proj-3-tuple(v_566))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-2-tuple(v_570))))) then cipherstatepack(1-proj-2-tuple(v_570),increment_nonce(2-proj-2-tuple(v_567))) else fail-any) else fail-any)) in
            {68}let v_572: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_554)) && (success?(3-proj-3-tuple(v_566)) && success?(1-proj-3-tuple(v_566)))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then (if not-caught-fail(v_568) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,3-proj-3-tuple(v_569),1-proj-3-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {69}let v_573: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_572),2-proj-3-tuple(v_566),3-proj-3-tuple(v_566)))) in
            {70}let v_574: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_554)) && success?(symmetricstatepack(1-proj-3-tuple(v_572),2-proj-3-tuple(v_566),3-proj-3-tuple(v_566)))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),3-proj-3-tuple(v_554))) else fail-any) else fail-any)) in
            {71}let v_575: bitstring = catch-fail((if success?(3-proj-3-tuple(v_554)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if not-caught-fail(v_574) then (v_574,2-proj-3-tuple(v_572),3-proj-3-tuple(v_572)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {72}let v_576: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_575),2-proj-7-tuple(v_553),3-proj-7-tuple(v_553),4-proj-7-tuple(v_553),v_556,6-proj-7-tuple(v_553),7-proj-7-tuple(v_553))) in
            {73}let v_577: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_575))) in
            {74}let v_578: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_577),zero)) in
            {75}let v_579: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_577),zero)) in
            {76}let v_580: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_577),zero)) in
            {77}let v_581: bitstring = catch-fail((if success?(2-proj-3-tuple(v_577)) then (if not-caught-fail(v_578) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (v_578,v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {78}let v_582: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_581)) then cipherstatepack(1-proj-3-tuple(v_581),minnonce) else fail-any)) in
            {79}let v_583: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_581)) then cipherstatepack(2-proj-3-tuple(v_581),minnonce) else fail-any)) in
            {80}let v_584: bitstring = catch-fail((if success?(1-proj-3-tuple(v_575)) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (1-proj-3-tuple(v_575),v_582,v_583) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {81}let (hs_585: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-7-tuple(v_553))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (if not-caught-fail(v_558) then (if not-caught-fail(v_565) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then (if (v_555 && 3-proj-3-tuple(v_575)) then (if not-caught-fail(v_576) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (v_576,2-proj-3-tuple(v_575),true,2-proj-3-tuple(v_584),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {82}event RecvMsg(alice,bob,stagepack_b(getpublickey(handshakestategete(hs_585)),handshakestategetre(hs_585)),plaintext_b);
            {83}insert statestore(alice,bob,sid_a,statepack_c(hs_585,cs1,cs2))
        ) | (
            {85}!
            {104}get statestore(=alice,=bob,=sid_a,statepack_c(hs_586: handshakestate,cs1_587: cipherstate,cs2_588: cipherstate)) in
            {86}let hs_589: handshakestate = handshakestatesetcs(hs_586,cs1_587) in
            {87}let v_590: bitstring = catch-fail(handshakestateunpack(hs_589)) in
            {88}let v_591: bitstring = catch-fail((empty,empty,empty)) in
            {89}let v_592: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_590))) in
            {90}let v_593: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
            {91}let v_594: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_593),2-proj-2-tuple(v_593),3-proj-3-tuple(v_592),msg_c(alice,bob))) in
            {92}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_592))) in
            {93}let v_596: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_593))) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then cipherstatepack(1-proj-2-tuple(v_595),increment_nonce(2-proj-2-tuple(v_593))) else fail-any) else fail-any)) in
            {94}let v_597: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_592)) && success?(1-proj-3-tuple(v_592))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-2-tuple(v_593))))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_596) then (v_596,v_594) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {95}let v_598: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) in
            {96}let v_599: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_597)) && success?(symmetricstatepack(1-proj-2-tuple(v_597),2-proj-3-tuple(v_592),3-proj-3-tuple(v_592)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack(1-proj-3-tuple(v_598),2-proj-3-tuple(v_598),hash(3-proj-3-tuple(v_598),2-proj-2-tuple(v_597))) else fail-any) else fail-any)) in
            {97}let v_600: bitstring = catch-fail((if success?(1-proj-7-tuple(v_590)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-2-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,2-proj-2-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {98}let v_601: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_600),2-proj-7-tuple(v_590),3-proj-7-tuple(v_590),4-proj-7-tuple(v_590),5-proj-7-tuple(v_590),6-proj-7-tuple(v_590),7-proj-7-tuple(v_590))) in
            {99}let v_602: bitstring = catch-fail(concat3(1-proj-3-tuple(v_591),2-proj-3-tuple(v_591),2-proj-2-tuple(v_600))) in
            {100}let (hs_603: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-7-tuple(v_590))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {101}event SendMsg(alice,bob,stagepack_c(getpublickey(handshakestategete(hs_603)),handshakestategetre(hs_603)),msg_c(alice,bob));
            {102}insert statestore(alice,bob,sid_a,statepack_d(hs_603,handshakestategetcs(hs_603),cs2_588));
            {103}out(pub, message_c)
        ) | (
            {105}!
            {125}get statestore(=alice,=bob,=sid_a,statepack_d(hs_604: handshakestate,cs1_605: cipherstate,cs2_606: cipherstate)) in
            {106}let hs_607: handshakestate = handshakestatesetcs(hs_604,cs2_606) in
            {107}in(pub, message_d: bitstring);
            {108}let v_608: bitstring = catch-fail(handshakestateunpack(hs_607)) in
            {109}let v_609: bitstring = catch-fail(deconcat3(message_d)) in
            {110}let v_610: bool = catch-fail(true) in
            {111}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_608))) in
            {112}let v_612: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_611))) in
            {113}let v_613: aead = catch-fail(decrypt(1-proj-2-tuple(v_612),2-proj-2-tuple(v_612),3-proj-3-tuple(v_611),3-proj-3-tuple(v_609))) in
            {114}let v_614: bitstring = catch-fail(aeadunpack(v_613)) in
            {115}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_611))) in
            {116}let v_616: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_612))) && success?(1-proj-3-tuple(v_611))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then cipherstatepack(1-proj-2-tuple(v_615),increment_nonce(2-proj-2-tuple(v_612))) else fail-any) else fail-any)) in
            {117}let v_617: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_609)) && (success?(3-proj-3-tuple(v_611)) && success?(1-proj-3-tuple(v_611)))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-2-tuple(v_612))))) then (if not-caught-fail(v_613) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if not-caught-fail(v_616) then (v_616,3-proj-3-tuple(v_614),1-proj-3-tuple(v_614)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {118}let v_618: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_617),2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)))) in
            {119}let v_619: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_609)) && success?(symmetricstatepack(1-proj-3-tuple(v_617),2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),3-proj-3-tuple(v_609))) else fail-any) else fail-any)) in
            {120}let v_620: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_609)) && success?(1-proj-7-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if not-caught-fail(v_619) then (v_619,2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {121}let v_621: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_620),2-proj-7-tuple(v_608),3-proj-7-tuple(v_608),4-proj-7-tuple(v_608),5-proj-7-tuple(v_608),6-proj-7-tuple(v_608),7-proj-7-tuple(v_608))) in
            {122}let (hs_622: handshakestate,plaintext_d: bitstring,valid_623: bool) = (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-7-tuple(v_608))))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then (if not-caught-fail(v_610) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (v_610 && 3-proj-3-tuple(v_620)) then (if not-caught-fail(v_621) then (v_621,2-proj-3-tuple(v_620),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {123}event RecvMsg(alice,bob,stagepack_d(getpublickey(handshakestategete(hs_622)),handshakestategetre(hs_622)),plaintext_d);
            {124}event RecvEnd(valid_623)
        ) | (
            {126}event LeakS(phase0,alice);
            {127}out(pub, key_s(alice))
        ) | (
            {128}phase 1;
            {129}event LeakS(phase1,alice);
            {130}out(pub, key_s(alice))
        )
    ) | (
        {131}let s_624: keypair = keypairpack(empty,empty) in
        (
            {132}let e_625: keypair = keypairpack(empty,empty) in
            {133}let v_626: key = catch-fail(dhexp(key_s(charlie),g)) in
            {134}let rs_627: key = getpublickey((if not-caught-fail(v_626) then keypairpack(v_626,key_s(charlie)) else fail-any)) in
            {135}let re_628: key = empty in
            {136}let v_629: bitstring = catch-fail(hash(somename,empty)) in
            {137}let v_630: key = catch-fail(v_629) in
            {138}let v_631: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
            {139}let v_632: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then symmetricstatepack(v_631,v_630,v_629) else fail-any) else fail-any) else fail-any))) in
            {140}let v_633: symmetricstate = catch-fail((if success?((if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (if not-caught-fail(v_631) then symmetricstatepack(v_631,v_630,v_629) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then symmetricstatepack(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),hash(3-proj-3-tuple(v_632),empty)) else fail-any) else fail-any)) in
            {141}let v_634: bitstring = catch-fail(symmetricstateunpack(v_633)) in
            {142}let v_635: symmetricstate = catch-fail((if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then symmetricstatepack(1-proj-3-tuple(v_634),2-proj-3-tuple(v_634),hash(3-proj-3-tuple(v_634),rs_627)) else fail-any)) in
            {143}let hs_636: handshakestate = (if not-caught-fail(v_633) then (if not-caught-fail(v_635) then handshakestatepack(v_635,s_624,e_625,rs_627,re_628,empty,true) else fail-any) else fail-any) in
            {144}insert statestore(alice,charlie,sid_a,statepack_a(hs_636))
        ) | (
            {174}get statestore(=alice,=charlie,=sid_a,statepack_a(hs_637: handshakestate)) in
            {145}let v_638: bitstring = catch-fail(handshakestateunpack(hs_637)) in
            {146}let v_639: bitstring = catch-fail((empty,empty,empty)) in
            {147}let v_640: key = catch-fail(dhexp(key_e(alice,charlie,sid_a),g)) in
            {148}let v_641: keypair = catch-fail((if not-caught-fail(v_640) then keypairpack(v_640,key_e(alice,charlie,sid_a)) else fail-any)) in
            {149}let v_642: bitstring = catch-fail(getpublickey(v_641)) in
            {150}let v_643: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_638))) in
            {151}let v_644: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_638)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then symmetricstatepack(1-proj-3-tuple(v_643),2-proj-3-tuple(v_643),hash(3-proj-3-tuple(v_643),v_642)) else fail-any) else fail-any)) in
            {152}let v_645: bitstring = catch-fail(keypairunpack(v_641)) in
            {153}let v_646: bitstring = catch-fail(symmetricstateunpack(v_644)) in
            {154}let v_647: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_646),(if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
            {155}let v_648: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_646),(if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
            {156}let v_649: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_646),(if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any))) in
            {157}let v_650: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_646))) then (if not-caught-fail(v_647) then (if not-caught-fail(v_648) then (if not-caught-fail(v_649) then (v_647,v_648,v_649) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {158}let v_651: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_638)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then dhexp(2-proj-2-tuple(v_645),4-proj-7-tuple(v_638)) else fail-any) else fail-any)) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_650)) then cipherstatepack(2-proj-3-tuple(v_650),minnonce) else fail-any),1-proj-3-tuple(v_650),3-proj-3-tuple(v_646)) else fail-any) else fail-any) else fail-any)) in
            {159}let v_652: bitstring = catch-fail(symmetricstateunpack(v_651)) in
            {160}let v_653: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
            {161}let v_654: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_653),2-proj-2-tuple(v_653),3-proj-3-tuple(v_652),msg_a(alice,charlie))) in
            {162}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
            {163}let v_656: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_653))) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then cipherstatepack(1-proj-2-tuple(v_655),increment_nonce(2-proj-2-tuple(v_653))) else fail-any) else fail-any)) in
            {164}let v_657: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_652)) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then (v_656,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {165}let v_658: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) in
            {166}let v_659: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_657)) && success?(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
            {167}let v_660: bitstring = catch-fail((if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_659) then (v_659,2-proj-2-tuple(v_657)) else fail-any) else fail-any) else fail-any)) in
            {168}let v_661: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_660),2-proj-7-tuple(v_638),v_641,4-proj-7-tuple(v_638),5-proj-7-tuple(v_638),6-proj-7-tuple(v_638),7-proj-7-tuple(v_638))) in
            {169}let v_662: bitstring = catch-fail(concat3(v_642,2-proj-3-tuple(v_639),2-proj-2-tuple(v_660))) in
            {170}let (hs_663: handshakestate,message_a_664: bitstring) = (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-7-tuple(v_638))))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (if not-caught-fail(v_644) then (if not-caught-fail(v_651) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then (if not-caught-fail(v_661) then (if not-caught-fail(v_662) then (v_661,v_662) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {171}event SendMsg(alice,charlie,stagepack_a(getpublickey(handshakestategete(hs_663)),handshakestategetre(hs_663)),msg_a(alice,charlie));
            {172}insert statestore(alice,charlie,sid_a,statepack_b(hs_663));
            {173}out(pub, message_a_664)
        ) | (
            {211}get statestore(=alice,=charlie,=sid_a,statepack_b(hs_665: handshakestate)) in
            {175}in(pub, message_b_666: bitstring);
            {176}let v_667: bitstring = catch-fail(handshakestateunpack(hs_665)) in
            {177}let v_668: bitstring = catch-fail(deconcat3(message_b_666)) in
            {178}let v_669: bool = catch-fail(true) in
            {179}let v_670: key = catch-fail(1-proj-3-tuple(v_668)) in
            {180}let v_671: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_667))) in
            {181}let v_672: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_667)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then symmetricstatepack(1-proj-3-tuple(v_671),2-proj-3-tuple(v_671),hash(3-proj-3-tuple(v_671),v_670)) else fail-any) else fail-any)) in
            {182}let v_673: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_667))) in
            {183}let v_674: bitstring = catch-fail(symmetricstateunpack(v_672)) in
            {184}let v_675: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
            {185}let v_676: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
            {186}let v_677: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_674),(if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any))) in
            {187}let v_678: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_674))) then (if not-caught-fail(v_675) then (if not-caught-fail(v_676) then (if not-caught-fail(v_677) then (v_675,v_676,v_677) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {188}let v_679: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_667)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then dhexp(2-proj-2-tuple(v_673),v_670) else fail-any) else fail-any)) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_678)) then cipherstatepack(2-proj-3-tuple(v_678),minnonce) else fail-any),1-proj-3-tuple(v_678),3-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any)) in
            {189}let v_680: bitstring = catch-fail(symmetricstateunpack(v_679)) in
            {190}let v_681: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_680))) in
            {191}let v_682: aead = catch-fail(decrypt(1-proj-2-tuple(v_681),2-proj-2-tuple(v_681),3-proj-3-tuple(v_680),3-proj-3-tuple(v_668))) in
            {192}let v_683: bitstring = catch-fail(aeadunpack(v_682)) in
            {193}let v_684: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_680))) in
            {194}let v_685: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_681))) && success?(1-proj-3-tuple(v_680))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then cipherstatepack(1-proj-2-tuple(v_684),increment_nonce(2-proj-2-tuple(v_681))) else fail-any) else fail-any)) in
            {195}let v_686: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && (success?(3-proj-3-tuple(v_680)) && success?(1-proj-3-tuple(v_680)))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-2-tuple(v_681))))) then (if not-caught-fail(v_682) then (if (not-caught-fail(v_683) && success?(is-true(success?(1-proj-3-tuple(v_683))))) then (if not-caught-fail(v_685) then (v_685,3-proj-3-tuple(v_683),1-proj-3-tuple(v_683)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {196}let v_687: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_686),2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)))) in
            {197}let v_688: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(symmetricstatepack(1-proj-3-tuple(v_686),2-proj-3-tuple(v_680),3-proj-3-tuple(v_680)))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then symmetricstatepack(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),hash(3-proj-3-tuple(v_687),3-proj-3-tuple(v_668))) else fail-any) else fail-any)) in
            {198}let v_689: bitstring = catch-fail((if success?(3-proj-3-tuple(v_668)) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if not-caught-fail(v_688) then (v_688,2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {199}let v_690: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_689),2-proj-7-tuple(v_667),3-proj-7-tuple(v_667),4-proj-7-tuple(v_667),v_670,6-proj-7-tuple(v_667),7-proj-7-tuple(v_667))) in
            {200}let v_691: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_689))) in
            {201}let v_692: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_691),zero)) in
            {202}let v_693: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_691),zero)) in
            {203}let v_694: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_691),zero)) in
            {204}let v_695: bitstring = catch-fail((if success?(2-proj-3-tuple(v_691)) then (if not-caught-fail(v_692) then (if not-caught-fail(v_693) then (if not-caught-fail(v_694) then (v_692,v_693,v_694) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {205}let v_696: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_695)) then cipherstatepack(1-proj-3-tuple(v_695),minnonce) else fail-any)) in
            {206}let v_697: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_695)) then cipherstatepack(2-proj-3-tuple(v_695),minnonce) else fail-any)) in
            {207}let v_698: bitstring = catch-fail((if success?(1-proj-3-tuple(v_689)) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if not-caught-fail(v_696) then (if not-caught-fail(v_697) then (1-proj-3-tuple(v_689),v_696,v_697) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {208}let (hs_699: handshakestate,plaintext_b_700: bitstring,valid_701: bool,cs1_702: cipherstate,cs2_703: cipherstate) = (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-7-tuple(v_667))))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (if not-caught-fail(v_672) then (if not-caught-fail(v_679) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if (v_669 && 3-proj-3-tuple(v_689)) then (if not-caught-fail(v_690) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (v_690,2-proj-3-tuple(v_689),true,2-proj-3-tuple(v_698),3-proj-3-tuple(v_698)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {209}event RecvMsg(alice,charlie,stagepack_b(getpublickey(handshakestategete(hs_699)),handshakestategetre(hs_699)),plaintext_b_700);
            {210}insert statestore(alice,charlie,sid_a,statepack_c(hs_699,cs1_702,cs2_703))
        ) | (
            {212}!
            {231}get statestore(=alice,=charlie,=sid_a,statepack_c(hs_704: handshakestate,cs1_705: cipherstate,cs2_706: cipherstate)) in
            {213}let hs_707: handshakestate = handshakestatesetcs(hs_704,cs1_705) in
            {214}let v_708: bitstring = catch-fail(handshakestateunpack(hs_707)) in
            {215}let v_709: bitstring = catch-fail((empty,empty,empty)) in
            {216}let v_710: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_708))) in
            {217}let v_711: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_710))) in
            {218}let v_712: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_711),2-proj-2-tuple(v_711),3-proj-3-tuple(v_710),msg_c(alice,charlie))) in
            {219}let v_713: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_710))) in
            {220}let v_714: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_711))) && success?(1-proj-3-tuple(v_710))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-2-tuple(v_713))))) then cipherstatepack(1-proj-2-tuple(v_713),increment_nonce(2-proj-2-tuple(v_711))) else fail-any) else fail-any)) in
            {221}let v_715: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_710)) && success?(1-proj-3-tuple(v_710))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then (if not-caught-fail(v_712) then (if not-caught-fail(v_714) then (v_714,v_712) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {222}let v_716: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_715),2-proj-3-tuple(v_710),3-proj-3-tuple(v_710)))) in
            {223}let v_717: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_715)) && success?(symmetricstatepack(1-proj-2-tuple(v_715),2-proj-3-tuple(v_710),3-proj-3-tuple(v_710)))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then symmetricstatepack(1-proj-3-tuple(v_716),2-proj-3-tuple(v_716),hash(3-proj-3-tuple(v_716),2-proj-2-tuple(v_715))) else fail-any) else fail-any)) in
            {224}let v_718: bitstring = catch-fail((if success?(1-proj-7-tuple(v_708)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-2-tuple(v_715))))) then (if not-caught-fail(v_717) then (v_717,2-proj-2-tuple(v_715)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {225}let v_719: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_718),2-proj-7-tuple(v_708),3-proj-7-tuple(v_708),4-proj-7-tuple(v_708),5-proj-7-tuple(v_708),6-proj-7-tuple(v_708),7-proj-7-tuple(v_708))) in
            {226}let v_720: bitstring = catch-fail(concat3(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),2-proj-2-tuple(v_718))) in
            {227}let (hs_721: handshakestate,message_c_722: bitstring) = (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-7-tuple(v_708))))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-2-tuple(v_718))))) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (v_719,v_720) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {228}event SendMsg(alice,charlie,stagepack_c(getpublickey(handshakestategete(hs_721)),handshakestategetre(hs_721)),msg_c(alice,charlie));
            {229}insert statestore(alice,charlie,sid_a,statepack_d(hs_721,handshakestategetcs(hs_721),cs2_706));
            {230}out(pub, message_c_722)
        ) | (
            {232}!
            {252}get statestore(=alice,=charlie,=sid_a,statepack_d(hs_723: handshakestate,cs1_724: cipherstate,cs2_725: cipherstate)) in
            {233}let hs_726: handshakestate = handshakestatesetcs(hs_723,cs2_725) in
            {234}in(pub, message_d_727: bitstring);
            {235}let v_728: bitstring = catch-fail(handshakestateunpack(hs_726)) in
            {236}let v_729: bitstring = catch-fail(deconcat3(message_d_727)) in
            {237}let v_730: bool = catch-fail(true) in
            {238}let v_731: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_728))) in
            {239}let v_732: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_731))) in
            {240}let v_733: aead = catch-fail(decrypt(1-proj-2-tuple(v_732),2-proj-2-tuple(v_732),3-proj-3-tuple(v_731),3-proj-3-tuple(v_729))) in
            {241}let v_734: bitstring = catch-fail(aeadunpack(v_733)) in
            {242}let v_735: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_731))) in
            {243}let v_736: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_732))) && success?(1-proj-3-tuple(v_731))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then cipherstatepack(1-proj-2-tuple(v_735),increment_nonce(2-proj-2-tuple(v_732))) else fail-any) else fail-any)) in
            {244}let v_737: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_729)) && (success?(3-proj-3-tuple(v_731)) && success?(1-proj-3-tuple(v_731)))) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-2-tuple(v_732))))) then (if not-caught-fail(v_733) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-3-tuple(v_734))))) then (if not-caught-fail(v_736) then (v_736,3-proj-3-tuple(v_734),1-proj-3-tuple(v_734)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {245}let v_738: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_731),3-proj-3-tuple(v_731)))) in
            {246}let v_739: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_729)) && success?(symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_731),3-proj-3-tuple(v_731)))) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-3-tuple(v_738))))) then symmetricstatepack(1-proj-3-tuple(v_738),2-proj-3-tuple(v_738),hash(3-proj-3-tuple(v_738),3-proj-3-tuple(v_729))) else fail-any) else fail-any)) in
            {247}let v_740: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_729)) && success?(1-proj-7-tuple(v_728))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_739) then (v_739,2-proj-3-tuple(v_737),3-proj-3-tuple(v_737)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {248}let v_741: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_740),2-proj-7-tuple(v_728),3-proj-7-tuple(v_728),4-proj-7-tuple(v_728),5-proj-7-tuple(v_728),6-proj-7-tuple(v_728),7-proj-7-tuple(v_728))) in
            {249}let (hs_742: handshakestate,plaintext_d_743: bitstring,valid_744: bool) = (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-7-tuple(v_728))))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if not-caught-fail(v_730) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if (v_730 && 3-proj-3-tuple(v_740)) then (if not-caught-fail(v_741) then (v_741,2-proj-3-tuple(v_740),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {250}event RecvMsg(alice,charlie,stagepack_d(getpublickey(handshakestategete(hs_742)),handshakestategetre(hs_742)),plaintext_d_743);
            {251}event RecvEnd(valid_744)
        ) | (
            {253}event LeakS(phase0,alice);
            {254}out(pub, key_s(alice))
        ) | (
            {255}phase 1;
            {256}event LeakS(phase1,alice);
            {257}out(pub, key_s(alice))
        )
    )
) | (
    {258}!
    {259}new sid_b: sessionid;
    (
        {260}let v_745: key = catch-fail(dhexp(key_s(bob),g)) in
        {261}let s_746: keypair = (if not-caught-fail(v_745) then keypairpack(v_745,key_s(bob)) else fail-any) in
        {262}out(pub, getpublickey(s_746));
        (
            {263}let e_747: keypair = keypairpack(empty,empty) in
            {264}let rs_748: key = empty in
            {265}let re_749: key = empty in
            {266}let v_750: bitstring = catch-fail(hash(somename,empty)) in
            {267}let v_751: key = catch-fail(v_750) in
            {268}let v_752: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
            {269}let v_753: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then symmetricstatepack(v_752,v_751,v_750) else fail-any) else fail-any) else fail-any))) in
            {270}let v_754: symmetricstate = catch-fail((if success?((if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then symmetricstatepack(v_752,v_751,v_750) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then symmetricstatepack(1-proj-3-tuple(v_753),2-proj-3-tuple(v_753),hash(3-proj-3-tuple(v_753),empty)) else fail-any) else fail-any)) in
            {271}let v_755: bitstring = catch-fail(symmetricstateunpack(v_754)) in
            {272}let v_756: symmetricstate = catch-fail((if success?(getpublickey(s_746)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then symmetricstatepack(1-proj-3-tuple(v_755),2-proj-3-tuple(v_755),hash(3-proj-3-tuple(v_755),getpublickey(s_746))) else fail-any) else fail-any)) in
            {273}let hs_757: handshakestate = (if not-caught-fail(v_754) then (if not-caught-fail(v_756) then handshakestatepack(v_756,s_746,e_747,rs_748,re_749,empty,false) else fail-any) else fail-any) in
            {274}insert statestore(bob,alice,sid_b,statepack_a(hs_757))
        ) | (
            {303}get statestore(=bob,=alice,=sid_b,statepack_a(hs_758: handshakestate)) in
            {275}in(pub, message_a_759: bitstring);
            {276}let v_760: bitstring = catch-fail(handshakestateunpack(hs_758)) in
            {277}let v_761: bitstring = catch-fail(deconcat3(message_a_759)) in
            {278}let v_762: bool = catch-fail(true) in
            {279}let v_763: key = catch-fail(1-proj-3-tuple(v_761)) in
            {280}let v_764: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_760))) in
            {281}let v_765: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_760)) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_764),hash(3-proj-3-tuple(v_764),v_763)) else fail-any) else fail-any)) in
            {282}let v_766: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_760))) in
            {283}let v_767: bitstring = catch-fail(symmetricstateunpack(v_765)) in
            {284}let v_768: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any))) in
            {285}let v_769: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any))) in
            {286}let v_770: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_767),(if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any))) in
            {287}let v_771: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_767))) then (if not-caught-fail(v_768) then (if not-caught-fail(v_769) then (if not-caught-fail(v_770) then (v_768,v_769,v_770) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {288}let v_772: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_760)) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then dhexp(2-proj-2-tuple(v_766),v_763) else fail-any) else fail-any)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_771)) then cipherstatepack(2-proj-3-tuple(v_771),minnonce) else fail-any),1-proj-3-tuple(v_771),3-proj-3-tuple(v_767)) else fail-any) else fail-any) else fail-any)) in
            {289}let v_773: bitstring = catch-fail(symmetricstateunpack(v_772)) in
            {290}let v_774: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
            {291}let v_775: aead = catch-fail(decrypt(1-proj-2-tuple(v_774),2-proj-2-tuple(v_774),3-proj-3-tuple(v_773),3-proj-3-tuple(v_761))) in
            {292}let v_776: bitstring = catch-fail(aeadunpack(v_775)) in
            {293}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_773))) in
            {294}let v_778: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_774))) && success?(1-proj-3-tuple(v_773))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then cipherstatepack(1-proj-2-tuple(v_777),increment_nonce(2-proj-2-tuple(v_774))) else fail-any) else fail-any)) in
            {295}let v_779: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_761)) && (success?(3-proj-3-tuple(v_773)) && success?(1-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-2-tuple(v_774))))) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_778) then (v_778,3-proj-3-tuple(v_776),1-proj-3-tuple(v_776)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {296}let v_780: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) in
            {297}let v_781: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_761)) && success?(symmetricstatepack(1-proj-3-tuple(v_779),2-proj-3-tuple(v_773),3-proj-3-tuple(v_773)))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then symmetricstatepack(1-proj-3-tuple(v_780),2-proj-3-tuple(v_780),hash(3-proj-3-tuple(v_780),3-proj-3-tuple(v_761))) else fail-any) else fail-any)) in
            {298}let v_782: bitstring = catch-fail((if success?(3-proj-3-tuple(v_761)) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {299}let v_783: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_782),2-proj-7-tuple(v_760),3-proj-7-tuple(v_760),4-proj-7-tuple(v_760),v_763,6-proj-7-tuple(v_760),7-proj-7-tuple(v_760))) in
            {300}let (hs_784: handshakestate,plaintext_a: bitstring,valid_785: bool) = (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-7-tuple(v_760))))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if not-caught-fail(v_762) then (if not-caught-fail(v_763) then (if not-caught-fail(v_765) then (if not-caught-fail(v_772) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (v_762 && 3-proj-3-tuple(v_782)) then (if not-caught-fail(v_783) then (v_783,2-proj-3-tuple(v_782),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {301}event RecvMsg(bob,alice,stagepack_a(getpublickey(handshakestategete(hs_784)),handshakestategetre(hs_784)),plaintext_a);
            {302}insert statestore(bob,alice,sid_b,statepack_b(hs_784))
        ) | (
            {341}get statestore(=bob,=alice,=sid_b,statepack_b(hs_786: handshakestate)) in
            {304}let v_787: bitstring = catch-fail(handshakestateunpack(hs_786)) in
            {305}let v_788: bitstring = catch-fail((empty,empty,empty)) in
            {306}let v_789: key = catch-fail(dhexp(key_e(bob,alice,sid_b),g)) in
            {307}let v_790: keypair = catch-fail((if not-caught-fail(v_789) then keypairpack(v_789,key_e(bob,alice,sid_b)) else fail-any)) in
            {308}let v_791: bitstring = catch-fail(getpublickey(v_790)) in
            {309}let v_792: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_787))) in
            {310}let v_793: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_787)) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then symmetricstatepack(1-proj-3-tuple(v_792),2-proj-3-tuple(v_792),hash(3-proj-3-tuple(v_792),v_791)) else fail-any) else fail-any)) in
            {311}let v_794: bitstring = catch-fail(keypairunpack(v_790)) in
            {312}let v_795: bitstring = catch-fail(symmetricstateunpack(v_793)) in
            {313}let v_796: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
            {314}let v_797: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
            {315}let v_798: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_795),(if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any))) in
            {316}let v_799: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_795))) then (if not-caught-fail(v_796) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then (v_796,v_797,v_798) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {317}let v_800: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_787)) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then dhexp(2-proj-2-tuple(v_794),5-proj-7-tuple(v_787)) else fail-any) else fail-any)) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_799)) then cipherstatepack(2-proj-3-tuple(v_799),minnonce) else fail-any),1-proj-3-tuple(v_799),3-proj-3-tuple(v_795)) else fail-any) else fail-any) else fail-any)) in
            {318}let v_801: bitstring = catch-fail(symmetricstateunpack(v_800)) in
            {319}let v_802: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
            {320}let v_803: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_802),2-proj-2-tuple(v_802),3-proj-3-tuple(v_801),msg_b(bob,alice))) in
            {321}let v_804: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_801))) in
            {322}let v_805: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_802))) && success?(1-proj-3-tuple(v_801))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-2-tuple(v_804))))) then cipherstatepack(1-proj-2-tuple(v_804),increment_nonce(2-proj-2-tuple(v_802))) else fail-any) else fail-any)) in
            {323}let v_806: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_801)) && success?(1-proj-3-tuple(v_801))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-2-tuple(v_802))))) then (if not-caught-fail(v_803) then (if not-caught-fail(v_805) then (v_805,v_803) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {324}let v_807: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_806),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) in
            {325}let v_808: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_806)) && success?(symmetricstatepack(1-proj-2-tuple(v_806),2-proj-3-tuple(v_801),3-proj-3-tuple(v_801)))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then symmetricstatepack(1-proj-3-tuple(v_807),2-proj-3-tuple(v_807),hash(3-proj-3-tuple(v_807),2-proj-2-tuple(v_806))) else fail-any) else fail-any)) in
            {326}let v_809: bitstring = catch-fail((if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-2-tuple(v_806))))) then (if not-caught-fail(v_808) then (v_808,2-proj-2-tuple(v_806)) else fail-any) else fail-any) else fail-any)) in
            {327}let v_810: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_809),2-proj-7-tuple(v_787),v_790,4-proj-7-tuple(v_787),5-proj-7-tuple(v_787),6-proj-7-tuple(v_787),7-proj-7-tuple(v_787))) in
            {328}let v_811: bitstring = catch-fail(concat3(v_791,2-proj-3-tuple(v_788),2-proj-2-tuple(v_809))) in
            {329}let v_812: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_809))) in
            {330}let v_813: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_812),zero)) in
            {331}let v_814: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_812),zero)) in
            {332}let v_815: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_812),zero)) in
            {333}let v_816: bitstring = catch-fail((if success?(2-proj-3-tuple(v_812)) then (if not-caught-fail(v_813) then (if not-caught-fail(v_814) then (if not-caught-fail(v_815) then (v_813,v_814,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {334}let v_817: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_816)) then cipherstatepack(1-proj-3-tuple(v_816),minnonce) else fail-any)) in
            {335}let v_818: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_816)) then cipherstatepack(2-proj-3-tuple(v_816),minnonce) else fail-any)) in
            {336}let v_819: bitstring = catch-fail((if success?(1-proj-2-tuple(v_809)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if not-caught-fail(v_817) then (if not-caught-fail(v_818) then (1-proj-2-tuple(v_809),v_817,v_818) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {337}let (hs_820: handshakestate,message_b_821: bitstring,cs1_822: cipherstate,cs2_823: cipherstate) = (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-7-tuple(v_787))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then (if not-caught-fail(v_790) then (if not-caught-fail(v_791) then (if not-caught-fail(v_793) then (if not-caught-fail(v_800) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_810) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (v_810,v_811,2-proj-3-tuple(v_819),3-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {338}event SendMsg(bob,alice,stagepack_b(getpublickey(handshakestategete(hs_820)),handshakestategetre(hs_820)),msg_b(bob,alice));
            {339}insert statestore(bob,alice,sid_b,statepack_c(hs_820,cs1_822,cs2_823));
            {340}out(pub, message_b_821)
        ) | (
            {342}!
            {362}get statestore(=bob,=alice,=sid_b,statepack_c(hs_824: handshakestate,cs1_825: cipherstate,cs2_826: cipherstate)) in
            {343}let hs_827: handshakestate = handshakestatesetcs(hs_824,cs1_825) in
            {344}in(pub, message_c_828: bitstring);
            {345}let v_829: bitstring = catch-fail(handshakestateunpack(hs_827)) in
            {346}let v_830: bitstring = catch-fail(deconcat3(message_c_828)) in
            {347}let v_831: bool = catch-fail(true) in
            {348}let v_832: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_829))) in
            {349}let v_833: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
            {350}let v_834: aead = catch-fail(decrypt(1-proj-2-tuple(v_833),2-proj-2-tuple(v_833),3-proj-3-tuple(v_832),3-proj-3-tuple(v_830))) in
            {351}let v_835: bitstring = catch-fail(aeadunpack(v_834)) in
            {352}let v_836: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_832))) in
            {353}let v_837: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_833))) && success?(1-proj-3-tuple(v_832))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-2-tuple(v_836))))) then cipherstatepack(1-proj-2-tuple(v_836),increment_nonce(2-proj-2-tuple(v_833))) else fail-any) else fail-any)) in
            {354}let v_838: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_830)) && (success?(3-proj-3-tuple(v_832)) && success?(1-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-2-tuple(v_833))))) then (if not-caught-fail(v_834) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then (if not-caught-fail(v_837) then (v_837,3-proj-3-tuple(v_835),1-proj-3-tuple(v_835)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {355}let v_839: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) in
            {356}let v_840: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_830)) && success?(symmetricstatepack(1-proj-3-tuple(v_838),2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)))) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then symmetricstatepack(1-proj-3-tuple(v_839),2-proj-3-tuple(v_839),hash(3-proj-3-tuple(v_839),3-proj-3-tuple(v_830))) else fail-any) else fail-any)) in
            {357}let v_841: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_830)) && success?(1-proj-7-tuple(v_829))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-3-tuple(v_838))))) then (if not-caught-fail(v_840) then (v_840,2-proj-3-tuple(v_838),3-proj-3-tuple(v_838)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {358}let v_842: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_841),2-proj-7-tuple(v_829),3-proj-7-tuple(v_829),4-proj-7-tuple(v_829),5-proj-7-tuple(v_829),6-proj-7-tuple(v_829),7-proj-7-tuple(v_829))) in
            {359}let (hs_843: handshakestate,plaintext_c: bitstring,valid_844: bool) = (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-7-tuple(v_829))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_831) then (if (not-caught-fail(v_841) && success?(is-true(success?(1-proj-3-tuple(v_841))))) then (if (v_831 && 3-proj-3-tuple(v_841)) then (if not-caught-fail(v_842) then (v_842,2-proj-3-tuple(v_841),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {360}event RecvMsg(bob,alice,stagepack_c(getpublickey(handshakestategete(hs_843)),handshakestategetre(hs_843)),plaintext_c);
            {361}insert statestore(bob,alice,sid_b,statepack_d(hs_843,handshakestategetcs(hs_843),cs2_826))
        ) | (
            {363}!
            {381}get statestore(=bob,=alice,=sid_b,statepack_d(hs_845: handshakestate,cs1_846: cipherstate,cs2_847: cipherstate)) in
            {364}let hs_848: handshakestate = handshakestatesetcs(hs_845,cs2_847) in
            {365}let v_849: bitstring = catch-fail(handshakestateunpack(hs_848)) in
            {366}let v_850: bitstring = catch-fail((empty,empty,empty)) in
            {367}let v_851: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_849))) in
            {368}let v_852: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
            {369}let v_853: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_852),2-proj-2-tuple(v_852),3-proj-3-tuple(v_851),msg_d(bob,alice))) in
            {370}let v_854: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_851))) in
            {371}let v_855: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_852))) && success?(1-proj-3-tuple(v_851))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-2-tuple(v_854))))) then cipherstatepack(1-proj-2-tuple(v_854),increment_nonce(2-proj-2-tuple(v_852))) else fail-any) else fail-any)) in
            {372}let v_856: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_851)) && success?(1-proj-3-tuple(v_851))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-2-tuple(v_852))))) then (if not-caught-fail(v_853) then (if not-caught-fail(v_855) then (v_855,v_853) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {373}let v_857: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_856),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) in
            {374}let v_858: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_856)) && success?(symmetricstatepack(1-proj-2-tuple(v_856),2-proj-3-tuple(v_851),3-proj-3-tuple(v_851)))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then symmetricstatepack(1-proj-3-tuple(v_857),2-proj-3-tuple(v_857),hash(3-proj-3-tuple(v_857),2-proj-2-tuple(v_856))) else fail-any) else fail-any)) in
            {375}let v_859: bitstring = catch-fail((if success?(1-proj-7-tuple(v_849)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then (if not-caught-fail(v_858) then (v_858,2-proj-2-tuple(v_856)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {376}let v_860: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_859),2-proj-7-tuple(v_849),3-proj-7-tuple(v_849),4-proj-7-tuple(v_849),5-proj-7-tuple(v_849),6-proj-7-tuple(v_849),7-proj-7-tuple(v_849))) in
            {377}let v_861: bitstring = catch-fail(concat3(1-proj-3-tuple(v_850),2-proj-3-tuple(v_850),2-proj-2-tuple(v_859))) in
            {378}let (hs_862: handshakestate,message_d_863: bitstring) = (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-7-tuple(v_849))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-2-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (v_860,v_861) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {379}event SendMsg(bob,alice,stagepack_d(getpublickey(handshakestategete(hs_862)),handshakestategetre(hs_862)),msg_d(bob,alice));
            {380}out(pub, message_d_863)
        ) | (
            {382}event LeakS(phase0,bob);
            {383}out(pub, key_s(bob))
        ) | (
            {384}phase 1;
            {385}event LeakS(phase1,bob);
            {386}out(pub, key_s(bob))
        )
    ) | (
        {387}let v_864: key = catch-fail(dhexp(key_s(bob),g)) in
        {388}let s_865: keypair = (if not-caught-fail(v_864) then keypairpack(v_864,key_s(bob)) else fail-any) in
        {389}out(pub, getpublickey(s_865));
        (
            {390}let e_866: keypair = keypairpack(empty,empty) in
            {391}let rs_867: key = empty in
            {392}let re_868: key = empty in
            {393}let v_869: bitstring = catch-fail(hash(somename,empty)) in
            {394}let v_870: key = catch-fail(v_869) in
            {395}let v_871: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
            {396}let v_872: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then symmetricstatepack(v_871,v_870,v_869) else fail-any) else fail-any) else fail-any))) in
            {397}let v_873: symmetricstate = catch-fail((if success?((if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then symmetricstatepack(v_871,v_870,v_869) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack(1-proj-3-tuple(v_872),2-proj-3-tuple(v_872),hash(3-proj-3-tuple(v_872),empty)) else fail-any) else fail-any)) in
            {398}let v_874: bitstring = catch-fail(symmetricstateunpack(v_873)) in
            {399}let v_875: symmetricstate = catch-fail((if success?(getpublickey(s_865)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_874),hash(3-proj-3-tuple(v_874),getpublickey(s_865))) else fail-any) else fail-any)) in
            {400}let hs_876: handshakestate = (if not-caught-fail(v_873) then (if not-caught-fail(v_875) then handshakestatepack(v_875,s_865,e_866,rs_867,re_868,empty,false) else fail-any) else fail-any) in
            {401}insert statestore(bob,charlie,sid_b,statepack_a(hs_876))
        ) | (
            {430}get statestore(=bob,=charlie,=sid_b,statepack_a(hs_877: handshakestate)) in
            {402}in(pub, message_a_878: bitstring);
            {403}let v_879: bitstring = catch-fail(handshakestateunpack(hs_877)) in
            {404}let v_880: bitstring = catch-fail(deconcat3(message_a_878)) in
            {405}let v_881: bool = catch-fail(true) in
            {406}let v_882: key = catch-fail(1-proj-3-tuple(v_880)) in
            {407}let v_883: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_879))) in
            {408}let v_884: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_879)) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),v_882)) else fail-any) else fail-any)) in
            {409}let v_885: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_879))) in
            {410}let v_886: bitstring = catch-fail(symmetricstateunpack(v_884)) in
            {411}let v_887: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_886),(if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any))) in
            {412}let v_888: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_886),(if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any))) in
            {413}let v_889: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_886),(if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any))) in
            {414}let v_890: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_886))) then (if not-caught-fail(v_887) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (v_887,v_888,v_889) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {415}let v_891: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_879)) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-2-tuple(v_885))))) then dhexp(2-proj-2-tuple(v_885),v_882) else fail-any) else fail-any)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_890)) then cipherstatepack(2-proj-3-tuple(v_890),minnonce) else fail-any),1-proj-3-tuple(v_890),3-proj-3-tuple(v_886)) else fail-any) else fail-any) else fail-any)) in
            {416}let v_892: bitstring = catch-fail(symmetricstateunpack(v_891)) in
            {417}let v_893: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
            {418}let v_894: aead = catch-fail(decrypt(1-proj-2-tuple(v_893),2-proj-2-tuple(v_893),3-proj-3-tuple(v_892),3-proj-3-tuple(v_880))) in
            {419}let v_895: bitstring = catch-fail(aeadunpack(v_894)) in
            {420}let v_896: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
            {421}let v_897: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_893))) && success?(1-proj-3-tuple(v_892))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-2-tuple(v_896))))) then cipherstatepack(1-proj-2-tuple(v_896),increment_nonce(2-proj-2-tuple(v_893))) else fail-any) else fail-any)) in
            {422}let v_898: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_880)) && (success?(3-proj-3-tuple(v_892)) && success?(1-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then (if not-caught-fail(v_894) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if not-caught-fail(v_897) then (v_897,3-proj-3-tuple(v_895),1-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {423}let v_899: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) in
            {424}let v_900: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_880)) && success?(symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then symmetricstatepack(1-proj-3-tuple(v_899),2-proj-3-tuple(v_899),hash(3-proj-3-tuple(v_899),3-proj-3-tuple(v_880))) else fail-any) else fail-any)) in
            {425}let v_901: bitstring = catch-fail((if success?(3-proj-3-tuple(v_880)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if not-caught-fail(v_900) then (v_900,2-proj-3-tuple(v_898),3-proj-3-tuple(v_898)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {426}let v_902: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_901),2-proj-7-tuple(v_879),3-proj-7-tuple(v_879),4-proj-7-tuple(v_879),v_882,6-proj-7-tuple(v_879),7-proj-7-tuple(v_879))) in
            {427}let (hs_903: handshakestate,plaintext_a_904: bitstring,valid_905: bool) = (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-7-tuple(v_879))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (if not-caught-fail(v_884) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if (v_881 && 3-proj-3-tuple(v_901)) then (if not-caught-fail(v_902) then (v_902,2-proj-3-tuple(v_901),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {428}event RecvMsg(bob,charlie,stagepack_a(getpublickey(handshakestategete(hs_903)),handshakestategetre(hs_903)),plaintext_a_904);
            {429}insert statestore(bob,charlie,sid_b,statepack_b(hs_903))
        ) | (
            {468}get statestore(=bob,=charlie,=sid_b,statepack_b(hs_906: handshakestate)) in
            {431}let v_907: bitstring = catch-fail(handshakestateunpack(hs_906)) in
            {432}let v_908: bitstring = catch-fail((empty,empty,empty)) in
            {433}let v_909: key = catch-fail(dhexp(key_e(bob,charlie,sid_b),g)) in
            {434}let v_910: keypair = catch-fail((if not-caught-fail(v_909) then keypairpack(v_909,key_e(bob,charlie,sid_b)) else fail-any)) in
            {435}let v_911: bitstring = catch-fail(getpublickey(v_910)) in
            {436}let v_912: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_907))) in
            {437}let v_913: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_907)) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then symmetricstatepack(1-proj-3-tuple(v_912),2-proj-3-tuple(v_912),hash(3-proj-3-tuple(v_912),v_911)) else fail-any) else fail-any)) in
            {438}let v_914: bitstring = catch-fail(keypairunpack(v_910)) in
            {439}let v_915: bitstring = catch-fail(symmetricstateunpack(v_913)) in
            {440}let v_916: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
            {441}let v_917: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
            {442}let v_918: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_915),(if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any))) in
            {443}let v_919: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_915))) then (if not-caught-fail(v_916) then (if not-caught-fail(v_917) then (if not-caught-fail(v_918) then (v_916,v_917,v_918) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {444}let v_920: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_907)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-2-tuple(v_914))))) then dhexp(2-proj-2-tuple(v_914),5-proj-7-tuple(v_907)) else fail-any) else fail-any)) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_919)) then cipherstatepack(2-proj-3-tuple(v_919),minnonce) else fail-any),1-proj-3-tuple(v_919),3-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any)) in
            {445}let v_921: bitstring = catch-fail(symmetricstateunpack(v_920)) in
            {446}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
            {447}let v_923: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_922),2-proj-2-tuple(v_922),3-proj-3-tuple(v_921),msg_b(bob,charlie))) in
            {448}let v_924: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_921))) in
            {449}let v_925: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_922))) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then cipherstatepack(1-proj-2-tuple(v_924),increment_nonce(2-proj-2-tuple(v_922))) else fail-any) else fail-any)) in
            {450}let v_926: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_921)) && success?(1-proj-3-tuple(v_921))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_925) then (v_925,v_923) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {451}let v_927: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_926),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) in
            {452}let v_928: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_926)) && success?(symmetricstatepack(1-proj-2-tuple(v_926),2-proj-3-tuple(v_921),3-proj-3-tuple(v_921)))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then symmetricstatepack(1-proj-3-tuple(v_927),2-proj-3-tuple(v_927),hash(3-proj-3-tuple(v_927),2-proj-2-tuple(v_926))) else fail-any) else fail-any)) in
            {453}let v_929: bitstring = catch-fail((if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-2-tuple(v_926))))) then (if not-caught-fail(v_928) then (v_928,2-proj-2-tuple(v_926)) else fail-any) else fail-any) else fail-any)) in
            {454}let v_930: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_929),2-proj-7-tuple(v_907),v_910,4-proj-7-tuple(v_907),5-proj-7-tuple(v_907),6-proj-7-tuple(v_907),7-proj-7-tuple(v_907))) in
            {455}let v_931: bitstring = catch-fail(concat3(v_911,2-proj-3-tuple(v_908),2-proj-2-tuple(v_929))) in
            {456}let v_932: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_929))) in
            {457}let v_933: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_932),zero)) in
            {458}let v_934: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_932),zero)) in
            {459}let v_935: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_932),zero)) in
            {460}let v_936: bitstring = catch-fail((if success?(2-proj-3-tuple(v_932)) then (if not-caught-fail(v_933) then (if not-caught-fail(v_934) then (if not-caught-fail(v_935) then (v_933,v_934,v_935) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {461}let v_937: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_936)) then cipherstatepack(1-proj-3-tuple(v_936),minnonce) else fail-any)) in
            {462}let v_938: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_936)) then cipherstatepack(2-proj-3-tuple(v_936),minnonce) else fail-any)) in
            {463}let v_939: bitstring = catch-fail((if success?(1-proj-2-tuple(v_929)) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then (if not-caught-fail(v_937) then (if not-caught-fail(v_938) then (1-proj-2-tuple(v_929),v_937,v_938) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {464}let (hs_940: handshakestate,message_b_941: bitstring,cs1_942: cipherstate,cs2_943: cipherstate) = (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-7-tuple(v_907))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_910) then (if not-caught-fail(v_911) then (if not-caught-fail(v_913) then (if not-caught-fail(v_920) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-2-tuple(v_929))))) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (v_930,v_931,2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {465}event SendMsg(bob,charlie,stagepack_b(getpublickey(handshakestategete(hs_940)),handshakestategetre(hs_940)),msg_b(bob,charlie));
            {466}insert statestore(bob,charlie,sid_b,statepack_c(hs_940,cs1_942,cs2_943));
            {467}out(pub, message_b_941)
        ) | (
            {469}!
            {489}get statestore(=bob,=charlie,=sid_b,statepack_c(hs_944: handshakestate,cs1_945: cipherstate,cs2_946: cipherstate)) in
            {470}let hs_947: handshakestate = handshakestatesetcs(hs_944,cs1_945) in
            {471}in(pub, message_c_948: bitstring);
            {472}let v_949: bitstring = catch-fail(handshakestateunpack(hs_947)) in
            {473}let v_950: bitstring = catch-fail(deconcat3(message_c_948)) in
            {474}let v_951: bool = catch-fail(true) in
            {475}let v_952: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_949))) in
            {476}let v_953: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_952))) in
            {477}let v_954: aead = catch-fail(decrypt(1-proj-2-tuple(v_953),2-proj-2-tuple(v_953),3-proj-3-tuple(v_952),3-proj-3-tuple(v_950))) in
            {478}let v_955: bitstring = catch-fail(aeadunpack(v_954)) in
            {479}let v_956: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_952))) in
            {480}let v_957: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_953))) && success?(1-proj-3-tuple(v_952))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then cipherstatepack(1-proj-2-tuple(v_956),increment_nonce(2-proj-2-tuple(v_953))) else fail-any) else fail-any)) in
            {481}let v_958: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && (success?(3-proj-3-tuple(v_952)) && success?(1-proj-3-tuple(v_952)))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-2-tuple(v_953))))) then (if not-caught-fail(v_954) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if not-caught-fail(v_957) then (v_957,3-proj-3-tuple(v_955),1-proj-3-tuple(v_955)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {482}let v_959: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)))) in
            {483}let v_960: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(symmetricstatepack(1-proj-3-tuple(v_958),2-proj-3-tuple(v_952),3-proj-3-tuple(v_952)))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-3-tuple(v_959))))) then symmetricstatepack(1-proj-3-tuple(v_959),2-proj-3-tuple(v_959),hash(3-proj-3-tuple(v_959),3-proj-3-tuple(v_950))) else fail-any) else fail-any)) in
            {484}let v_961: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_950)) && success?(1-proj-7-tuple(v_949))) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if not-caught-fail(v_960) then (v_960,2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {485}let v_962: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_961),2-proj-7-tuple(v_949),3-proj-7-tuple(v_949),4-proj-7-tuple(v_949),5-proj-7-tuple(v_949),6-proj-7-tuple(v_949),7-proj-7-tuple(v_949))) in
            {486}let (hs_963: handshakestate,plaintext_c_964: bitstring,valid_965: bool) = (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-7-tuple(v_949))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_951) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then (if (v_951 && 3-proj-3-tuple(v_961)) then (if not-caught-fail(v_962) then (v_962,2-proj-3-tuple(v_961),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {487}event RecvMsg(bob,charlie,stagepack_c(getpublickey(handshakestategete(hs_963)),handshakestategetre(hs_963)),plaintext_c_964);
            {488}insert statestore(bob,charlie,sid_b,statepack_d(hs_963,handshakestategetcs(hs_963),cs2_946))
        ) | (
            {490}!
            {508}get statestore(=bob,=charlie,=sid_b,statepack_d(hs_966: handshakestate,cs1_967: cipherstate,cs2_968: cipherstate)) in
            {491}let hs_969: handshakestate = handshakestatesetcs(hs_966,cs2_968) in
            {492}let v_970: bitstring = catch-fail(handshakestateunpack(hs_969)) in
            {493}let v_971: bitstring = catch-fail((empty,empty,empty)) in
            {494}let v_972: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_970))) in
            {495}let v_973: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_972))) in
            {496}let v_974: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_973),2-proj-2-tuple(v_973),3-proj-3-tuple(v_972),msg_d(bob,charlie))) in
            {497}let v_975: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_972))) in
            {498}let v_976: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_973))) && success?(1-proj-3-tuple(v_972))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-2-tuple(v_975))))) then cipherstatepack(1-proj-2-tuple(v_975),increment_nonce(2-proj-2-tuple(v_973))) else fail-any) else fail-any)) in
            {499}let v_977: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_972)) && success?(1-proj-3-tuple(v_972))) then (if (not-caught-fail(v_973) && success?(is-true(success?(1-proj-2-tuple(v_973))))) then (if not-caught-fail(v_974) then (if not-caught-fail(v_976) then (v_976,v_974) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {500}let v_978: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_977),2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)))) in
            {501}let v_979: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_977)) && success?(symmetricstatepack(1-proj-2-tuple(v_977),2-proj-3-tuple(v_972),3-proj-3-tuple(v_972)))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-3-tuple(v_978))))) then symmetricstatepack(1-proj-3-tuple(v_978),2-proj-3-tuple(v_978),hash(3-proj-3-tuple(v_978),2-proj-2-tuple(v_977))) else fail-any) else fail-any)) in
            {502}let v_980: bitstring = catch-fail((if success?(1-proj-7-tuple(v_970)) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-2-tuple(v_977))))) then (if not-caught-fail(v_979) then (v_979,2-proj-2-tuple(v_977)) else fail-any) else fail-any) else fail-any) else fail-any)) in
            {503}let v_981: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_980),2-proj-7-tuple(v_970),3-proj-7-tuple(v_970),4-proj-7-tuple(v_970),5-proj-7-tuple(v_970),6-proj-7-tuple(v_970),7-proj-7-tuple(v_970))) in
            {504}let v_982: bitstring = catch-fail(concat3(1-proj-3-tuple(v_971),2-proj-3-tuple(v_971),2-proj-2-tuple(v_980))) in
            {505}let (hs_983: handshakestate,message_d_984: bitstring) = (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-7-tuple(v_970))))) then (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-3-tuple(v_971))))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-2-tuple(v_980))))) then (if not-caught-fail(v_981) then (if not-caught-fail(v_982) then (v_981,v_982) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
            {506}event SendMsg(bob,charlie,stagepack_d(getpublickey(handshakestategete(hs_983)),handshakestategetre(hs_983)),msg_d(bob,charlie));
            {507}out(pub, message_d_984)
        ) | (
            {509}event LeakS(phase0,bob);
            {510}out(pub, key_s(bob))
        ) | (
            {511}phase 1;
            {512}event LeakS(phase1,bob);
            {513}out(pub, key_s(bob))
        )
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_a(ae,be),m)); event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,c_1119,stagepack_a(ae,be),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,c_1119,stagepack_a(ae,be),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_a(ae,be),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_a(ae,be),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_b(be,ae),m)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,c_1119,stagepack_b(be,ae),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,c_1119,stagepack_b(be,ae),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_b(be,ae),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_b(be,ae),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_c(ae,be),m)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,c_1119,stagepack_c(ae,be),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,c_1119,stagepack_c(ae,be),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_c(ae,be),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(be,ae),m)) ==> event(SendMsg(alice,bob,stagepack_c(ae,be),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_d(be,ae),m)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,c_1119,stagepack_d(be,ae),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,c_1119,stagepack_d(be,ae),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_d(be,ae),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(ae,be),m)) ==> event(SendMsg(bob,alice,stagepack_d(be,ae),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 94 rules in the queue.
400 rules inserted. The rule base contains 389 rules. 71 rules in the queue.
600 rules inserted. The rule base contains 588 rules. 323 rules in the queue.
800 rules inserted. The rule base contains 776 rules. 246 rules in the queue.
1000 rules inserted. The rule base contains 940 rules. 230 rules in the queue.
1200 rules inserted. The rule base contains 1125 rules. 315 rules in the queue.
1400 rules inserted. The rule base contains 1318 rules. 382 rules in the queue.
1600 rules inserted. The rule base contains 1441 rules. 390 rules in the queue.
1800 rules inserted. The rule base contains 1598 rules. 400 rules in the queue.
2000 rules inserted. The rule base contains 1754 rules. 405 rules in the queue.
2200 rules inserted. The rule base contains 1924 rules. 409 rules in the queue.
2400 rules inserted. The rule base contains 2021 rules. 393 rules in the queue.
2600 rules inserted. The rule base contains 2139 rules. 414 rules in the queue.
2800 rules inserted. The rule base contains 2232 rules. 434 rules in the queue.
3000 rules inserted. The rule base contains 2371 rules. 529 rules in the queue.
3200 rules inserted. The rule base contains 2526 rules. 525 rules in the queue.
3400 rules inserted. The rule base contains 2552 rules. 517 rules in the queue.
3600 rules inserted. The rule base contains 2680 rules. 594 rules in the queue.
3800 rules inserted. The rule base contains 2779 rules. 605 rules in the queue.
4000 rules inserted. The rule base contains 2884 rules. 787 rules in the queue.
4200 rules inserted. The rule base contains 3040 rules. 994 rules in the queue.
4400 rules inserted. The rule base contains 3073 rules. 965 rules in the queue.
4600 rules inserted. The rule base contains 3221 rules. 1051 rules in the queue.
4800 rules inserted. The rule base contains 3405 rules. 1211 rules in the queue.
5000 rules inserted. The rule base contains 3596 rules. 1400 rules in the queue.
5200 rules inserted. The rule base contains 3769 rules. 1459 rules in the queue.
5400 rules inserted. The rule base contains 3914 rules. 1380 rules in the queue.
5600 rules inserted. The rule base contains 4094 rules. 1369 rules in the queue.
5800 rules inserted. The rule base contains 4282 rules. 1247 rules in the queue.
6000 rules inserted. The rule base contains 4460 rules. 1198 rules in the queue.
6200 rules inserted. The rule base contains 4642 rules. 1138 rules in the queue.
6400 rules inserted. The rule base contains 4830 rules. 1017 rules in the queue.
6600 rules inserted. The rule base contains 5000 rules. 967 rules in the queue.
6800 rules inserted. The rule base contains 5143 rules. 1019 rules in the queue.
7000 rules inserted. The rule base contains 5317 rules. 1141 rules in the queue.
7200 rules inserted. The rule base contains 5479 rules. 1194 rules in the queue.
7400 rules inserted. The rule base contains 5675 rules. 1316 rules in the queue.
7600 rules inserted. The rule base contains 5848 rules. 1278 rules in the queue.
7800 rules inserted. The rule base contains 5945 rules. 1337 rules in the queue.
8000 rules inserted. The rule base contains 6094 rules. 1514 rules in the queue.
8200 rules inserted. The rule base contains 6258 rules. 1534 rules in the queue.
8400 rules inserted. The rule base contains 6387 rules. 1702 rules in the queue.
8600 rules inserted. The rule base contains 6545 rules. 1780 rules in the queue.
8800 rules inserted. The rule base contains 6709 rules. 1776 rules in the queue.
9000 rules inserted. The rule base contains 6800 rules. 1865 rules in the queue.
9200 rules inserted. The rule base contains 6937 rules. 1882 rules in the queue.
9400 rules inserted. The rule base contains 7059 rules. 1916 rules in the queue.
9600 rules inserted. The rule base contains 7178 rules. 1936 rules in the queue.
9800 rules inserted. The rule base contains 7303 rules. 2086 rules in the queue.
10000 rules inserted. The rule base contains 7428 rules. 2039 rules in the queue.
10200 rules inserted. The rule base contains 7543 rules. 2099 rules in the queue.
10400 rules inserted. The rule base contains 7668 rules. 2100 rules in the queue.
10600 rules inserted. The rule base contains 7786 rules. 2181 rules in the queue.
10800 rules inserted. The rule base contains 7930 rules. 2220 rules in the queue.
11000 rules inserted. The rule base contains 8062 rules. 2276 rules in the queue.
11200 rules inserted. The rule base contains 8208 rules. 2559 rules in the queue.
11400 rules inserted. The rule base contains 8375 rules. 2542 rules in the queue.
11600 rules inserted. The rule base contains 8545 rules. 2603 rules in the queue.
11800 rules inserted. The rule base contains 8682 rules. 2583 rules in the queue.
12000 rules inserted. The rule base contains 8825 rules. 2720 rules in the queue.
12200 rules inserted. The rule base contains 8979 rules. 2929 rules in the queue.
12400 rules inserted. The rule base contains 9149 rules. 2916 rules in the queue.
12600 rules inserted. The rule base contains 9287 rules. 2941 rules in the queue.
12800 rules inserted. The rule base contains 9439 rules. 2967 rules in the queue.
13000 rules inserted. The rule base contains 9572 rules. 3041 rules in the queue.
13200 rules inserted. The rule base contains 9732 rules. 3192 rules in the queue.
13400 rules inserted. The rule base contains 9880 rules. 3242 rules in the queue.
13600 rules inserted. The rule base contains 10046 rules. 3319 rules in the queue.
13800 rules inserted. The rule base contains 10179 rules. 3296 rules in the queue.
14000 rules inserted. The rule base contains 10375 rules. 3297 rules in the queue.
14200 rules inserted. The rule base contains 10506 rules. 3279 rules in the queue.
14400 rules inserted. The rule base contains 10640 rules. 3428 rules in the queue.
14600 rules inserted. The rule base contains 10805 rules. 3493 rules in the queue.
14800 rules inserted. The rule base contains 10971 rules. 3597 rules in the queue.
15000 rules inserted. The rule base contains 11127 rules. 3607 rules in the queue.
15200 rules inserted. The rule base contains 11271 rules. 3604 rules in the queue.
15400 rules inserted. The rule base contains 11465 rules. 3621 rules in the queue.
15600 rules inserted. The rule base contains 11590 rules. 3602 rules in the queue.
15800 rules inserted. The rule base contains 11714 rules. 3658 rules in the queue.
16000 rules inserted. The rule base contains 11879 rules. 3801 rules in the queue.
16200 rules inserted. The rule base contains 12019 rules. 3837 rules in the queue.
16400 rules inserted. The rule base contains 12154 rules. 3816 rules in the queue.
16600 rules inserted. The rule base contains 12286 rules. 3790 rules in the queue.
16800 rules inserted. The rule base contains 12417 rules. 3775 rules in the queue.
17000 rules inserted. The rule base contains 12558 rules. 3867 rules in the queue.
17200 rules inserted. The rule base contains 12734 rules. 3942 rules in the queue.
17400 rules inserted. The rule base contains 12897 rules. 3999 rules in the queue.
17600 rules inserted. The rule base contains 13041 rules. 4215 rules in the queue.
17800 rules inserted. The rule base contains 13204 rules. 4225 rules in the queue.
18000 rules inserted. The rule base contains 13320 rules. 4215 rules in the queue.
18200 rules inserted. The rule base contains 13453 rules. 4200 rules in the queue.
18400 rules inserted. The rule base contains 13587 rules. 4167 rules in the queue.
18600 rules inserted. The rule base contains 13737 rules. 4228 rules in the queue.
18800 rules inserted. The rule base contains 13893 rules. 4318 rules in the queue.
19000 rules inserted. The rule base contains 14086 rules. 4368 rules in the queue.
19200 rules inserted. The rule base contains 14215 rules. 4362 rules in the queue.
19400 rules inserted. The rule base contains 14374 rules. 4425 rules in the queue.
19600 rules inserted. The rule base contains 14501 rules. 4474 rules in the queue.
19800 rules inserted. The rule base contains 14636 rules. 4458 rules in the queue.
20000 rules inserted. The rule base contains 14774 rules. 4442 rules in the queue.
20200 rules inserted. The rule base contains 14928 rules. 4615 rules in the queue.
20400 rules inserted. The rule base contains 15076 rules. 4835 rules in the queue.
20600 rules inserted. The rule base contains 15228 rules. 5054 rules in the queue.
20800 rules inserted. The rule base contains 15388 rules. 5126 rules in the queue.
21000 rules inserted. The rule base contains 15536 rules. 5167 rules in the queue.
21200 rules inserted. The rule base contains 15736 rules. 5198 rules in the queue.
21400 rules inserted. The rule base contains 15898 rules. 5287 rules in the queue.
21600 rules inserted. The rule base contains 16039 rules. 5311 rules in the queue.
21800 rules inserted. The rule base contains 16161 rules. 5307 rules in the queue.
22000 rules inserted. The rule base contains 16299 rules. 5285 rules in the queue.
22200 rules inserted. The rule base contains 16453 rules. 5449 rules in the queue.
22400 rules inserted. The rule base contains 16605 rules. 5614 rules in the queue.
22600 rules inserted. The rule base contains 16753 rules. 5822 rules in the queue.
22800 rules inserted. The rule base contains 16927 rules. 5949 rules in the queue.
23000 rules inserted. The rule base contains 17057 rules. 6000 rules in the queue.
23200 rules inserted. The rule base contains 17257 rules. 6032 rules in the queue.
23400 rules inserted. The rule base contains 17445 rules. 6021 rules in the queue.
23600 rules inserted. The rule base contains 17623 rules. 6031 rules in the queue.
23800 rules inserted. The rule base contains 17751 rules. 6017 rules in the queue.
24000 rules inserted. The rule base contains 17880 rules. 6009 rules in the queue.
24200 rules inserted. The rule base contains 18036 rules. 6209 rules in the queue.
24400 rules inserted. The rule base contains 18188 rules. 6361 rules in the queue.
24600 rules inserted. The rule base contains 18357 rules. 6503 rules in the queue.
24800 rules inserted. The rule base contains 18509 rules. 6602 rules in the queue.
25000 rules inserted. The rule base contains 18676 rules. 6660 rules in the queue.
25200 rules inserted. The rule base contains 18809 rules. 6705 rules in the queue.
25400 rules inserted. The rule base contains 18961 rules. 6800 rules in the queue.
25600 rules inserted. The rule base contains 19135 rules. 6841 rules in the queue.
25800 rules inserted. The rule base contains 19259 rules. 6836 rules in the queue.
26000 rules inserted. The rule base contains 19397 rules. 6808 rules in the queue.
26200 rules inserted. The rule base contains 19591 rules. 6853 rules in the queue.
26400 rules inserted. The rule base contains 19749 rules. 6857 rules in the queue.
26600 rules inserted. The rule base contains 19878 rules. 6865 rules in the queue.
26800 rules inserted. The rule base contains 20009 rules. 6854 rules in the queue.
27000 rules inserted. The rule base contains 20174 rules. 7040 rules in the queue.
27200 rules inserted. The rule base contains 20313 rules. 7191 rules in the queue.
27400 rules inserted. The rule base contains 20499 rules. 7352 rules in the queue.
27600 rules inserted. The rule base contains 20639 rules. 7388 rules in the queue.
27800 rules inserted. The rule base contains 20799 rules. 7523 rules in the queue.
28000 rules inserted. The rule base contains 20951 rules. 7554 rules in the queue.
28200 rules inserted. The rule base contains 21091 rules. 7590 rules in the queue.
28400 rules inserted. The rule base contains 21263 rules. 7699 rules in the queue.
28600 rules inserted. The rule base contains 21403 rules. 7655 rules in the queue.
28800 rules inserted. The rule base contains 21532 rules. 7640 rules in the queue.
29000 rules inserted. The rule base contains 21712 rules. 7677 rules in the queue.
29200 rules inserted. The rule base contains 21895 rules. 7705 rules in the queue.
29400 rules inserted. The rule base contains 22050 rules. 7713 rules in the queue.
29600 rules inserted. The rule base contains 22177 rules. 7773 rules in the queue.
29800 rules inserted. The rule base contains 22302 rules. 7944 rules in the queue.
30000 rules inserted. The rule base contains 22465 rules. 8182 rules in the queue.
30200 rules inserted. The rule base contains 22630 rules. 8304 rules in the queue.
30400 rules inserted. The rule base contains 22782 rules. 8399 rules in the queue.
30600 rules inserted. The rule base contains 22934 rules. 8412 rules in the queue.
30800 rules inserted. The rule base contains 23105 rules. 8351 rules in the queue.
31000 rules inserted. The rule base contains 23239 rules. 8323 rules in the queue.
31200 rules inserted. The rule base contains 23373 rules. 8306 rules in the queue.
31400 rules inserted. The rule base contains 23514 rules. 8324 rules in the queue.
31600 rules inserted. The rule base contains 23648 rules. 8300 rules in the queue.
31800 rules inserted. The rule base contains 23789 rules. 8325 rules in the queue.
32000 rules inserted. The rule base contains 23923 rules. 8291 rules in the queue.
32200 rules inserted. The rule base contains 24072 rules. 8318 rules in the queue.
32400 rules inserted. The rule base contains 24222 rules. 8307 rules in the queue.
32600 rules inserted. The rule base contains 24377 rules. 8467 rules in the queue.
32800 rules inserted. The rule base contains 24533 rules. 8663 rules in the queue.
33000 rules inserted. The rule base contains 24730 rules. 8715 rules in the queue.
33200 rules inserted. The rule base contains 24883 rules. 8719 rules in the queue.
33400 rules inserted. The rule base contains 25031 rules. 8870 rules in the queue.
33600 rules inserted. The rule base contains 25167 rules. 9020 rules in the queue.
33800 rules inserted. The rule base contains 25357 rules. 9280 rules in the queue.
34000 rules inserted. The rule base contains 25503 rules. 9309 rules in the queue.
34200 rules inserted. The rule base contains 25658 rules. 9431 rules in the queue.
34400 rules inserted. The rule base contains 25813 rules. 9408 rules in the queue.
34600 rules inserted. The rule base contains 25966 rules. 9334 rules in the queue.
34800 rules inserted. The rule base contains 26102 rules. 9304 rules in the queue.
35000 rules inserted. The rule base contains 26243 rules. 9331 rules in the queue.
35200 rules inserted. The rule base contains 26379 rules. 9301 rules in the queue.
35400 rules inserted. The rule base contains 26522 rules. 9329 rules in the queue.
35600 rules inserted. The rule base contains 26654 rules. 9301 rules in the queue.
35800 rules inserted. The rule base contains 26802 rules. 9321 rules in the queue.
36000 rules inserted. The rule base contains 26943 rules. 9293 rules in the queue.
36200 rules inserted. The rule base contains 27103 rules. 9425 rules in the queue.
36400 rules inserted. The rule base contains 27239 rules. 9597 rules in the queue.
36600 rules inserted. The rule base contains 27432 rules. 9709 rules in the queue.
36800 rules inserted. The rule base contains 27628 rules. 9725 rules in the queue.
37000 rules inserted. The rule base contains 27789 rules. 9744 rules in the queue.
37200 rules inserted. The rule base contains 27978 rules. 9748 rules in the queue.
37400 rules inserted. The rule base contains 28120 rules. 9841 rules in the queue.
37600 rules inserted. The rule base contains 28264 rules. 9937 rules in the queue.
37800 rules inserted. The rule base contains 28423 rules. 9947 rules in the queue.
38000 rules inserted. The rule base contains 28576 rules. 9901 rules in the queue.
38200 rules inserted. The rule base contains 28732 rules. 9778 rules in the queue.
38400 rules inserted. The rule base contains 28868 rules. 9750 rules in the queue.
38600 rules inserted. The rule base contains 29009 rules. 9781 rules in the queue.
38800 rules inserted. The rule base contains 29145 rules. 9751 rules in the queue.
39000 rules inserted. The rule base contains 29286 rules. 9775 rules in the queue.
39200 rules inserted. The rule base contains 29458 rules. 9902 rules in the queue.
39400 rules inserted. The rule base contains 29594 rules. 10073 rules in the queue.
39600 rules inserted. The rule base contains 29760 rules. 10282 rules in the queue.
39800 rules inserted. The rule base contains 29896 rules. 10452 rules in the queue.
40000 rules inserted. The rule base contains 30062 rules. 10671 rules in the queue.
40200 rules inserted. The rule base contains 30198 rules. 10832 rules in the queue.
40400 rules inserted. The rule base contains 30368 rules. 11061 rules in the queue.
40600 rules inserted. The rule base contains 30552 rules. 11216 rules in the queue.
40800 rules inserted. The rule base contains 30704 rules. 11338 rules in the queue.
41000 rules inserted. The rule base contains 30850 rules. 11405 rules in the queue.
41200 rules inserted. The rule base contains 31000 rules. 11420 rules in the queue.
41400 rules inserted. The rule base contains 31158 rules. 11370 rules in the queue.
41600 rules inserted. The rule base contains 31340 rules. 11317 rules in the queue.
41800 rules inserted. The rule base contains 31344 rules. 11267 rules in the queue.
42000 rules inserted. The rule base contains 31508 rules. 11396 rules in the queue.
42200 rules inserted. The rule base contains 31653 rules. 11435 rules in the queue.
42400 rules inserted. The rule base contains 31794 rules. 11461 rules in the queue.
42600 rules inserted. The rule base contains 31964 rules. 11397 rules in the queue.
42800 rules inserted. The rule base contains 32118 rules. 11295 rules in the queue.
43000 rules inserted. The rule base contains 32238 rules. 11276 rules in the queue.
43200 rules inserted. The rule base contains 32397 rules. 11280 rules in the queue.
43400 rules inserted. The rule base contains 32525 rules. 11270 rules in the queue.
43600 rules inserted. The rule base contains 32676 rules. 11293 rules in the queue.
43800 rules inserted. The rule base contains 32833 rules. 11438 rules in the queue.
44000 rules inserted. The rule base contains 32983 rules. 11591 rules in the queue.
44200 rules inserted. The rule base contains 33133 rules. 11817 rules in the queue.
44400 rules inserted. The rule base contains 33283 rules. 11970 rules in the queue.
44600 rules inserted. The rule base contains 33433 rules. 12196 rules in the queue.
44800 rules inserted. The rule base contains 33584 rules. 12349 rules in the queue.
45000 rules inserted. The rule base contains 33758 rules. 12579 rules in the queue.
45200 rules inserted. The rule base contains 33934 rules. 12731 rules in the queue.
45400 rules inserted. The rule base contains 34093 rules. 12863 rules in the queue.
45600 rules inserted. The rule base contains 34238 rules. 12904 rules in the queue.
