File "NK.noise.active.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 231, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 232, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 232, character 36:
Warning: identifier h rebound.
File "NK.noise.active.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 273, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 274, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 278, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 279, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 286, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 287, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 291, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 323, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 337, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 348, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 505, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 358, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 497, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 498, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 300, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 300, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 301, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 490, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 331, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 332, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 334, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 335, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 337, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 482, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 273, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 274, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 277, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 278, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 278, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 279, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 262, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 558, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 559, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 549, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 551, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 348, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 542, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 286, character 6:
Warning: identifier e rebound.
File "NK.noise.active.pv", line 287, characters 6-7:
Warning: identifier ne rebound.
File "NK.noise.active.pv", line 288, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 291, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 291, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "NK.noise.active.pv", line 292, characters 6-7:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 241, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 242, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 535, characters 8-9:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 317, characters 6-7:
Warning: identifier re rebound.
File "NK.noise.active.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 323, characters 7-8:
Warning: identifier hs rebound.
File "NK.noise.active.pv", line 222, characters 7-8:
Warning: identifier ck rebound.
File "NK.noise.active.pv", line 247, characters 7-8:
Warning: identifier cs rebound.
File "NK.noise.active.pv", line 248, characters 6-7:
Warning: identifier ss rebound.
File "NK.noise.active.pv", line 267, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Completing equations...
Completed equations:
dhexp(b_76,dhexp(a_75,g)) = dhexp(a_75,dhexp(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let s_473: keypair = keypairpack(empty,empty) in
    (
        {5}let e_474: keypair = keypairpack(empty,empty) in
        {6}let v_475: key = catch-fail(dhexp(key_s(bob),g)) in
        {7}let rs_476: key = getpublickey((if not-caught-fail(v_475) then keypairpack(v_475,key_s(bob)) else fail-any)) in
        {8}let re_477: key = empty in
        {9}let v_478: bitstring = catch-fail(hash(somename,empty)) in
        {10}let v_479: key = catch-fail(v_478) in
        {11}let v_480: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {12}let v_481: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any))) in
        {13}let v_482: symmetricstate = catch-fail((if success?((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_481),hash(3-proj-3-tuple(v_481),empty)) else fail-any) else fail-any)) in
        {14}let v_483: bitstring = catch-fail(symmetricstateunpack(v_482)) in
        {15}let v_484: symmetricstate = catch-fail((if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),rs_476)) else fail-any)) in
        {16}let hs: handshakestate = (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then handshakestatepack(v_484,s_473,e_474,rs_476,re_477,empty,true) else fail-any) else fail-any) in
        {17}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {47}get statestore(=alice,=bob,=sid,statepack_a(hs_485: handshakestate)) in
        {18}let v_486: bitstring = catch-fail(handshakestateunpack(hs_485)) in
        {19}let v_487: bitstring = catch-fail((empty,empty,empty)) in
        {20}let v_488: key = catch-fail(dhexp(key_e(alice,bob,sid),g)) in
        {21}let v_489: keypair = catch-fail((if not-caught-fail(v_488) then keypairpack(v_488,key_e(alice,bob,sid)) else fail-any)) in
        {22}let v_490: bitstring = catch-fail(getpublickey(v_489)) in
        {23}let v_491: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_486))) in
        {24}let v_492: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_486)) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then symmetricstatepack(1-proj-3-tuple(v_491),2-proj-3-tuple(v_491),hash(3-proj-3-tuple(v_491),v_490)) else fail-any) else fail-any)) in
        {25}let v_493: bitstring = catch-fail(keypairunpack(v_489)) in
        {26}let v_494: bitstring = catch-fail(symmetricstateunpack(v_492)) in
        {27}let v_495: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_494),(if success?(4-proj-7-tuple(v_486)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),4-proj-7-tuple(v_486)) else fail-any) else fail-any))) in
        {28}let v_496: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_494),(if success?(4-proj-7-tuple(v_486)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),4-proj-7-tuple(v_486)) else fail-any) else fail-any))) in
        {29}let v_497: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_494),(if success?(4-proj-7-tuple(v_486)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),4-proj-7-tuple(v_486)) else fail-any) else fail-any))) in
        {30}let v_498: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_486)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),4-proj-7-tuple(v_486)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_494))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_496) then (if not-caught-fail(v_497) then (v_495,v_496,v_497) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {31}let v_499: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_486)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then dhexp(2-proj-2-tuple(v_493),4-proj-7-tuple(v_486)) else fail-any) else fail-any)) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-3-tuple(v_494))))) then (if (not-caught-fail(v_498) && success?(is-true(success?(1-proj-3-tuple(v_498))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_498)) then cipherstatepack(2-proj-3-tuple(v_498),minnonce) else fail-any),1-proj-3-tuple(v_498),3-proj-3-tuple(v_494)) else fail-any) else fail-any) else fail-any)) in
        {32}let v_500: bitstring = catch-fail(symmetricstateunpack(v_499)) in
        {33}let v_501: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_500))) in
        {34}let v_502: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_501),2-proj-2-tuple(v_501),3-proj-3-tuple(v_500),msg_a(alice,bob,sid))) in
        {35}let v_503: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_500))) in
        {36}let v_504: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_501))) && success?(1-proj-3-tuple(v_500))) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-2-tuple(v_503))))) then cipherstatepack(1-proj-2-tuple(v_503),increment_nonce(2-proj-2-tuple(v_501))) else fail-any) else fail-any)) in
        {37}let v_505: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_500)) && success?(1-proj-3-tuple(v_500))) then (if (not-caught-fail(v_501) && success?(is-true(success?(1-proj-2-tuple(v_501))))) then (if not-caught-fail(v_502) then (if not-caught-fail(v_504) then (v_504,v_502) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_506: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_505),2-proj-3-tuple(v_500),3-proj-3-tuple(v_500)))) in
        {39}let v_507: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_505)) && success?(symmetricstatepack(1-proj-2-tuple(v_505),2-proj-3-tuple(v_500),3-proj-3-tuple(v_500)))) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then symmetricstatepack(1-proj-3-tuple(v_506),2-proj-3-tuple(v_506),hash(3-proj-3-tuple(v_506),2-proj-2-tuple(v_505))) else fail-any) else fail-any)) in
        {40}let v_508: bitstring = catch-fail((if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then (if not-caught-fail(v_507) then (v_507,2-proj-2-tuple(v_505)) else fail-any) else fail-any) else fail-any)) in
        {41}let v_509: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_508),2-proj-7-tuple(v_486),v_489,4-proj-7-tuple(v_486),5-proj-7-tuple(v_486),6-proj-7-tuple(v_486),7-proj-7-tuple(v_486))) in
        {42}let v_510: bitstring = catch-fail(concat3(v_490,2-proj-3-tuple(v_487),2-proj-2-tuple(v_508))) in
        {43}let (hs_511: handshakestate,message_a: bitstring) = (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-7-tuple(v_486))))) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (if not-caught-fail(v_489) then (if not-caught-fail(v_490) then (if not-caught-fail(v_492) then (if not-caught-fail(v_499) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-2-tuple(v_508))))) then (if not-caught-fail(v_509) then (if not-caught-fail(v_510) then (v_509,v_510) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {44}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {45}insert statestore(alice,bob,sid,statepack_b(hs_511));
        {46}out(pub, message_a)
    ) | (
        {84}get statestore(=alice,=bob,=sid,statepack_b(hs_512: handshakestate)) in
        {48}in(pub, message_b: bitstring);
        {49}let v_513: bitstring = catch-fail(handshakestateunpack(hs_512)) in
        {50}let v_514: bitstring = catch-fail(deconcat3(message_b)) in
        {51}let v_515: bool = catch-fail(true) in
        {52}let v_516: key = catch-fail(1-proj-3-tuple(v_514)) in
        {53}let v_517: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_513))) in
        {54}let v_518: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_513)) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-3-tuple(v_517))))) then symmetricstatepack(1-proj-3-tuple(v_517),2-proj-3-tuple(v_517),hash(3-proj-3-tuple(v_517),v_516)) else fail-any) else fail-any)) in
        {55}let v_519: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_513))) in
        {56}let v_520: bitstring = catch-fail(symmetricstateunpack(v_518)) in
        {57}let v_521: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_520),(if success?(3-proj-7-tuple(v_513)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_516) else fail-any) else fail-any))) in
        {58}let v_522: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_520),(if success?(3-proj-7-tuple(v_513)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_516) else fail-any) else fail-any))) in
        {59}let v_523: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_520),(if success?(3-proj-7-tuple(v_513)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_516) else fail-any) else fail-any))) in
        {60}let v_524: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_513)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_516) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_520))) then (if not-caught-fail(v_521) then (if not-caught-fail(v_522) then (if not-caught-fail(v_523) then (v_521,v_522,v_523) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_525: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_513)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then dhexp(2-proj-2-tuple(v_519),v_516) else fail-any) else fail-any)) then (if (not-caught-fail(v_520) && success?(is-true(success?(1-proj-3-tuple(v_520))))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_524)) then cipherstatepack(2-proj-3-tuple(v_524),minnonce) else fail-any),1-proj-3-tuple(v_524),3-proj-3-tuple(v_520)) else fail-any) else fail-any) else fail-any)) in
        {62}let v_526: bitstring = catch-fail(symmetricstateunpack(v_525)) in
        {63}let v_527: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_526))) in
        {64}let v_528: aead = catch-fail(decrypt(1-proj-2-tuple(v_527),2-proj-2-tuple(v_527),3-proj-3-tuple(v_526),3-proj-3-tuple(v_514))) in
        {65}let v_529: bitstring = catch-fail(aeadunpack(v_528)) in
        {66}let v_530: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_526))) in
        {67}let v_531: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_527))) && success?(1-proj-3-tuple(v_526))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-2-tuple(v_530))))) then cipherstatepack(1-proj-2-tuple(v_530),increment_nonce(2-proj-2-tuple(v_527))) else fail-any) else fail-any)) in
        {68}let v_532: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_514)) && (success?(3-proj-3-tuple(v_526)) && success?(1-proj-3-tuple(v_526)))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then (if not-caught-fail(v_528) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-3-tuple(v_529))))) then (if not-caught-fail(v_531) then (v_531,3-proj-3-tuple(v_529),1-proj-3-tuple(v_529)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {69}let v_533: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_532),2-proj-3-tuple(v_526),3-proj-3-tuple(v_526)))) in
        {70}let v_534: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_514)) && success?(symmetricstatepack(1-proj-3-tuple(v_532),2-proj-3-tuple(v_526),3-proj-3-tuple(v_526)))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then symmetricstatepack(1-proj-3-tuple(v_533),2-proj-3-tuple(v_533),hash(3-proj-3-tuple(v_533),3-proj-3-tuple(v_514))) else fail-any) else fail-any)) in
        {71}let v_535: bitstring = catch-fail((if success?(3-proj-3-tuple(v_514)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-3-tuple(v_532))))) then (if not-caught-fail(v_534) then (v_534,2-proj-3-tuple(v_532),3-proj-3-tuple(v_532)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_536: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_535),2-proj-7-tuple(v_513),3-proj-7-tuple(v_513),4-proj-7-tuple(v_513),v_516,6-proj-7-tuple(v_513),7-proj-7-tuple(v_513))) in
        {73}let v_537: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_535))) in
        {74}let v_538: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_537),zero)) in
        {75}let v_539: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_537),zero)) in
        {76}let v_540: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_537),zero)) in
        {77}let v_541: bitstring = catch-fail((if success?(2-proj-3-tuple(v_537)) then (if not-caught-fail(v_538) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (v_538,v_539,v_540) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {78}let v_542: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_541)) then cipherstatepack(1-proj-3-tuple(v_541),minnonce) else fail-any)) in
        {79}let v_543: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_541)) then cipherstatepack(2-proj-3-tuple(v_541),minnonce) else fail-any)) in
        {80}let v_544: bitstring = catch-fail((if success?(1-proj-3-tuple(v_535)) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-3-tuple(v_537))))) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (1-proj-3-tuple(v_535),v_542,v_543) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {81}let (hs_545: handshakestate,plaintext_b: bitstring,valid: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-7-tuple(v_513))))) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then (if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (if not-caught-fail(v_518) then (if not-caught-fail(v_525) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if (v_515 && 3-proj-3-tuple(v_535)) then (if not-caught-fail(v_536) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (v_536,2-proj-3-tuple(v_535),true,2-proj-3-tuple(v_544),3-proj-3-tuple(v_544)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {82}event RecvMsg(alice,bob,stagepack_b(sid),plaintext_b);
        {83}insert statestore(alice,bob,sid,statepack_c(hs_545,cs1,cs2))
    ) | (
        {85}!
        {104}get statestore(=alice,=bob,=sid,statepack_c(hs_546: handshakestate,cs1_547: cipherstate,cs2_548: cipherstate)) in
        {86}let hs_549: handshakestate = handshakestatesetcs(hs_546,cs1_547) in
        {87}let v_550: bitstring = catch-fail(handshakestateunpack(hs_549)) in
        {88}let v_551: bitstring = catch-fail((empty,empty,empty)) in
        {89}let v_552: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_550))) in
        {90}let v_553: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_552))) in
        {91}let v_554: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_553),2-proj-2-tuple(v_553),3-proj-3-tuple(v_552),msg_c(alice,bob,sid))) in
        {92}let v_555: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_552))) in
        {93}let v_556: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_553))) && success?(1-proj-3-tuple(v_552))) then (if (not-caught-fail(v_555) && success?(is-true(success?(1-proj-2-tuple(v_555))))) then cipherstatepack(1-proj-2-tuple(v_555),increment_nonce(2-proj-2-tuple(v_553))) else fail-any) else fail-any)) in
        {94}let v_557: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_552)) && success?(1-proj-3-tuple(v_552))) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-2-tuple(v_553))))) then (if not-caught-fail(v_554) then (if not-caught-fail(v_556) then (v_556,v_554) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_558: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_557),2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)))) in
        {96}let v_559: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_557)) && success?(symmetricstatepack(1-proj-2-tuple(v_557),2-proj-3-tuple(v_552),3-proj-3-tuple(v_552)))) then (if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then symmetricstatepack(1-proj-3-tuple(v_558),2-proj-3-tuple(v_558),hash(3-proj-3-tuple(v_558),2-proj-2-tuple(v_557))) else fail-any) else fail-any)) in
        {97}let v_560: bitstring = catch-fail((if success?(1-proj-7-tuple(v_550)) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-2-tuple(v_557))))) then (if not-caught-fail(v_559) then (v_559,2-proj-2-tuple(v_557)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_561: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_560),2-proj-7-tuple(v_550),3-proj-7-tuple(v_550),4-proj-7-tuple(v_550),5-proj-7-tuple(v_550),6-proj-7-tuple(v_550),7-proj-7-tuple(v_550))) in
        {99}let v_562: bitstring = catch-fail(concat3(1-proj-3-tuple(v_551),2-proj-3-tuple(v_551),2-proj-2-tuple(v_560))) in
        {100}let (hs_563: handshakestate,message_c: bitstring) = (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-7-tuple(v_550))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-2-tuple(v_560))))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (v_561,v_562) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {101}event SendMsg(alice,bob,stagepack_c(sid),msg_c(alice,bob,sid));
        {102}insert statestore(alice,bob,sid,statepack_d(hs_563,handshakestategetcs(hs_563),cs2_548));
        {103}out(pub, message_c)
    ) | (
        {105}!
        {125}get statestore(=alice,=bob,=sid,statepack_d(hs_564: handshakestate,cs1_565: cipherstate,cs2_566: cipherstate)) in
        {106}let hs_567: handshakestate = handshakestatesetcs(hs_564,cs2_566) in
        {107}in(pub, message_d: bitstring);
        {108}let v_568: bitstring = catch-fail(handshakestateunpack(hs_567)) in
        {109}let v_569: bitstring = catch-fail(deconcat3(message_d)) in
        {110}let v_570: bool = catch-fail(true) in
        {111}let v_571: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_568))) in
        {112}let v_572: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {113}let v_573: aead = catch-fail(decrypt(1-proj-2-tuple(v_572),2-proj-2-tuple(v_572),3-proj-3-tuple(v_571),3-proj-3-tuple(v_569))) in
        {114}let v_574: bitstring = catch-fail(aeadunpack(v_573)) in
        {115}let v_575: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_571))) in
        {116}let v_576: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_572))) && success?(1-proj-3-tuple(v_571))) then (if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-2-tuple(v_575))))) then cipherstatepack(1-proj-2-tuple(v_575),increment_nonce(2-proj-2-tuple(v_572))) else fail-any) else fail-any)) in
        {117}let v_577: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_569)) && (success?(3-proj-3-tuple(v_571)) && success?(1-proj-3-tuple(v_571)))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-2-tuple(v_572))))) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if not-caught-fail(v_576) then (v_576,3-proj-3-tuple(v_574),1-proj-3-tuple(v_574)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_578: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) in
        {119}let v_579: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_569)) && success?(symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_571),3-proj-3-tuple(v_571)))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then symmetricstatepack(1-proj-3-tuple(v_578),2-proj-3-tuple(v_578),hash(3-proj-3-tuple(v_578),3-proj-3-tuple(v_569))) else fail-any) else fail-any)) in
        {120}let v_580: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_569)) && success?(1-proj-7-tuple(v_568))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then (if not-caught-fail(v_579) then (v_579,2-proj-3-tuple(v_577),3-proj-3-tuple(v_577)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {121}let v_581: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_580),2-proj-7-tuple(v_568),3-proj-7-tuple(v_568),4-proj-7-tuple(v_568),5-proj-7-tuple(v_568),6-proj-7-tuple(v_568),7-proj-7-tuple(v_568))) in
        {122}let (hs_582: handshakestate,plaintext_d: bitstring,valid_583: bool) = (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-7-tuple(v_568))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_570) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if (v_570 && 3-proj-3-tuple(v_580)) then (if not-caught-fail(v_581) then (v_581,2-proj-3-tuple(v_580),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {123}event RecvMsg(alice,bob,stagepack_d(sid),plaintext_d);
        {124}event RecvEnd(valid_583)
    ) | (
        {126}event LeakS(phase0,alice);
        {127}out(pub, key_s(alice))
    ) | (
        {128}phase 1;
        {129}event LeakS(phase1,alice);
        {130}out(pub, key_s(alice))
    )
) | (
    {131}let s_584: keypair = keypairpack(empty,empty) in
    (
        {132}let e_585: keypair = keypairpack(empty,empty) in
        {133}let v_586: key = catch-fail(dhexp(key_s(charlie),g)) in
        {134}let rs_587: key = getpublickey((if not-caught-fail(v_586) then keypairpack(v_586,key_s(charlie)) else fail-any)) in
        {135}let re_588: key = empty in
        {136}let v_589: bitstring = catch-fail(hash(somename,empty)) in
        {137}let v_590: key = catch-fail(v_589) in
        {138}let v_591: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {139}let v_592: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any))) in
        {140}let v_593: symmetricstate = catch-fail((if success?((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),empty)) else fail-any) else fail-any)) in
        {141}let v_594: bitstring = catch-fail(symmetricstateunpack(v_593)) in
        {142}let v_595: symmetricstate = catch-fail((if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then symmetricstatepack(1-proj-3-tuple(v_594),2-proj-3-tuple(v_594),hash(3-proj-3-tuple(v_594),rs_587)) else fail-any)) in
        {143}let hs_596: handshakestate = (if not-caught-fail(v_593) then (if not-caught-fail(v_595) then handshakestatepack(v_595,s_584,e_585,rs_587,re_588,empty,true) else fail-any) else fail-any) in
        {144}insert statestore(alice,charlie,sid,statepack_a(hs_596))
    ) | (
        {174}get statestore(=alice,=charlie,=sid,statepack_a(hs_597: handshakestate)) in
        {145}let v_598: bitstring = catch-fail(handshakestateunpack(hs_597)) in
        {146}let v_599: bitstring = catch-fail((empty,empty,empty)) in
        {147}let v_600: key = catch-fail(dhexp(key_e(alice,charlie,sid),g)) in
        {148}let v_601: keypair = catch-fail((if not-caught-fail(v_600) then keypairpack(v_600,key_e(alice,charlie,sid)) else fail-any)) in
        {149}let v_602: bitstring = catch-fail(getpublickey(v_601)) in
        {150}let v_603: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_598))) in
        {151}let v_604: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_598)) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then symmetricstatepack(1-proj-3-tuple(v_603),2-proj-3-tuple(v_603),hash(3-proj-3-tuple(v_603),v_602)) else fail-any) else fail-any)) in
        {152}let v_605: bitstring = catch-fail(keypairunpack(v_601)) in
        {153}let v_606: bitstring = catch-fail(symmetricstateunpack(v_604)) in
        {154}let v_607: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_606),(if success?(4-proj-7-tuple(v_598)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_598)) else fail-any) else fail-any))) in
        {155}let v_608: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_606),(if success?(4-proj-7-tuple(v_598)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_598)) else fail-any) else fail-any))) in
        {156}let v_609: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_606),(if success?(4-proj-7-tuple(v_598)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_598)) else fail-any) else fail-any))) in
        {157}let v_610: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_598)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_598)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_606))) then (if not-caught-fail(v_607) then (if not-caught-fail(v_608) then (if not-caught-fail(v_609) then (v_607,v_608,v_609) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {158}let v_611: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_598)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-2-tuple(v_605))))) then dhexp(2-proj-2-tuple(v_605),4-proj-7-tuple(v_598)) else fail-any) else fail-any)) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_610)) then cipherstatepack(2-proj-3-tuple(v_610),minnonce) else fail-any),1-proj-3-tuple(v_610),3-proj-3-tuple(v_606)) else fail-any) else fail-any) else fail-any)) in
        {159}let v_612: bitstring = catch-fail(symmetricstateunpack(v_611)) in
        {160}let v_613: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_612))) in
        {161}let v_614: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_613),2-proj-2-tuple(v_613),3-proj-3-tuple(v_612),msg_a(alice,charlie,sid))) in
        {162}let v_615: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_612))) in
        {163}let v_616: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_613))) && success?(1-proj-3-tuple(v_612))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-2-tuple(v_615))))) then cipherstatepack(1-proj-2-tuple(v_615),increment_nonce(2-proj-2-tuple(v_613))) else fail-any) else fail-any)) in
        {164}let v_617: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_612)) && success?(1-proj-3-tuple(v_612))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if not-caught-fail(v_614) then (if not-caught-fail(v_616) then (v_616,v_614) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {165}let v_618: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_617),2-proj-3-tuple(v_612),3-proj-3-tuple(v_612)))) in
        {166}let v_619: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_617)) && success?(symmetricstatepack(1-proj-2-tuple(v_617),2-proj-3-tuple(v_612),3-proj-3-tuple(v_612)))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),2-proj-2-tuple(v_617))) else fail-any) else fail-any)) in
        {167}let v_620: bitstring = catch-fail((if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then (if not-caught-fail(v_619) then (v_619,2-proj-2-tuple(v_617)) else fail-any) else fail-any) else fail-any)) in
        {168}let v_621: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_620),2-proj-7-tuple(v_598),v_601,4-proj-7-tuple(v_598),5-proj-7-tuple(v_598),6-proj-7-tuple(v_598),7-proj-7-tuple(v_598))) in
        {169}let v_622: bitstring = catch-fail(concat3(v_602,2-proj-3-tuple(v_599),2-proj-2-tuple(v_620))) in
        {170}let (hs_623: handshakestate,message_a_624: bitstring) = (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-7-tuple(v_598))))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (if not-caught-fail(v_604) then (if not-caught-fail(v_611) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (v_621,v_622) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {171}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {172}insert statestore(alice,charlie,sid,statepack_b(hs_623));
        {173}out(pub, message_a_624)
    ) | (
        {211}get statestore(=alice,=charlie,=sid,statepack_b(hs_625: handshakestate)) in
        {175}in(pub, message_b_626: bitstring);
        {176}let v_627: bitstring = catch-fail(handshakestateunpack(hs_625)) in
        {177}let v_628: bitstring = catch-fail(deconcat3(message_b_626)) in
        {178}let v_629: bool = catch-fail(true) in
        {179}let v_630: key = catch-fail(1-proj-3-tuple(v_628)) in
        {180}let v_631: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_627))) in
        {181}let v_632: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_627)) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then symmetricstatepack(1-proj-3-tuple(v_631),2-proj-3-tuple(v_631),hash(3-proj-3-tuple(v_631),v_630)) else fail-any) else fail-any)) in
        {182}let v_633: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_627))) in
        {183}let v_634: bitstring = catch-fail(symmetricstateunpack(v_632)) in
        {184}let v_635: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_634),(if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_630) else fail-any) else fail-any))) in
        {185}let v_636: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_634),(if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_630) else fail-any) else fail-any))) in
        {186}let v_637: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_634),(if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_630) else fail-any) else fail-any))) in
        {187}let v_638: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_630) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_634))) then (if not-caught-fail(v_635) then (if not-caught-fail(v_636) then (if not-caught-fail(v_637) then (v_635,v_636,v_637) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {188}let v_639: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_627)) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then dhexp(2-proj-2-tuple(v_633),v_630) else fail-any) else fail-any)) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_638)) then cipherstatepack(2-proj-3-tuple(v_638),minnonce) else fail-any),1-proj-3-tuple(v_638),3-proj-3-tuple(v_634)) else fail-any) else fail-any) else fail-any)) in
        {189}let v_640: bitstring = catch-fail(symmetricstateunpack(v_639)) in
        {190}let v_641: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {191}let v_642: aead = catch-fail(decrypt(1-proj-2-tuple(v_641),2-proj-2-tuple(v_641),3-proj-3-tuple(v_640),3-proj-3-tuple(v_628))) in
        {192}let v_643: bitstring = catch-fail(aeadunpack(v_642)) in
        {193}let v_644: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_640))) in
        {194}let v_645: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_641))) && success?(1-proj-3-tuple(v_640))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then cipherstatepack(1-proj-2-tuple(v_644),increment_nonce(2-proj-2-tuple(v_641))) else fail-any) else fail-any)) in
        {195}let v_646: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_628)) && (success?(3-proj-3-tuple(v_640)) && success?(1-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then (if not-caught-fail(v_642) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if not-caught-fail(v_645) then (v_645,3-proj-3-tuple(v_643),1-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {196}let v_647: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) in
        {197}let v_648: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_628)) && success?(symmetricstatepack(1-proj-3-tuple(v_646),2-proj-3-tuple(v_640),3-proj-3-tuple(v_640)))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),3-proj-3-tuple(v_628))) else fail-any) else fail-any)) in
        {198}let v_649: bitstring = catch-fail((if success?(3-proj-3-tuple(v_628)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if not-caught-fail(v_648) then (v_648,2-proj-3-tuple(v_646),3-proj-3-tuple(v_646)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_650: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_649),2-proj-7-tuple(v_627),3-proj-7-tuple(v_627),4-proj-7-tuple(v_627),v_630,6-proj-7-tuple(v_627),7-proj-7-tuple(v_627))) in
        {200}let v_651: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_649))) in
        {201}let v_652: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_651),zero)) in
        {202}let v_653: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_651),zero)) in
        {203}let v_654: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_651),zero)) in
        {204}let v_655: bitstring = catch-fail((if success?(2-proj-3-tuple(v_651)) then (if not-caught-fail(v_652) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (v_652,v_653,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {205}let v_656: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_655)) then cipherstatepack(1-proj-3-tuple(v_655),minnonce) else fail-any)) in
        {206}let v_657: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_655)) then cipherstatepack(2-proj-3-tuple(v_655),minnonce) else fail-any)) in
        {207}let v_658: bitstring = catch-fail((if success?(1-proj-3-tuple(v_649)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (1-proj-3-tuple(v_649),v_656,v_657) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {208}let (hs_659: handshakestate,plaintext_b_660: bitstring,valid_661: bool,cs1_662: cipherstate,cs2_663: cipherstate) = (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-7-tuple(v_627))))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if not-caught-fail(v_629) then (if not-caught-fail(v_630) then (if not-caught-fail(v_632) then (if not-caught-fail(v_639) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (v_629 && 3-proj-3-tuple(v_649)) then (if not-caught-fail(v_650) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (v_650,2-proj-3-tuple(v_649),true,2-proj-3-tuple(v_658),3-proj-3-tuple(v_658)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {209}event RecvMsg(alice,charlie,stagepack_b(sid),plaintext_b_660);
        {210}insert statestore(alice,charlie,sid,statepack_c(hs_659,cs1_662,cs2_663))
    ) | (
        {212}!
        {231}get statestore(=alice,=charlie,=sid,statepack_c(hs_664: handshakestate,cs1_665: cipherstate,cs2_666: cipherstate)) in
        {213}let hs_667: handshakestate = handshakestatesetcs(hs_664,cs1_665) in
        {214}let v_668: bitstring = catch-fail(handshakestateunpack(hs_667)) in
        {215}let v_669: bitstring = catch-fail((empty,empty,empty)) in
        {216}let v_670: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_668))) in
        {217}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {218}let v_672: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_671),2-proj-2-tuple(v_671),3-proj-3-tuple(v_670),msg_c(alice,charlie,sid))) in
        {219}let v_673: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {220}let v_674: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_671))) && success?(1-proj-3-tuple(v_670))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then cipherstatepack(1-proj-2-tuple(v_673),increment_nonce(2-proj-2-tuple(v_671))) else fail-any) else fail-any)) in
        {221}let v_675: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_670)) && success?(1-proj-3-tuple(v_670))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then (if not-caught-fail(v_672) then (if not-caught-fail(v_674) then (v_674,v_672) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {222}let v_676: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_675),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) in
        {223}let v_677: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_675)) && success?(symmetricstatepack(1-proj-2-tuple(v_675),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_676),hash(3-proj-3-tuple(v_676),2-proj-2-tuple(v_675))) else fail-any) else fail-any)) in
        {224}let v_678: bitstring = catch-fail((if success?(1-proj-7-tuple(v_668)) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then (if not-caught-fail(v_677) then (v_677,2-proj-2-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_679: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_678),2-proj-7-tuple(v_668),3-proj-7-tuple(v_668),4-proj-7-tuple(v_668),5-proj-7-tuple(v_668),6-proj-7-tuple(v_668),7-proj-7-tuple(v_668))) in
        {226}let v_680: bitstring = catch-fail(concat3(1-proj-3-tuple(v_669),2-proj-3-tuple(v_669),2-proj-2-tuple(v_678))) in
        {227}let (hs_681: handshakestate,message_c_682: bitstring) = (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-7-tuple(v_668))))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then (if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (v_679,v_680) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {228}event SendMsg(alice,charlie,stagepack_c(sid),msg_c(alice,charlie,sid));
        {229}insert statestore(alice,charlie,sid,statepack_d(hs_681,handshakestategetcs(hs_681),cs2_666));
        {230}out(pub, message_c_682)
    ) | (
        {232}!
        {252}get statestore(=alice,=charlie,=sid,statepack_d(hs_683: handshakestate,cs1_684: cipherstate,cs2_685: cipherstate)) in
        {233}let hs_686: handshakestate = handshakestatesetcs(hs_683,cs2_685) in
        {234}in(pub, message_d_687: bitstring);
        {235}let v_688: bitstring = catch-fail(handshakestateunpack(hs_686)) in
        {236}let v_689: bitstring = catch-fail(deconcat3(message_d_687)) in
        {237}let v_690: bool = catch-fail(true) in
        {238}let v_691: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_688))) in
        {239}let v_692: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_691))) in
        {240}let v_693: aead = catch-fail(decrypt(1-proj-2-tuple(v_692),2-proj-2-tuple(v_692),3-proj-3-tuple(v_691),3-proj-3-tuple(v_689))) in
        {241}let v_694: bitstring = catch-fail(aeadunpack(v_693)) in
        {242}let v_695: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_691))) in
        {243}let v_696: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_692))) && success?(1-proj-3-tuple(v_691))) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-2-tuple(v_695))))) then cipherstatepack(1-proj-2-tuple(v_695),increment_nonce(2-proj-2-tuple(v_692))) else fail-any) else fail-any)) in
        {244}let v_697: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_689)) && (success?(3-proj-3-tuple(v_691)) && success?(1-proj-3-tuple(v_691)))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-2-tuple(v_692))))) then (if not-caught-fail(v_693) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then (if not-caught-fail(v_696) then (v_696,3-proj-3-tuple(v_694),1-proj-3-tuple(v_694)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_698: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_691),3-proj-3-tuple(v_691)))) in
        {246}let v_699: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_689)) && success?(symmetricstatepack(1-proj-3-tuple(v_697),2-proj-3-tuple(v_691),3-proj-3-tuple(v_691)))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then symmetricstatepack(1-proj-3-tuple(v_698),2-proj-3-tuple(v_698),hash(3-proj-3-tuple(v_698),3-proj-3-tuple(v_689))) else fail-any) else fail-any)) in
        {247}let v_700: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_689)) && success?(1-proj-7-tuple(v_688))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-3-tuple(v_697))))) then (if not-caught-fail(v_699) then (v_699,2-proj-3-tuple(v_697),3-proj-3-tuple(v_697)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let v_701: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_700),2-proj-7-tuple(v_688),3-proj-7-tuple(v_688),4-proj-7-tuple(v_688),5-proj-7-tuple(v_688),6-proj-7-tuple(v_688),7-proj-7-tuple(v_688))) in
        {249}let (hs_702: handshakestate,plaintext_d_703: bitstring,valid_704: bool) = (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-7-tuple(v_688))))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-3-tuple(v_689))))) then (if not-caught-fail(v_690) then (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-3-tuple(v_700))))) then (if (v_690 && 3-proj-3-tuple(v_700)) then (if not-caught-fail(v_701) then (v_701,2-proj-3-tuple(v_700),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {250}event RecvMsg(alice,charlie,stagepack_d(sid),plaintext_d_703);
        {251}event RecvEnd(valid_704)
    ) | (
        {253}event LeakS(phase0,alice);
        {254}out(pub, key_s(alice))
    ) | (
        {255}phase 1;
        {256}event LeakS(phase1,alice);
        {257}out(pub, key_s(alice))
    )
) | (
    {258}let v_705: key = catch-fail(dhexp(key_s(bob),g)) in
    {259}let s_706: keypair = (if not-caught-fail(v_705) then keypairpack(v_705,key_s(bob)) else fail-any) in
    {260}out(pub, getpublickey(s_706));
    (
        {261}let e_707: keypair = keypairpack(empty,empty) in
        {262}let rs_708: key = empty in
        {263}let re_709: key = empty in
        {264}let v_710: bitstring = catch-fail(hash(somename,empty)) in
        {265}let v_711: key = catch-fail(v_710) in
        {266}let v_712: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {267}let v_713: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then symmetricstatepack(v_712,v_711,v_710) else fail-any) else fail-any) else fail-any))) in
        {268}let v_714: symmetricstate = catch-fail((if success?((if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then symmetricstatepack(v_712,v_711,v_710) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack(1-proj-3-tuple(v_713),2-proj-3-tuple(v_713),hash(3-proj-3-tuple(v_713),empty)) else fail-any) else fail-any)) in
        {269}let v_715: bitstring = catch-fail(symmetricstateunpack(v_714)) in
        {270}let v_716: symmetricstate = catch-fail((if success?(getpublickey(s_706)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then symmetricstatepack(1-proj-3-tuple(v_715),2-proj-3-tuple(v_715),hash(3-proj-3-tuple(v_715),getpublickey(s_706))) else fail-any) else fail-any)) in
        {271}let hs_717: handshakestate = (if not-caught-fail(v_714) then (if not-caught-fail(v_716) then handshakestatepack(v_716,s_706,e_707,rs_708,re_709,empty,false) else fail-any) else fail-any) in
        {272}insert statestore(bob,alice,sid,statepack_a(hs_717))
    ) | (
        {301}get statestore(=bob,=alice,=sid,statepack_a(hs_718: handshakestate)) in
        {273}in(pub, message_a_719: bitstring);
        {274}let v_720: bitstring = catch-fail(handshakestateunpack(hs_718)) in
        {275}let v_721: bitstring = catch-fail(deconcat3(message_a_719)) in
        {276}let v_722: bool = catch-fail(true) in
        {277}let v_723: key = catch-fail(1-proj-3-tuple(v_721)) in
        {278}let v_724: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_720))) in
        {279}let v_725: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_720)) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then symmetricstatepack(1-proj-3-tuple(v_724),2-proj-3-tuple(v_724),hash(3-proj-3-tuple(v_724),v_723)) else fail-any) else fail-any)) in
        {280}let v_726: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_720))) in
        {281}let v_727: bitstring = catch-fail(symmetricstateunpack(v_725)) in
        {282}let v_728: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_727),(if success?(2-proj-7-tuple(v_720)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_723) else fail-any) else fail-any))) in
        {283}let v_729: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_727),(if success?(2-proj-7-tuple(v_720)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_723) else fail-any) else fail-any))) in
        {284}let v_730: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_727),(if success?(2-proj-7-tuple(v_720)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_723) else fail-any) else fail-any))) in
        {285}let v_731: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_720)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_723) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_727))) then (if not-caught-fail(v_728) then (if not-caught-fail(v_729) then (if not-caught-fail(v_730) then (v_728,v_729,v_730) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {286}let v_732: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_720)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_723) else fail-any) else fail-any)) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_731)) then cipherstatepack(2-proj-3-tuple(v_731),minnonce) else fail-any),1-proj-3-tuple(v_731),3-proj-3-tuple(v_727)) else fail-any) else fail-any) else fail-any)) in
        {287}let v_733: bitstring = catch-fail(symmetricstateunpack(v_732)) in
        {288}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {289}let v_735: aead = catch-fail(decrypt(1-proj-2-tuple(v_734),2-proj-2-tuple(v_734),3-proj-3-tuple(v_733),3-proj-3-tuple(v_721))) in
        {290}let v_736: bitstring = catch-fail(aeadunpack(v_735)) in
        {291}let v_737: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {292}let v_738: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_734))) && success?(1-proj-3-tuple(v_733))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then cipherstatepack(1-proj-2-tuple(v_737),increment_nonce(2-proj-2-tuple(v_734))) else fail-any) else fail-any)) in
        {293}let v_739: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_721)) && (success?(3-proj-3-tuple(v_733)) && success?(1-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then (if not-caught-fail(v_735) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,3-proj-3-tuple(v_736),1-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {294}let v_740: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) in
        {295}let v_741: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_721)) && success?(symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then symmetricstatepack(1-proj-3-tuple(v_740),2-proj-3-tuple(v_740),hash(3-proj-3-tuple(v_740),3-proj-3-tuple(v_721))) else fail-any) else fail-any)) in
        {296}let v_742: bitstring = catch-fail((if success?(3-proj-3-tuple(v_721)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if not-caught-fail(v_741) then (v_741,2-proj-3-tuple(v_739),3-proj-3-tuple(v_739)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {297}let v_743: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_742),2-proj-7-tuple(v_720),3-proj-7-tuple(v_720),4-proj-7-tuple(v_720),v_723,6-proj-7-tuple(v_720),7-proj-7-tuple(v_720))) in
        {298}let (hs_744: handshakestate,plaintext_a: bitstring,valid_745: bool) = (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-7-tuple(v_720))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if not-caught-fail(v_722) then (if not-caught-fail(v_723) then (if not-caught-fail(v_725) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if (v_722 && 3-proj-3-tuple(v_742)) then (if not-caught-fail(v_743) then (v_743,2-proj-3-tuple(v_742),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {299}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {300}insert statestore(bob,alice,sid,statepack_b(hs_744))
    ) | (
        {339}get statestore(=bob,=alice,=sid,statepack_b(hs_746: handshakestate)) in
        {302}let v_747: bitstring = catch-fail(handshakestateunpack(hs_746)) in
        {303}let v_748: bitstring = catch-fail((empty,empty,empty)) in
        {304}let v_749: key = catch-fail(dhexp(key_e(bob,alice,sid),g)) in
        {305}let v_750: keypair = catch-fail((if not-caught-fail(v_749) then keypairpack(v_749,key_e(bob,alice,sid)) else fail-any)) in
        {306}let v_751: bitstring = catch-fail(getpublickey(v_750)) in
        {307}let v_752: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_747))) in
        {308}let v_753: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_747)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack(1-proj-3-tuple(v_752),2-proj-3-tuple(v_752),hash(3-proj-3-tuple(v_752),v_751)) else fail-any) else fail-any)) in
        {309}let v_754: bitstring = catch-fail(keypairunpack(v_750)) in
        {310}let v_755: bitstring = catch-fail(symmetricstateunpack(v_753)) in
        {311}let v_756: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_755),(if success?(5-proj-7-tuple(v_747)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),5-proj-7-tuple(v_747)) else fail-any) else fail-any))) in
        {312}let v_757: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_755),(if success?(5-proj-7-tuple(v_747)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),5-proj-7-tuple(v_747)) else fail-any) else fail-any))) in
        {313}let v_758: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_755),(if success?(5-proj-7-tuple(v_747)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),5-proj-7-tuple(v_747)) else fail-any) else fail-any))) in
        {314}let v_759: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_747)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),5-proj-7-tuple(v_747)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_755))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_757) then (if not-caught-fail(v_758) then (v_756,v_757,v_758) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {315}let v_760: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_747)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then dhexp(2-proj-2-tuple(v_754),5-proj-7-tuple(v_747)) else fail-any) else fail-any)) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_759)) then cipherstatepack(2-proj-3-tuple(v_759),minnonce) else fail-any),1-proj-3-tuple(v_759),3-proj-3-tuple(v_755)) else fail-any) else fail-any) else fail-any)) in
        {316}let v_761: bitstring = catch-fail(symmetricstateunpack(v_760)) in
        {317}let v_762: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {318}let v_763: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_762),2-proj-2-tuple(v_762),3-proj-3-tuple(v_761),msg_b(bob,alice,sid))) in
        {319}let v_764: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_761))) in
        {320}let v_765: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_762))) && success?(1-proj-3-tuple(v_761))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then cipherstatepack(1-proj-2-tuple(v_764),increment_nonce(2-proj-2-tuple(v_762))) else fail-any) else fail-any)) in
        {321}let v_766: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_761)) && success?(1-proj-3-tuple(v_761))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_763) then (if not-caught-fail(v_765) then (v_765,v_763) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {322}let v_767: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_766),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) in
        {323}let v_768: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_766)) && success?(symmetricstatepack(1-proj-2-tuple(v_766),2-proj-3-tuple(v_761),3-proj-3-tuple(v_761)))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then symmetricstatepack(1-proj-3-tuple(v_767),2-proj-3-tuple(v_767),hash(3-proj-3-tuple(v_767),2-proj-2-tuple(v_766))) else fail-any) else fail-any)) in
        {324}let v_769: bitstring = catch-fail((if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_768) then (v_768,2-proj-2-tuple(v_766)) else fail-any) else fail-any) else fail-any)) in
        {325}let v_770: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_769),2-proj-7-tuple(v_747),v_750,4-proj-7-tuple(v_747),5-proj-7-tuple(v_747),6-proj-7-tuple(v_747),7-proj-7-tuple(v_747))) in
        {326}let v_771: bitstring = catch-fail(concat3(v_751,2-proj-3-tuple(v_748),2-proj-2-tuple(v_769))) in
        {327}let v_772: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_769))) in
        {328}let v_773: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_772),zero)) in
        {329}let v_774: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_772),zero)) in
        {330}let v_775: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_772),zero)) in
        {331}let v_776: bitstring = catch-fail((if success?(2-proj-3-tuple(v_772)) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (if not-caught-fail(v_775) then (v_773,v_774,v_775) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {332}let v_777: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_776)) then cipherstatepack(1-proj-3-tuple(v_776),minnonce) else fail-any)) in
        {333}let v_778: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_776)) then cipherstatepack(2-proj-3-tuple(v_776),minnonce) else fail-any)) in
        {334}let v_779: bitstring = catch-fail((if success?(1-proj-2-tuple(v_769)) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (1-proj-2-tuple(v_769),v_777,v_778) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {335}let (hs_780: handshakestate,message_b_781: bitstring,cs1_782: cipherstate,cs2_783: cipherstate) = (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-7-tuple(v_747))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_753) then (if not-caught-fail(v_760) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then (if not-caught-fail(v_770) then (if not-caught-fail(v_771) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (v_770,v_771,2-proj-3-tuple(v_779),3-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {336}event SendMsg(bob,alice,stagepack_b(sid),msg_b(bob,alice,sid));
        {337}insert statestore(bob,alice,sid,statepack_c(hs_780,cs1_782,cs2_783));
        {338}out(pub, message_b_781)
    ) | (
        {340}!
        {360}get statestore(=bob,=alice,=sid,statepack_c(hs_784: handshakestate,cs1_785: cipherstate,cs2_786: cipherstate)) in
        {341}let hs_787: handshakestate = handshakestatesetcs(hs_784,cs1_785) in
        {342}in(pub, message_c_788: bitstring);
        {343}let v_789: bitstring = catch-fail(handshakestateunpack(hs_787)) in
        {344}let v_790: bitstring = catch-fail(deconcat3(message_c_788)) in
        {345}let v_791: bool = catch-fail(true) in
        {346}let v_792: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_789))) in
        {347}let v_793: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_792))) in
        {348}let v_794: aead = catch-fail(decrypt(1-proj-2-tuple(v_793),2-proj-2-tuple(v_793),3-proj-3-tuple(v_792),3-proj-3-tuple(v_790))) in
        {349}let v_795: bitstring = catch-fail(aeadunpack(v_794)) in
        {350}let v_796: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_792))) in
        {351}let v_797: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_793))) && success?(1-proj-3-tuple(v_792))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-2-tuple(v_796))))) then cipherstatepack(1-proj-2-tuple(v_796),increment_nonce(2-proj-2-tuple(v_793))) else fail-any) else fail-any)) in
        {352}let v_798: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_790)) && (success?(3-proj-3-tuple(v_792)) && success?(1-proj-3-tuple(v_792)))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-2-tuple(v_793))))) then (if not-caught-fail(v_794) then (if (not-caught-fail(v_795) && success?(is-true(success?(1-proj-3-tuple(v_795))))) then (if not-caught-fail(v_797) then (v_797,3-proj-3-tuple(v_795),1-proj-3-tuple(v_795)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {353}let v_799: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_798),2-proj-3-tuple(v_792),3-proj-3-tuple(v_792)))) in
        {354}let v_800: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_790)) && success?(symmetricstatepack(1-proj-3-tuple(v_798),2-proj-3-tuple(v_792),3-proj-3-tuple(v_792)))) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack(1-proj-3-tuple(v_799),2-proj-3-tuple(v_799),hash(3-proj-3-tuple(v_799),3-proj-3-tuple(v_790))) else fail-any) else fail-any)) in
        {355}let v_801: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_790)) && success?(1-proj-7-tuple(v_789))) then (if (not-caught-fail(v_792) && success?(is-true(success?(1-proj-3-tuple(v_792))))) then (if (not-caught-fail(v_798) && success?(is-true(success?(1-proj-3-tuple(v_798))))) then (if not-caught-fail(v_800) then (v_800,2-proj-3-tuple(v_798),3-proj-3-tuple(v_798)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {356}let v_802: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_801),2-proj-7-tuple(v_789),3-proj-7-tuple(v_789),4-proj-7-tuple(v_789),5-proj-7-tuple(v_789),6-proj-7-tuple(v_789),7-proj-7-tuple(v_789))) in
        {357}let (hs_803: handshakestate,plaintext_c: bitstring,valid_804: bool) = (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-7-tuple(v_789))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_791) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if (v_791 && 3-proj-3-tuple(v_801)) then (if not-caught-fail(v_802) then (v_802,2-proj-3-tuple(v_801),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {358}event RecvMsg(bob,alice,stagepack_c(sid),plaintext_c);
        {359}insert statestore(bob,alice,sid,statepack_d(hs_803,handshakestategetcs(hs_803),cs2_786))
    ) | (
        {361}!
        {379}get statestore(=bob,=alice,=sid,statepack_d(hs_805: handshakestate,cs1_806: cipherstate,cs2_807: cipherstate)) in
        {362}let hs_808: handshakestate = handshakestatesetcs(hs_805,cs2_807) in
        {363}let v_809: bitstring = catch-fail(handshakestateunpack(hs_808)) in
        {364}let v_810: bitstring = catch-fail((empty,empty,empty)) in
        {365}let v_811: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_809))) in
        {366}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_811))) in
        {367}let v_813: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_812),2-proj-2-tuple(v_812),3-proj-3-tuple(v_811),msg_d(bob,alice,sid))) in
        {368}let v_814: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_811))) in
        {369}let v_815: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_812))) && success?(1-proj-3-tuple(v_811))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then cipherstatepack(1-proj-2-tuple(v_814),increment_nonce(2-proj-2-tuple(v_812))) else fail-any) else fail-any)) in
        {370}let v_816: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_811)) && success?(1-proj-3-tuple(v_811))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then (if not-caught-fail(v_813) then (if not-caught-fail(v_815) then (v_815,v_813) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {371}let v_817: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_816),2-proj-3-tuple(v_811),3-proj-3-tuple(v_811)))) in
        {372}let v_818: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_816)) && success?(symmetricstatepack(1-proj-2-tuple(v_816),2-proj-3-tuple(v_811),3-proj-3-tuple(v_811)))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then symmetricstatepack(1-proj-3-tuple(v_817),2-proj-3-tuple(v_817),hash(3-proj-3-tuple(v_817),2-proj-2-tuple(v_816))) else fail-any) else fail-any)) in
        {373}let v_819: bitstring = catch-fail((if success?(1-proj-7-tuple(v_809)) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then (if not-caught-fail(v_818) then (v_818,2-proj-2-tuple(v_816)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_820: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_819),2-proj-7-tuple(v_809),3-proj-7-tuple(v_809),4-proj-7-tuple(v_809),5-proj-7-tuple(v_809),6-proj-7-tuple(v_809),7-proj-7-tuple(v_809))) in
        {375}let v_821: bitstring = catch-fail(concat3(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),2-proj-2-tuple(v_819))) in
        {376}let (hs_822: handshakestate,message_d_823: bitstring) = (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-7-tuple(v_809))))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-2-tuple(v_819))))) then (if not-caught-fail(v_820) then (if not-caught-fail(v_821) then (v_820,v_821) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {377}event SendMsg(bob,alice,stagepack_d(sid),msg_d(bob,alice,sid));
        {378}out(pub, message_d_823)
    ) | (
        {380}event LeakS(phase0,bob);
        {381}out(pub, key_s(bob))
    ) | (
        {382}phase 1;
        {383}event LeakS(phase1,bob);
        {384}out(pub, key_s(bob))
    )
) | (
    {385}let v_824: key = catch-fail(dhexp(key_s(bob),g)) in
    {386}let s_825: keypair = (if not-caught-fail(v_824) then keypairpack(v_824,key_s(bob)) else fail-any) in
    {387}out(pub, getpublickey(s_825));
    (
        {388}let e_826: keypair = keypairpack(empty,empty) in
        {389}let rs_827: key = empty in
        {390}let re_828: key = empty in
        {391}let v_829: bitstring = catch-fail(hash(somename,empty)) in
        {392}let v_830: key = catch-fail(v_829) in
        {393}let v_831: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {394}let v_832: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then symmetricstatepack(v_831,v_830,v_829) else fail-any) else fail-any) else fail-any))) in
        {395}let v_833: symmetricstate = catch-fail((if success?((if not-caught-fail(v_829) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then symmetricstatepack(v_831,v_830,v_829) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then symmetricstatepack(1-proj-3-tuple(v_832),2-proj-3-tuple(v_832),hash(3-proj-3-tuple(v_832),empty)) else fail-any) else fail-any)) in
        {396}let v_834: bitstring = catch-fail(symmetricstateunpack(v_833)) in
        {397}let v_835: symmetricstate = catch-fail((if success?(getpublickey(s_825)) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_834),hash(3-proj-3-tuple(v_834),getpublickey(s_825))) else fail-any) else fail-any)) in
        {398}let hs_836: handshakestate = (if not-caught-fail(v_833) then (if not-caught-fail(v_835) then handshakestatepack(v_835,s_825,e_826,rs_827,re_828,empty,false) else fail-any) else fail-any) in
        {399}insert statestore(bob,charlie,sid,statepack_a(hs_836))
    ) | (
        {428}get statestore(=bob,=charlie,=sid,statepack_a(hs_837: handshakestate)) in
        {400}in(pub, message_a_838: bitstring);
        {401}let v_839: bitstring = catch-fail(handshakestateunpack(hs_837)) in
        {402}let v_840: bitstring = catch-fail(deconcat3(message_a_838)) in
        {403}let v_841: bool = catch-fail(true) in
        {404}let v_842: key = catch-fail(1-proj-3-tuple(v_840)) in
        {405}let v_843: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_839))) in
        {406}let v_844: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_839)) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then symmetricstatepack(1-proj-3-tuple(v_843),2-proj-3-tuple(v_843),hash(3-proj-3-tuple(v_843),v_842)) else fail-any) else fail-any)) in
        {407}let v_845: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_839))) in
        {408}let v_846: bitstring = catch-fail(symmetricstateunpack(v_844)) in
        {409}let v_847: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_846),(if success?(2-proj-7-tuple(v_839)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then dhexp(2-proj-2-tuple(v_845),v_842) else fail-any) else fail-any))) in
        {410}let v_848: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_846),(if success?(2-proj-7-tuple(v_839)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then dhexp(2-proj-2-tuple(v_845),v_842) else fail-any) else fail-any))) in
        {411}let v_849: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_846),(if success?(2-proj-7-tuple(v_839)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then dhexp(2-proj-2-tuple(v_845),v_842) else fail-any) else fail-any))) in
        {412}let v_850: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_839)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then dhexp(2-proj-2-tuple(v_845),v_842) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_846))) then (if not-caught-fail(v_847) then (if not-caught-fail(v_848) then (if not-caught-fail(v_849) then (v_847,v_848,v_849) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {413}let v_851: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_839)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then dhexp(2-proj-2-tuple(v_845),v_842) else fail-any) else fail-any)) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-3-tuple(v_850))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_850)) then cipherstatepack(2-proj-3-tuple(v_850),minnonce) else fail-any),1-proj-3-tuple(v_850),3-proj-3-tuple(v_846)) else fail-any) else fail-any) else fail-any)) in
        {414}let v_852: bitstring = catch-fail(symmetricstateunpack(v_851)) in
        {415}let v_853: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_852))) in
        {416}let v_854: aead = catch-fail(decrypt(1-proj-2-tuple(v_853),2-proj-2-tuple(v_853),3-proj-3-tuple(v_852),3-proj-3-tuple(v_840))) in
        {417}let v_855: bitstring = catch-fail(aeadunpack(v_854)) in
        {418}let v_856: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_852))) in
        {419}let v_857: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_853))) && success?(1-proj-3-tuple(v_852))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-2-tuple(v_856))))) then cipherstatepack(1-proj-2-tuple(v_856),increment_nonce(2-proj-2-tuple(v_853))) else fail-any) else fail-any)) in
        {420}let v_858: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_840)) && (success?(3-proj-3-tuple(v_852)) && success?(1-proj-3-tuple(v_852)))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-2-tuple(v_853))))) then (if not-caught-fail(v_854) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if not-caught-fail(v_857) then (v_857,3-proj-3-tuple(v_855),1-proj-3-tuple(v_855)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let v_859: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_852),3-proj-3-tuple(v_852)))) in
        {422}let v_860: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_840)) && success?(symmetricstatepack(1-proj-3-tuple(v_858),2-proj-3-tuple(v_852),3-proj-3-tuple(v_852)))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then symmetricstatepack(1-proj-3-tuple(v_859),2-proj-3-tuple(v_859),hash(3-proj-3-tuple(v_859),3-proj-3-tuple(v_840))) else fail-any) else fail-any)) in
        {423}let v_861: bitstring = catch-fail((if success?(3-proj-3-tuple(v_840)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-3-tuple(v_858))))) then (if not-caught-fail(v_860) then (v_860,2-proj-3-tuple(v_858),3-proj-3-tuple(v_858)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_862: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_861),2-proj-7-tuple(v_839),3-proj-7-tuple(v_839),4-proj-7-tuple(v_839),v_842,6-proj-7-tuple(v_839),7-proj-7-tuple(v_839))) in
        {425}let (hs_863: handshakestate,plaintext_a_864: bitstring,valid_865: bool) = (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-7-tuple(v_839))))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then (if not-caught-fail(v_841) then (if not-caught-fail(v_842) then (if not-caught-fail(v_844) then (if not-caught-fail(v_851) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then (if (v_841 && 3-proj-3-tuple(v_861)) then (if not-caught-fail(v_862) then (v_862,2-proj-3-tuple(v_861),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {426}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_864);
        {427}insert statestore(bob,charlie,sid,statepack_b(hs_863))
    ) | (
        {466}get statestore(=bob,=charlie,=sid,statepack_b(hs_866: handshakestate)) in
        {429}let v_867: bitstring = catch-fail(handshakestateunpack(hs_866)) in
        {430}let v_868: bitstring = catch-fail((empty,empty,empty)) in
        {431}let v_869: key = catch-fail(dhexp(key_e(bob,charlie,sid),g)) in
        {432}let v_870: keypair = catch-fail((if not-caught-fail(v_869) then keypairpack(v_869,key_e(bob,charlie,sid)) else fail-any)) in
        {433}let v_871: bitstring = catch-fail(getpublickey(v_870)) in
        {434}let v_872: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_867))) in
        {435}let v_873: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_867)) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack(1-proj-3-tuple(v_872),2-proj-3-tuple(v_872),hash(3-proj-3-tuple(v_872),v_871)) else fail-any) else fail-any)) in
        {436}let v_874: bitstring = catch-fail(keypairunpack(v_870)) in
        {437}let v_875: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {438}let v_876: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_875),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {439}let v_877: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_875),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {440}let v_878: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_875),(if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),5-proj-7-tuple(v_867)) else fail-any) else fail-any))) in
        {441}let v_879: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),5-proj-7-tuple(v_867)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_875))) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then (if not-caught-fail(v_878) then (v_876,v_877,v_878) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {442}let v_880: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_867)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-2-tuple(v_874))))) then dhexp(2-proj-2-tuple(v_874),5-proj-7-tuple(v_867)) else fail-any) else fail-any)) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_879)) then cipherstatepack(2-proj-3-tuple(v_879),minnonce) else fail-any),1-proj-3-tuple(v_879),3-proj-3-tuple(v_875)) else fail-any) else fail-any) else fail-any)) in
        {443}let v_881: bitstring = catch-fail(symmetricstateunpack(v_880)) in
        {444}let v_882: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {445}let v_883: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_882),2-proj-2-tuple(v_882),3-proj-3-tuple(v_881),msg_b(bob,charlie,sid))) in
        {446}let v_884: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_881))) in
        {447}let v_885: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_882))) && success?(1-proj-3-tuple(v_881))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then cipherstatepack(1-proj-2-tuple(v_884),increment_nonce(2-proj-2-tuple(v_882))) else fail-any) else fail-any)) in
        {448}let v_886: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_881)) && success?(1-proj-3-tuple(v_881))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-2-tuple(v_882))))) then (if not-caught-fail(v_883) then (if not-caught-fail(v_885) then (v_885,v_883) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {449}let v_887: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_886),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) in
        {450}let v_888: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_886)) && success?(symmetricstatepack(1-proj-2-tuple(v_886),2-proj-3-tuple(v_881),3-proj-3-tuple(v_881)))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_887),hash(3-proj-3-tuple(v_887),2-proj-2-tuple(v_886))) else fail-any) else fail-any)) in
        {451}let v_889: bitstring = catch-fail((if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then (if not-caught-fail(v_888) then (v_888,2-proj-2-tuple(v_886)) else fail-any) else fail-any) else fail-any)) in
        {452}let v_890: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_889),2-proj-7-tuple(v_867),v_870,4-proj-7-tuple(v_867),5-proj-7-tuple(v_867),6-proj-7-tuple(v_867),7-proj-7-tuple(v_867))) in
        {453}let v_891: bitstring = catch-fail(concat3(v_871,2-proj-3-tuple(v_868),2-proj-2-tuple(v_889))) in
        {454}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_889))) in
        {455}let v_893: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_892),zero)) in
        {456}let v_894: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_892),zero)) in
        {457}let v_895: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_892),zero)) in
        {458}let v_896: bitstring = catch-fail((if success?(2-proj-3-tuple(v_892)) then (if not-caught-fail(v_893) then (if not-caught-fail(v_894) then (if not-caught-fail(v_895) then (v_893,v_894,v_895) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_897: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_896)) then cipherstatepack(1-proj-3-tuple(v_896),minnonce) else fail-any)) in
        {460}let v_898: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_896)) then cipherstatepack(2-proj-3-tuple(v_896),minnonce) else fail-any)) in
        {461}let v_899: bitstring = catch-fail((if success?(1-proj-2-tuple(v_889)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then (if not-caught-fail(v_897) then (if not-caught-fail(v_898) then (1-proj-2-tuple(v_889),v_897,v_898) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {462}let (hs_900: handshakestate,message_b_901: bitstring,cs1_902: cipherstate,cs2_903: cipherstate) = (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-7-tuple(v_867))))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (if not-caught-fail(v_873) then (if not-caught-fail(v_880) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then (if not-caught-fail(v_890) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-3-tuple(v_899))))) then (v_890,v_891,2-proj-3-tuple(v_899),3-proj-3-tuple(v_899)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {463}event SendMsg(bob,charlie,stagepack_b(sid),msg_b(bob,charlie,sid));
        {464}insert statestore(bob,charlie,sid,statepack_c(hs_900,cs1_902,cs2_903));
        {465}out(pub, message_b_901)
    ) | (
        {467}!
        {487}get statestore(=bob,=charlie,=sid,statepack_c(hs_904: handshakestate,cs1_905: cipherstate,cs2_906: cipherstate)) in
        {468}let hs_907: handshakestate = handshakestatesetcs(hs_904,cs1_905) in
        {469}in(pub, message_c_908: bitstring);
        {470}let v_909: bitstring = catch-fail(handshakestateunpack(hs_907)) in
        {471}let v_910: bitstring = catch-fail(deconcat3(message_c_908)) in
        {472}let v_911: bool = catch-fail(true) in
        {473}let v_912: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_909))) in
        {474}let v_913: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_912))) in
        {475}let v_914: aead = catch-fail(decrypt(1-proj-2-tuple(v_913),2-proj-2-tuple(v_913),3-proj-3-tuple(v_912),3-proj-3-tuple(v_910))) in
        {476}let v_915: bitstring = catch-fail(aeadunpack(v_914)) in
        {477}let v_916: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_912))) in
        {478}let v_917: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_913))) && success?(1-proj-3-tuple(v_912))) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then cipherstatepack(1-proj-2-tuple(v_916),increment_nonce(2-proj-2-tuple(v_913))) else fail-any) else fail-any)) in
        {479}let v_918: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_910)) && (success?(3-proj-3-tuple(v_912)) && success?(1-proj-3-tuple(v_912)))) then (if (not-caught-fail(v_913) && success?(is-true(success?(1-proj-2-tuple(v_913))))) then (if not-caught-fail(v_914) then (if (not-caught-fail(v_915) && success?(is-true(success?(1-proj-3-tuple(v_915))))) then (if not-caught-fail(v_917) then (v_917,3-proj-3-tuple(v_915),1-proj-3-tuple(v_915)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {480}let v_919: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_918),2-proj-3-tuple(v_912),3-proj-3-tuple(v_912)))) in
        {481}let v_920: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_910)) && success?(symmetricstatepack(1-proj-3-tuple(v_918),2-proj-3-tuple(v_912),3-proj-3-tuple(v_912)))) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then symmetricstatepack(1-proj-3-tuple(v_919),2-proj-3-tuple(v_919),hash(3-proj-3-tuple(v_919),3-proj-3-tuple(v_910))) else fail-any) else fail-any)) in
        {482}let v_921: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_910)) && success?(1-proj-7-tuple(v_909))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if not-caught-fail(v_920) then (v_920,2-proj-3-tuple(v_918),3-proj-3-tuple(v_918)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_922: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_921),2-proj-7-tuple(v_909),3-proj-7-tuple(v_909),4-proj-7-tuple(v_909),5-proj-7-tuple(v_909),6-proj-7-tuple(v_909),7-proj-7-tuple(v_909))) in
        {484}let (hs_923: handshakestate,plaintext_c_924: bitstring,valid_925: bool) = (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-7-tuple(v_909))))) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (if not-caught-fail(v_911) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then (if (v_911 && 3-proj-3-tuple(v_921)) then (if not-caught-fail(v_922) then (v_922,2-proj-3-tuple(v_921),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {485}event RecvMsg(bob,charlie,stagepack_c(sid),plaintext_c_924);
        {486}insert statestore(bob,charlie,sid,statepack_d(hs_923,handshakestategetcs(hs_923),cs2_906))
    ) | (
        {488}!
        {506}get statestore(=bob,=charlie,=sid,statepack_d(hs_926: handshakestate,cs1_927: cipherstate,cs2_928: cipherstate)) in
        {489}let hs_929: handshakestate = handshakestatesetcs(hs_926,cs2_928) in
        {490}let v_930: bitstring = catch-fail(handshakestateunpack(hs_929)) in
        {491}let v_931: bitstring = catch-fail((empty,empty,empty)) in
        {492}let v_932: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_930))) in
        {493}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_932))) in
        {494}let v_934: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_933),2-proj-2-tuple(v_933),3-proj-3-tuple(v_932),msg_d(bob,charlie,sid))) in
        {495}let v_935: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_932))) in
        {496}let v_936: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_933))) && success?(1-proj-3-tuple(v_932))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then cipherstatepack(1-proj-2-tuple(v_935),increment_nonce(2-proj-2-tuple(v_933))) else fail-any) else fail-any)) in
        {497}let v_937: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_932)) && success?(1-proj-3-tuple(v_932))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then (if not-caught-fail(v_934) then (if not-caught-fail(v_936) then (v_936,v_934) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_938: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_937),2-proj-3-tuple(v_932),3-proj-3-tuple(v_932)))) in
        {499}let v_939: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_937)) && success?(symmetricstatepack(1-proj-2-tuple(v_937),2-proj-3-tuple(v_932),3-proj-3-tuple(v_932)))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then symmetricstatepack(1-proj-3-tuple(v_938),2-proj-3-tuple(v_938),hash(3-proj-3-tuple(v_938),2-proj-2-tuple(v_937))) else fail-any) else fail-any)) in
        {500}let v_940: bitstring = catch-fail((if success?(1-proj-7-tuple(v_930)) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-2-tuple(v_937))))) then (if not-caught-fail(v_939) then (v_939,2-proj-2-tuple(v_937)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {501}let v_941: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_940),2-proj-7-tuple(v_930),3-proj-7-tuple(v_930),4-proj-7-tuple(v_930),5-proj-7-tuple(v_930),6-proj-7-tuple(v_930),7-proj-7-tuple(v_930))) in
        {502}let v_942: bitstring = catch-fail(concat3(1-proj-3-tuple(v_931),2-proj-3-tuple(v_931),2-proj-2-tuple(v_940))) in
        {503}let (hs_943: handshakestate,message_d_944: bitstring) = (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-7-tuple(v_930))))) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then (if not-caught-fail(v_941) then (if not-caught-fail(v_942) then (v_941,v_942) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {504}event SendMsg(bob,charlie,stagepack_d(sid),msg_d(bob,charlie,sid));
        {505}out(pub, message_d_944)
    ) | (
        {507}event LeakS(phase0,bob);
        {508}out(pub, key_s(bob))
    ) | (
        {509}phase 1;
        {510}event LeakS(phase1,bob);
        {511}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_b(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_b(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice,sid_b)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,c_1047,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stagepack_c(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_c(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob,sid_a)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob,sid_a)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,c_1047,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stagepack_d(sid_a),m)) ==> event(SendMsg(bob,alice,stagepack_d(sid_b),m)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice,sid_b)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice,sid_b)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 94 rules in the queue.
400 rules inserted. The rule base contains 387 rules. 69 rules in the queue.
600 rules inserted. The rule base contains 586 rules. 324 rules in the queue.
800 rules inserted. The rule base contains 774 rules. 247 rules in the queue.
1000 rules inserted. The rule base contains 938 rules. 232 rules in the queue.
1200 rules inserted. The rule base contains 1123 rules. 311 rules in the queue.
1400 rules inserted. The rule base contains 1316 rules. 374 rules in the queue.
1600 rules inserted. The rule base contains 1443 rules. 381 rules in the queue.
1800 rules inserted. The rule base contains 1601 rules. 389 rules in the queue.
2000 rules inserted. The rule base contains 1762 rules. 394 rules in the queue.
2200 rules inserted. The rule base contains 1920 rules. 393 rules in the queue.
2400 rules inserted. The rule base contains 2014 rules. 377 rules in the queue.
2600 rules inserted. The rule base contains 2133 rules. 405 rules in the queue.
2800 rules inserted. The rule base contains 2227 rules. 423 rules in the queue.
3000 rules inserted. The rule base contains 2376 rules. 507 rules in the queue.
3200 rules inserted. The rule base contains 2519 rules. 494 rules in the queue.
3400 rules inserted. The rule base contains 2557 rules. 528 rules in the queue.
3600 rules inserted. The rule base contains 2698 rules. 582 rules in the queue.
3800 rules inserted. The rule base contains 2746 rules. 589 rules in the queue.
4000 rules inserted. The rule base contains 2912 rules. 964 rules in the queue.
4200 rules inserted. The rule base contains 3044 rules. 959 rules in the queue.
4400 rules inserted. The rule base contains 3073 rules. 920 rules in the queue.
4600 rules inserted. The rule base contains 3260 rules. 1136 rules in the queue.
4800 rules inserted. The rule base contains 3434 rules. 1246 rules in the queue.
5000 rules inserted. The rule base contains 3616 rules. 1382 rules in the queue.
5200 rules inserted. The rule base contains 3735 rules. 1320 rules in the queue.
5400 rules inserted. The rule base contains 3902 rules. 1297 rules in the queue.
5600 rules inserted. The rule base contains 4091 rules. 1176 rules in the queue.
5800 rules inserted. The rule base contains 4271 rules. 1068 rules in the queue.
6000 rules inserted. The rule base contains 4440 rules. 1026 rules in the queue.
6200 rules inserted. The rule base contains 4629 rules. 905 rules in the queue.
6400 rules inserted. The rule base contains 4800 rules. 859 rules in the queue.
6600 rules inserted. The rule base contains 4924 rules. 864 rules in the queue.
6800 rules inserted. The rule base contains 5113 rules. 893 rules in the queue.
7000 rules inserted. The rule base contains 5268 rules. 910 rules in the queue.
7200 rules inserted. The rule base contains 5455 rules. 911 rules in the queue.
7400 rules inserted. The rule base contains 5560 rules. 894 rules in the queue.
7600 rules inserted. The rule base contains 5681 rules. 958 rules in the queue.
7800 rules inserted. The rule base contains 5750 rules. 1015 rules in the queue.
8000 rules inserted. The rule base contains 5926 rules. 1037 rules in the queue.
8200 rules inserted. The rule base contains 6035 rules. 1020 rules in the queue.
8400 rules inserted. The rule base contains 6151 rules. 972 rules in the queue.
8600 rules inserted. The rule base contains 6274 rules. 965 rules in the queue.
8800 rules inserted. The rule base contains 6392 rules. 921 rules in the queue.
9000 rules inserted. The rule base contains 6527 rules. 938 rules in the queue.
9200 rules inserted. The rule base contains 6629 rules. 1015 rules in the queue.
9400 rules inserted. The rule base contains 6798 rules. 1015 rules in the queue.
9600 rules inserted. The rule base contains 6910 rules. 1024 rules in the queue.
9800 rules inserted. The rule base contains 7110 rules. 1031 rules in the queue.
10000 rules inserted. The rule base contains 7240 rules. 1070 rules in the queue.
10200 rules inserted. The rule base contains 7402 rules. 1102 rules in the queue.
