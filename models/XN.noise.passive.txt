File "XN.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "XN.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "XN.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "XN.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 313, character 6:
Warning: identifier e rebound.
File "XN.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ne rebound.
File "XN.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 318, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 326, character 6:
Warning: identifier s rebound.
File "XN.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XN.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 337, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 338, characters 6-7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 347, characters 6-7:
Warning: identifier re rebound.
File "XN.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 360, characters 6-7:
Warning: identifier re rebound.
File "XN.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 374, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 374, characters 48-53:
Warning: identifier valid1 rebound.
File "XN.noise.passive.pv", line 375, characters 6-7:
Warning: identifier rs rebound.
File "XN.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 534, characters 8-9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 387, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 389, characters 7-8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 526, characters 8-9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 326, character 6:
Warning: identifier s rebound.
File "XN.noise.passive.pv", line 327, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 327, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "XN.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 519, characters 8-9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 360, characters 6-7:
Warning: identifier re rebound.
File "XN.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 511, characters 8-9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 301, character 6:
Warning: identifier e rebound.
File "XN.noise.passive.pv", line 302, characters 6-7:
Warning: identifier ne rebound.
File "XN.noise.passive.pv", line 303, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 305, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 305, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 306, characters 6-7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 584, characters 8-9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 337, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 338, characters 6-7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 577, characters 8-9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 374, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 374, characters 48-53:
Warning: identifier valid1 rebound.
File "XN.noise.passive.pv", line 375, characters 6-7:
Warning: identifier rs rebound.
File "XN.noise.passive.pv", line 376, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 377, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 379, characters 7-8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 569, characters 8-9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 313, character 6:
Warning: identifier e rebound.
File "XN.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ne rebound.
File "XN.noise.passive.pv", line 315, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 318, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 318, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 319, characters 6-7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 347, characters 6-7:
Warning: identifier re rebound.
File "XN.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_468: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_468));
    (
        {4}let e_469: keypair = keypairpack(empty,empty) in
        {5}let rs_470: key = empty in
        {6}let re_471: key = empty in
        {7}let v_472: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_473: key = catch-fail(v_472) in
        {9}let v_474: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_475: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then symmetricstatepack(v_474,v_473,v_472) else fail-any) else fail-any) else fail-any))) in
        {11}let v_476: symmetricstate = catch-fail((if success?((if not-caught-fail(v_472) then (if not-caught-fail(v_473) then (if not-caught-fail(v_474) then symmetricstatepack(v_474,v_473,v_472) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_475) && success?(is-true(success?(1-proj-3-tuple(v_475))))) then symmetricstatepack(1-proj-3-tuple(v_475),2-proj-3-tuple(v_475),hash(3-proj-3-tuple(v_475),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_476) then handshakestatepack(v_476,s_468,e_469,rs_470,re_471,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {36}get statestore(=alice,=bob,statepack_a(hs_477: handshakestate)) in
        {14}let v_478: bitstring = catch-fail(handshakestateunpack(hs_477)) in
        {15}let v_479: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_480: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_481: keypair = catch-fail((if not-caught-fail(v_480) then keypairpack(v_480,key_e(alice,bob)) else fail-any)) in
        {18}let v_482: bitstring = catch-fail(getpublickey(v_481)) in
        {19}let v_483: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_478))) in
        {20}let v_484: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_478)) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),v_482)) else fail-any) else fail-any)) in
        {21}let v_485: bitstring = catch-fail(symmetricstateunpack(v_484)) in
        {22}let v_486: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_485))) in
        {23}let v_487: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_486),2-proj-2-tuple(v_486),3-proj-3-tuple(v_485),msg_a(alice,bob))) in
        {24}let v_488: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_485))) in
        {25}let v_489: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_486))) && success?(1-proj-3-tuple(v_485))) then (if (not-caught-fail(v_488) && success?(is-true(success?(1-proj-2-tuple(v_488))))) then cipherstatepack(1-proj-2-tuple(v_488),increment_nonce(2-proj-2-tuple(v_486))) else fail-any) else fail-any)) in
        {26}let v_490: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_485)) && success?(1-proj-3-tuple(v_485))) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then (if not-caught-fail(v_487) then (if not-caught-fail(v_489) then (v_489,v_487) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_491: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_490),2-proj-3-tuple(v_485),3-proj-3-tuple(v_485)))) in
        {28}let v_492: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_490)) && success?(symmetricstatepack(1-proj-2-tuple(v_490),2-proj-3-tuple(v_485),3-proj-3-tuple(v_485)))) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then symmetricstatepack(1-proj-3-tuple(v_491),2-proj-3-tuple(v_491),hash(3-proj-3-tuple(v_491),2-proj-2-tuple(v_490))) else fail-any) else fail-any)) in
        {29}let v_493: bitstring = catch-fail((if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-2-tuple(v_490))))) then (if not-caught-fail(v_492) then (v_492,2-proj-2-tuple(v_490)) else fail-any) else fail-any) else fail-any)) in
        {30}let v_494: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_493),2-proj-7-tuple(v_478),v_481,4-proj-7-tuple(v_478),5-proj-7-tuple(v_478),6-proj-7-tuple(v_478),7-proj-7-tuple(v_478))) in
        {31}let v_495: bitstring = catch-fail(concat3(v_482,2-proj-3-tuple(v_479),2-proj-2-tuple(v_493))) in
        {32}let (hs_496: handshakestate,re_497: key,message_a: bitstring) = (if (not-caught-fail(v_478) && success?(is-true(success?(1-proj-7-tuple(v_478))))) then (if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if not-caught-fail(v_481) then (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-2-tuple(v_493))))) then (if not-caught-fail(v_494) then (if not-caught-fail(v_495) then (v_494,5-proj-7-tuple(v_478),v_495) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {33}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {34}insert statestore(alice,bob,statepack_b(hs_496));
        {35}out(pub, message_a)
    ) | (
        {65}get statestore(=alice,=bob,statepack_b(hs_498: handshakestate)) in
        {37}in(pub, message_b: bitstring);
        {38}let v_499: bitstring = catch-fail(handshakestateunpack(hs_498)) in
        {39}let v_500: bitstring = catch-fail(deconcat3(message_b)) in
        {40}let v_501: bool = catch-fail(true) in
        {41}let v_502: key = catch-fail(1-proj-3-tuple(v_500)) in
        {42}let v_503: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_499))) in
        {43}let v_504: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_499)) then (if (not-caught-fail(v_503) && success?(is-true(success?(1-proj-3-tuple(v_503))))) then symmetricstatepack(1-proj-3-tuple(v_503),2-proj-3-tuple(v_503),hash(3-proj-3-tuple(v_503),v_502)) else fail-any) else fail-any)) in
        {44}let v_505: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_499))) in
        {45}let v_506: bitstring = catch-fail(symmetricstateunpack(v_504)) in
        {46}let v_507: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_506),(if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any))) in
        {47}let v_508: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_506),(if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any))) in
        {48}let v_509: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_506),(if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any))) in
        {49}let v_510: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_506))) then (if not-caught-fail(v_507) then (if not-caught-fail(v_508) then (if not-caught-fail(v_509) then (v_507,v_508,v_509) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_511: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_499)) then (if (not-caught-fail(v_505) && success?(is-true(success?(1-proj-2-tuple(v_505))))) then dhexp(2-proj-2-tuple(v_505),v_502) else fail-any) else fail-any)) then (if (not-caught-fail(v_506) && success?(is-true(success?(1-proj-3-tuple(v_506))))) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_510)) then cipherstatepack(2-proj-3-tuple(v_510),minnonce) else fail-any),1-proj-3-tuple(v_510),3-proj-3-tuple(v_506)) else fail-any) else fail-any) else fail-any)) in
        {51}let v_512: bitstring = catch-fail(symmetricstateunpack(v_511)) in
        {52}let v_513: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_512))) in
        {53}let v_514: aead = catch-fail(decrypt(1-proj-2-tuple(v_513),2-proj-2-tuple(v_513),3-proj-3-tuple(v_512),3-proj-3-tuple(v_500))) in
        {54}let v_515: bitstring = catch-fail(aeadunpack(v_514)) in
        {55}let v_516: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_512))) in
        {56}let v_517: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_513))) && success?(1-proj-3-tuple(v_512))) then (if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-2-tuple(v_516))))) then cipherstatepack(1-proj-2-tuple(v_516),increment_nonce(2-proj-2-tuple(v_513))) else fail-any) else fail-any)) in
        {57}let v_518: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_500)) && (success?(3-proj-3-tuple(v_512)) && success?(1-proj-3-tuple(v_512)))) then (if (not-caught-fail(v_513) && success?(is-true(success?(1-proj-2-tuple(v_513))))) then (if not-caught-fail(v_514) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then (if not-caught-fail(v_517) then (v_517,3-proj-3-tuple(v_515),1-proj-3-tuple(v_515)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {58}let v_519: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_512),3-proj-3-tuple(v_512)))) in
        {59}let v_520: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_500)) && success?(symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_512),3-proj-3-tuple(v_512)))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then symmetricstatepack(1-proj-3-tuple(v_519),2-proj-3-tuple(v_519),hash(3-proj-3-tuple(v_519),3-proj-3-tuple(v_500))) else fail-any) else fail-any)) in
        {60}let v_521: bitstring = catch-fail((if success?(3-proj-3-tuple(v_500)) then (if (not-caught-fail(v_512) && success?(is-true(success?(1-proj-3-tuple(v_512))))) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then (if not-caught-fail(v_520) then (v_520,2-proj-3-tuple(v_518),3-proj-3-tuple(v_518)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_522: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_521),2-proj-7-tuple(v_499),3-proj-7-tuple(v_499),4-proj-7-tuple(v_499),v_502,6-proj-7-tuple(v_499),7-proj-7-tuple(v_499))) in
        {62}let (hs_523: handshakestate,re_524: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-7-tuple(v_499))))) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then (if not-caught-fail(v_501) then (if not-caught-fail(v_502) then (if not-caught-fail(v_504) then (if not-caught-fail(v_511) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (v_501 && 3-proj-3-tuple(v_521)) then (if not-caught-fail(v_522) then (v_522,getpublickey(3-proj-7-tuple(v_499)),2-proj-3-tuple(v_521),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {63}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {64}insert statestore(alice,bob,statepack_c(hs_523))
    ) | (
        {101}get statestore(=alice,=bob,statepack_c(hs_525: handshakestate)) in
        {66}let v_526: bitstring = catch-fail(handshakestateunpack(hs_525)) in
        {67}let v_527: bitstring = catch-fail((empty,empty,empty)) in
        {68}let v_528: key = catch-fail(dhexp(key_s(alice),g)) in
        {69}let v_529: keypair = catch-fail((if not-caught-fail(v_528) then keypairpack(v_528,key_s(alice)) else fail-any)) in
        {70}let v_530: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_526))) in
        {71}let v_531: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {72}let v_532: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_531),2-proj-2-tuple(v_531),3-proj-3-tuple(v_530),getpublickey(v_529))) in
        {73}let v_533: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {74}let v_534: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_531))) && success?(1-proj-3-tuple(v_530))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then cipherstatepack(1-proj-2-tuple(v_533),increment_nonce(2-proj-2-tuple(v_531))) else fail-any) else fail-any)) in
        {75}let v_535: bitstring = catch-fail((if (success?(getpublickey(v_529)) && (success?(3-proj-3-tuple(v_530)) && success?(1-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_534) then (v_534,v_532) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_536: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_535),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) in
        {77}let v_537: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_535)) && success?(symmetricstatepack(1-proj-2-tuple(v_535),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_536),hash(3-proj-3-tuple(v_536),2-proj-2-tuple(v_535))) else fail-any) else fail-any)) in
        {78}let v_538: bitstring = catch-fail((if (success?(getpublickey(v_529)) && success?(1-proj-7-tuple(v_526))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_537) then (v_537,2-proj-2-tuple(v_535)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_539: bitstring = catch-fail(keypairunpack(v_529)) in
        {80}let v_540: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_538))) in
        {81}let v_541: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_540),(if success?(5-proj-7-tuple(v_526)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
        {82}let v_542: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_540),(if success?(5-proj-7-tuple(v_526)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
        {83}let v_543: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_540),(if success?(5-proj-7-tuple(v_526)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_526)) else fail-any) else fail-any))) in
        {84}let v_544: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_526)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_526)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_540))) then (if not-caught-fail(v_541) then (if not-caught-fail(v_542) then (if not-caught-fail(v_543) then (v_541,v_542,v_543) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {85}let v_545: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_526)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-2-tuple(v_539))))) then dhexp(2-proj-2-tuple(v_539),5-proj-7-tuple(v_526)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_538))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_544)) then cipherstatepack(2-proj-3-tuple(v_544),minnonce) else fail-any),1-proj-3-tuple(v_544),3-proj-3-tuple(v_540)) else fail-any) else fail-any) else fail-any)) in
        {86}let v_546: bitstring = catch-fail(symmetricstateunpack(v_545)) in
        {87}let v_547: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_546))) in
        {88}let v_548: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_547),2-proj-2-tuple(v_547),3-proj-3-tuple(v_546),msg_c(alice,bob))) in
        {89}let v_549: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_546))) in
        {90}let v_550: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_547))) && success?(1-proj-3-tuple(v_546))) then (if (not-caught-fail(v_549) && success?(is-true(success?(1-proj-2-tuple(v_549))))) then cipherstatepack(1-proj-2-tuple(v_549),increment_nonce(2-proj-2-tuple(v_547))) else fail-any) else fail-any)) in
        {91}let v_551: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_546)) && success?(1-proj-3-tuple(v_546))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then (if not-caught-fail(v_548) then (if not-caught-fail(v_550) then (v_550,v_548) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_552: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_551),2-proj-3-tuple(v_546),3-proj-3-tuple(v_546)))) in
        {93}let v_553: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_551)) && success?(symmetricstatepack(1-proj-2-tuple(v_551),2-proj-3-tuple(v_546),3-proj-3-tuple(v_546)))) then (if (not-caught-fail(v_552) && success?(is-true(success?(1-proj-3-tuple(v_552))))) then symmetricstatepack(1-proj-3-tuple(v_552),2-proj-3-tuple(v_552),hash(3-proj-3-tuple(v_552),2-proj-2-tuple(v_551))) else fail-any) else fail-any)) in
        {94}let v_554: bitstring = catch-fail((if (not-caught-fail(v_546) && success?(is-true(success?(1-proj-3-tuple(v_546))))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_553) then (v_553,2-proj-2-tuple(v_551)) else fail-any) else fail-any) else fail-any)) in
        {95}let v_555: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_554),v_529,3-proj-7-tuple(v_526),4-proj-7-tuple(v_526),5-proj-7-tuple(v_526),6-proj-7-tuple(v_526),7-proj-7-tuple(v_526))) in
        {96}let v_556: bitstring = catch-fail(concat3(1-proj-3-tuple(v_527),2-proj-2-tuple(v_538),2-proj-2-tuple(v_554))) in
        {97}let (hs_557: handshakestate,re_558: key,message_c: bitstring) = (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-7-tuple(v_526))))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then (if not-caught-fail(v_529) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then (if not-caught-fail(v_545) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (v_555,5-proj-7-tuple(v_526),v_556) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {98}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {99}insert statestore(alice,bob,statepack_d(hs_557));
        {100}out(pub, message_c)
    ) | (
        {129}get statestore(=alice,=bob,statepack_d(hs_559: handshakestate)) in
        {102}in(pub, message_d: bitstring);
        {103}let v_560: bitstring = catch-fail(handshakestateunpack(hs_559)) in
        {104}let v_561: bitstring = catch-fail(deconcat3(message_d)) in
        {105}let v_562: bool = catch-fail(true) in
        {106}let v_563: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_560))) in
        {107}let v_564: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {108}let v_565: aead = catch-fail(decrypt(1-proj-2-tuple(v_564),2-proj-2-tuple(v_564),3-proj-3-tuple(v_563),3-proj-3-tuple(v_561))) in
        {109}let v_566: bitstring = catch-fail(aeadunpack(v_565)) in
        {110}let v_567: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {111}let v_568: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_564))) && success?(1-proj-3-tuple(v_563))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-2-tuple(v_567))))) then cipherstatepack(1-proj-2-tuple(v_567),increment_nonce(2-proj-2-tuple(v_564))) else fail-any) else fail-any)) in
        {112}let v_569: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_561)) && (success?(3-proj-3-tuple(v_563)) && success?(1-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then (if not-caught-fail(v_565) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if not-caught-fail(v_568) then (v_568,3-proj-3-tuple(v_566),1-proj-3-tuple(v_566)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {113}let v_570: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) in
        {114}let v_571: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_561)) && success?(symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then symmetricstatepack(1-proj-3-tuple(v_570),2-proj-3-tuple(v_570),hash(3-proj-3-tuple(v_570),3-proj-3-tuple(v_561))) else fail-any) else fail-any)) in
        {115}let v_572: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_561)) && success?(1-proj-7-tuple(v_560))) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if not-caught-fail(v_571) then (v_571,2-proj-3-tuple(v_569),3-proj-3-tuple(v_569)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_573: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_572),2-proj-7-tuple(v_560),3-proj-7-tuple(v_560),4-proj-7-tuple(v_560),5-proj-7-tuple(v_560),6-proj-7-tuple(v_560),7-proj-7-tuple(v_560))) in
        {117}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_572))) in
        {118}let v_575: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_574),zero)) in
        {119}let v_576: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_574),zero)) in
        {120}let v_577: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_574),zero)) in
        {121}let v_578: bitstring = catch-fail((if success?(2-proj-3-tuple(v_574)) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_577) then (v_575,v_576,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_579: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_578)) then cipherstatepack(1-proj-3-tuple(v_578),minnonce) else fail-any)) in
        {123}let v_580: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_578)) then cipherstatepack(2-proj-3-tuple(v_578),minnonce) else fail-any)) in
        {124}let v_581: bitstring = catch-fail((if success?(1-proj-3-tuple(v_572)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (1-proj-3-tuple(v_572),v_579,v_580) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {125}let (hs_582: handshakestate,re_583: key,plaintext_d: bitstring,valid_584: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-7-tuple(v_560))))) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then (if not-caught-fail(v_562) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if (v_562 && 3-proj-3-tuple(v_572)) then (if not-caught-fail(v_573) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then (v_573,getpublickey(3-proj-7-tuple(v_560)),2-proj-3-tuple(v_572),true,2-proj-3-tuple(v_581),3-proj-3-tuple(v_581)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {126}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_584);
        {127}insert statestore(alice,bob,statepack_e(hs_582));
        {128}event RecvEnd(valid_584)
    ) | (
        {130}event LeakS(phase0,alice);
        {131}out(pub, key_s(alice))
    ) | (
        {132}phase 1;
        {133}event LeakS(phase1,alice);
        {134}out(pub, key_s(alice))
    )
) | (
    {135}let s_585: keypair = keypairpack(empty,empty) in
    {136}out(pub, getpublickey(s_585));
    (
        {137}let e_586: keypair = keypairpack(empty,empty) in
        {138}let rs_587: key = empty in
        {139}let re_588: key = empty in
        {140}let v_589: bitstring = catch-fail(hash(somename,empty)) in
        {141}let v_590: key = catch-fail(v_589) in
        {142}let v_591: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {143}let v_592: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any))) in
        {144}let v_593: symmetricstate = catch-fail((if success?((if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (if not-caught-fail(v_591) then symmetricstatepack(v_591,v_590,v_589) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-3-tuple(v_592))))) then symmetricstatepack(1-proj-3-tuple(v_592),2-proj-3-tuple(v_592),hash(3-proj-3-tuple(v_592),empty)) else fail-any) else fail-any)) in
        {145}let hs_594: handshakestate = (if not-caught-fail(v_593) then handshakestatepack(v_593,s_585,e_586,rs_587,re_588,empty,true) else fail-any) in
        {146}insert statestore(alice,charlie,statepack_a(hs_594))
    ) | (
        {169}get statestore(=alice,=charlie,statepack_a(hs_595: handshakestate)) in
        {147}let v_596: bitstring = catch-fail(handshakestateunpack(hs_595)) in
        {148}let v_597: bitstring = catch-fail((empty,empty,empty)) in
        {149}let v_598: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {150}let v_599: keypair = catch-fail((if not-caught-fail(v_598) then keypairpack(v_598,key_e(alice,charlie)) else fail-any)) in
        {151}let v_600: bitstring = catch-fail(getpublickey(v_599)) in
        {152}let v_601: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_596))) in
        {153}let v_602: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_596)) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-3-tuple(v_601))))) then symmetricstatepack(1-proj-3-tuple(v_601),2-proj-3-tuple(v_601),hash(3-proj-3-tuple(v_601),v_600)) else fail-any) else fail-any)) in
        {154}let v_603: bitstring = catch-fail(symmetricstateunpack(v_602)) in
        {155}let v_604: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {156}let v_605: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_604),2-proj-2-tuple(v_604),3-proj-3-tuple(v_603),msg_a(alice,charlie))) in
        {157}let v_606: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_603))) in
        {158}let v_607: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_604))) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then cipherstatepack(1-proj-2-tuple(v_606),increment_nonce(2-proj-2-tuple(v_604))) else fail-any) else fail-any)) in
        {159}let v_608: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_603)) && success?(1-proj-3-tuple(v_603))) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-2-tuple(v_604))))) then (if not-caught-fail(v_605) then (if not-caught-fail(v_607) then (v_607,v_605) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {160}let v_609: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_608),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) in
        {161}let v_610: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_608)) && success?(symmetricstatepack(1-proj-2-tuple(v_608),2-proj-3-tuple(v_603),3-proj-3-tuple(v_603)))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),hash(3-proj-3-tuple(v_609),2-proj-2-tuple(v_608))) else fail-any) else fail-any)) in
        {162}let v_611: bitstring = catch-fail((if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-2-tuple(v_608))))) then (if not-caught-fail(v_610) then (v_610,2-proj-2-tuple(v_608)) else fail-any) else fail-any) else fail-any)) in
        {163}let v_612: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_611),2-proj-7-tuple(v_596),v_599,4-proj-7-tuple(v_596),5-proj-7-tuple(v_596),6-proj-7-tuple(v_596),7-proj-7-tuple(v_596))) in
        {164}let v_613: bitstring = catch-fail(concat3(v_600,2-proj-3-tuple(v_597),2-proj-2-tuple(v_611))) in
        {165}let (hs_614: handshakestate,re_615: key,message_a_616: bitstring) = (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-7-tuple(v_596))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (if not-caught-fail(v_600) then (if not-caught-fail(v_602) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (v_612,5-proj-7-tuple(v_596),v_613) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {166}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {167}insert statestore(alice,charlie,statepack_b(hs_614));
        {168}out(pub, message_a_616)
    ) | (
        {198}get statestore(=alice,=charlie,statepack_b(hs_617: handshakestate)) in
        {170}in(pub, message_b_618: bitstring);
        {171}let v_619: bitstring = catch-fail(handshakestateunpack(hs_617)) in
        {172}let v_620: bitstring = catch-fail(deconcat3(message_b_618)) in
        {173}let v_621: bool = catch-fail(true) in
        {174}let v_622: key = catch-fail(1-proj-3-tuple(v_620)) in
        {175}let v_623: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_619))) in
        {176}let v_624: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_619)) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),v_622)) else fail-any) else fail-any)) in
        {177}let v_625: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_619))) in
        {178}let v_626: bitstring = catch-fail(symmetricstateunpack(v_624)) in
        {179}let v_627: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_626),(if success?(3-proj-7-tuple(v_619)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),v_622) else fail-any) else fail-any))) in
        {180}let v_628: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_626),(if success?(3-proj-7-tuple(v_619)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),v_622) else fail-any) else fail-any))) in
        {181}let v_629: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_626),(if success?(3-proj-7-tuple(v_619)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),v_622) else fail-any) else fail-any))) in
        {182}let v_630: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_619)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),v_622) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_626))) then (if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then (v_627,v_628,v_629) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_631: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_619)) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then dhexp(2-proj-2-tuple(v_625),v_622) else fail-any) else fail-any)) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_630)) then cipherstatepack(2-proj-3-tuple(v_630),minnonce) else fail-any),1-proj-3-tuple(v_630),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any)) in
        {184}let v_632: bitstring = catch-fail(symmetricstateunpack(v_631)) in
        {185}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_632))) in
        {186}let v_634: aead = catch-fail(decrypt(1-proj-2-tuple(v_633),2-proj-2-tuple(v_633),3-proj-3-tuple(v_632),3-proj-3-tuple(v_620))) in
        {187}let v_635: bitstring = catch-fail(aeadunpack(v_634)) in
        {188}let v_636: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_632))) in
        {189}let v_637: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_633))) && success?(1-proj-3-tuple(v_632))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-2-tuple(v_636))))) then cipherstatepack(1-proj-2-tuple(v_636),increment_nonce(2-proj-2-tuple(v_633))) else fail-any) else fail-any)) in
        {190}let v_638: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_620)) && (success?(3-proj-3-tuple(v_632)) && success?(1-proj-3-tuple(v_632)))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then (if not-caught-fail(v_634) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,3-proj-3-tuple(v_635),1-proj-3-tuple(v_635)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_639: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_632),3-proj-3-tuple(v_632)))) in
        {192}let v_640: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_620)) && success?(symmetricstatepack(1-proj-3-tuple(v_638),2-proj-3-tuple(v_632),3-proj-3-tuple(v_632)))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then symmetricstatepack(1-proj-3-tuple(v_639),2-proj-3-tuple(v_639),hash(3-proj-3-tuple(v_639),3-proj-3-tuple(v_620))) else fail-any) else fail-any)) in
        {193}let v_641: bitstring = catch-fail((if success?(3-proj-3-tuple(v_620)) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if not-caught-fail(v_640) then (v_640,2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_642: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_641),2-proj-7-tuple(v_619),3-proj-7-tuple(v_619),4-proj-7-tuple(v_619),v_622,6-proj-7-tuple(v_619),7-proj-7-tuple(v_619))) in
        {195}let (hs_643: handshakestate,re_644: key,plaintext_b_645: bitstring,valid_646: bool) = (if (not-caught-fail(v_619) && success?(is-true(success?(1-proj-7-tuple(v_619))))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if not-caught-fail(v_621) then (if not-caught-fail(v_622) then (if not-caught-fail(v_624) then (if not-caught-fail(v_631) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (v_621 && 3-proj-3-tuple(v_641)) then (if not-caught-fail(v_642) then (v_642,getpublickey(3-proj-7-tuple(v_619)),2-proj-3-tuple(v_641),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {196}event RecvMsg(alice,charlie,stage_b,plaintext_b_645,valid_646);
        {197}insert statestore(alice,charlie,statepack_c(hs_643))
    ) | (
        {234}get statestore(=alice,=charlie,statepack_c(hs_647: handshakestate)) in
        {199}let v_648: bitstring = catch-fail(handshakestateunpack(hs_647)) in
        {200}let v_649: bitstring = catch-fail((empty,empty,empty)) in
        {201}let v_650: key = catch-fail(dhexp(key_s(alice),g)) in
        {202}let v_651: keypair = catch-fail((if not-caught-fail(v_650) then keypairpack(v_650,key_s(alice)) else fail-any)) in
        {203}let v_652: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_648))) in
        {204}let v_653: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {205}let v_654: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_653),2-proj-2-tuple(v_653),3-proj-3-tuple(v_652),getpublickey(v_651))) in
        {206}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_652))) in
        {207}let v_656: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_653))) && success?(1-proj-3-tuple(v_652))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then cipherstatepack(1-proj-2-tuple(v_655),increment_nonce(2-proj-2-tuple(v_653))) else fail-any) else fail-any)) in
        {208}let v_657: bitstring = catch-fail((if (success?(getpublickey(v_651)) && (success?(3-proj-3-tuple(v_652)) && success?(1-proj-3-tuple(v_652)))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then (if not-caught-fail(v_654) then (if not-caught-fail(v_656) then (v_656,v_654) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_658: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) in
        {210}let v_659: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_657)) && success?(symmetricstatepack(1-proj-2-tuple(v_657),2-proj-3-tuple(v_652),3-proj-3-tuple(v_652)))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),2-proj-2-tuple(v_657))) else fail-any) else fail-any)) in
        {211}let v_660: bitstring = catch-fail((if (success?(getpublickey(v_651)) && success?(1-proj-7-tuple(v_648))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_659) then (v_659,2-proj-2-tuple(v_657)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_661: bitstring = catch-fail(keypairunpack(v_651)) in
        {213}let v_662: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_660))) in
        {214}let v_663: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_662),(if success?(5-proj-7-tuple(v_648)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_648)) else fail-any) else fail-any))) in
        {215}let v_664: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_662),(if success?(5-proj-7-tuple(v_648)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_648)) else fail-any) else fail-any))) in
        {216}let v_665: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_662),(if success?(5-proj-7-tuple(v_648)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_648)) else fail-any) else fail-any))) in
        {217}let v_666: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_648)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_648)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_662))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (v_663,v_664,v_665) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_667: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_648)) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-2-tuple(v_661))))) then dhexp(2-proj-2-tuple(v_661),5-proj-7-tuple(v_648)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_660))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_666)) then cipherstatepack(2-proj-3-tuple(v_666),minnonce) else fail-any),1-proj-3-tuple(v_666),3-proj-3-tuple(v_662)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_668: bitstring = catch-fail(symmetricstateunpack(v_667)) in
        {220}let v_669: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {221}let v_670: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_669),2-proj-2-tuple(v_669),3-proj-3-tuple(v_668),msg_c(alice,charlie))) in
        {222}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_668))) in
        {223}let v_672: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_669))) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then cipherstatepack(1-proj-2-tuple(v_671),increment_nonce(2-proj-2-tuple(v_669))) else fail-any) else fail-any)) in
        {224}let v_673: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_668)) && success?(1-proj-3-tuple(v_668))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-2-tuple(v_669))))) then (if not-caught-fail(v_670) then (if not-caught-fail(v_672) then (v_672,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_674: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_673),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) in
        {226}let v_675: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_673)) && success?(symmetricstatepack(1-proj-2-tuple(v_673),2-proj-3-tuple(v_668),3-proj-3-tuple(v_668)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then symmetricstatepack(1-proj-3-tuple(v_674),2-proj-3-tuple(v_674),hash(3-proj-3-tuple(v_674),2-proj-2-tuple(v_673))) else fail-any) else fail-any)) in
        {227}let v_676: bitstring = catch-fail((if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-3-tuple(v_668))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then (if not-caught-fail(v_675) then (v_675,2-proj-2-tuple(v_673)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_677: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_676),v_651,3-proj-7-tuple(v_648),4-proj-7-tuple(v_648),5-proj-7-tuple(v_648),6-proj-7-tuple(v_648),7-proj-7-tuple(v_648))) in
        {229}let v_678: bitstring = catch-fail(concat3(1-proj-3-tuple(v_649),2-proj-2-tuple(v_660),2-proj-2-tuple(v_676))) in
        {230}let (hs_679: handshakestate,re_680: key,message_c_681: bitstring) = (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-7-tuple(v_648))))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if not-caught-fail(v_651) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-2-tuple(v_660))))) then (if not-caught-fail(v_667) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (v_677,5-proj-7-tuple(v_648),v_678) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {231}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {232}insert statestore(alice,charlie,statepack_d(hs_679));
        {233}out(pub, message_c_681)
    ) | (
        {262}get statestore(=alice,=charlie,statepack_d(hs_682: handshakestate)) in
        {235}in(pub, message_d_683: bitstring);
        {236}let v_684: bitstring = catch-fail(handshakestateunpack(hs_682)) in
        {237}let v_685: bitstring = catch-fail(deconcat3(message_d_683)) in
        {238}let v_686: bool = catch-fail(true) in
        {239}let v_687: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_684))) in
        {240}let v_688: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_687))) in
        {241}let v_689: aead = catch-fail(decrypt(1-proj-2-tuple(v_688),2-proj-2-tuple(v_688),3-proj-3-tuple(v_687),3-proj-3-tuple(v_685))) in
        {242}let v_690: bitstring = catch-fail(aeadunpack(v_689)) in
        {243}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_687))) in
        {244}let v_692: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_688))) && success?(1-proj-3-tuple(v_687))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then cipherstatepack(1-proj-2-tuple(v_691),increment_nonce(2-proj-2-tuple(v_688))) else fail-any) else fail-any)) in
        {245}let v_693: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_685)) && (success?(3-proj-3-tuple(v_687)) && success?(1-proj-3-tuple(v_687)))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-2-tuple(v_688))))) then (if not-caught-fail(v_689) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_692) then (v_692,3-proj-3-tuple(v_690),1-proj-3-tuple(v_690)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_694: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_687),3-proj-3-tuple(v_687)))) in
        {247}let v_695: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_685)) && success?(symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_687),3-proj-3-tuple(v_687)))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack(1-proj-3-tuple(v_694),2-proj-3-tuple(v_694),hash(3-proj-3-tuple(v_694),3-proj-3-tuple(v_685))) else fail-any) else fail-any)) in
        {248}let v_696: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_685)) && success?(1-proj-7-tuple(v_684))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_697: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_696),2-proj-7-tuple(v_684),3-proj-7-tuple(v_684),4-proj-7-tuple(v_684),5-proj-7-tuple(v_684),6-proj-7-tuple(v_684),7-proj-7-tuple(v_684))) in
        {250}let v_698: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_696))) in
        {251}let v_699: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_698),zero)) in
        {252}let v_700: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_698),zero)) in
        {253}let v_701: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_698),zero)) in
        {254}let v_702: bitstring = catch-fail((if success?(2-proj-3-tuple(v_698)) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then (if not-caught-fail(v_701) then (v_699,v_700,v_701) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_703: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_702)) then cipherstatepack(1-proj-3-tuple(v_702),minnonce) else fail-any)) in
        {256}let v_704: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_702)) then cipherstatepack(2-proj-3-tuple(v_702),minnonce) else fail-any)) in
        {257}let v_705: bitstring = catch-fail((if success?(1-proj-3-tuple(v_696)) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (1-proj-3-tuple(v_696),v_703,v_704) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {258}let (hs_706: handshakestate,re_707: key,plaintext_d_708: bitstring,valid_709: bool,cs1_710: cipherstate,cs2_711: cipherstate) = (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-7-tuple(v_684))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then (if not-caught-fail(v_686) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if (v_686 && 3-proj-3-tuple(v_696)) then (if not-caught-fail(v_697) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (v_697,getpublickey(3-proj-7-tuple(v_684)),2-proj-3-tuple(v_696),true,2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {259}event RecvMsg(alice,charlie,stage_d,plaintext_d_708,valid_709);
        {260}insert statestore(alice,charlie,statepack_e(hs_706));
        {261}event RecvEnd(valid_709)
    ) | (
        {263}event LeakS(phase0,alice);
        {264}out(pub, key_s(alice))
    ) | (
        {265}phase 1;
        {266}event LeakS(phase1,alice);
        {267}out(pub, key_s(alice))
    )
) | (
    {268}let s_712: keypair = keypairpack(empty,empty) in
    (
        {269}let e_713: keypair = keypairpack(empty,empty) in
        {270}let rs_714: key = empty in
        {271}let re_715: key = empty in
        {272}let v_716: bitstring = catch-fail(hash(somename,empty)) in
        {273}let v_717: key = catch-fail(v_716) in
        {274}let v_718: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {275}let v_719: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then symmetricstatepack(v_718,v_717,v_716) else fail-any) else fail-any) else fail-any))) in
        {276}let v_720: symmetricstate = catch-fail((if success?((if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then symmetricstatepack(v_718,v_717,v_716) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then symmetricstatepack(1-proj-3-tuple(v_719),2-proj-3-tuple(v_719),hash(3-proj-3-tuple(v_719),empty)) else fail-any) else fail-any)) in
        {277}let hs_721: handshakestate = (if not-caught-fail(v_720) then handshakestatepack(v_720,s_712,e_713,rs_714,re_715,empty,false) else fail-any) in
        {278}insert statestore(bob,alice,statepack_a(hs_721))
    ) | (
        {300}get statestore(=bob,=alice,statepack_a(hs_722: handshakestate)) in
        {279}in(pub, message_a_723: bitstring);
        {280}let v_724: bitstring = catch-fail(handshakestateunpack(hs_722)) in
        {281}let v_725: bitstring = catch-fail(deconcat3(message_a_723)) in
        {282}let v_726: bool = catch-fail(true) in
        {283}let v_727: key = catch-fail(1-proj-3-tuple(v_725)) in
        {284}let v_728: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_724))) in
        {285}let v_729: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_724)) then (if (not-caught-fail(v_728) && success?(is-true(success?(1-proj-3-tuple(v_728))))) then symmetricstatepack(1-proj-3-tuple(v_728),2-proj-3-tuple(v_728),hash(3-proj-3-tuple(v_728),v_727)) else fail-any) else fail-any)) in
        {286}let v_730: bitstring = catch-fail(symmetricstateunpack(v_729)) in
        {287}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {288}let v_732: aead = catch-fail(decrypt(1-proj-2-tuple(v_731),2-proj-2-tuple(v_731),3-proj-3-tuple(v_730),3-proj-3-tuple(v_725))) in
        {289}let v_733: bitstring = catch-fail(aeadunpack(v_732)) in
        {290}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {291}let v_735: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_731))) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then cipherstatepack(1-proj-2-tuple(v_734),increment_nonce(2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {292}let v_736: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_725)) && (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if not-caught-fail(v_735) then (v_735,3-proj-3-tuple(v_733),1-proj-3-tuple(v_733)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_737: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) in
        {294}let v_738: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_725)) && success?(symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_737),hash(3-proj-3-tuple(v_737),3-proj-3-tuple(v_725))) else fail-any) else fail-any)) in
        {295}let v_739: bitstring = catch-fail((if success?(3-proj-3-tuple(v_725)) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,2-proj-3-tuple(v_736),3-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_740: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_739),2-proj-7-tuple(v_724),3-proj-7-tuple(v_724),4-proj-7-tuple(v_724),v_727,6-proj-7-tuple(v_724),7-proj-7-tuple(v_724))) in
        {297}let (hs_741: handshakestate,re_742: key,plaintext_a: bitstring,valid_743: bool) = (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-7-tuple(v_724))))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-3-tuple(v_725))))) then (if not-caught-fail(v_726) then (if not-caught-fail(v_727) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if (v_726 && 3-proj-3-tuple(v_739)) then (if not-caught-fail(v_740) then (v_740,getpublickey(3-proj-7-tuple(v_724)),2-proj-3-tuple(v_739),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {298}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_743);
        {299}insert statestore(bob,alice,statepack_b(hs_741))
    ) | (
        {330}get statestore(=bob,=alice,statepack_b(hs_744: handshakestate)) in
        {301}let v_745: bitstring = catch-fail(handshakestateunpack(hs_744)) in
        {302}let v_746: bitstring = catch-fail((empty,empty,empty)) in
        {303}let v_747: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {304}let v_748: keypair = catch-fail((if not-caught-fail(v_747) then keypairpack(v_747,key_e(bob,alice)) else fail-any)) in
        {305}let v_749: bitstring = catch-fail(getpublickey(v_748)) in
        {306}let v_750: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_745))) in
        {307}let v_751: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_745)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then symmetricstatepack(1-proj-3-tuple(v_750),2-proj-3-tuple(v_750),hash(3-proj-3-tuple(v_750),v_749)) else fail-any) else fail-any)) in
        {308}let v_752: bitstring = catch-fail(keypairunpack(v_748)) in
        {309}let v_753: bitstring = catch-fail(symmetricstateunpack(v_751)) in
        {310}let v_754: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_753),(if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-2-tuple(v_752))))) then dhexp(2-proj-2-tuple(v_752),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {311}let v_755: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_753),(if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-2-tuple(v_752))))) then dhexp(2-proj-2-tuple(v_752),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {312}let v_756: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_753),(if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-2-tuple(v_752))))) then dhexp(2-proj-2-tuple(v_752),5-proj-7-tuple(v_745)) else fail-any) else fail-any))) in
        {313}let v_757: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-2-tuple(v_752))))) then dhexp(2-proj-2-tuple(v_752),5-proj-7-tuple(v_745)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_753))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (if not-caught-fail(v_756) then (v_754,v_755,v_756) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {314}let v_758: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_745)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-2-tuple(v_752))))) then dhexp(2-proj-2-tuple(v_752),5-proj-7-tuple(v_745)) else fail-any) else fail-any)) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_757)) then cipherstatepack(2-proj-3-tuple(v_757),minnonce) else fail-any),1-proj-3-tuple(v_757),3-proj-3-tuple(v_753)) else fail-any) else fail-any) else fail-any)) in
        {315}let v_759: bitstring = catch-fail(symmetricstateunpack(v_758)) in
        {316}let v_760: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_759))) in
        {317}let v_761: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_760),2-proj-2-tuple(v_760),3-proj-3-tuple(v_759),msg_b(bob,alice))) in
        {318}let v_762: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_759))) in
        {319}let v_763: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_760))) && success?(1-proj-3-tuple(v_759))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then cipherstatepack(1-proj-2-tuple(v_762),increment_nonce(2-proj-2-tuple(v_760))) else fail-any) else fail-any)) in
        {320}let v_764: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_759)) && success?(1-proj-3-tuple(v_759))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then (if not-caught-fail(v_761) then (if not-caught-fail(v_763) then (v_763,v_761) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let v_765: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_764),2-proj-3-tuple(v_759),3-proj-3-tuple(v_759)))) in
        {322}let v_766: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_764)) && success?(symmetricstatepack(1-proj-2-tuple(v_764),2-proj-3-tuple(v_759),3-proj-3-tuple(v_759)))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then symmetricstatepack(1-proj-3-tuple(v_765),2-proj-3-tuple(v_765),hash(3-proj-3-tuple(v_765),2-proj-2-tuple(v_764))) else fail-any) else fail-any)) in
        {323}let v_767: bitstring = catch-fail((if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-2-tuple(v_764))))) then (if not-caught-fail(v_766) then (v_766,2-proj-2-tuple(v_764)) else fail-any) else fail-any) else fail-any)) in
        {324}let v_768: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_767),2-proj-7-tuple(v_745),v_748,4-proj-7-tuple(v_745),5-proj-7-tuple(v_745),6-proj-7-tuple(v_745),7-proj-7-tuple(v_745))) in
        {325}let v_769: bitstring = catch-fail(concat3(v_749,2-proj-3-tuple(v_746),2-proj-2-tuple(v_767))) in
        {326}let (hs_770: handshakestate,re_771: key,message_b_772: bitstring) = (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-7-tuple(v_745))))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if not-caught-fail(v_748) then (if not-caught-fail(v_749) then (if not-caught-fail(v_751) then (if not-caught-fail(v_758) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-2-tuple(v_767))))) then (if not-caught-fail(v_768) then (if not-caught-fail(v_769) then (v_768,5-proj-7-tuple(v_745),v_769) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {327}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {328}insert statestore(bob,alice,statepack_c(hs_770));
        {329}out(pub, message_b_772)
    ) | (
        {368}get statestore(=bob,=alice,statepack_c(hs_773: handshakestate)) in
        {331}in(pub, message_c_774: bitstring);
        {332}let v_775: bitstring = catch-fail(handshakestateunpack(hs_773)) in
        {333}let v_776: bitstring = catch-fail(deconcat3(message_c_774)) in
        {334}let v_777: bool = catch-fail(true) in
        {335}let v_778: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_775))) in
        {336}let v_779: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_778))) in
        {337}let v_780: aead = catch-fail(decrypt(1-proj-2-tuple(v_779),2-proj-2-tuple(v_779),3-proj-3-tuple(v_778),2-proj-3-tuple(v_776))) in
        {338}let v_781: bitstring = catch-fail(aeadunpack(v_780)) in
        {339}let v_782: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_778))) in
        {340}let v_783: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_779))) && success?(1-proj-3-tuple(v_778))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-2-tuple(v_782))))) then cipherstatepack(1-proj-2-tuple(v_782),increment_nonce(2-proj-2-tuple(v_779))) else fail-any) else fail-any)) in
        {341}let v_784: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_776)) && (success?(3-proj-3-tuple(v_778)) && success?(1-proj-3-tuple(v_778)))) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-2-tuple(v_779))))) then (if not-caught-fail(v_780) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if not-caught-fail(v_783) then (v_783,3-proj-3-tuple(v_781),1-proj-3-tuple(v_781)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {342}let v_785: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_784),2-proj-3-tuple(v_778),3-proj-3-tuple(v_778)))) in
        {343}let v_786: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_776)) && success?(symmetricstatepack(1-proj-3-tuple(v_784),2-proj-3-tuple(v_778),3-proj-3-tuple(v_778)))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then symmetricstatepack(1-proj-3-tuple(v_785),2-proj-3-tuple(v_785),hash(3-proj-3-tuple(v_785),2-proj-3-tuple(v_776))) else fail-any) else fail-any)) in
        {344}let v_787: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_776)) && success?(1-proj-7-tuple(v_775))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if not-caught-fail(v_786) then (v_786,2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_788: key = catch-fail(2-proj-3-tuple(v_787)) in
        {346}let v_789: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_775))) in
        {347}let v_790: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_787))) in
        {348}let v_791: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_790),(if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then dhexp(2-proj-2-tuple(v_789),v_788) else fail-any) else fail-any))) in
        {349}let v_792: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_790),(if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then dhexp(2-proj-2-tuple(v_789),v_788) else fail-any) else fail-any))) in
        {350}let v_793: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_790),(if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then dhexp(2-proj-2-tuple(v_789),v_788) else fail-any) else fail-any))) in
        {351}let v_794: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then dhexp(2-proj-2-tuple(v_789),v_788) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_790))) then (if not-caught-fail(v_791) then (if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (v_791,v_792,v_793) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_795: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_775)) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-2-tuple(v_789))))) then dhexp(2-proj-2-tuple(v_789),v_788) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_787))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_794)) then cipherstatepack(2-proj-3-tuple(v_794),minnonce) else fail-any),1-proj-3-tuple(v_794),3-proj-3-tuple(v_790)) else fail-any) else fail-any) else fail-any)) in
        {353}let v_796: bitstring = catch-fail(symmetricstateunpack(v_795)) in
        {354}let v_797: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_796))) in
        {355}let v_798: aead = catch-fail(decrypt(1-proj-2-tuple(v_797),2-proj-2-tuple(v_797),3-proj-3-tuple(v_796),3-proj-3-tuple(v_776))) in
        {356}let v_799: bitstring = catch-fail(aeadunpack(v_798)) in
        {357}let v_800: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_796))) in
        {358}let v_801: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_797))) && success?(1-proj-3-tuple(v_796))) then (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-2-tuple(v_800))))) then cipherstatepack(1-proj-2-tuple(v_800),increment_nonce(2-proj-2-tuple(v_797))) else fail-any) else fail-any)) in
        {359}let v_802: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_776)) && (success?(3-proj-3-tuple(v_796)) && success?(1-proj-3-tuple(v_796)))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-2-tuple(v_797))))) then (if not-caught-fail(v_798) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if not-caught-fail(v_801) then (v_801,3-proj-3-tuple(v_799),1-proj-3-tuple(v_799)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {360}let v_803: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_802),2-proj-3-tuple(v_796),3-proj-3-tuple(v_796)))) in
        {361}let v_804: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_776)) && success?(symmetricstatepack(1-proj-3-tuple(v_802),2-proj-3-tuple(v_796),3-proj-3-tuple(v_796)))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then symmetricstatepack(1-proj-3-tuple(v_803),2-proj-3-tuple(v_803),hash(3-proj-3-tuple(v_803),3-proj-3-tuple(v_776))) else fail-any) else fail-any)) in
        {362}let v_805: bitstring = catch-fail((if success?(3-proj-3-tuple(v_776)) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if not-caught-fail(v_804) then (v_804,2-proj-3-tuple(v_802),3-proj-3-tuple(v_802)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {363}let v_806: key = catch-fail(dhexp(key_s(alice),g)) in
        {364}let v_807: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_805),2-proj-7-tuple(v_775),3-proj-7-tuple(v_775),v_788,5-proj-7-tuple(v_775),6-proj-7-tuple(v_775),7-proj-7-tuple(v_775))) in
        {365}let (hs_808: handshakestate,re_809: key,plaintext_c: bitstring,valid_810: bool) = (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-7-tuple(v_775))))) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if not-caught-fail(v_777) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_788) then (if not-caught-fail(v_795) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then (if ((3-proj-3-tuple(v_787) && 3-proj-3-tuple(v_805)) && (v_788 = getpublickey((if not-caught-fail(v_806) then keypairpack(v_806,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_807) then (v_807,getpublickey(3-proj-7-tuple(v_775)),2-proj-3-tuple(v_805),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {366}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_810);
        {367}insert statestore(bob,alice,statepack_d(hs_808))
    ) | (
        {394}get statestore(=bob,=alice,statepack_d(hs_811: handshakestate)) in
        {369}let v_812: bitstring = catch-fail(handshakestateunpack(hs_811)) in
        {370}let v_813: bitstring = catch-fail((empty,empty,empty)) in
        {371}let v_814: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_812))) in
        {372}let v_815: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_814))) in
        {373}let v_816: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_815),2-proj-2-tuple(v_815),3-proj-3-tuple(v_814),msg_d(bob,alice))) in
        {374}let v_817: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_814))) in
        {375}let v_818: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_815))) && success?(1-proj-3-tuple(v_814))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-2-tuple(v_817))))) then cipherstatepack(1-proj-2-tuple(v_817),increment_nonce(2-proj-2-tuple(v_815))) else fail-any) else fail-any)) in
        {376}let v_819: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_814)) && success?(1-proj-3-tuple(v_814))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-2-tuple(v_815))))) then (if not-caught-fail(v_816) then (if not-caught-fail(v_818) then (v_818,v_816) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_820: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_819),2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)))) in
        {378}let v_821: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_819)) && success?(symmetricstatepack(1-proj-2-tuple(v_819),2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-3-tuple(v_820))))) then symmetricstatepack(1-proj-3-tuple(v_820),2-proj-3-tuple(v_820),hash(3-proj-3-tuple(v_820),2-proj-2-tuple(v_819))) else fail-any) else fail-any)) in
        {379}let v_822: bitstring = catch-fail((if success?(1-proj-7-tuple(v_812)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-2-tuple(v_819))))) then (if not-caught-fail(v_821) then (v_821,2-proj-2-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_823: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_822),2-proj-7-tuple(v_812),3-proj-7-tuple(v_812),4-proj-7-tuple(v_812),5-proj-7-tuple(v_812),6-proj-7-tuple(v_812),7-proj-7-tuple(v_812))) in
        {381}let v_824: bitstring = catch-fail(concat3(1-proj-3-tuple(v_813),2-proj-3-tuple(v_813),2-proj-2-tuple(v_822))) in
        {382}let v_825: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_822))) in
        {383}let v_826: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_825),zero)) in
        {384}let v_827: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_825),zero)) in
        {385}let v_828: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_825),zero)) in
        {386}let v_829: bitstring = catch-fail((if success?(2-proj-3-tuple(v_825)) then (if not-caught-fail(v_826) then (if not-caught-fail(v_827) then (if not-caught-fail(v_828) then (v_826,v_827,v_828) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_830: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_829)) then cipherstatepack(1-proj-3-tuple(v_829),minnonce) else fail-any)) in
        {388}let v_831: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_829)) then cipherstatepack(2-proj-3-tuple(v_829),minnonce) else fail-any)) in
        {389}let v_832: bitstring = catch-fail((if success?(1-proj-2-tuple(v_822)) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if not-caught-fail(v_830) then (if not-caught-fail(v_831) then (1-proj-2-tuple(v_822),v_830,v_831) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let (hs_833: handshakestate,re_834: key,message_d_835: bitstring,cs1_836: cipherstate,cs2_837: cipherstate) = (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-7-tuple(v_812))))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-2-tuple(v_822))))) then (if not-caught-fail(v_823) then (if not-caught-fail(v_824) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-3-tuple(v_832))))) then (v_823,5-proj-7-tuple(v_812),v_824,2-proj-3-tuple(v_832),3-proj-3-tuple(v_832)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {391}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {392}insert statestore(bob,alice,statepack_e(hs_833));
        {393}out(pub, message_d_835)
    ) | (
        {395}event LeakS(phase0,bob);
        {396}out(pub, key_s(bob))
    ) | (
        {397}phase 1;
        {398}event LeakS(phase1,bob);
        {399}out(pub, key_s(bob))
    )
) | (
    {400}let s_838: keypair = keypairpack(empty,empty) in
    (
        {401}let e_839: keypair = keypairpack(empty,empty) in
        {402}let rs_840: key = empty in
        {403}let re_841: key = empty in
        {404}let v_842: bitstring = catch-fail(hash(somename,empty)) in
        {405}let v_843: key = catch-fail(v_842) in
        {406}let v_844: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {407}let v_845: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then symmetricstatepack(v_844,v_843,v_842) else fail-any) else fail-any) else fail-any))) in
        {408}let v_846: symmetricstate = catch-fail((if success?((if not-caught-fail(v_842) then (if not-caught-fail(v_843) then (if not-caught-fail(v_844) then symmetricstatepack(v_844,v_843,v_842) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_845),hash(3-proj-3-tuple(v_845),empty)) else fail-any) else fail-any)) in
        {409}let hs_847: handshakestate = (if not-caught-fail(v_846) then handshakestatepack(v_846,s_838,e_839,rs_840,re_841,empty,false) else fail-any) in
        {410}insert statestore(bob,charlie,statepack_a(hs_847))
    ) | (
        {432}get statestore(=bob,=charlie,statepack_a(hs_848: handshakestate)) in
        {411}in(pub, message_a_849: bitstring);
        {412}let v_850: bitstring = catch-fail(handshakestateunpack(hs_848)) in
        {413}let v_851: bitstring = catch-fail(deconcat3(message_a_849)) in
        {414}let v_852: bool = catch-fail(true) in
        {415}let v_853: key = catch-fail(1-proj-3-tuple(v_851)) in
        {416}let v_854: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_850))) in
        {417}let v_855: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_850)) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then symmetricstatepack(1-proj-3-tuple(v_854),2-proj-3-tuple(v_854),hash(3-proj-3-tuple(v_854),v_853)) else fail-any) else fail-any)) in
        {418}let v_856: bitstring = catch-fail(symmetricstateunpack(v_855)) in
        {419}let v_857: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_856))) in
        {420}let v_858: aead = catch-fail(decrypt(1-proj-2-tuple(v_857),2-proj-2-tuple(v_857),3-proj-3-tuple(v_856),3-proj-3-tuple(v_851))) in
        {421}let v_859: bitstring = catch-fail(aeadunpack(v_858)) in
        {422}let v_860: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_856))) in
        {423}let v_861: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_857))) && success?(1-proj-3-tuple(v_856))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-2-tuple(v_860))))) then cipherstatepack(1-proj-2-tuple(v_860),increment_nonce(2-proj-2-tuple(v_857))) else fail-any) else fail-any)) in
        {424}let v_862: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_851)) && (success?(3-proj-3-tuple(v_856)) && success?(1-proj-3-tuple(v_856)))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then (if not-caught-fail(v_858) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if not-caught-fail(v_861) then (v_861,3-proj-3-tuple(v_859),1-proj-3-tuple(v_859)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {425}let v_863: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_856),3-proj-3-tuple(v_856)))) in
        {426}let v_864: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_851)) && success?(symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_856),3-proj-3-tuple(v_856)))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),hash(3-proj-3-tuple(v_863),3-proj-3-tuple(v_851))) else fail-any) else fail-any)) in
        {427}let v_865: bitstring = catch-fail((if success?(3-proj-3-tuple(v_851)) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if not-caught-fail(v_864) then (v_864,2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_866: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_865),2-proj-7-tuple(v_850),3-proj-7-tuple(v_850),4-proj-7-tuple(v_850),v_853,6-proj-7-tuple(v_850),7-proj-7-tuple(v_850))) in
        {429}let (hs_867: handshakestate,re_868: key,plaintext_a_869: bitstring,valid_870: bool) = (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-7-tuple(v_850))))) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if not-caught-fail(v_852) then (if not-caught-fail(v_853) then (if not-caught-fail(v_855) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if (v_852 && 3-proj-3-tuple(v_865)) then (if not-caught-fail(v_866) then (v_866,getpublickey(3-proj-7-tuple(v_850)),2-proj-3-tuple(v_865),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {430}event RecvMsg(bob,charlie,stage_a,plaintext_a_869,valid_870);
        {431}insert statestore(bob,charlie,statepack_b(hs_867))
    ) | (
        {462}get statestore(=bob,=charlie,statepack_b(hs_871: handshakestate)) in
        {433}let v_872: bitstring = catch-fail(handshakestateunpack(hs_871)) in
        {434}let v_873: bitstring = catch-fail((empty,empty,empty)) in
        {435}let v_874: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {436}let v_875: keypair = catch-fail((if not-caught-fail(v_874) then keypairpack(v_874,key_e(bob,charlie)) else fail-any)) in
        {437}let v_876: bitstring = catch-fail(getpublickey(v_875)) in
        {438}let v_877: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_872))) in
        {439}let v_878: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_872)) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then symmetricstatepack(1-proj-3-tuple(v_877),2-proj-3-tuple(v_877),hash(3-proj-3-tuple(v_877),v_876)) else fail-any) else fail-any)) in
        {440}let v_879: bitstring = catch-fail(keypairunpack(v_875)) in
        {441}let v_880: bitstring = catch-fail(symmetricstateunpack(v_878)) in
        {442}let v_881: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_880),(if success?(5-proj-7-tuple(v_872)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-2-tuple(v_879))))) then dhexp(2-proj-2-tuple(v_879),5-proj-7-tuple(v_872)) else fail-any) else fail-any))) in
        {443}let v_882: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_880),(if success?(5-proj-7-tuple(v_872)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-2-tuple(v_879))))) then dhexp(2-proj-2-tuple(v_879),5-proj-7-tuple(v_872)) else fail-any) else fail-any))) in
        {444}let v_883: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_880),(if success?(5-proj-7-tuple(v_872)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-2-tuple(v_879))))) then dhexp(2-proj-2-tuple(v_879),5-proj-7-tuple(v_872)) else fail-any) else fail-any))) in
        {445}let v_884: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_872)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-2-tuple(v_879))))) then dhexp(2-proj-2-tuple(v_879),5-proj-7-tuple(v_872)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_880))) then (if not-caught-fail(v_881) then (if not-caught-fail(v_882) then (if not-caught-fail(v_883) then (v_881,v_882,v_883) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {446}let v_885: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_872)) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-2-tuple(v_879))))) then dhexp(2-proj-2-tuple(v_879),5-proj-7-tuple(v_872)) else fail-any) else fail-any)) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_884)) then cipherstatepack(2-proj-3-tuple(v_884),minnonce) else fail-any),1-proj-3-tuple(v_884),3-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any)) in
        {447}let v_886: bitstring = catch-fail(symmetricstateunpack(v_885)) in
        {448}let v_887: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_886))) in
        {449}let v_888: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_887),2-proj-2-tuple(v_887),3-proj-3-tuple(v_886),msg_b(bob,charlie))) in
        {450}let v_889: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_886))) in
        {451}let v_890: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_887))) && success?(1-proj-3-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then cipherstatepack(1-proj-2-tuple(v_889),increment_nonce(2-proj-2-tuple(v_887))) else fail-any) else fail-any)) in
        {452}let v_891: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_886)) && success?(1-proj-3-tuple(v_886))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-2-tuple(v_887))))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_890) then (v_890,v_888) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {453}let v_892: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_891),2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)))) in
        {454}let v_893: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_891)) && success?(symmetricstatepack(1-proj-2-tuple(v_891),2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_892),hash(3-proj-3-tuple(v_892),2-proj-2-tuple(v_891))) else fail-any) else fail-any)) in
        {455}let v_894: bitstring = catch-fail((if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then (if not-caught-fail(v_893) then (v_893,2-proj-2-tuple(v_891)) else fail-any) else fail-any) else fail-any)) in
        {456}let v_895: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_894),2-proj-7-tuple(v_872),v_875,4-proj-7-tuple(v_872),5-proj-7-tuple(v_872),6-proj-7-tuple(v_872),7-proj-7-tuple(v_872))) in
        {457}let v_896: bitstring = catch-fail(concat3(v_876,2-proj-3-tuple(v_873),2-proj-2-tuple(v_894))) in
        {458}let (hs_897: handshakestate,re_898: key,message_b_899: bitstring) = (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-7-tuple(v_872))))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then (if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_878) then (if not-caught-fail(v_885) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (v_895,5-proj-7-tuple(v_872),v_896) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {459}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {460}insert statestore(bob,charlie,statepack_c(hs_897));
        {461}out(pub, message_b_899)
    ) | (
        {500}get statestore(=bob,=charlie,statepack_c(hs_900: handshakestate)) in
        {463}in(pub, message_c_901: bitstring);
        {464}let v_902: bitstring = catch-fail(handshakestateunpack(hs_900)) in
        {465}let v_903: bitstring = catch-fail(deconcat3(message_c_901)) in
        {466}let v_904: bool = catch-fail(true) in
        {467}let v_905: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_902))) in
        {468}let v_906: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_905))) in
        {469}let v_907: aead = catch-fail(decrypt(1-proj-2-tuple(v_906),2-proj-2-tuple(v_906),3-proj-3-tuple(v_905),2-proj-3-tuple(v_903))) in
        {470}let v_908: bitstring = catch-fail(aeadunpack(v_907)) in
        {471}let v_909: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_905))) in
        {472}let v_910: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_906))) && success?(1-proj-3-tuple(v_905))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-2-tuple(v_909))))) then cipherstatepack(1-proj-2-tuple(v_909),increment_nonce(2-proj-2-tuple(v_906))) else fail-any) else fail-any)) in
        {473}let v_911: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_903)) && (success?(3-proj-3-tuple(v_905)) && success?(1-proj-3-tuple(v_905)))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then (if not-caught-fail(v_907) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_910) then (v_910,3-proj-3-tuple(v_908),1-proj-3-tuple(v_908)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {474}let v_912: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_911),2-proj-3-tuple(v_905),3-proj-3-tuple(v_905)))) in
        {475}let v_913: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_903)) && success?(symmetricstatepack(1-proj-3-tuple(v_911),2-proj-3-tuple(v_905),3-proj-3-tuple(v_905)))) then (if (not-caught-fail(v_912) && success?(is-true(success?(1-proj-3-tuple(v_912))))) then symmetricstatepack(1-proj-3-tuple(v_912),2-proj-3-tuple(v_912),hash(3-proj-3-tuple(v_912),2-proj-3-tuple(v_903))) else fail-any) else fail-any)) in
        {476}let v_914: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_903)) && success?(1-proj-7-tuple(v_902))) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if not-caught-fail(v_913) then (v_913,2-proj-3-tuple(v_911),3-proj-3-tuple(v_911)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {477}let v_915: key = catch-fail(2-proj-3-tuple(v_914)) in
        {478}let v_916: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_902))) in
        {479}let v_917: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_914))) in
        {480}let v_918: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_917),(if success?(3-proj-7-tuple(v_902)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),v_915) else fail-any) else fail-any))) in
        {481}let v_919: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_917),(if success?(3-proj-7-tuple(v_902)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),v_915) else fail-any) else fail-any))) in
        {482}let v_920: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_917),(if success?(3-proj-7-tuple(v_902)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),v_915) else fail-any) else fail-any))) in
        {483}let v_921: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_902)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),v_915) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_917))) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (if not-caught-fail(v_920) then (v_918,v_919,v_920) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {484}let v_922: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_902)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-2-tuple(v_916))))) then dhexp(2-proj-2-tuple(v_916),v_915) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_914))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_921)) then cipherstatepack(2-proj-3-tuple(v_921),minnonce) else fail-any),1-proj-3-tuple(v_921),3-proj-3-tuple(v_917)) else fail-any) else fail-any) else fail-any)) in
        {485}let v_923: bitstring = catch-fail(symmetricstateunpack(v_922)) in
        {486}let v_924: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_923))) in
        {487}let v_925: aead = catch-fail(decrypt(1-proj-2-tuple(v_924),2-proj-2-tuple(v_924),3-proj-3-tuple(v_923),3-proj-3-tuple(v_903))) in
        {488}let v_926: bitstring = catch-fail(aeadunpack(v_925)) in
        {489}let v_927: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_923))) in
        {490}let v_928: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_924))) && success?(1-proj-3-tuple(v_923))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then cipherstatepack(1-proj-2-tuple(v_927),increment_nonce(2-proj-2-tuple(v_924))) else fail-any) else fail-any)) in
        {491}let v_929: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_903)) && (success?(3-proj-3-tuple(v_923)) && success?(1-proj-3-tuple(v_923)))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then (if not-caught-fail(v_925) then (if (not-caught-fail(v_926) && success?(is-true(success?(1-proj-3-tuple(v_926))))) then (if not-caught-fail(v_928) then (v_928,3-proj-3-tuple(v_926),1-proj-3-tuple(v_926)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {492}let v_930: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_929),2-proj-3-tuple(v_923),3-proj-3-tuple(v_923)))) in
        {493}let v_931: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_903)) && success?(symmetricstatepack(1-proj-3-tuple(v_929),2-proj-3-tuple(v_923),3-proj-3-tuple(v_923)))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then symmetricstatepack(1-proj-3-tuple(v_930),2-proj-3-tuple(v_930),hash(3-proj-3-tuple(v_930),3-proj-3-tuple(v_903))) else fail-any) else fail-any)) in
        {494}let v_932: bitstring = catch-fail((if success?(3-proj-3-tuple(v_903)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if not-caught-fail(v_931) then (v_931,2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {495}let v_933: key = catch-fail(dhexp(key_s(charlie),g)) in
        {496}let v_934: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_932),2-proj-7-tuple(v_902),3-proj-7-tuple(v_902),v_915,5-proj-7-tuple(v_902),6-proj-7-tuple(v_902),7-proj-7-tuple(v_902))) in
        {497}let (hs_935: handshakestate,re_936: key,plaintext_c_937: bitstring,valid_938: bool) = (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-7-tuple(v_902))))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if not-caught-fail(v_904) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then (if not-caught-fail(v_915) then (if not-caught-fail(v_922) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if ((3-proj-3-tuple(v_914) && 3-proj-3-tuple(v_932)) && (v_915 = getpublickey((if not-caught-fail(v_933) then keypairpack(v_933,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_934) then (v_934,getpublickey(3-proj-7-tuple(v_902)),2-proj-3-tuple(v_932),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {498}event RecvMsg(bob,charlie,stage_c,plaintext_c_937,valid_938);
        {499}insert statestore(bob,charlie,statepack_d(hs_935))
    ) | (
        {526}get statestore(=bob,=charlie,statepack_d(hs_939: handshakestate)) in
        {501}let v_940: bitstring = catch-fail(handshakestateunpack(hs_939)) in
        {502}let v_941: bitstring = catch-fail((empty,empty,empty)) in
        {503}let v_942: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_940))) in
        {504}let v_943: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_942))) in
        {505}let v_944: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_943),2-proj-2-tuple(v_943),3-proj-3-tuple(v_942),msg_d(bob,charlie))) in
        {506}let v_945: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_942))) in
        {507}let v_946: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_943))) && success?(1-proj-3-tuple(v_942))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-2-tuple(v_945))))) then cipherstatepack(1-proj-2-tuple(v_945),increment_nonce(2-proj-2-tuple(v_943))) else fail-any) else fail-any)) in
        {508}let v_947: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_942)) && success?(1-proj-3-tuple(v_942))) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-2-tuple(v_943))))) then (if not-caught-fail(v_944) then (if not-caught-fail(v_946) then (v_946,v_944) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_948: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_947),2-proj-3-tuple(v_942),3-proj-3-tuple(v_942)))) in
        {510}let v_949: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_947)) && success?(symmetricstatepack(1-proj-2-tuple(v_947),2-proj-3-tuple(v_942),3-proj-3-tuple(v_942)))) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-3-tuple(v_948))))) then symmetricstatepack(1-proj-3-tuple(v_948),2-proj-3-tuple(v_948),hash(3-proj-3-tuple(v_948),2-proj-2-tuple(v_947))) else fail-any) else fail-any)) in
        {511}let v_950: bitstring = catch-fail((if success?(1-proj-7-tuple(v_940)) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-3-tuple(v_942))))) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_949) then (v_949,2-proj-2-tuple(v_947)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_951: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_950),2-proj-7-tuple(v_940),3-proj-7-tuple(v_940),4-proj-7-tuple(v_940),5-proj-7-tuple(v_940),6-proj-7-tuple(v_940),7-proj-7-tuple(v_940))) in
        {513}let v_952: bitstring = catch-fail(concat3(1-proj-3-tuple(v_941),2-proj-3-tuple(v_941),2-proj-2-tuple(v_950))) in
        {514}let v_953: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_950))) in
        {515}let v_954: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_953),zero)) in
        {516}let v_955: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_953),zero)) in
        {517}let v_956: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_953),zero)) in
        {518}let v_957: bitstring = catch-fail((if success?(2-proj-3-tuple(v_953)) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (if not-caught-fail(v_956) then (v_954,v_955,v_956) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {519}let v_958: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_957)) then cipherstatepack(1-proj-3-tuple(v_957),minnonce) else fail-any)) in
        {520}let v_959: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_957)) then cipherstatepack(2-proj-3-tuple(v_957),minnonce) else fail-any)) in
        {521}let v_960: bitstring = catch-fail((if success?(1-proj-2-tuple(v_950)) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-3-tuple(v_957))))) then (if not-caught-fail(v_958) then (if not-caught-fail(v_959) then (1-proj-2-tuple(v_950),v_958,v_959) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {522}let (hs_961: handshakestate,re_962: key,message_d_963: bitstring,cs1_964: cipherstate,cs2_965: cipherstate) = (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-7-tuple(v_940))))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-2-tuple(v_950))))) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-3-tuple(v_960))))) then (v_951,5-proj-7-tuple(v_940),v_952,2-proj-3-tuple(v_960),3-proj-3-tuple(v_960)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {523}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {524}insert statestore(bob,charlie,statepack_e(hs_961));
        {525}out(pub, message_d_963)
    ) | (
        {527}event LeakS(phase0,bob);
        {528}out(pub, key_s(bob))
    ) | (
        {529}phase 1;
        {530}event LeakS(phase1,bob);
        {531}out(pub, key_s(bob))
    )
) | (
    {532}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 138 rules in the queue.
400 rules inserted. The rule base contains 389 rules. 56 rules in the queue.
600 rules inserted. The rule base contains 571 rules. 229 rules in the queue.
800 rules inserted. The rule base contains 740 rules. 239 rules in the queue.
1000 rules inserted. The rule base contains 904 rules. 128 rules in the queue.
1200 rules inserted. The rule base contains 1085 rules. 218 rules in the queue.
1400 rules inserted. The rule base contains 1238 rules. 232 rules in the queue.
1600 rules inserted. The rule base contains 1370 rules. 240 rules in the queue.
1800 rules inserted. The rule base contains 1483 rules. 219 rules in the queue.
2000 rules inserted. The rule base contains 1646 rules. 247 rules in the queue.
2200 rules inserted. The rule base contains 1764 rules. 252 rules in the queue.
2400 rules inserted. The rule base contains 1825 rules. 192 rules in the queue.
2600 rules inserted. The rule base contains 1929 rules. 204 rules in the queue.
2800 rules inserted. The rule base contains 2026 rules. 213 rules in the queue.
3000 rules inserted. The rule base contains 2169 rules. 238 rules in the queue.
3200 rules inserted. The rule base contains 2316 rules. 271 rules in the queue.
3400 rules inserted. The rule base contains 2434 rules. 254 rules in the queue.
3600 rules inserted. The rule base contains 2534 rules. 253 rules in the queue.
3800 rules inserted. The rule base contains 2678 rules. 253 rules in the queue.
4000 rules inserted. The rule base contains 2838 rules. 274 rules in the queue.
4200 rules inserted. The rule base contains 2980 rules. 298 rules in the queue.
4400 rules inserted. The rule base contains 3121 rules. 301 rules in the queue.
4600 rules inserted. The rule base contains 3262 rules. 275 rules in the queue.
4800 rules inserted. The rule base contains 3356 rules. 195 rules in the queue.
5000 rules inserted. The rule base contains 3451 rules. 160 rules in the queue.
5200 rules inserted. The rule base contains 3538 rules. 147 rules in the queue.
5400 rules inserted. The rule base contains 3615 rules. 137 rules in the queue.
5600 rules inserted. The rule base contains 3727 rules. 46 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {410}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {432}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {411}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {431}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {462}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {459}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {461}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {63}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {410}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {432}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {411}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {431}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {462}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {459}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {461}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {63}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {410}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {432}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {411}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {431}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {462}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {459}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {461}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {63}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {198}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {170}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {197}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {331}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {198}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {170}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {197}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {331}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {198}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {170}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {197}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {331}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
