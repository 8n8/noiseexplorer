File "XN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 274, character 7 - line 274, character 8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 275, character 7 - line 275, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 275, character 36 - line 275, character 36:
Warning: identifier h rebound.
File "XN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 314, character 6 - line 314, character 6:
Warning: identifier e rebound.
File "XN.noise.passive.pv", line 315, character 6 - line 315, character 7:
Warning: identifier ne rebound.
File "XN.noise.passive.pv", line 316, character 6 - line 316, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 318, character 7 - line 318, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 318, character 26 - line 318, character 36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 319, character 6 - line 319, character 7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 326, character 6 - line 326, character 6:
Warning: identifier e rebound.
File "XN.noise.passive.pv", line 327, character 6 - line 327, character 7:
Warning: identifier ne rebound.
File "XN.noise.passive.pv", line 328, character 6 - line 328, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 331, character 7 - line 331, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 331, character 26 - line 331, character 36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 332, character 6 - line 332, character 7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 339, character 6 - line 339, character 6:
Warning: identifier s rebound.
File "XN.noise.passive.pv", line 340, character 7 - line 340, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 340, character 26 - line 340, character 36:
Warning: identifier ciphertext1 rebound.
File "XN.noise.passive.pv", line 341, character 6 - line 341, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 342, character 7 - line 342, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 342, character 26 - line 342, character 36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 343, character 6 - line 343, character 7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 350, character 7 - line 350, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 350, character 26 - line 350, character 36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 351, character 6 - line 351, character 7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 360, character 6 - line 360, character 7:
Warning: identifier re rebound.
File "XN.noise.passive.pv", line 361, character 6 - line 361, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 363, character 7 - line 363, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 365, character 7 - line 365, character 8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 373, character 6 - line 373, character 7:
Warning: identifier re rebound.
File "XN.noise.passive.pv", line 374, character 6 - line 374, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 376, character 6 - line 376, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 377, character 7 - line 377, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 379, character 7 - line 379, character 8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 387, character 7 - line 387, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 387, character 48 - line 387, character 53:
Warning: identifier valid1 rebound.
File "XN.noise.passive.pv", line 388, character 6 - line 388, character 7:
Warning: identifier rs rebound.
File "XN.noise.passive.pv", line 389, character 6 - line 389, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 390, character 7 - line 390, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 392, character 7 - line 392, character 8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 400, character 7 - line 400, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 402, character 7 - line 402, character 8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 548, character 8 - line 548, character 9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 400, character 7 - line 400, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 402, character 7 - line 402, character 8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 540, character 8 - line 540, character 9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 339, character 6 - line 339, character 6:
Warning: identifier s rebound.
File "XN.noise.passive.pv", line 340, character 7 - line 340, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 340, character 26 - line 340, character 36:
Warning: identifier ciphertext1 rebound.
File "XN.noise.passive.pv", line 341, character 6 - line 341, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 342, character 7 - line 342, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 342, character 26 - line 342, character 36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 343, character 6 - line 343, character 7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 533, character 8 - line 533, character 9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 373, character 6 - line 373, character 7:
Warning: identifier re rebound.
File "XN.noise.passive.pv", line 374, character 6 - line 374, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 376, character 6 - line 376, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 377, character 7 - line 377, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 379, character 7 - line 379, character 8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 525, character 8 - line 525, character 9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 314, character 6 - line 314, character 6:
Warning: identifier e rebound.
File "XN.noise.passive.pv", line 315, character 6 - line 315, character 7:
Warning: identifier ne rebound.
File "XN.noise.passive.pv", line 316, character 6 - line 316, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 318, character 7 - line 318, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 318, character 26 - line 318, character 36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 319, character 6 - line 319, character 7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 598, character 8 - line 598, character 9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 350, character 7 - line 350, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 350, character 26 - line 350, character 36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 351, character 6 - line 351, character 7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 591, character 8 - line 591, character 9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 387, character 7 - line 387, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 387, character 48 - line 387, character 53:
Warning: identifier valid1 rebound.
File "XN.noise.passive.pv", line 388, character 6 - line 388, character 7:
Warning: identifier rs rebound.
File "XN.noise.passive.pv", line 389, character 6 - line 389, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 390, character 7 - line 390, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 392, character 7 - line 392, character 8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 583, character 8 - line 583, character 9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 326, character 6 - line 326, character 6:
Warning: identifier e rebound.
File "XN.noise.passive.pv", line 327, character 6 - line 327, character 7:
Warning: identifier ne rebound.
File "XN.noise.passive.pv", line 328, character 6 - line 328, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 331, character 7 - line 331, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 331, character 26 - line 331, character 36:
Warning: identifier ciphertext2 rebound.
File "XN.noise.passive.pv", line 332, character 6 - line 332, character 7:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "XN.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 576, character 8 - line 576, character 9:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 360, character 6 - line 360, character 7:
Warning: identifier re rebound.
File "XN.noise.passive.pv", line 361, character 6 - line 361, character 7:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 363, character 7 - line 363, character 8:
Warning: identifier ss rebound.
File "XN.noise.passive.pv", line 365, character 7 - line 365, character 8:
Warning: identifier hs rebound.
File "XN.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "XN.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_546: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_546));
    (
        {4}let e_547: keypair = keypairpack(empty,empty) in
        {5}let rs_548: key = empty in
        {6}let re_549: key = empty in
        {7}let v_550: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_551: key = catch-fail(v_550) in
        {9}let v_552: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_553: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_550) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then symmetricstatepack(v_552,v_551,v_550) else fail-any) else fail-any) else fail-any))) in
        {11}let v_554: symmetricstate = catch-fail((if success?((if not-caught-fail(v_550) then (if not-caught-fail(v_551) then (if not-caught-fail(v_552) then symmetricstatepack(v_552,v_551,v_550) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then symmetricstatepack(1-proj-3-tuple(v_553),2-proj-3-tuple(v_553),hash(3-proj-3-tuple(v_553),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_554) then handshakestatepack(v_554,s_546,e_547,rs_548,re_549,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {36}get statestore(=alice,=bob,statepack_a(hs_555: handshakestate)) in
        {14}let v_556: bitstring = catch-fail(handshakestateunpack(hs_555)) in
        {15}let v_557: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_558: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_559: keypair = catch-fail((if not-caught-fail(v_558) then keypairpack(v_558,key_e(alice,bob)) else fail-any)) in
        {18}let v_560: bitstring = catch-fail(getpublickey(v_559)) in
        {19}let v_561: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_556))) in
        {20}let v_562: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_556)) then (if (not-caught-fail(v_561) && success?(is-true(success?(1-proj-3-tuple(v_561))))) then symmetricstatepack(1-proj-3-tuple(v_561),2-proj-3-tuple(v_561),hash(3-proj-3-tuple(v_561),v_560)) else fail-any) else fail-any)) in
        {21}let v_563: bitstring = catch-fail(symmetricstateunpack(v_562)) in
        {22}let v_564: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {23}let v_565: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_564),2-proj-2-tuple(v_564),3-proj-3-tuple(v_563),msg_a(alice,bob))) in
        {24}let v_566: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_563))) in
        {25}let v_567: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_564))) && success?(1-proj-3-tuple(v_563))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then cipherstatepack(1-proj-2-tuple(v_566),increment_nonce(2-proj-2-tuple(v_564))) else fail-any) else fail-any)) in
        {26}let v_568: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_563)) && success?(1-proj-3-tuple(v_563))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-2-tuple(v_564))))) then (if not-caught-fail(v_565) then (if not-caught-fail(v_567) then (v_567,v_565) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {27}let v_569: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_568),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) in
        {28}let v_570: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_568)) && success?(symmetricstatepack(1-proj-2-tuple(v_568),2-proj-3-tuple(v_563),3-proj-3-tuple(v_563)))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then symmetricstatepack(1-proj-3-tuple(v_569),2-proj-3-tuple(v_569),hash(3-proj-3-tuple(v_569),2-proj-2-tuple(v_568))) else fail-any) else fail-any)) in
        {29}let v_571: bitstring = catch-fail((if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then (if not-caught-fail(v_570) then (v_570,2-proj-2-tuple(v_568)) else fail-any) else fail-any) else fail-any)) in
        {30}let v_572: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_571),2-proj-7-tuple(v_556),v_559,4-proj-7-tuple(v_556),5-proj-7-tuple(v_556),6-proj-7-tuple(v_556),7-proj-7-tuple(v_556))) in
        {31}let v_573: bitstring = catch-fail(concat3(v_560,2-proj-3-tuple(v_557),2-proj-2-tuple(v_571))) in
        {32}let (hs_574: handshakestate,re_575: key,message_a: bitstring) = (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-7-tuple(v_556))))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then (if not-caught-fail(v_559) then (if not-caught-fail(v_560) then (if not-caught-fail(v_562) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-2-tuple(v_571))))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (v_572,5-proj-7-tuple(v_556),v_573) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {33}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {34}insert statestore(alice,bob,statepack_b(hs_574));
        {35}out(pub, message_a)
    ) | (
        {65}get statestore(=alice,=bob,statepack_b(hs_576: handshakestate)) in
        {37}in(pub, message_b: bitstring);
        {38}let v_577: bitstring = catch-fail(handshakestateunpack(hs_576)) in
        {39}let v_578: bitstring = catch-fail(deconcat3(message_b)) in
        {40}let v_579: bool = catch-fail(true) in
        {41}let v_580: key = catch-fail(1-proj-3-tuple(v_578)) in
        {42}let v_581: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_577))) in
        {43}let v_582: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_577)) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),v_580)) else fail-any) else fail-any)) in
        {44}let v_583: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_577))) in
        {45}let v_584: bitstring = catch-fail(symmetricstateunpack(v_582)) in
        {46}let v_585: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {47}let v_586: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {48}let v_587: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_584),(if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any))) in
        {49}let v_588: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_584))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (v_585,v_586,v_587) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {50}let v_589: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_577)) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then dhexp(2-proj-2-tuple(v_583),v_580) else fail-any) else fail-any)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then (if (not-caught-fail(v_588) && success?(is-true(success?(1-proj-3-tuple(v_588))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_588)) then cipherstatepack(2-proj-3-tuple(v_588),minnonce) else fail-any),1-proj-3-tuple(v_588),3-proj-3-tuple(v_584)) else fail-any) else fail-any) else fail-any)) in
        {51}let v_590: bitstring = catch-fail(symmetricstateunpack(v_589)) in
        {52}let v_591: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_590))) in
        {53}let v_592: aead = catch-fail(decrypt(1-proj-2-tuple(v_591),2-proj-2-tuple(v_591),3-proj-3-tuple(v_590),3-proj-3-tuple(v_578))) in
        {54}let v_593: bitstring = catch-fail(aeadunpack(v_592)) in
        {55}let v_594: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_590))) in
        {56}let v_595: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_591))) && success?(1-proj-3-tuple(v_590))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then cipherstatepack(1-proj-2-tuple(v_594),increment_nonce(2-proj-2-tuple(v_591))) else fail-any) else fail-any)) in
        {57}let v_596: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_578)) && (success?(3-proj-3-tuple(v_590)) && success?(1-proj-3-tuple(v_590)))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-2-tuple(v_591))))) then (if not-caught-fail(v_592) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if not-caught-fail(v_595) then (v_595,3-proj-3-tuple(v_593),1-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {58}let v_597: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)))) in
        {59}let v_598: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_578)) && success?(symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_590),3-proj-3-tuple(v_590)))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_597),hash(3-proj-3-tuple(v_597),3-proj-3-tuple(v_578))) else fail-any) else fail-any)) in
        {60}let v_599: bitstring = catch-fail((if success?(3-proj-3-tuple(v_578)) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then (if not-caught-fail(v_598) then (v_598,2-proj-3-tuple(v_596),3-proj-3-tuple(v_596)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_600: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_599),2-proj-7-tuple(v_577),3-proj-7-tuple(v_577),4-proj-7-tuple(v_577),v_580,6-proj-7-tuple(v_577),7-proj-7-tuple(v_577))) in
        {62}let (hs_601: handshakestate,re_602: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-7-tuple(v_577))))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-3-tuple(v_578))))) then (if not-caught-fail(v_579) then (if not-caught-fail(v_580) then (if not-caught-fail(v_582) then (if not-caught-fail(v_589) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (v_579 && 3-proj-3-tuple(v_599)) then (if not-caught-fail(v_600) then (v_600,getpublickey(3-proj-7-tuple(v_577)),2-proj-3-tuple(v_599),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {63}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {64}insert statestore(alice,bob,statepack_c(hs_601))
    ) | (
        {101}get statestore(=alice,=bob,statepack_c(hs_603: handshakestate)) in
        {66}let v_604: bitstring = catch-fail(handshakestateunpack(hs_603)) in
        {67}let v_605: bitstring = catch-fail((empty,empty,empty)) in
        {68}let v_606: key = catch-fail(dhexp(key_s(alice),g)) in
        {69}let v_607: keypair = catch-fail((if not-caught-fail(v_606) then keypairpack(v_606,key_s(alice)) else fail-any)) in
        {70}let v_608: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_604))) in
        {71}let v_609: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_608))) in
        {72}let v_610: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_609),2-proj-2-tuple(v_609),3-proj-3-tuple(v_608),getpublickey(v_607))) in
        {73}let v_611: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_608))) in
        {74}let v_612: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_609))) && success?(1-proj-3-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then cipherstatepack(1-proj-2-tuple(v_611),increment_nonce(2-proj-2-tuple(v_609))) else fail-any) else fail-any)) in
        {75}let v_613: bitstring = catch-fail((if (success?(getpublickey(v_607)) && (success?(3-proj-3-tuple(v_608)) && success?(1-proj-3-tuple(v_608)))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (v_612,v_610) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_614: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_613),2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)))) in
        {77}let v_615: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_613)) && success?(symmetricstatepack(1-proj-2-tuple(v_613),2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then symmetricstatepack(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),hash(3-proj-3-tuple(v_614),2-proj-2-tuple(v_613))) else fail-any) else fail-any)) in
        {78}let v_616: bitstring = catch-fail((if (success?(getpublickey(v_607)) && success?(1-proj-7-tuple(v_604))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if not-caught-fail(v_615) then (v_615,2-proj-2-tuple(v_613)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_617: bitstring = catch-fail(keypairunpack(v_607)) in
        {80}let v_618: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_616))) in
        {81}let v_619: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_618),(if success?(5-proj-7-tuple(v_604)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),5-proj-7-tuple(v_604)) else fail-any) else fail-any))) in
        {82}let v_620: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_618),(if success?(5-proj-7-tuple(v_604)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),5-proj-7-tuple(v_604)) else fail-any) else fail-any))) in
        {83}let v_621: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_618),(if success?(5-proj-7-tuple(v_604)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),5-proj-7-tuple(v_604)) else fail-any) else fail-any))) in
        {84}let v_622: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_604)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),5-proj-7-tuple(v_604)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_618))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_620) then (if not-caught-fail(v_621) then (v_619,v_620,v_621) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {85}let v_623: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_604)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-2-tuple(v_617))))) then dhexp(2-proj-2-tuple(v_617),5-proj-7-tuple(v_604)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_616))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_622)) then cipherstatepack(2-proj-3-tuple(v_622),minnonce) else fail-any),1-proj-3-tuple(v_622),3-proj-3-tuple(v_618)) else fail-any) else fail-any) else fail-any)) in
        {86}let v_624: bitstring = catch-fail(symmetricstateunpack(v_623)) in
        {87}let v_625: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_624))) in
        {88}let v_626: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_625),2-proj-2-tuple(v_625),3-proj-3-tuple(v_624),msg_c(alice,bob))) in
        {89}let v_627: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_624))) in
        {90}let v_628: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_625))) && success?(1-proj-3-tuple(v_624))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-2-tuple(v_627))))) then cipherstatepack(1-proj-2-tuple(v_627),increment_nonce(2-proj-2-tuple(v_625))) else fail-any) else fail-any)) in
        {91}let v_629: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_624)) && success?(1-proj-3-tuple(v_624))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_628) then (v_628,v_626) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {92}let v_630: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_629),2-proj-3-tuple(v_624),3-proj-3-tuple(v_624)))) in
        {93}let v_631: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_629)) && success?(symmetricstatepack(1-proj-2-tuple(v_629),2-proj-3-tuple(v_624),3-proj-3-tuple(v_624)))) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then symmetricstatepack(1-proj-3-tuple(v_630),2-proj-3-tuple(v_630),hash(3-proj-3-tuple(v_630),2-proj-2-tuple(v_629))) else fail-any) else fail-any)) in
        {94}let v_632: bitstring = catch-fail((if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then (if not-caught-fail(v_631) then (v_631,2-proj-2-tuple(v_629)) else fail-any) else fail-any) else fail-any)) in
        {95}let v_633: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_632),v_607,3-proj-7-tuple(v_604),4-proj-7-tuple(v_604),5-proj-7-tuple(v_604),6-proj-7-tuple(v_604),7-proj-7-tuple(v_604))) in
        {96}let v_634: bitstring = catch-fail(concat3(1-proj-3-tuple(v_605),2-proj-2-tuple(v_616),2-proj-2-tuple(v_632))) in
        {97}let (hs_635: handshakestate,re_636: key,message_c: bitstring) = (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-7-tuple(v_604))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if not-caught-fail(v_607) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if not-caught-fail(v_623) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-2-tuple(v_632))))) then (if not-caught-fail(v_633) then (if not-caught-fail(v_634) then (v_633,5-proj-7-tuple(v_604),v_634) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {98}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {99}insert statestore(alice,bob,statepack_d(hs_635));
        {100}out(pub, message_c)
    ) | (
        {129}get statestore(=alice,=bob,statepack_d(hs_637: handshakestate)) in
        {102}in(pub, message_d: bitstring);
        {103}let v_638: bitstring = catch-fail(handshakestateunpack(hs_637)) in
        {104}let v_639: bitstring = catch-fail(deconcat3(message_d)) in
        {105}let v_640: bool = catch-fail(true) in
        {106}let v_641: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_638))) in
        {107}let v_642: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_641))) in
        {108}let v_643: aead = catch-fail(decrypt(1-proj-2-tuple(v_642),2-proj-2-tuple(v_642),3-proj-3-tuple(v_641),3-proj-3-tuple(v_639))) in
        {109}let v_644: bitstring = catch-fail(aeadunpack(v_643)) in
        {110}let v_645: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_641))) in
        {111}let v_646: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_642))) && success?(1-proj-3-tuple(v_641))) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-2-tuple(v_645))))) then cipherstatepack(1-proj-2-tuple(v_645),increment_nonce(2-proj-2-tuple(v_642))) else fail-any) else fail-any)) in
        {112}let v_647: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_639)) && (success?(3-proj-3-tuple(v_641)) && success?(1-proj-3-tuple(v_641)))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then (if not-caught-fail(v_643) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then (if not-caught-fail(v_646) then (v_646,3-proj-3-tuple(v_644),1-proj-3-tuple(v_644)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {113}let v_648: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)))) in
        {114}let v_649: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_639)) && success?(symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_641),3-proj-3-tuple(v_641)))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack(1-proj-3-tuple(v_648),2-proj-3-tuple(v_648),hash(3-proj-3-tuple(v_648),3-proj-3-tuple(v_639))) else fail-any) else fail-any)) in
        {115}let v_650: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_639)) && success?(1-proj-7-tuple(v_638))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-3-tuple(v_641))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if not-caught-fail(v_649) then (v_649,2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {116}let v_651: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_650),2-proj-7-tuple(v_638),3-proj-7-tuple(v_638),4-proj-7-tuple(v_638),5-proj-7-tuple(v_638),6-proj-7-tuple(v_638),7-proj-7-tuple(v_638))) in
        {117}let v_652: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_650))) in
        {118}let v_653: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_652),zero)) in
        {119}let v_654: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_652),zero)) in
        {120}let v_655: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_652),zero)) in
        {121}let v_656: bitstring = catch-fail((if success?(2-proj-3-tuple(v_652)) then (if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then (v_653,v_654,v_655) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {122}let v_657: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_656)) then cipherstatepack(1-proj-3-tuple(v_656),minnonce) else fail-any)) in
        {123}let v_658: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_656)) then cipherstatepack(2-proj-3-tuple(v_656),minnonce) else fail-any)) in
        {124}let v_659: bitstring = catch-fail((if success?(1-proj-3-tuple(v_650)) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then (if not-caught-fail(v_657) then (if not-caught-fail(v_658) then (1-proj-3-tuple(v_650),v_657,v_658) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {125}let (hs_660: handshakestate,re_661: key,plaintext_d: bitstring,valid_662: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-7-tuple(v_638))))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-3-tuple(v_639))))) then (if not-caught-fail(v_640) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-3-tuple(v_650))))) then (if (v_640 && 3-proj-3-tuple(v_650)) then (if not-caught-fail(v_651) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-3-tuple(v_659))))) then (v_651,getpublickey(3-proj-7-tuple(v_638)),2-proj-3-tuple(v_650),true,2-proj-3-tuple(v_659),3-proj-3-tuple(v_659)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {126}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_662);
        {127}insert statestore(alice,bob,statepack_e(hs_660));
        {128}event RecvEnd(valid_662)
    ) | (
        {130}event LeakS(phase0,alice);
        {131}out(pub, key_s(alice))
    ) | (
        {132}phase 1;
        {133}event LeakS(phase1,alice);
        {134}out(pub, key_s(alice))
    )
) | (
    {135}let s_663: keypair = keypairpack(empty,empty) in
    {136}out(pub, getpublickey(s_663));
    (
        {137}let e_664: keypair = keypairpack(empty,empty) in
        {138}let rs_665: key = empty in
        {139}let re_666: key = empty in
        {140}let v_667: bitstring = catch-fail(hash(somename,empty)) in
        {141}let v_668: key = catch-fail(v_667) in
        {142}let v_669: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {143}let v_670: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then symmetricstatepack(v_669,v_668,v_667) else fail-any) else fail-any) else fail-any))) in
        {144}let v_671: symmetricstate = catch-fail((if success?((if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then symmetricstatepack(v_669,v_668,v_667) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then symmetricstatepack(1-proj-3-tuple(v_670),2-proj-3-tuple(v_670),hash(3-proj-3-tuple(v_670),empty)) else fail-any) else fail-any)) in
        {145}let hs_672: handshakestate = (if not-caught-fail(v_671) then handshakestatepack(v_671,s_663,e_664,rs_665,re_666,empty,true) else fail-any) in
        {146}insert statestore(alice,charlie,statepack_a(hs_672))
    ) | (
        {169}get statestore(=alice,=charlie,statepack_a(hs_673: handshakestate)) in
        {147}let v_674: bitstring = catch-fail(handshakestateunpack(hs_673)) in
        {148}let v_675: bitstring = catch-fail((empty,empty,empty)) in
        {149}let v_676: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {150}let v_677: keypair = catch-fail((if not-caught-fail(v_676) then keypairpack(v_676,key_e(alice,charlie)) else fail-any)) in
        {151}let v_678: bitstring = catch-fail(getpublickey(v_677)) in
        {152}let v_679: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_674))) in
        {153}let v_680: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_674)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then symmetricstatepack(1-proj-3-tuple(v_679),2-proj-3-tuple(v_679),hash(3-proj-3-tuple(v_679),v_678)) else fail-any) else fail-any)) in
        {154}let v_681: bitstring = catch-fail(symmetricstateunpack(v_680)) in
        {155}let v_682: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_681))) in
        {156}let v_683: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_682),2-proj-2-tuple(v_682),3-proj-3-tuple(v_681),msg_a(alice,charlie))) in
        {157}let v_684: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_681))) in
        {158}let v_685: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_682))) && success?(1-proj-3-tuple(v_681))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then cipherstatepack(1-proj-2-tuple(v_684),increment_nonce(2-proj-2-tuple(v_682))) else fail-any) else fail-any)) in
        {159}let v_686: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_681)) && success?(1-proj-3-tuple(v_681))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then (if not-caught-fail(v_683) then (if not-caught-fail(v_685) then (v_685,v_683) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {160}let v_687: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_686),2-proj-3-tuple(v_681),3-proj-3-tuple(v_681)))) in
        {161}let v_688: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_686)) && success?(symmetricstatepack(1-proj-2-tuple(v_686),2-proj-3-tuple(v_681),3-proj-3-tuple(v_681)))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then symmetricstatepack(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),hash(3-proj-3-tuple(v_687),2-proj-2-tuple(v_686))) else fail-any) else fail-any)) in
        {162}let v_689: bitstring = catch-fail((if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-2-tuple(v_686))))) then (if not-caught-fail(v_688) then (v_688,2-proj-2-tuple(v_686)) else fail-any) else fail-any) else fail-any)) in
        {163}let v_690: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_689),2-proj-7-tuple(v_674),v_677,4-proj-7-tuple(v_674),5-proj-7-tuple(v_674),6-proj-7-tuple(v_674),7-proj-7-tuple(v_674))) in
        {164}let v_691: bitstring = catch-fail(concat3(v_678,2-proj-3-tuple(v_675),2-proj-2-tuple(v_689))) in
        {165}let (hs_692: handshakestate,re_693: key,message_a_694: bitstring) = (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-7-tuple(v_674))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if not-caught-fail(v_677) then (if not-caught-fail(v_678) then (if not-caught-fail(v_680) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_691) then (v_690,5-proj-7-tuple(v_674),v_691) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {166}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {167}insert statestore(alice,charlie,statepack_b(hs_692));
        {168}out(pub, message_a_694)
    ) | (
        {198}get statestore(=alice,=charlie,statepack_b(hs_695: handshakestate)) in
        {170}in(pub, message_b_696: bitstring);
        {171}let v_697: bitstring = catch-fail(handshakestateunpack(hs_695)) in
        {172}let v_698: bitstring = catch-fail(deconcat3(message_b_696)) in
        {173}let v_699: bool = catch-fail(true) in
        {174}let v_700: key = catch-fail(1-proj-3-tuple(v_698)) in
        {175}let v_701: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_697))) in
        {176}let v_702: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_697)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_701),hash(3-proj-3-tuple(v_701),v_700)) else fail-any) else fail-any)) in
        {177}let v_703: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_697))) in
        {178}let v_704: bitstring = catch-fail(symmetricstateunpack(v_702)) in
        {179}let v_705: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_704),(if success?(3-proj-7-tuple(v_697)) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then dhexp(2-proj-2-tuple(v_703),v_700) else fail-any) else fail-any))) in
        {180}let v_706: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_704),(if success?(3-proj-7-tuple(v_697)) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then dhexp(2-proj-2-tuple(v_703),v_700) else fail-any) else fail-any))) in
        {181}let v_707: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_704),(if success?(3-proj-7-tuple(v_697)) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then dhexp(2-proj-2-tuple(v_703),v_700) else fail-any) else fail-any))) in
        {182}let v_708: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_697)) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then dhexp(2-proj-2-tuple(v_703),v_700) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_704))) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then (if not-caught-fail(v_707) then (v_705,v_706,v_707) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {183}let v_709: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_697)) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-2-tuple(v_703))))) then dhexp(2-proj-2-tuple(v_703),v_700) else fail-any) else fail-any)) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_708)) then cipherstatepack(2-proj-3-tuple(v_708),minnonce) else fail-any),1-proj-3-tuple(v_708),3-proj-3-tuple(v_704)) else fail-any) else fail-any) else fail-any)) in
        {184}let v_710: bitstring = catch-fail(symmetricstateunpack(v_709)) in
        {185}let v_711: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_710))) in
        {186}let v_712: aead = catch-fail(decrypt(1-proj-2-tuple(v_711),2-proj-2-tuple(v_711),3-proj-3-tuple(v_710),3-proj-3-tuple(v_698))) in
        {187}let v_713: bitstring = catch-fail(aeadunpack(v_712)) in
        {188}let v_714: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_710))) in
        {189}let v_715: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_711))) && success?(1-proj-3-tuple(v_710))) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-2-tuple(v_714))))) then cipherstatepack(1-proj-2-tuple(v_714),increment_nonce(2-proj-2-tuple(v_711))) else fail-any) else fail-any)) in
        {190}let v_716: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_698)) && (success?(3-proj-3-tuple(v_710)) && success?(1-proj-3-tuple(v_710)))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-2-tuple(v_711))))) then (if not-caught-fail(v_712) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then (if not-caught-fail(v_715) then (v_715,3-proj-3-tuple(v_713),1-proj-3-tuple(v_713)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_717: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_716),2-proj-3-tuple(v_710),3-proj-3-tuple(v_710)))) in
        {192}let v_718: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_698)) && success?(symmetricstatepack(1-proj-3-tuple(v_716),2-proj-3-tuple(v_710),3-proj-3-tuple(v_710)))) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-3-tuple(v_717))))) then symmetricstatepack(1-proj-3-tuple(v_717),2-proj-3-tuple(v_717),hash(3-proj-3-tuple(v_717),3-proj-3-tuple(v_698))) else fail-any) else fail-any)) in
        {193}let v_719: bitstring = catch-fail((if success?(3-proj-3-tuple(v_698)) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if not-caught-fail(v_718) then (v_718,2-proj-3-tuple(v_716),3-proj-3-tuple(v_716)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {194}let v_720: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_719),2-proj-7-tuple(v_697),3-proj-7-tuple(v_697),4-proj-7-tuple(v_697),v_700,6-proj-7-tuple(v_697),7-proj-7-tuple(v_697))) in
        {195}let (hs_721: handshakestate,re_722: key,plaintext_b_723: bitstring,valid_724: bool) = (if (not-caught-fail(v_697) && success?(is-true(success?(1-proj-7-tuple(v_697))))) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if not-caught-fail(v_699) then (if not-caught-fail(v_700) then (if not-caught-fail(v_702) then (if not-caught-fail(v_709) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-3-tuple(v_719))))) then (if (v_699 && 3-proj-3-tuple(v_719)) then (if not-caught-fail(v_720) then (v_720,getpublickey(3-proj-7-tuple(v_697)),2-proj-3-tuple(v_719),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {196}event RecvMsg(alice,charlie,stage_b,plaintext_b_723,valid_724);
        {197}insert statestore(alice,charlie,statepack_c(hs_721))
    ) | (
        {234}get statestore(=alice,=charlie,statepack_c(hs_725: handshakestate)) in
        {199}let v_726: bitstring = catch-fail(handshakestateunpack(hs_725)) in
        {200}let v_727: bitstring = catch-fail((empty,empty,empty)) in
        {201}let v_728: key = catch-fail(dhexp(key_s(alice),g)) in
        {202}let v_729: keypair = catch-fail((if not-caught-fail(v_728) then keypairpack(v_728,key_s(alice)) else fail-any)) in
        {203}let v_730: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_726))) in
        {204}let v_731: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {205}let v_732: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_731),2-proj-2-tuple(v_731),3-proj-3-tuple(v_730),getpublickey(v_729))) in
        {206}let v_733: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_730))) in
        {207}let v_734: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_731))) && success?(1-proj-3-tuple(v_730))) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-2-tuple(v_733))))) then cipherstatepack(1-proj-2-tuple(v_733),increment_nonce(2-proj-2-tuple(v_731))) else fail-any) else fail-any)) in
        {208}let v_735: bitstring = catch-fail((if (success?(getpublickey(v_729)) && (success?(3-proj-3-tuple(v_730)) && success?(1-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-2-tuple(v_731))))) then (if not-caught-fail(v_732) then (if not-caught-fail(v_734) then (v_734,v_732) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_736: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_735),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) in
        {210}let v_737: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_735)) && success?(symmetricstatepack(1-proj-2-tuple(v_735),2-proj-3-tuple(v_730),3-proj-3-tuple(v_730)))) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then symmetricstatepack(1-proj-3-tuple(v_736),2-proj-3-tuple(v_736),hash(3-proj-3-tuple(v_736),2-proj-2-tuple(v_735))) else fail-any) else fail-any)) in
        {211}let v_738: bitstring = catch-fail((if (success?(getpublickey(v_729)) && success?(1-proj-7-tuple(v_726))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-2-tuple(v_735))))) then (if not-caught-fail(v_737) then (v_737,2-proj-2-tuple(v_735)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {212}let v_739: bitstring = catch-fail(keypairunpack(v_729)) in
        {213}let v_740: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_738))) in
        {214}let v_741: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_740),(if success?(5-proj-7-tuple(v_726)) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then dhexp(2-proj-2-tuple(v_739),5-proj-7-tuple(v_726)) else fail-any) else fail-any))) in
        {215}let v_742: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_740),(if success?(5-proj-7-tuple(v_726)) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then dhexp(2-proj-2-tuple(v_739),5-proj-7-tuple(v_726)) else fail-any) else fail-any))) in
        {216}let v_743: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_740),(if success?(5-proj-7-tuple(v_726)) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then dhexp(2-proj-2-tuple(v_739),5-proj-7-tuple(v_726)) else fail-any) else fail-any))) in
        {217}let v_744: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_726)) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then dhexp(2-proj-2-tuple(v_739),5-proj-7-tuple(v_726)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_740))) then (if not-caught-fail(v_741) then (if not-caught-fail(v_742) then (if not-caught-fail(v_743) then (v_741,v_742,v_743) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {218}let v_745: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_726)) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-2-tuple(v_739))))) then dhexp(2-proj-2-tuple(v_739),5-proj-7-tuple(v_726)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_738))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_744)) then cipherstatepack(2-proj-3-tuple(v_744),minnonce) else fail-any),1-proj-3-tuple(v_744),3-proj-3-tuple(v_740)) else fail-any) else fail-any) else fail-any)) in
        {219}let v_746: bitstring = catch-fail(symmetricstateunpack(v_745)) in
        {220}let v_747: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_746))) in
        {221}let v_748: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_747),2-proj-2-tuple(v_747),3-proj-3-tuple(v_746),msg_c(alice,charlie))) in
        {222}let v_749: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_746))) in
        {223}let v_750: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_747))) && success?(1-proj-3-tuple(v_746))) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-2-tuple(v_749))))) then cipherstatepack(1-proj-2-tuple(v_749),increment_nonce(2-proj-2-tuple(v_747))) else fail-any) else fail-any)) in
        {224}let v_751: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_746)) && success?(1-proj-3-tuple(v_746))) then (if (not-caught-fail(v_747) && success?(is-true(success?(1-proj-2-tuple(v_747))))) then (if not-caught-fail(v_748) then (if not-caught-fail(v_750) then (v_750,v_748) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {225}let v_752: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_751),2-proj-3-tuple(v_746),3-proj-3-tuple(v_746)))) in
        {226}let v_753: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_751)) && success?(symmetricstatepack(1-proj-2-tuple(v_751),2-proj-3-tuple(v_746),3-proj-3-tuple(v_746)))) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then symmetricstatepack(1-proj-3-tuple(v_752),2-proj-3-tuple(v_752),hash(3-proj-3-tuple(v_752),2-proj-2-tuple(v_751))) else fail-any) else fail-any)) in
        {227}let v_754: bitstring = catch-fail((if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then (if not-caught-fail(v_753) then (v_753,2-proj-2-tuple(v_751)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_755: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_754),v_729,3-proj-7-tuple(v_726),4-proj-7-tuple(v_726),5-proj-7-tuple(v_726),6-proj-7-tuple(v_726),7-proj-7-tuple(v_726))) in
        {229}let v_756: bitstring = catch-fail(concat3(1-proj-3-tuple(v_727),2-proj-2-tuple(v_738),2-proj-2-tuple(v_754))) in
        {230}let (hs_757: handshakestate,re_758: key,message_c_759: bitstring) = (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-7-tuple(v_726))))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if not-caught-fail(v_729) then (if (not-caught-fail(v_738) && success?(is-true(success?(1-proj-2-tuple(v_738))))) then (if not-caught-fail(v_745) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then (if not-caught-fail(v_755) then (if not-caught-fail(v_756) then (v_755,5-proj-7-tuple(v_726),v_756) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {231}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {232}insert statestore(alice,charlie,statepack_d(hs_757));
        {233}out(pub, message_c_759)
    ) | (
        {262}get statestore(=alice,=charlie,statepack_d(hs_760: handshakestate)) in
        {235}in(pub, message_d_761: bitstring);
        {236}let v_762: bitstring = catch-fail(handshakestateunpack(hs_760)) in
        {237}let v_763: bitstring = catch-fail(deconcat3(message_d_761)) in
        {238}let v_764: bool = catch-fail(true) in
        {239}let v_765: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_762))) in
        {240}let v_766: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {241}let v_767: aead = catch-fail(decrypt(1-proj-2-tuple(v_766),2-proj-2-tuple(v_766),3-proj-3-tuple(v_765),3-proj-3-tuple(v_763))) in
        {242}let v_768: bitstring = catch-fail(aeadunpack(v_767)) in
        {243}let v_769: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_765))) in
        {244}let v_770: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_766))) && success?(1-proj-3-tuple(v_765))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then cipherstatepack(1-proj-2-tuple(v_769),increment_nonce(2-proj-2-tuple(v_766))) else fail-any) else fail-any)) in
        {245}let v_771: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_763)) && (success?(3-proj-3-tuple(v_765)) && success?(1-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_767) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-3-tuple(v_768))))) then (if not-caught-fail(v_770) then (v_770,3-proj-3-tuple(v_768),1-proj-3-tuple(v_768)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_772: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) in
        {247}let v_773: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_763)) && success?(symmetricstatepack(1-proj-3-tuple(v_771),2-proj-3-tuple(v_765),3-proj-3-tuple(v_765)))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then symmetricstatepack(1-proj-3-tuple(v_772),2-proj-3-tuple(v_772),hash(3-proj-3-tuple(v_772),3-proj-3-tuple(v_763))) else fail-any) else fail-any)) in
        {248}let v_774: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_763)) && success?(1-proj-7-tuple(v_762))) then (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-3-tuple(v_765))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_773) then (v_773,2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_775: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_774),2-proj-7-tuple(v_762),3-proj-7-tuple(v_762),4-proj-7-tuple(v_762),5-proj-7-tuple(v_762),6-proj-7-tuple(v_762),7-proj-7-tuple(v_762))) in
        {250}let v_776: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_774))) in
        {251}let v_777: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_776),zero)) in
        {252}let v_778: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_776),zero)) in
        {253}let v_779: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_776),zero)) in
        {254}let v_780: bitstring = catch-fail((if success?(2-proj-3-tuple(v_776)) then (if not-caught-fail(v_777) then (if not-caught-fail(v_778) then (if not-caught-fail(v_779) then (v_777,v_778,v_779) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_781: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_780)) then cipherstatepack(1-proj-3-tuple(v_780),minnonce) else fail-any)) in
        {256}let v_782: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_780)) then cipherstatepack(2-proj-3-tuple(v_780),minnonce) else fail-any)) in
        {257}let v_783: bitstring = catch-fail((if success?(1-proj-3-tuple(v_774)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then (if not-caught-fail(v_781) then (if not-caught-fail(v_782) then (1-proj-3-tuple(v_774),v_781,v_782) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {258}let (hs_784: handshakestate,re_785: key,plaintext_d_786: bitstring,valid_787: bool,cs1_788: cipherstate,cs2_789: cipherstate) = (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-7-tuple(v_762))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-3-tuple(v_763))))) then (if not-caught-fail(v_764) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if (v_764 && 3-proj-3-tuple(v_774)) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then (v_775,getpublickey(3-proj-7-tuple(v_762)),2-proj-3-tuple(v_774),true,2-proj-3-tuple(v_783),3-proj-3-tuple(v_783)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {259}event RecvMsg(alice,charlie,stage_d,plaintext_d_786,valid_787);
        {260}insert statestore(alice,charlie,statepack_e(hs_784));
        {261}event RecvEnd(valid_787)
    ) | (
        {263}event LeakS(phase0,alice);
        {264}out(pub, key_s(alice))
    ) | (
        {265}phase 1;
        {266}event LeakS(phase1,alice);
        {267}out(pub, key_s(alice))
    )
) | (
    {268}let s_790: keypair = keypairpack(empty,empty) in
    (
        {269}let e_791: keypair = keypairpack(empty,empty) in
        {270}let rs_792: key = empty in
        {271}let re_793: key = empty in
        {272}let v_794: bitstring = catch-fail(hash(somename,empty)) in
        {273}let v_795: key = catch-fail(v_794) in
        {274}let v_796: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {275}let v_797: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (if not-caught-fail(v_796) then symmetricstatepack(v_796,v_795,v_794) else fail-any) else fail-any) else fail-any))) in
        {276}let v_798: symmetricstate = catch-fail((if success?((if not-caught-fail(v_794) then (if not-caught-fail(v_795) then (if not-caught-fail(v_796) then symmetricstatepack(v_796,v_795,v_794) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),hash(3-proj-3-tuple(v_797),empty)) else fail-any) else fail-any)) in
        {277}let hs_799: handshakestate = (if not-caught-fail(v_798) then handshakestatepack(v_798,s_790,e_791,rs_792,re_793,empty,false) else fail-any) in
        {278}insert statestore(bob,alice,statepack_a(hs_799))
    ) | (
        {300}get statestore(=bob,=alice,statepack_a(hs_800: handshakestate)) in
        {279}in(pub, message_a_801: bitstring);
        {280}let v_802: bitstring = catch-fail(handshakestateunpack(hs_800)) in
        {281}let v_803: bitstring = catch-fail(deconcat3(message_a_801)) in
        {282}let v_804: bool = catch-fail(true) in
        {283}let v_805: key = catch-fail(1-proj-3-tuple(v_803)) in
        {284}let v_806: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_802))) in
        {285}let v_807: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_802)) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then symmetricstatepack(1-proj-3-tuple(v_806),2-proj-3-tuple(v_806),hash(3-proj-3-tuple(v_806),v_805)) else fail-any) else fail-any)) in
        {286}let v_808: bitstring = catch-fail(symmetricstateunpack(v_807)) in
        {287}let v_809: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {288}let v_810: aead = catch-fail(decrypt(1-proj-2-tuple(v_809),2-proj-2-tuple(v_809),3-proj-3-tuple(v_808),3-proj-3-tuple(v_803))) in
        {289}let v_811: bitstring = catch-fail(aeadunpack(v_810)) in
        {290}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {291}let v_813: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_809))) && success?(1-proj-3-tuple(v_808))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then cipherstatepack(1-proj-2-tuple(v_812),increment_nonce(2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {292}let v_814: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_803)) && (success?(3-proj-3-tuple(v_808)) && success?(1-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_810) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_813) then (v_813,3-proj-3-tuple(v_811),1-proj-3-tuple(v_811)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_815: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) in
        {294}let v_816: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_803)) && success?(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),3-proj-3-tuple(v_803))) else fail-any) else fail-any)) in
        {295}let v_817: bitstring = catch-fail((if success?(3-proj-3-tuple(v_803)) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if not-caught-fail(v_816) then (v_816,2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_818: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_817),2-proj-7-tuple(v_802),3-proj-7-tuple(v_802),4-proj-7-tuple(v_802),v_805,6-proj-7-tuple(v_802),7-proj-7-tuple(v_802))) in
        {297}let (hs_819: handshakestate,re_820: key,plaintext_a: bitstring,valid_821: bool) = (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-7-tuple(v_802))))) then (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-3-tuple(v_803))))) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (if not-caught-fail(v_807) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if (v_804 && 3-proj-3-tuple(v_817)) then (if not-caught-fail(v_818) then (v_818,getpublickey(3-proj-7-tuple(v_802)),2-proj-3-tuple(v_817),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {298}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_821);
        {299}insert statestore(bob,alice,statepack_b(hs_819))
    ) | (
        {330}get statestore(=bob,=alice,statepack_b(hs_822: handshakestate)) in
        {301}let v_823: bitstring = catch-fail(handshakestateunpack(hs_822)) in
        {302}let v_824: bitstring = catch-fail((empty,empty,empty)) in
        {303}let v_825: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {304}let v_826: keypair = catch-fail((if not-caught-fail(v_825) then keypairpack(v_825,key_e(bob,alice)) else fail-any)) in
        {305}let v_827: bitstring = catch-fail(getpublickey(v_826)) in
        {306}let v_828: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_823))) in
        {307}let v_829: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_823)) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-3-tuple(v_828))))) then symmetricstatepack(1-proj-3-tuple(v_828),2-proj-3-tuple(v_828),hash(3-proj-3-tuple(v_828),v_827)) else fail-any) else fail-any)) in
        {308}let v_830: bitstring = catch-fail(keypairunpack(v_826)) in
        {309}let v_831: bitstring = catch-fail(symmetricstateunpack(v_829)) in
        {310}let v_832: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_831),(if success?(5-proj-7-tuple(v_823)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_823)) else fail-any) else fail-any))) in
        {311}let v_833: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_831),(if success?(5-proj-7-tuple(v_823)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_823)) else fail-any) else fail-any))) in
        {312}let v_834: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_831),(if success?(5-proj-7-tuple(v_823)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_823)) else fail-any) else fail-any))) in
        {313}let v_835: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_823)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_823)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_831))) then (if not-caught-fail(v_832) then (if not-caught-fail(v_833) then (if not-caught-fail(v_834) then (v_832,v_833,v_834) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {314}let v_836: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_823)) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then dhexp(2-proj-2-tuple(v_830),5-proj-7-tuple(v_823)) else fail-any) else fail-any)) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-3-tuple(v_831))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-3-tuple(v_835))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_835)) then cipherstatepack(2-proj-3-tuple(v_835),minnonce) else fail-any),1-proj-3-tuple(v_835),3-proj-3-tuple(v_831)) else fail-any) else fail-any) else fail-any)) in
        {315}let v_837: bitstring = catch-fail(symmetricstateunpack(v_836)) in
        {316}let v_838: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_837))) in
        {317}let v_839: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_838),2-proj-2-tuple(v_838),3-proj-3-tuple(v_837),msg_b(bob,alice))) in
        {318}let v_840: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_837))) in
        {319}let v_841: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_838))) && success?(1-proj-3-tuple(v_837))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then cipherstatepack(1-proj-2-tuple(v_840),increment_nonce(2-proj-2-tuple(v_838))) else fail-any) else fail-any)) in
        {320}let v_842: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_837)) && success?(1-proj-3-tuple(v_837))) then (if (not-caught-fail(v_838) && success?(is-true(success?(1-proj-2-tuple(v_838))))) then (if not-caught-fail(v_839) then (if not-caught-fail(v_841) then (v_841,v_839) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {321}let v_843: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_842),2-proj-3-tuple(v_837),3-proj-3-tuple(v_837)))) in
        {322}let v_844: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_842)) && success?(symmetricstatepack(1-proj-2-tuple(v_842),2-proj-3-tuple(v_837),3-proj-3-tuple(v_837)))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-3-tuple(v_843))))) then symmetricstatepack(1-proj-3-tuple(v_843),2-proj-3-tuple(v_843),hash(3-proj-3-tuple(v_843),2-proj-2-tuple(v_842))) else fail-any) else fail-any)) in
        {323}let v_845: bitstring = catch-fail((if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-2-tuple(v_842))))) then (if not-caught-fail(v_844) then (v_844,2-proj-2-tuple(v_842)) else fail-any) else fail-any) else fail-any)) in
        {324}let v_846: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_845),2-proj-7-tuple(v_823),v_826,4-proj-7-tuple(v_823),5-proj-7-tuple(v_823),6-proj-7-tuple(v_823),7-proj-7-tuple(v_823))) in
        {325}let v_847: bitstring = catch-fail(concat3(v_827,2-proj-3-tuple(v_824),2-proj-2-tuple(v_845))) in
        {326}let (hs_848: handshakestate,re_849: key,message_b_850: bitstring) = (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-7-tuple(v_823))))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-3-tuple(v_824))))) then (if not-caught-fail(v_826) then (if not-caught-fail(v_827) then (if not-caught-fail(v_829) then (if not-caught-fail(v_836) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then (if not-caught-fail(v_846) then (if not-caught-fail(v_847) then (v_846,5-proj-7-tuple(v_823),v_847) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {327}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {328}insert statestore(bob,alice,statepack_c(hs_848));
        {329}out(pub, message_b_850)
    ) | (
        {368}get statestore(=bob,=alice,statepack_c(hs_851: handshakestate)) in
        {331}in(pub, message_c_852: bitstring);
        {332}let v_853: bitstring = catch-fail(handshakestateunpack(hs_851)) in
        {333}let v_854: bitstring = catch-fail(deconcat3(message_c_852)) in
        {334}let v_855: bool = catch-fail(true) in
        {335}let v_856: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_853))) in
        {336}let v_857: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_856))) in
        {337}let v_858: aead = catch-fail(decrypt(1-proj-2-tuple(v_857),2-proj-2-tuple(v_857),3-proj-3-tuple(v_856),2-proj-3-tuple(v_854))) in
        {338}let v_859: bitstring = catch-fail(aeadunpack(v_858)) in
        {339}let v_860: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_856))) in
        {340}let v_861: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_857))) && success?(1-proj-3-tuple(v_856))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-2-tuple(v_860))))) then cipherstatepack(1-proj-2-tuple(v_860),increment_nonce(2-proj-2-tuple(v_857))) else fail-any) else fail-any)) in
        {341}let v_862: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_854)) && (success?(3-proj-3-tuple(v_856)) && success?(1-proj-3-tuple(v_856)))) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-2-tuple(v_857))))) then (if not-caught-fail(v_858) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if not-caught-fail(v_861) then (v_861,3-proj-3-tuple(v_859),1-proj-3-tuple(v_859)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {342}let v_863: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_856),3-proj-3-tuple(v_856)))) in
        {343}let v_864: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_854)) && success?(symmetricstatepack(1-proj-3-tuple(v_862),2-proj-3-tuple(v_856),3-proj-3-tuple(v_856)))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),hash(3-proj-3-tuple(v_863),2-proj-3-tuple(v_854))) else fail-any) else fail-any)) in
        {344}let v_865: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_854)) && success?(1-proj-7-tuple(v_853))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if not-caught-fail(v_864) then (v_864,2-proj-3-tuple(v_862),3-proj-3-tuple(v_862)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {345}let v_866: key = catch-fail(2-proj-3-tuple(v_865)) in
        {346}let v_867: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_853))) in
        {347}let v_868: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_865))) in
        {348}let v_869: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_868),(if success?(3-proj-7-tuple(v_853)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),v_866) else fail-any) else fail-any))) in
        {349}let v_870: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_868),(if success?(3-proj-7-tuple(v_853)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),v_866) else fail-any) else fail-any))) in
        {350}let v_871: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_868),(if success?(3-proj-7-tuple(v_853)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),v_866) else fail-any) else fail-any))) in
        {351}let v_872: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_853)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),v_866) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_868))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (if not-caught-fail(v_871) then (v_869,v_870,v_871) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_873: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_853)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-2-tuple(v_867))))) then dhexp(2-proj-2-tuple(v_867),v_866) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_865))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-3-tuple(v_872))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_872)) then cipherstatepack(2-proj-3-tuple(v_872),minnonce) else fail-any),1-proj-3-tuple(v_872),3-proj-3-tuple(v_868)) else fail-any) else fail-any) else fail-any)) in
        {353}let v_874: bitstring = catch-fail(symmetricstateunpack(v_873)) in
        {354}let v_875: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {355}let v_876: aead = catch-fail(decrypt(1-proj-2-tuple(v_875),2-proj-2-tuple(v_875),3-proj-3-tuple(v_874),3-proj-3-tuple(v_854))) in
        {356}let v_877: bitstring = catch-fail(aeadunpack(v_876)) in
        {357}let v_878: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_874))) in
        {358}let v_879: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_875))) && success?(1-proj-3-tuple(v_874))) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-2-tuple(v_878))))) then cipherstatepack(1-proj-2-tuple(v_878),increment_nonce(2-proj-2-tuple(v_875))) else fail-any) else fail-any)) in
        {359}let v_880: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_854)) && (success?(3-proj-3-tuple(v_874)) && success?(1-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-2-tuple(v_875))))) then (if not-caught-fail(v_876) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if not-caught-fail(v_879) then (v_879,3-proj-3-tuple(v_877),1-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {360}let v_881: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) in
        {361}let v_882: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_854)) && success?(symmetricstatepack(1-proj-3-tuple(v_880),2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack(1-proj-3-tuple(v_881),2-proj-3-tuple(v_881),hash(3-proj-3-tuple(v_881),3-proj-3-tuple(v_854))) else fail-any) else fail-any)) in
        {362}let v_883: bitstring = catch-fail((if success?(3-proj-3-tuple(v_854)) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-3-tuple(v_880))))) then (if not-caught-fail(v_882) then (v_882,2-proj-3-tuple(v_880),3-proj-3-tuple(v_880)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {363}let v_884: key = catch-fail(dhexp(key_s(alice),g)) in
        {364}let v_885: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_883),2-proj-7-tuple(v_853),3-proj-7-tuple(v_853),v_866,5-proj-7-tuple(v_853),6-proj-7-tuple(v_853),7-proj-7-tuple(v_853))) in
        {365}let (hs_886: handshakestate,re_887: key,plaintext_c: bitstring,valid_888: bool) = (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-7-tuple(v_853))))) then (if (not-caught-fail(v_854) && success?(is-true(success?(1-proj-3-tuple(v_854))))) then (if not-caught-fail(v_855) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-3-tuple(v_865))))) then (if not-caught-fail(v_866) then (if not-caught-fail(v_873) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if ((3-proj-3-tuple(v_865) && 3-proj-3-tuple(v_883)) && (v_866 = getpublickey((if not-caught-fail(v_884) then keypairpack(v_884,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_885) then (v_885,getpublickey(3-proj-7-tuple(v_853)),2-proj-3-tuple(v_883),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {366}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_888);
        {367}insert statestore(bob,alice,statepack_d(hs_886))
    ) | (
        {394}get statestore(=bob,=alice,statepack_d(hs_889: handshakestate)) in
        {369}let v_890: bitstring = catch-fail(handshakestateunpack(hs_889)) in
        {370}let v_891: bitstring = catch-fail((empty,empty,empty)) in
        {371}let v_892: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_890))) in
        {372}let v_893: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {373}let v_894: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_893),2-proj-2-tuple(v_893),3-proj-3-tuple(v_892),msg_d(bob,alice))) in
        {374}let v_895: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_892))) in
        {375}let v_896: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_893))) && success?(1-proj-3-tuple(v_892))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-2-tuple(v_895))))) then cipherstatepack(1-proj-2-tuple(v_895),increment_nonce(2-proj-2-tuple(v_893))) else fail-any) else fail-any)) in
        {376}let v_897: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_892)) && success?(1-proj-3-tuple(v_892))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then (if not-caught-fail(v_894) then (if not-caught-fail(v_896) then (v_896,v_894) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {377}let v_898: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_897),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) in
        {378}let v_899: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_897)) && success?(symmetricstatepack(1-proj-2-tuple(v_897),2-proj-3-tuple(v_892),3-proj-3-tuple(v_892)))) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then symmetricstatepack(1-proj-3-tuple(v_898),2-proj-3-tuple(v_898),hash(3-proj-3-tuple(v_898),2-proj-2-tuple(v_897))) else fail-any) else fail-any)) in
        {379}let v_900: bitstring = catch-fail((if success?(1-proj-7-tuple(v_890)) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-2-tuple(v_897))))) then (if not-caught-fail(v_899) then (v_899,2-proj-2-tuple(v_897)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {380}let v_901: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_900),2-proj-7-tuple(v_890),3-proj-7-tuple(v_890),4-proj-7-tuple(v_890),5-proj-7-tuple(v_890),6-proj-7-tuple(v_890),7-proj-7-tuple(v_890))) in
        {381}let v_902: bitstring = catch-fail(concat3(1-proj-3-tuple(v_891),2-proj-3-tuple(v_891),2-proj-2-tuple(v_900))) in
        {382}let v_903: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_900))) in
        {383}let v_904: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_903),zero)) in
        {384}let v_905: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_903),zero)) in
        {385}let v_906: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_903),zero)) in
        {386}let v_907: bitstring = catch-fail((if success?(2-proj-3-tuple(v_903)) then (if not-caught-fail(v_904) then (if not-caught-fail(v_905) then (if not-caught-fail(v_906) then (v_904,v_905,v_906) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {387}let v_908: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_907)) then cipherstatepack(1-proj-3-tuple(v_907),minnonce) else fail-any)) in
        {388}let v_909: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_907)) then cipherstatepack(2-proj-3-tuple(v_907),minnonce) else fail-any)) in
        {389}let v_910: bitstring = catch-fail((if success?(1-proj-2-tuple(v_900)) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then (if not-caught-fail(v_908) then (if not-caught-fail(v_909) then (1-proj-2-tuple(v_900),v_908,v_909) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let (hs_911: handshakestate,re_912: key,message_d_913: bitstring,cs1_914: cipherstate,cs2_915: cipherstate) = (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-7-tuple(v_890))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-2-tuple(v_900))))) then (if not-caught-fail(v_901) then (if not-caught-fail(v_902) then (if (not-caught-fail(v_910) && success?(is-true(success?(1-proj-3-tuple(v_910))))) then (v_901,5-proj-7-tuple(v_890),v_902,2-proj-3-tuple(v_910),3-proj-3-tuple(v_910)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {391}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {392}insert statestore(bob,alice,statepack_e(hs_911));
        {393}out(pub, message_d_913)
    ) | (
        {395}event LeakS(phase0,bob);
        {396}out(pub, key_s(bob))
    ) | (
        {397}phase 1;
        {398}event LeakS(phase1,bob);
        {399}out(pub, key_s(bob))
    )
) | (
    {400}let s_916: keypair = keypairpack(empty,empty) in
    (
        {401}let e_917: keypair = keypairpack(empty,empty) in
        {402}let rs_918: key = empty in
        {403}let re_919: key = empty in
        {404}let v_920: bitstring = catch-fail(hash(somename,empty)) in
        {405}let v_921: key = catch-fail(v_920) in
        {406}let v_922: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {407}let v_923: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_920) then (if not-caught-fail(v_921) then (if not-caught-fail(v_922) then symmetricstatepack(v_922,v_921,v_920) else fail-any) else fail-any) else fail-any))) in
        {408}let v_924: symmetricstate = catch-fail((if success?((if not-caught-fail(v_920) then (if not-caught-fail(v_921) then (if not-caught-fail(v_922) then symmetricstatepack(v_922,v_921,v_920) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then symmetricstatepack(1-proj-3-tuple(v_923),2-proj-3-tuple(v_923),hash(3-proj-3-tuple(v_923),empty)) else fail-any) else fail-any)) in
        {409}let hs_925: handshakestate = (if not-caught-fail(v_924) then handshakestatepack(v_924,s_916,e_917,rs_918,re_919,empty,false) else fail-any) in
        {410}insert statestore(bob,charlie,statepack_a(hs_925))
    ) | (
        {432}get statestore(=bob,=charlie,statepack_a(hs_926: handshakestate)) in
        {411}in(pub, message_a_927: bitstring);
        {412}let v_928: bitstring = catch-fail(handshakestateunpack(hs_926)) in
        {413}let v_929: bitstring = catch-fail(deconcat3(message_a_927)) in
        {414}let v_930: bool = catch-fail(true) in
        {415}let v_931: key = catch-fail(1-proj-3-tuple(v_929)) in
        {416}let v_932: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_928))) in
        {417}let v_933: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_928)) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then symmetricstatepack(1-proj-3-tuple(v_932),2-proj-3-tuple(v_932),hash(3-proj-3-tuple(v_932),v_931)) else fail-any) else fail-any)) in
        {418}let v_934: bitstring = catch-fail(symmetricstateunpack(v_933)) in
        {419}let v_935: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_934))) in
        {420}let v_936: aead = catch-fail(decrypt(1-proj-2-tuple(v_935),2-proj-2-tuple(v_935),3-proj-3-tuple(v_934),3-proj-3-tuple(v_929))) in
        {421}let v_937: bitstring = catch-fail(aeadunpack(v_936)) in
        {422}let v_938: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_934))) in
        {423}let v_939: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_935))) && success?(1-proj-3-tuple(v_934))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then cipherstatepack(1-proj-2-tuple(v_938),increment_nonce(2-proj-2-tuple(v_935))) else fail-any) else fail-any)) in
        {424}let v_940: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_929)) && (success?(3-proj-3-tuple(v_934)) && success?(1-proj-3-tuple(v_934)))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then (if not-caught-fail(v_936) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if not-caught-fail(v_939) then (v_939,3-proj-3-tuple(v_937),1-proj-3-tuple(v_937)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {425}let v_941: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_940),2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)))) in
        {426}let v_942: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_929)) && success?(symmetricstatepack(1-proj-3-tuple(v_940),2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then symmetricstatepack(1-proj-3-tuple(v_941),2-proj-3-tuple(v_941),hash(3-proj-3-tuple(v_941),3-proj-3-tuple(v_929))) else fail-any) else fail-any)) in
        {427}let v_943: bitstring = catch-fail((if success?(3-proj-3-tuple(v_929)) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then (if not-caught-fail(v_942) then (v_942,2-proj-3-tuple(v_940),3-proj-3-tuple(v_940)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_944: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_943),2-proj-7-tuple(v_928),3-proj-7-tuple(v_928),4-proj-7-tuple(v_928),v_931,6-proj-7-tuple(v_928),7-proj-7-tuple(v_928))) in
        {429}let (hs_945: handshakestate,re_946: key,plaintext_a_947: bitstring,valid_948: bool) = (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-7-tuple(v_928))))) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (if not-caught-fail(v_933) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then (if (v_930 && 3-proj-3-tuple(v_943)) then (if not-caught-fail(v_944) then (v_944,getpublickey(3-proj-7-tuple(v_928)),2-proj-3-tuple(v_943),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {430}event RecvMsg(bob,charlie,stage_a,plaintext_a_947,valid_948);
        {431}insert statestore(bob,charlie,statepack_b(hs_945))
    ) | (
        {462}get statestore(=bob,=charlie,statepack_b(hs_949: handshakestate)) in
        {433}let v_950: bitstring = catch-fail(handshakestateunpack(hs_949)) in
        {434}let v_951: bitstring = catch-fail((empty,empty,empty)) in
        {435}let v_952: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {436}let v_953: keypair = catch-fail((if not-caught-fail(v_952) then keypairpack(v_952,key_e(bob,charlie)) else fail-any)) in
        {437}let v_954: bitstring = catch-fail(getpublickey(v_953)) in
        {438}let v_955: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_950))) in
        {439}let v_956: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_950)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_955),hash(3-proj-3-tuple(v_955),v_954)) else fail-any) else fail-any)) in
        {440}let v_957: bitstring = catch-fail(keypairunpack(v_953)) in
        {441}let v_958: bitstring = catch-fail(symmetricstateunpack(v_956)) in
        {442}let v_959: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_958),(if success?(5-proj-7-tuple(v_950)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_950)) else fail-any) else fail-any))) in
        {443}let v_960: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_958),(if success?(5-proj-7-tuple(v_950)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_950)) else fail-any) else fail-any))) in
        {444}let v_961: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_958),(if success?(5-proj-7-tuple(v_950)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_950)) else fail-any) else fail-any))) in
        {445}let v_962: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_950)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_950)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_958))) then (if not-caught-fail(v_959) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (v_959,v_960,v_961) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {446}let v_963: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_950)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_950)) else fail-any) else fail-any)) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_962)) then cipherstatepack(2-proj-3-tuple(v_962),minnonce) else fail-any),1-proj-3-tuple(v_962),3-proj-3-tuple(v_958)) else fail-any) else fail-any) else fail-any)) in
        {447}let v_964: bitstring = catch-fail(symmetricstateunpack(v_963)) in
        {448}let v_965: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_964))) in
        {449}let v_966: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_965),2-proj-2-tuple(v_965),3-proj-3-tuple(v_964),msg_b(bob,charlie))) in
        {450}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_964))) in
        {451}let v_968: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_965))) && success?(1-proj-3-tuple(v_964))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then cipherstatepack(1-proj-2-tuple(v_967),increment_nonce(2-proj-2-tuple(v_965))) else fail-any) else fail-any)) in
        {452}let v_969: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_964)) && success?(1-proj-3-tuple(v_964))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then (if not-caught-fail(v_966) then (if not-caught-fail(v_968) then (v_968,v_966) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {453}let v_970: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_969),2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)))) in
        {454}let v_971: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_969)) && success?(symmetricstatepack(1-proj-2-tuple(v_969),2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then symmetricstatepack(1-proj-3-tuple(v_970),2-proj-3-tuple(v_970),hash(3-proj-3-tuple(v_970),2-proj-2-tuple(v_969))) else fail-any) else fail-any)) in
        {455}let v_972: bitstring = catch-fail((if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-2-tuple(v_969))))) then (if not-caught-fail(v_971) then (v_971,2-proj-2-tuple(v_969)) else fail-any) else fail-any) else fail-any)) in
        {456}let v_973: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_972),2-proj-7-tuple(v_950),v_953,4-proj-7-tuple(v_950),5-proj-7-tuple(v_950),6-proj-7-tuple(v_950),7-proj-7-tuple(v_950))) in
        {457}let v_974: bitstring = catch-fail(concat3(v_954,2-proj-3-tuple(v_951),2-proj-2-tuple(v_972))) in
        {458}let (hs_975: handshakestate,re_976: key,message_b_977: bitstring) = (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-7-tuple(v_950))))) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-3-tuple(v_951))))) then (if not-caught-fail(v_953) then (if not-caught-fail(v_954) then (if not-caught-fail(v_956) then (if not-caught-fail(v_963) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-2-tuple(v_972))))) then (if not-caught-fail(v_973) then (if not-caught-fail(v_974) then (v_973,5-proj-7-tuple(v_950),v_974) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {459}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {460}insert statestore(bob,charlie,statepack_c(hs_975));
        {461}out(pub, message_b_977)
    ) | (
        {500}get statestore(=bob,=charlie,statepack_c(hs_978: handshakestate)) in
        {463}in(pub, message_c_979: bitstring);
        {464}let v_980: bitstring = catch-fail(handshakestateunpack(hs_978)) in
        {465}let v_981: bitstring = catch-fail(deconcat3(message_c_979)) in
        {466}let v_982: bool = catch-fail(true) in
        {467}let v_983: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_980))) in
        {468}let v_984: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_983))) in
        {469}let v_985: aead = catch-fail(decrypt(1-proj-2-tuple(v_984),2-proj-2-tuple(v_984),3-proj-3-tuple(v_983),2-proj-3-tuple(v_981))) in
        {470}let v_986: bitstring = catch-fail(aeadunpack(v_985)) in
        {471}let v_987: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_983))) in
        {472}let v_988: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_984))) && success?(1-proj-3-tuple(v_983))) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then cipherstatepack(1-proj-2-tuple(v_987),increment_nonce(2-proj-2-tuple(v_984))) else fail-any) else fail-any)) in
        {473}let v_989: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_981)) && (success?(3-proj-3-tuple(v_983)) && success?(1-proj-3-tuple(v_983)))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then (if not-caught-fail(v_985) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if not-caught-fail(v_988) then (v_988,3-proj-3-tuple(v_986),1-proj-3-tuple(v_986)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {474}let v_990: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)))) in
        {475}let v_991: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_981)) && success?(symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then symmetricstatepack(1-proj-3-tuple(v_990),2-proj-3-tuple(v_990),hash(3-proj-3-tuple(v_990),2-proj-3-tuple(v_981))) else fail-any) else fail-any)) in
        {476}let v_992: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_981)) && success?(1-proj-7-tuple(v_980))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if not-caught-fail(v_991) then (v_991,2-proj-3-tuple(v_989),3-proj-3-tuple(v_989)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {477}let v_993: key = catch-fail(2-proj-3-tuple(v_992)) in
        {478}let v_994: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_980))) in
        {479}let v_995: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_992))) in
        {480}let v_996: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_995),(if success?(3-proj-7-tuple(v_980)) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),v_993) else fail-any) else fail-any))) in
        {481}let v_997: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_995),(if success?(3-proj-7-tuple(v_980)) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),v_993) else fail-any) else fail-any))) in
        {482}let v_998: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_995),(if success?(3-proj-7-tuple(v_980)) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),v_993) else fail-any) else fail-any))) in
        {483}let v_999: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_980)) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),v_993) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_995))) then (if not-caught-fail(v_996) then (if not-caught-fail(v_997) then (if not-caught-fail(v_998) then (v_996,v_997,v_998) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {484}let v_1000: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_980)) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then dhexp(2-proj-2-tuple(v_994),v_993) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_992))) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-3-tuple(v_999))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_999)) then cipherstatepack(2-proj-3-tuple(v_999),minnonce) else fail-any),1-proj-3-tuple(v_999),3-proj-3-tuple(v_995)) else fail-any) else fail-any) else fail-any)) in
        {485}let v_1001: bitstring = catch-fail(symmetricstateunpack(v_1000)) in
        {486}let v_1002: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1001))) in
        {487}let v_1003: aead = catch-fail(decrypt(1-proj-2-tuple(v_1002),2-proj-2-tuple(v_1002),3-proj-3-tuple(v_1001),3-proj-3-tuple(v_981))) in
        {488}let v_1004: bitstring = catch-fail(aeadunpack(v_1003)) in
        {489}let v_1005: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1001))) in
        {490}let v_1006: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1002))) && success?(1-proj-3-tuple(v_1001))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-2-tuple(v_1005))))) then cipherstatepack(1-proj-2-tuple(v_1005),increment_nonce(2-proj-2-tuple(v_1002))) else fail-any) else fail-any)) in
        {491}let v_1007: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_981)) && (success?(3-proj-3-tuple(v_1001)) && success?(1-proj-3-tuple(v_1001)))) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-2-tuple(v_1002))))) then (if not-caught-fail(v_1003) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then (if not-caught-fail(v_1006) then (v_1006,3-proj-3-tuple(v_1004),1-proj-3-tuple(v_1004)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {492}let v_1008: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1007),2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)))) in
        {493}let v_1009: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_981)) && success?(symmetricstatepack(1-proj-3-tuple(v_1007),2-proj-3-tuple(v_1001),3-proj-3-tuple(v_1001)))) then (if (not-caught-fail(v_1008) && success?(is-true(success?(1-proj-3-tuple(v_1008))))) then symmetricstatepack(1-proj-3-tuple(v_1008),2-proj-3-tuple(v_1008),hash(3-proj-3-tuple(v_1008),3-proj-3-tuple(v_981))) else fail-any) else fail-any)) in
        {494}let v_1010: bitstring = catch-fail((if success?(3-proj-3-tuple(v_981)) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if not-caught-fail(v_1009) then (v_1009,2-proj-3-tuple(v_1007),3-proj-3-tuple(v_1007)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {495}let v_1011: key = catch-fail(dhexp(key_s(charlie),g)) in
        {496}let v_1012: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1010),2-proj-7-tuple(v_980),3-proj-7-tuple(v_980),v_993,5-proj-7-tuple(v_980),6-proj-7-tuple(v_980),7-proj-7-tuple(v_980))) in
        {497}let (hs_1013: handshakestate,re_1014: key,plaintext_c_1015: bitstring,valid_1016: bool) = (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-7-tuple(v_980))))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (if not-caught-fail(v_982) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then (if not-caught-fail(v_993) then (if not-caught-fail(v_1000) then (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-3-tuple(v_1010))))) then (if ((3-proj-3-tuple(v_992) && 3-proj-3-tuple(v_1010)) && (v_993 = getpublickey((if not-caught-fail(v_1011) then keypairpack(v_1011,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1012) then (v_1012,getpublickey(3-proj-7-tuple(v_980)),2-proj-3-tuple(v_1010),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {498}event RecvMsg(bob,charlie,stage_c,plaintext_c_1015,valid_1016);
        {499}insert statestore(bob,charlie,statepack_d(hs_1013))
    ) | (
        {526}get statestore(=bob,=charlie,statepack_d(hs_1017: handshakestate)) in
        {501}let v_1018: bitstring = catch-fail(handshakestateunpack(hs_1017)) in
        {502}let v_1019: bitstring = catch-fail((empty,empty,empty)) in
        {503}let v_1020: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1018))) in
        {504}let v_1021: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1020))) in
        {505}let v_1022: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1021),2-proj-2-tuple(v_1021),3-proj-3-tuple(v_1020),msg_d(bob,charlie))) in
        {506}let v_1023: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1020))) in
        {507}let v_1024: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1021))) && success?(1-proj-3-tuple(v_1020))) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then cipherstatepack(1-proj-2-tuple(v_1023),increment_nonce(2-proj-2-tuple(v_1021))) else fail-any) else fail-any)) in
        {508}let v_1025: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1020)) && success?(1-proj-3-tuple(v_1020))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1024) then (v_1024,v_1022) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_1026: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1025),2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)))) in
        {510}let v_1027: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1025)) && success?(symmetricstatepack(1-proj-2-tuple(v_1025),2-proj-3-tuple(v_1020),3-proj-3-tuple(v_1020)))) then (if (not-caught-fail(v_1026) && success?(is-true(success?(1-proj-3-tuple(v_1026))))) then symmetricstatepack(1-proj-3-tuple(v_1026),2-proj-3-tuple(v_1026),hash(3-proj-3-tuple(v_1026),2-proj-2-tuple(v_1025))) else fail-any) else fail-any)) in
        {511}let v_1028: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1018)) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-3-tuple(v_1020))))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-2-tuple(v_1025))))) then (if not-caught-fail(v_1027) then (v_1027,2-proj-2-tuple(v_1025)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {512}let v_1029: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1028),2-proj-7-tuple(v_1018),3-proj-7-tuple(v_1018),4-proj-7-tuple(v_1018),5-proj-7-tuple(v_1018),6-proj-7-tuple(v_1018),7-proj-7-tuple(v_1018))) in
        {513}let v_1030: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),2-proj-2-tuple(v_1028))) in
        {514}let v_1031: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1028))) in
        {515}let v_1032: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1031),zero)) in
        {516}let v_1033: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1031),zero)) in
        {517}let v_1034: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1031),zero)) in
        {518}let v_1035: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1031)) then (if not-caught-fail(v_1032) then (if not-caught-fail(v_1033) then (if not-caught-fail(v_1034) then (v_1032,v_1033,v_1034) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {519}let v_1036: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1035)) then cipherstatepack(1-proj-3-tuple(v_1035),minnonce) else fail-any)) in
        {520}let v_1037: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1035)) then cipherstatepack(2-proj-3-tuple(v_1035),minnonce) else fail-any)) in
        {521}let v_1038: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1028)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then (if not-caught-fail(v_1036) then (if not-caught-fail(v_1037) then (1-proj-2-tuple(v_1028),v_1036,v_1037) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {522}let (hs_1039: handshakestate,re_1040: key,message_d_1041: bitstring,cs1_1042: cipherstate,cs2_1043: cipherstate) = (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-7-tuple(v_1018))))) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-2-tuple(v_1028))))) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then (v_1029,5-proj-7-tuple(v_1018),v_1030,2-proj-3-tuple(v_1038),3-proj-3-tuple(v_1038)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {523}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {524}insert statestore(bob,charlie,statepack_e(hs_1039));
        {525}out(pub, message_d_1041)
    ) | (
        {527}event LeakS(phase0,bob);
        {528}out(pub, key_s(bob))
    ) | (
        {529}phase 1;
        {530}event LeakS(phase1,bob);
        {531}out(pub, key_s(bob))
    )
) | (
    {532}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 160 rules in the queue.
400 rules inserted. The rule base contains 389 rules. 29 rules in the queue.
600 rules inserted. The rule base contains 571 rules. 212 rules in the queue.
800 rules inserted. The rule base contains 744 rules. 279 rules in the queue.
1000 rules inserted. The rule base contains 921 rules. 134 rules in the queue.
1200 rules inserted. The rule base contains 1093 rules. 212 rules in the queue.
1400 rules inserted. The rule base contains 1250 rules. 231 rules in the queue.
1600 rules inserted. The rule base contains 1394 rules. 255 rules in the queue.
1800 rules inserted. The rule base contains 1488 rules. 208 rules in the queue.
2000 rules inserted. The rule base contains 1660 rules. 235 rules in the queue.
2200 rules inserted. The rule base contains 1809 rules. 274 rules in the queue.
2400 rules inserted. The rule base contains 1850 rules. 196 rules in the queue.
2600 rules inserted. The rule base contains 1952 rules. 185 rules in the queue.
2800 rules inserted. The rule base contains 2057 rules. 222 rules in the queue.
3000 rules inserted. The rule base contains 2183 rules. 227 rules in the queue.
3200 rules inserted. The rule base contains 2333 rules. 269 rules in the queue.
3400 rules inserted. The rule base contains 2466 rules. 261 rules in the queue.
3600 rules inserted. The rule base contains 2558 rules. 243 rules in the queue.
3800 rules inserted. The rule base contains 2699 rules. 260 rules in the queue.
4000 rules inserted. The rule base contains 2855 rules. 278 rules in the queue.
4200 rules inserted. The rule base contains 2998 rules. 292 rules in the queue.
4400 rules inserted. The rule base contains 3131 rules. 311 rules in the queue.
4600 rules inserted. The rule base contains 3282 rules. 288 rules in the queue.
4800 rules inserted. The rule base contains 3393 rules. 236 rules in the queue.
5000 rules inserted. The rule base contains 3485 rules. 177 rules in the queue.
5200 rules inserted. The rule base contains 3571 rules. 146 rules in the queue.
5400 rules inserted. The rule base contains 3637 rules. 141 rules in the queue.
5600 rules inserted. The rule base contains 3749 rules. 71 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1046,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {298}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. Using the function empty the attacker may obtain empty.
attacker(empty).

9. Using the function somename the attacker may obtain somename.
attacker(somename).

10. By 9, the attacker may know somename.
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

11. By 10, the attacker may know hash(somename,empty).
By 8, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

12. By 11, the attacker may know hash(hash(somename,empty),empty).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

13. By 12, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

15. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

16. By 15, the attacker may know empty in phase 1.
By 14, the attacker may know minnonce in phase 1.
By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {410}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {432}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {411}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {431}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {462}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {459}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {461}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {63}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1046,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {410}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {432}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {411}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {431}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {462}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {459}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {461}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {63}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {410}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {432}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {411}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {431}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {462}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {459}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {461}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {37}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {63}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {198}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {170}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {197}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {331}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1046,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {198}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {170}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {197}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {331}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {167}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {146}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {169}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {166}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {168}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 8 may be read at get {300}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {279}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {198}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {170}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {197}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {234}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {231}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) may be sent on channel pub at output {233}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {368}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {331}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {366}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1046,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {300}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {279}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {65}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 7 may be received at input {37}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {64}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 8 may be read at get {101}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {98}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {99}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

10. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 11 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

13. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 10 may be read at get {300}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {279}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

14. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 13 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {328}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 15 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {34}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {278}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 18 may be read at get {36}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {33}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {35}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

20. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 17 may be read at get {300}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {279}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {299}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

21. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 20 may be read at get {330}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {327}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {329}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 16 may be read at get {65}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 21 may be received at input {37}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {64}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 22 may be read at get {101}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {98}.
So the message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) may be sent on channel pub at output {100}.
mess(pub,concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))).

24. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 14 may be read at get {368}.
The message concat3(empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {331}.
So the entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {367}.
table(statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

25. The entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 24 may be read at get {394}.
The event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true) may be executed at {391}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice))) may be sent on channel pub at output {393}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 9 may be read at get {129}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),dhexp(key_s(alice),g))),msg_c(alice,bob))),msg_d(bob,alice))) that may be sent on channel pub by 25 may be received at input {102}.
So event RecvEnd(true) may be executed at {128}.
end(RecvEnd(true)).


