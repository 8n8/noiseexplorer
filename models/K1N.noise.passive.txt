File "K1N.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 270, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 271, character 36:
Warning: identifier h rebound.
File "K1N.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 312, character 6:
Warning: identifier e rebound.
File "K1N.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ne rebound.
File "K1N.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 324, character 6:
Warning: identifier e rebound.
File "K1N.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ne rebound.
File "K1N.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "K1N.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 361, characters 6-7:
Warning: identifier re rebound.
File "K1N.noise.passive.pv", line 362, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 367, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 499, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 337, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 492, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 361, characters 6-7:
Warning: identifier re rebound.
File "K1N.noise.passive.pv", line 362, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 364, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 365, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 367, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 484, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 312, character 6:
Warning: identifier e rebound.
File "K1N.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ne rebound.
File "K1N.noise.passive.pv", line 314, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 316, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 316, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 317, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 301, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 542, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 375, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 376, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 378, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 534, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 324, character 6:
Warning: identifier e rebound.
File "K1N.noise.passive.pv", line 325, characters 6-7:
Warning: identifier ne rebound.
File "K1N.noise.passive.pv", line 326, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 280, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 281, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 527, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 348, characters 6-7:
Warning: identifier re rebound.
File "K1N.noise.passive.pv", line 349, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 351, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 353, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 286, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_409: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_410: keypair = (if not-caught-fail(v_409) then keypairpack(v_409,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_410));
    (
        {5}let e_411: keypair = keypairpack(empty,empty) in
        {6}let rs_412: key = empty in
        {7}let re_413: key = empty in
        {8}let v_414: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_415: key = catch-fail(v_414) in
        {10}let v_416: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_417: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_414) then (if not-caught-fail(v_415) then (if not-caught-fail(v_416) then symmetricstatepack(v_416,v_415,v_414) else fail-any) else fail-any) else fail-any))) in
        {12}let v_418: symmetricstate = catch-fail((if success?((if not-caught-fail(v_414) then (if not-caught-fail(v_415) then (if not-caught-fail(v_416) then symmetricstatepack(v_416,v_415,v_414) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_417) && success?(is-true(success?(1-proj-3-tuple(v_417))))) then symmetricstatepack(1-proj-3-tuple(v_417),2-proj-3-tuple(v_417),hash(3-proj-3-tuple(v_417),empty)) else fail-any) else fail-any)) in
        {13}let v_419: bitstring = catch-fail(symmetricstateunpack(v_418)) in
        {14}let v_420: symmetricstate = catch-fail((if success?(getpublickey(s_410)) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-3-tuple(v_419))))) then symmetricstatepack(1-proj-3-tuple(v_419),2-proj-3-tuple(v_419),hash(3-proj-3-tuple(v_419),getpublickey(s_410))) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_418) then (if not-caught-fail(v_420) then handshakestatepack(v_420,s_410,e_411,rs_412,re_413,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {39}get statestore(=alice,=bob,statepack_a(hs_421: handshakestate)) in
        {17}let v_422: bitstring = catch-fail(handshakestateunpack(hs_421)) in
        {18}let v_423: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_424: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_425: keypair = catch-fail((if not-caught-fail(v_424) then keypairpack(v_424,key_e(alice,bob)) else fail-any)) in
        {21}let v_426: bitstring = catch-fail(getpublickey(v_425)) in
        {22}let v_427: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_422))) in
        {23}let v_428: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_422)) then (if (not-caught-fail(v_427) && success?(is-true(success?(1-proj-3-tuple(v_427))))) then symmetricstatepack(1-proj-3-tuple(v_427),2-proj-3-tuple(v_427),hash(3-proj-3-tuple(v_427),v_426)) else fail-any) else fail-any)) in
        {24}let v_429: bitstring = catch-fail(symmetricstateunpack(v_428)) in
        {25}let v_430: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_429))) in
        {26}let v_431: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_430),2-proj-2-tuple(v_430),3-proj-3-tuple(v_429),msg_a(alice,bob))) in
        {27}let v_432: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_429))) in
        {28}let v_433: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_430))) && success?(1-proj-3-tuple(v_429))) then (if (not-caught-fail(v_432) && success?(is-true(success?(1-proj-2-tuple(v_432))))) then cipherstatepack(1-proj-2-tuple(v_432),increment_nonce(2-proj-2-tuple(v_430))) else fail-any) else fail-any)) in
        {29}let v_434: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_429)) && success?(1-proj-3-tuple(v_429))) then (if (not-caught-fail(v_430) && success?(is-true(success?(1-proj-2-tuple(v_430))))) then (if not-caught-fail(v_431) then (if not-caught-fail(v_433) then (v_433,v_431) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_435: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_434),2-proj-3-tuple(v_429),3-proj-3-tuple(v_429)))) in
        {31}let v_436: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_434)) && success?(symmetricstatepack(1-proj-2-tuple(v_434),2-proj-3-tuple(v_429),3-proj-3-tuple(v_429)))) then (if (not-caught-fail(v_435) && success?(is-true(success?(1-proj-3-tuple(v_435))))) then symmetricstatepack(1-proj-3-tuple(v_435),2-proj-3-tuple(v_435),hash(3-proj-3-tuple(v_435),2-proj-2-tuple(v_434))) else fail-any) else fail-any)) in
        {32}let v_437: bitstring = catch-fail((if (not-caught-fail(v_429) && success?(is-true(success?(1-proj-3-tuple(v_429))))) then (if (not-caught-fail(v_434) && success?(is-true(success?(1-proj-2-tuple(v_434))))) then (if not-caught-fail(v_436) then (v_436,2-proj-2-tuple(v_434)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_438: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_437),2-proj-7-tuple(v_422),v_425,4-proj-7-tuple(v_422),5-proj-7-tuple(v_422),6-proj-7-tuple(v_422),7-proj-7-tuple(v_422))) in
        {34}let v_439: bitstring = catch-fail(concat3(v_426,2-proj-3-tuple(v_423),2-proj-2-tuple(v_437))) in
        {35}let (hs_440: handshakestate,re_441: key,message_a: bitstring) = (if (not-caught-fail(v_422) && success?(is-true(success?(1-proj-7-tuple(v_422))))) then (if (not-caught-fail(v_423) && success?(is-true(success?(1-proj-3-tuple(v_423))))) then (if not-caught-fail(v_425) then (if not-caught-fail(v_426) then (if not-caught-fail(v_428) then (if (not-caught-fail(v_437) && success?(is-true(success?(1-proj-2-tuple(v_437))))) then (if not-caught-fail(v_438) then (if not-caught-fail(v_439) then (v_438,5-proj-7-tuple(v_422),v_439) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {36}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {37}insert statestore(alice,bob,statepack_b(hs_440));
        {38}out(pub, message_a)
    ) | (
        {68}get statestore(=alice,=bob,statepack_b(hs_442: handshakestate)) in
        {40}in(pub, message_b: bitstring);
        {41}let v_443: bitstring = catch-fail(handshakestateunpack(hs_442)) in
        {42}let v_444: bitstring = catch-fail(deconcat3(message_b)) in
        {43}let v_445: bool = catch-fail(true) in
        {44}let v_446: key = catch-fail(1-proj-3-tuple(v_444)) in
        {45}let v_447: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_443))) in
        {46}let v_448: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_443)) then (if (not-caught-fail(v_447) && success?(is-true(success?(1-proj-3-tuple(v_447))))) then symmetricstatepack(1-proj-3-tuple(v_447),2-proj-3-tuple(v_447),hash(3-proj-3-tuple(v_447),v_446)) else fail-any) else fail-any)) in
        {47}let v_449: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_443))) in
        {48}let v_450: bitstring = catch-fail(symmetricstateunpack(v_448)) in
        {49}let v_451: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_450),(if success?(3-proj-7-tuple(v_443)) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-2-tuple(v_449))))) then dhexp(2-proj-2-tuple(v_449),v_446) else fail-any) else fail-any))) in
        {50}let v_452: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_450),(if success?(3-proj-7-tuple(v_443)) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-2-tuple(v_449))))) then dhexp(2-proj-2-tuple(v_449),v_446) else fail-any) else fail-any))) in
        {51}let v_453: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_450),(if success?(3-proj-7-tuple(v_443)) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-2-tuple(v_449))))) then dhexp(2-proj-2-tuple(v_449),v_446) else fail-any) else fail-any))) in
        {52}let v_454: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_443)) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-2-tuple(v_449))))) then dhexp(2-proj-2-tuple(v_449),v_446) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_450))) then (if not-caught-fail(v_451) then (if not-caught-fail(v_452) then (if not-caught-fail(v_453) then (v_451,v_452,v_453) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_455: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_443)) then (if (not-caught-fail(v_449) && success?(is-true(success?(1-proj-2-tuple(v_449))))) then dhexp(2-proj-2-tuple(v_449),v_446) else fail-any) else fail-any)) then (if (not-caught-fail(v_450) && success?(is-true(success?(1-proj-3-tuple(v_450))))) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-3-tuple(v_454))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_454)) then cipherstatepack(2-proj-3-tuple(v_454),minnonce) else fail-any),1-proj-3-tuple(v_454),3-proj-3-tuple(v_450)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_456: bitstring = catch-fail(symmetricstateunpack(v_455)) in
        {55}let v_457: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_456))) in
        {56}let v_458: aead = catch-fail(decrypt(1-proj-2-tuple(v_457),2-proj-2-tuple(v_457),3-proj-3-tuple(v_456),3-proj-3-tuple(v_444))) in
        {57}let v_459: bitstring = catch-fail(aeadunpack(v_458)) in
        {58}let v_460: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_456))) in
        {59}let v_461: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_457))) && success?(1-proj-3-tuple(v_456))) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-2-tuple(v_460))))) then cipherstatepack(1-proj-2-tuple(v_460),increment_nonce(2-proj-2-tuple(v_457))) else fail-any) else fail-any)) in
        {60}let v_462: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_444)) && (success?(3-proj-3-tuple(v_456)) && success?(1-proj-3-tuple(v_456)))) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-2-tuple(v_457))))) then (if not-caught-fail(v_458) then (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-3-tuple(v_459))))) then (if not-caught-fail(v_461) then (v_461,3-proj-3-tuple(v_459),1-proj-3-tuple(v_459)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_463: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_462),2-proj-3-tuple(v_456),3-proj-3-tuple(v_456)))) in
        {62}let v_464: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_444)) && success?(symmetricstatepack(1-proj-3-tuple(v_462),2-proj-3-tuple(v_456),3-proj-3-tuple(v_456)))) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-3-tuple(v_463))))) then symmetricstatepack(1-proj-3-tuple(v_463),2-proj-3-tuple(v_463),hash(3-proj-3-tuple(v_463),3-proj-3-tuple(v_444))) else fail-any) else fail-any)) in
        {63}let v_465: bitstring = catch-fail((if success?(3-proj-3-tuple(v_444)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-3-tuple(v_456))))) then (if (not-caught-fail(v_462) && success?(is-true(success?(1-proj-3-tuple(v_462))))) then (if not-caught-fail(v_464) then (v_464,2-proj-3-tuple(v_462),3-proj-3-tuple(v_462)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let v_466: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_465),2-proj-7-tuple(v_443),3-proj-7-tuple(v_443),4-proj-7-tuple(v_443),v_446,6-proj-7-tuple(v_443),7-proj-7-tuple(v_443))) in
        {65}let (hs_467: handshakestate,re_468: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_443) && success?(is-true(success?(1-proj-7-tuple(v_443))))) then (if (not-caught-fail(v_444) && success?(is-true(success?(1-proj-3-tuple(v_444))))) then (if not-caught-fail(v_445) then (if not-caught-fail(v_446) then (if not-caught-fail(v_448) then (if not-caught-fail(v_455) then (if (not-caught-fail(v_465) && success?(is-true(success?(1-proj-3-tuple(v_465))))) then (if (v_445 && 3-proj-3-tuple(v_465)) then (if not-caught-fail(v_466) then (v_466,getpublickey(3-proj-7-tuple(v_443)),2-proj-3-tuple(v_465),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {66}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {67}insert statestore(alice,bob,statepack_c(hs_467))
    ) | (
        {101}get statestore(=alice,=bob,statepack_c(hs_469: handshakestate)) in
        {69}let v_470: bitstring = catch-fail(handshakestateunpack(hs_469)) in
        {70}let v_471: bitstring = catch-fail((empty,empty,empty)) in
        {71}let v_472: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_470))) in
        {72}let v_473: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_470))) in
        {73}let v_474: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_473),(if (success?(5-proj-7-tuple(v_470)) && success?(2-proj-7-tuple(v_470))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-2-tuple(v_472))))) then dhexp(2-proj-2-tuple(v_472),5-proj-7-tuple(v_470)) else fail-any) else fail-any))) in
        {74}let v_475: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_473),(if (success?(5-proj-7-tuple(v_470)) && success?(2-proj-7-tuple(v_470))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-2-tuple(v_472))))) then dhexp(2-proj-2-tuple(v_472),5-proj-7-tuple(v_470)) else fail-any) else fail-any))) in
        {75}let v_476: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_473),(if (success?(5-proj-7-tuple(v_470)) && success?(2-proj-7-tuple(v_470))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-2-tuple(v_472))))) then dhexp(2-proj-2-tuple(v_472),5-proj-7-tuple(v_470)) else fail-any) else fail-any))) in
        {76}let v_477: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_470)) && success?(2-proj-7-tuple(v_470))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-2-tuple(v_472))))) then dhexp(2-proj-2-tuple(v_472),5-proj-7-tuple(v_470)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_473))) then (if not-caught-fail(v_474) then (if not-caught-fail(v_475) then (if not-caught-fail(v_476) then (v_474,v_475,v_476) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {77}let v_478: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_470)) && success?(2-proj-7-tuple(v_470))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-2-tuple(v_472))))) then dhexp(2-proj-2-tuple(v_472),5-proj-7-tuple(v_470)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_470))) then (if (not-caught-fail(v_473) && success?(is-true(success?(1-proj-3-tuple(v_473))))) then (if (not-caught-fail(v_477) && success?(is-true(success?(1-proj-3-tuple(v_477))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_477)) then cipherstatepack(2-proj-3-tuple(v_477),minnonce) else fail-any),1-proj-3-tuple(v_477),3-proj-3-tuple(v_473)) else fail-any) else fail-any) else fail-any)) in
        {78}let v_479: bitstring = catch-fail(symmetricstateunpack(v_478)) in
        {79}let v_480: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_479))) in
        {80}let v_481: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_480),2-proj-2-tuple(v_480),3-proj-3-tuple(v_479),msg_c(alice,bob))) in
        {81}let v_482: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_479))) in
        {82}let v_483: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_480))) && success?(1-proj-3-tuple(v_479))) then (if (not-caught-fail(v_482) && success?(is-true(success?(1-proj-2-tuple(v_482))))) then cipherstatepack(1-proj-2-tuple(v_482),increment_nonce(2-proj-2-tuple(v_480))) else fail-any) else fail-any)) in
        {83}let v_484: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_479)) && success?(1-proj-3-tuple(v_479))) then (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-2-tuple(v_480))))) then (if not-caught-fail(v_481) then (if not-caught-fail(v_483) then (v_483,v_481) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_485: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_484),2-proj-3-tuple(v_479),3-proj-3-tuple(v_479)))) in
        {85}let v_486: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_484)) && success?(symmetricstatepack(1-proj-2-tuple(v_484),2-proj-3-tuple(v_479),3-proj-3-tuple(v_479)))) then (if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then symmetricstatepack(1-proj-3-tuple(v_485),2-proj-3-tuple(v_485),hash(3-proj-3-tuple(v_485),2-proj-2-tuple(v_484))) else fail-any) else fail-any)) in
        {86}let v_487: bitstring = catch-fail((if (not-caught-fail(v_479) && success?(is-true(success?(1-proj-3-tuple(v_479))))) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-2-tuple(v_484))))) then (if not-caught-fail(v_486) then (v_486,2-proj-2-tuple(v_484)) else fail-any) else fail-any) else fail-any)) in
        {87}let v_488: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_487),2-proj-7-tuple(v_470),3-proj-7-tuple(v_470),4-proj-7-tuple(v_470),5-proj-7-tuple(v_470),6-proj-7-tuple(v_470),7-proj-7-tuple(v_470))) in
        {88}let v_489: bitstring = catch-fail(concat3(1-proj-3-tuple(v_471),2-proj-3-tuple(v_471),2-proj-2-tuple(v_487))) in
        {89}let v_490: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_487))) in
        {90}let v_491: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_490),zero)) in
        {91}let v_492: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_490),zero)) in
        {92}let v_493: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_490),zero)) in
        {93}let v_494: bitstring = catch-fail((if success?(2-proj-3-tuple(v_490)) then (if not-caught-fail(v_491) then (if not-caught-fail(v_492) then (if not-caught-fail(v_493) then (v_491,v_492,v_493) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {94}let v_495: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_494)) then cipherstatepack(1-proj-3-tuple(v_494),minnonce) else fail-any)) in
        {95}let v_496: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_494)) then cipherstatepack(2-proj-3-tuple(v_494),minnonce) else fail-any)) in
        {96}let v_497: bitstring = catch-fail((if success?(1-proj-2-tuple(v_487)) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-3-tuple(v_490))))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-3-tuple(v_494))))) then (if not-caught-fail(v_495) then (if not-caught-fail(v_496) then (1-proj-2-tuple(v_487),v_495,v_496) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let (hs_498: handshakestate,re_499: key,message_c: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_470) && success?(is-true(success?(1-proj-7-tuple(v_470))))) then (if (not-caught-fail(v_471) && success?(is-true(success?(1-proj-3-tuple(v_471))))) then (if not-caught-fail(v_478) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-2-tuple(v_487))))) then (if not-caught-fail(v_488) then (if not-caught-fail(v_489) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-3-tuple(v_497))))) then (v_488,5-proj-7-tuple(v_470),v_489,2-proj-3-tuple(v_497),3-proj-3-tuple(v_497)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {98}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {99}insert statestore(alice,bob,statepack_d(hs_498));
        {100}out(pub, message_c)
    ) | (
        {102}event LeakS(phase0,alice);
        {103}out(pub, key_s(alice))
    ) | (
        {104}phase 1;
        {105}event LeakS(phase1,alice);
        {106}out(pub, key_s(alice))
    )
) | (
    {107}let v_500: key = catch-fail(dhexp(key_s(alice),g)) in
    {108}let s_501: keypair = (if not-caught-fail(v_500) then keypairpack(v_500,key_s(alice)) else fail-any) in
    {109}out(pub, getpublickey(s_501));
    (
        {110}let e_502: keypair = keypairpack(empty,empty) in
        {111}let rs_503: key = empty in
        {112}let re_504: key = empty in
        {113}let v_505: bitstring = catch-fail(hash(somename,empty)) in
        {114}let v_506: key = catch-fail(v_505) in
        {115}let v_507: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {116}let v_508: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (if not-caught-fail(v_507) then symmetricstatepack(v_507,v_506,v_505) else fail-any) else fail-any) else fail-any))) in
        {117}let v_509: symmetricstate = catch-fail((if success?((if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (if not-caught-fail(v_507) then symmetricstatepack(v_507,v_506,v_505) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then symmetricstatepack(1-proj-3-tuple(v_508),2-proj-3-tuple(v_508),hash(3-proj-3-tuple(v_508),empty)) else fail-any) else fail-any)) in
        {118}let v_510: bitstring = catch-fail(symmetricstateunpack(v_509)) in
        {119}let v_511: symmetricstate = catch-fail((if success?(getpublickey(s_501)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then symmetricstatepack(1-proj-3-tuple(v_510),2-proj-3-tuple(v_510),hash(3-proj-3-tuple(v_510),getpublickey(s_501))) else fail-any) else fail-any)) in
        {120}let hs_512: handshakestate = (if not-caught-fail(v_509) then (if not-caught-fail(v_511) then handshakestatepack(v_511,s_501,e_502,rs_503,re_504,empty,true) else fail-any) else fail-any) in
        {121}insert statestore(alice,charlie,statepack_a(hs_512))
    ) | (
        {144}get statestore(=alice,=charlie,statepack_a(hs_513: handshakestate)) in
        {122}let v_514: bitstring = catch-fail(handshakestateunpack(hs_513)) in
        {123}let v_515: bitstring = catch-fail((empty,empty,empty)) in
        {124}let v_516: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {125}let v_517: keypair = catch-fail((if not-caught-fail(v_516) then keypairpack(v_516,key_e(alice,charlie)) else fail-any)) in
        {126}let v_518: bitstring = catch-fail(getpublickey(v_517)) in
        {127}let v_519: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_514))) in
        {128}let v_520: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_514)) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-3-tuple(v_519))))) then symmetricstatepack(1-proj-3-tuple(v_519),2-proj-3-tuple(v_519),hash(3-proj-3-tuple(v_519),v_518)) else fail-any) else fail-any)) in
        {129}let v_521: bitstring = catch-fail(symmetricstateunpack(v_520)) in
        {130}let v_522: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_521))) in
        {131}let v_523: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_522),2-proj-2-tuple(v_522),3-proj-3-tuple(v_521),msg_a(alice,charlie))) in
        {132}let v_524: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_521))) in
        {133}let v_525: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_522))) && success?(1-proj-3-tuple(v_521))) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then cipherstatepack(1-proj-2-tuple(v_524),increment_nonce(2-proj-2-tuple(v_522))) else fail-any) else fail-any)) in
        {134}let v_526: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_521)) && success?(1-proj-3-tuple(v_521))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-2-tuple(v_522))))) then (if not-caught-fail(v_523) then (if not-caught-fail(v_525) then (v_525,v_523) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_527: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_526),2-proj-3-tuple(v_521),3-proj-3-tuple(v_521)))) in
        {136}let v_528: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_526)) && success?(symmetricstatepack(1-proj-2-tuple(v_526),2-proj-3-tuple(v_521),3-proj-3-tuple(v_521)))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-3-tuple(v_527))))) then symmetricstatepack(1-proj-3-tuple(v_527),2-proj-3-tuple(v_527),hash(3-proj-3-tuple(v_527),2-proj-2-tuple(v_526))) else fail-any) else fail-any)) in
        {137}let v_529: bitstring = catch-fail((if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-3-tuple(v_521))))) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-2-tuple(v_526))))) then (if not-caught-fail(v_528) then (v_528,2-proj-2-tuple(v_526)) else fail-any) else fail-any) else fail-any)) in
        {138}let v_530: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_529),2-proj-7-tuple(v_514),v_517,4-proj-7-tuple(v_514),5-proj-7-tuple(v_514),6-proj-7-tuple(v_514),7-proj-7-tuple(v_514))) in
        {139}let v_531: bitstring = catch-fail(concat3(v_518,2-proj-3-tuple(v_515),2-proj-2-tuple(v_529))) in
        {140}let (hs_532: handshakestate,re_533: key,message_a_534: bitstring) = (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-7-tuple(v_514))))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then (if not-caught-fail(v_517) then (if not-caught-fail(v_518) then (if not-caught-fail(v_520) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-2-tuple(v_529))))) then (if not-caught-fail(v_530) then (if not-caught-fail(v_531) then (v_530,5-proj-7-tuple(v_514),v_531) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {141}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {142}insert statestore(alice,charlie,statepack_b(hs_532));
        {143}out(pub, message_a_534)
    ) | (
        {173}get statestore(=alice,=charlie,statepack_b(hs_535: handshakestate)) in
        {145}in(pub, message_b_536: bitstring);
        {146}let v_537: bitstring = catch-fail(handshakestateunpack(hs_535)) in
        {147}let v_538: bitstring = catch-fail(deconcat3(message_b_536)) in
        {148}let v_539: bool = catch-fail(true) in
        {149}let v_540: key = catch-fail(1-proj-3-tuple(v_538)) in
        {150}let v_541: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_537))) in
        {151}let v_542: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_537)) then (if (not-caught-fail(v_541) && success?(is-true(success?(1-proj-3-tuple(v_541))))) then symmetricstatepack(1-proj-3-tuple(v_541),2-proj-3-tuple(v_541),hash(3-proj-3-tuple(v_541),v_540)) else fail-any) else fail-any)) in
        {152}let v_543: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_537))) in
        {153}let v_544: bitstring = catch-fail(symmetricstateunpack(v_542)) in
        {154}let v_545: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {155}let v_546: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {156}let v_547: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_544),(if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any))) in
        {157}let v_548: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_544))) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (v_545,v_546,v_547) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {158}let v_549: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_537)) then (if (not-caught-fail(v_543) && success?(is-true(success?(1-proj-2-tuple(v_543))))) then dhexp(2-proj-2-tuple(v_543),v_540) else fail-any) else fail-any)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_548)) then cipherstatepack(2-proj-3-tuple(v_548),minnonce) else fail-any),1-proj-3-tuple(v_548),3-proj-3-tuple(v_544)) else fail-any) else fail-any) else fail-any)) in
        {159}let v_550: bitstring = catch-fail(symmetricstateunpack(v_549)) in
        {160}let v_551: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_550))) in
        {161}let v_552: aead = catch-fail(decrypt(1-proj-2-tuple(v_551),2-proj-2-tuple(v_551),3-proj-3-tuple(v_550),3-proj-3-tuple(v_538))) in
        {162}let v_553: bitstring = catch-fail(aeadunpack(v_552)) in
        {163}let v_554: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_550))) in
        {164}let v_555: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_551))) && success?(1-proj-3-tuple(v_550))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-2-tuple(v_554))))) then cipherstatepack(1-proj-2-tuple(v_554),increment_nonce(2-proj-2-tuple(v_551))) else fail-any) else fail-any)) in
        {165}let v_556: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_538)) && (success?(3-proj-3-tuple(v_550)) && success?(1-proj-3-tuple(v_550)))) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-2-tuple(v_551))))) then (if not-caught-fail(v_552) then (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-3-tuple(v_553))))) then (if not-caught-fail(v_555) then (v_555,3-proj-3-tuple(v_553),1-proj-3-tuple(v_553)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {166}let v_557: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)))) in
        {167}let v_558: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_538)) && success?(symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_550),3-proj-3-tuple(v_550)))) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),3-proj-3-tuple(v_538))) else fail-any) else fail-any)) in
        {168}let v_559: bitstring = catch-fail((if success?(3-proj-3-tuple(v_538)) then (if (not-caught-fail(v_550) && success?(is-true(success?(1-proj-3-tuple(v_550))))) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then (if not-caught-fail(v_558) then (v_558,2-proj-3-tuple(v_556),3-proj-3-tuple(v_556)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {169}let v_560: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_559),2-proj-7-tuple(v_537),3-proj-7-tuple(v_537),4-proj-7-tuple(v_537),v_540,6-proj-7-tuple(v_537),7-proj-7-tuple(v_537))) in
        {170}let (hs_561: handshakestate,re_562: key,plaintext_b_563: bitstring,valid_564: bool) = (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-7-tuple(v_537))))) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-3-tuple(v_538))))) then (if not-caught-fail(v_539) then (if not-caught-fail(v_540) then (if not-caught-fail(v_542) then (if not-caught-fail(v_549) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-3-tuple(v_559))))) then (if (v_539 && 3-proj-3-tuple(v_559)) then (if not-caught-fail(v_560) then (v_560,getpublickey(3-proj-7-tuple(v_537)),2-proj-3-tuple(v_559),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {171}event RecvMsg(alice,charlie,stage_b,plaintext_b_563,valid_564);
        {172}insert statestore(alice,charlie,statepack_c(hs_561))
    ) | (
        {206}get statestore(=alice,=charlie,statepack_c(hs_565: handshakestate)) in
        {174}let v_566: bitstring = catch-fail(handshakestateunpack(hs_565)) in
        {175}let v_567: bitstring = catch-fail((empty,empty,empty)) in
        {176}let v_568: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_566))) in
        {177}let v_569: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_566))) in
        {178}let v_570: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_569),(if (success?(5-proj-7-tuple(v_566)) && success?(2-proj-7-tuple(v_566))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then dhexp(2-proj-2-tuple(v_568),5-proj-7-tuple(v_566)) else fail-any) else fail-any))) in
        {179}let v_571: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_569),(if (success?(5-proj-7-tuple(v_566)) && success?(2-proj-7-tuple(v_566))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then dhexp(2-proj-2-tuple(v_568),5-proj-7-tuple(v_566)) else fail-any) else fail-any))) in
        {180}let v_572: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_569),(if (success?(5-proj-7-tuple(v_566)) && success?(2-proj-7-tuple(v_566))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then dhexp(2-proj-2-tuple(v_568),5-proj-7-tuple(v_566)) else fail-any) else fail-any))) in
        {181}let v_573: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_566)) && success?(2-proj-7-tuple(v_566))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then dhexp(2-proj-2-tuple(v_568),5-proj-7-tuple(v_566)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_569))) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (v_570,v_571,v_572) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {182}let v_574: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_566)) && success?(2-proj-7-tuple(v_566))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-2-tuple(v_568))))) then dhexp(2-proj-2-tuple(v_568),5-proj-7-tuple(v_566)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_566))) then (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-3-tuple(v_569))))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_573)) then cipherstatepack(2-proj-3-tuple(v_573),minnonce) else fail-any),1-proj-3-tuple(v_573),3-proj-3-tuple(v_569)) else fail-any) else fail-any) else fail-any)) in
        {183}let v_575: bitstring = catch-fail(symmetricstateunpack(v_574)) in
        {184}let v_576: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_575))) in
        {185}let v_577: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_576),2-proj-2-tuple(v_576),3-proj-3-tuple(v_575),msg_c(alice,charlie))) in
        {186}let v_578: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_575))) in
        {187}let v_579: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_576))) && success?(1-proj-3-tuple(v_575))) then (if (not-caught-fail(v_578) && success?(is-true(success?(1-proj-2-tuple(v_578))))) then cipherstatepack(1-proj-2-tuple(v_578),increment_nonce(2-proj-2-tuple(v_576))) else fail-any) else fail-any)) in
        {188}let v_580: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_575)) && success?(1-proj-3-tuple(v_575))) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-2-tuple(v_576))))) then (if not-caught-fail(v_577) then (if not-caught-fail(v_579) then (v_579,v_577) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_581: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_580),2-proj-3-tuple(v_575),3-proj-3-tuple(v_575)))) in
        {190}let v_582: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_580)) && success?(symmetricstatepack(1-proj-2-tuple(v_580),2-proj-3-tuple(v_575),3-proj-3-tuple(v_575)))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-3-tuple(v_581))))) then symmetricstatepack(1-proj-3-tuple(v_581),2-proj-3-tuple(v_581),hash(3-proj-3-tuple(v_581),2-proj-2-tuple(v_580))) else fail-any) else fail-any)) in
        {191}let v_583: bitstring = catch-fail((if (not-caught-fail(v_575) && success?(is-true(success?(1-proj-3-tuple(v_575))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-2-tuple(v_580))))) then (if not-caught-fail(v_582) then (v_582,2-proj-2-tuple(v_580)) else fail-any) else fail-any) else fail-any)) in
        {192}let v_584: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_583),2-proj-7-tuple(v_566),3-proj-7-tuple(v_566),4-proj-7-tuple(v_566),5-proj-7-tuple(v_566),6-proj-7-tuple(v_566),7-proj-7-tuple(v_566))) in
        {193}let v_585: bitstring = catch-fail(concat3(1-proj-3-tuple(v_567),2-proj-3-tuple(v_567),2-proj-2-tuple(v_583))) in
        {194}let v_586: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_583))) in
        {195}let v_587: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_586),zero)) in
        {196}let v_588: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_586),zero)) in
        {197}let v_589: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_586),zero)) in
        {198}let v_590: bitstring = catch-fail((if success?(2-proj-3-tuple(v_586)) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (v_587,v_588,v_589) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {199}let v_591: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_590)) then cipherstatepack(1-proj-3-tuple(v_590),minnonce) else fail-any)) in
        {200}let v_592: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_590)) then cipherstatepack(2-proj-3-tuple(v_590),minnonce) else fail-any)) in
        {201}let v_593: bitstring = catch-fail((if success?(1-proj-2-tuple(v_583)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then (if not-caught-fail(v_591) then (if not-caught-fail(v_592) then (1-proj-2-tuple(v_583),v_591,v_592) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let (hs_594: handshakestate,re_595: key,message_c_596: bitstring,cs1_597: cipherstate,cs2_598: cipherstate) = (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-7-tuple(v_566))))) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if not-caught-fail(v_574) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-2-tuple(v_583))))) then (if not-caught-fail(v_584) then (if not-caught-fail(v_585) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (v_584,5-proj-7-tuple(v_566),v_585,2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {203}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {204}insert statestore(alice,charlie,statepack_d(hs_594));
        {205}out(pub, message_c_596)
    ) | (
        {207}event LeakS(phase0,alice);
        {208}out(pub, key_s(alice))
    ) | (
        {209}phase 1;
        {210}event LeakS(phase1,alice);
        {211}out(pub, key_s(alice))
    )
) | (
    {212}let s_599: keypair = keypairpack(empty,empty) in
    (
        {213}let e_600: keypair = keypairpack(empty,empty) in
        {214}let v_601: key = catch-fail(dhexp(key_s(alice),g)) in
        {215}let rs_602: key = getpublickey((if not-caught-fail(v_601) then keypairpack(v_601,key_s(alice)) else fail-any)) in
        {216}let re_603: key = empty in
        {217}let v_604: bitstring = catch-fail(hash(somename,empty)) in
        {218}let v_605: key = catch-fail(v_604) in
        {219}let v_606: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {220}let v_607: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then symmetricstatepack(v_606,v_605,v_604) else fail-any) else fail-any) else fail-any))) in
        {221}let v_608: symmetricstate = catch-fail((if success?((if not-caught-fail(v_604) then (if not-caught-fail(v_605) then (if not-caught-fail(v_606) then symmetricstatepack(v_606,v_605,v_604) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then symmetricstatepack(1-proj-3-tuple(v_607),2-proj-3-tuple(v_607),hash(3-proj-3-tuple(v_607),empty)) else fail-any) else fail-any)) in
        {222}let v_609: bitstring = catch-fail(symmetricstateunpack(v_608)) in
        {223}let v_610: symmetricstate = catch-fail((if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-3-tuple(v_609))))) then symmetricstatepack(1-proj-3-tuple(v_609),2-proj-3-tuple(v_609),hash(3-proj-3-tuple(v_609),rs_602)) else fail-any)) in
        {224}let hs_611: handshakestate = (if not-caught-fail(v_608) then (if not-caught-fail(v_610) then handshakestatepack(v_610,s_599,e_600,rs_602,re_603,empty,false) else fail-any) else fail-any) in
        {225}insert statestore(bob,alice,statepack_a(hs_611))
    ) | (
        {247}get statestore(=bob,=alice,statepack_a(hs_612: handshakestate)) in
        {226}in(pub, message_a_613: bitstring);
        {227}let v_614: bitstring = catch-fail(handshakestateunpack(hs_612)) in
        {228}let v_615: bitstring = catch-fail(deconcat3(message_a_613)) in
        {229}let v_616: bool = catch-fail(true) in
        {230}let v_617: key = catch-fail(1-proj-3-tuple(v_615)) in
        {231}let v_618: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_614))) in
        {232}let v_619: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_614)) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack(1-proj-3-tuple(v_618),2-proj-3-tuple(v_618),hash(3-proj-3-tuple(v_618),v_617)) else fail-any) else fail-any)) in
        {233}let v_620: bitstring = catch-fail(symmetricstateunpack(v_619)) in
        {234}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {235}let v_622: aead = catch-fail(decrypt(1-proj-2-tuple(v_621),2-proj-2-tuple(v_621),3-proj-3-tuple(v_620),3-proj-3-tuple(v_615))) in
        {236}let v_623: bitstring = catch-fail(aeadunpack(v_622)) in
        {237}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {238}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_621))) && success?(1-proj-3-tuple(v_620))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_621))) else fail-any) else fail-any)) in
        {239}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_615)) && (success?(3-proj-3-tuple(v_620)) && success?(1-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_622) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,3-proj-3-tuple(v_623),1-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {240}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) in
        {241}let v_628: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_615)) && success?(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),3-proj-3-tuple(v_615))) else fail-any) else fail-any)) in
        {242}let v_629: bitstring = catch-fail((if success?(3-proj-3-tuple(v_615)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {243}let v_630: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_629),2-proj-7-tuple(v_614),3-proj-7-tuple(v_614),4-proj-7-tuple(v_614),v_617,6-proj-7-tuple(v_614),7-proj-7-tuple(v_614))) in
        {244}let (hs_631: handshakestate,re_632: key,plaintext_a: bitstring,valid_633: bool) = (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-7-tuple(v_614))))) then (if (not-caught-fail(v_615) && success?(is-true(success?(1-proj-3-tuple(v_615))))) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (if not-caught-fail(v_619) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (v_616 && 3-proj-3-tuple(v_629)) then (if not-caught-fail(v_630) then (v_630,getpublickey(3-proj-7-tuple(v_614)),2-proj-3-tuple(v_629),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {245}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_633);
        {246}insert statestore(bob,alice,statepack_b(hs_631))
    ) | (
        {277}get statestore(=bob,=alice,statepack_b(hs_634: handshakestate)) in
        {248}let v_635: bitstring = catch-fail(handshakestateunpack(hs_634)) in
        {249}let v_636: bitstring = catch-fail((empty,empty,empty)) in
        {250}let v_637: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {251}let v_638: keypair = catch-fail((if not-caught-fail(v_637) then keypairpack(v_637,key_e(bob,alice)) else fail-any)) in
        {252}let v_639: bitstring = catch-fail(getpublickey(v_638)) in
        {253}let v_640: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_635))) in
        {254}let v_641: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_635)) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then symmetricstatepack(1-proj-3-tuple(v_640),2-proj-3-tuple(v_640),hash(3-proj-3-tuple(v_640),v_639)) else fail-any) else fail-any)) in
        {255}let v_642: bitstring = catch-fail(keypairunpack(v_638)) in
        {256}let v_643: bitstring = catch-fail(symmetricstateunpack(v_641)) in
        {257}let v_644: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_643),(if success?(5-proj-7-tuple(v_635)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),5-proj-7-tuple(v_635)) else fail-any) else fail-any))) in
        {258}let v_645: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_643),(if success?(5-proj-7-tuple(v_635)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),5-proj-7-tuple(v_635)) else fail-any) else fail-any))) in
        {259}let v_646: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_643),(if success?(5-proj-7-tuple(v_635)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),5-proj-7-tuple(v_635)) else fail-any) else fail-any))) in
        {260}let v_647: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_635)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),5-proj-7-tuple(v_635)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_643))) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then (if not-caught-fail(v_646) then (v_644,v_645,v_646) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {261}let v_648: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_635)) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-2-tuple(v_642))))) then dhexp(2-proj-2-tuple(v_642),5-proj-7-tuple(v_635)) else fail-any) else fail-any)) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_647)) then cipherstatepack(2-proj-3-tuple(v_647),minnonce) else fail-any),1-proj-3-tuple(v_647),3-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any)) in
        {262}let v_649: bitstring = catch-fail(symmetricstateunpack(v_648)) in
        {263}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {264}let v_651: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_650),2-proj-2-tuple(v_650),3-proj-3-tuple(v_649),msg_b(bob,alice))) in
        {265}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {266}let v_653: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_650))) && success?(1-proj-3-tuple(v_649))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then cipherstatepack(1-proj-2-tuple(v_652),increment_nonce(2-proj-2-tuple(v_650))) else fail-any) else fail-any)) in
        {267}let v_654: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_649)) && success?(1-proj-3-tuple(v_649))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_651) then (if not-caught-fail(v_653) then (v_653,v_651) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {268}let v_655: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_654),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) in
        {269}let v_656: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_654)) && success?(symmetricstatepack(1-proj-2-tuple(v_654),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_655),hash(3-proj-3-tuple(v_655),2-proj-2-tuple(v_654))) else fail-any) else fail-any)) in
        {270}let v_657: bitstring = catch-fail((if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-2-tuple(v_654))))) then (if not-caught-fail(v_656) then (v_656,2-proj-2-tuple(v_654)) else fail-any) else fail-any) else fail-any)) in
        {271}let v_658: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_657),2-proj-7-tuple(v_635),v_638,4-proj-7-tuple(v_635),5-proj-7-tuple(v_635),6-proj-7-tuple(v_635),7-proj-7-tuple(v_635))) in
        {272}let v_659: bitstring = catch-fail(concat3(v_639,2-proj-3-tuple(v_636),2-proj-2-tuple(v_657))) in
        {273}let (hs_660: handshakestate,re_661: key,message_b_662: bitstring) = (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-7-tuple(v_635))))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (if not-caught-fail(v_641) then (if not-caught-fail(v_648) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-2-tuple(v_657))))) then (if not-caught-fail(v_658) then (if not-caught-fail(v_659) then (v_658,5-proj-7-tuple(v_635),v_659) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {274}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {275}insert statestore(bob,alice,statepack_c(hs_660));
        {276}out(pub, message_b_662)
    ) | (
        {312}get statestore(=bob,=alice,statepack_c(hs_663: handshakestate)) in
        {278}in(pub, message_c_664: bitstring);
        {279}let v_665: bitstring = catch-fail(handshakestateunpack(hs_663)) in
        {280}let v_666: bitstring = catch-fail(deconcat3(message_c_664)) in
        {281}let v_667: bool = catch-fail(true) in
        {282}let v_668: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_665))) in
        {283}let v_669: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_665))) in
        {284}let v_670: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_669),(if (success?(4-proj-7-tuple(v_665)) && success?(3-proj-7-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then dhexp(2-proj-2-tuple(v_668),4-proj-7-tuple(v_665)) else fail-any) else fail-any))) in
        {285}let v_671: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_669),(if (success?(4-proj-7-tuple(v_665)) && success?(3-proj-7-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then dhexp(2-proj-2-tuple(v_668),4-proj-7-tuple(v_665)) else fail-any) else fail-any))) in
        {286}let v_672: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_669),(if (success?(4-proj-7-tuple(v_665)) && success?(3-proj-7-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then dhexp(2-proj-2-tuple(v_668),4-proj-7-tuple(v_665)) else fail-any) else fail-any))) in
        {287}let v_673: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_665)) && success?(3-proj-7-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then dhexp(2-proj-2-tuple(v_668),4-proj-7-tuple(v_665)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_669))) then (if not-caught-fail(v_670) then (if not-caught-fail(v_671) then (if not-caught-fail(v_672) then (v_670,v_671,v_672) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {288}let v_674: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_665)) && success?(3-proj-7-tuple(v_665))) then (if (not-caught-fail(v_668) && success?(is-true(success?(1-proj-2-tuple(v_668))))) then dhexp(2-proj-2-tuple(v_668),4-proj-7-tuple(v_665)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_665))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_673)) then cipherstatepack(2-proj-3-tuple(v_673),minnonce) else fail-any),1-proj-3-tuple(v_673),3-proj-3-tuple(v_669)) else fail-any) else fail-any) else fail-any)) in
        {289}let v_675: bitstring = catch-fail(symmetricstateunpack(v_674)) in
        {290}let v_676: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {291}let v_677: aead = catch-fail(decrypt(1-proj-2-tuple(v_676),2-proj-2-tuple(v_676),3-proj-3-tuple(v_675),3-proj-3-tuple(v_666))) in
        {292}let v_678: bitstring = catch-fail(aeadunpack(v_677)) in
        {293}let v_679: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_675))) in
        {294}let v_680: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_676))) && success?(1-proj-3-tuple(v_675))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-2-tuple(v_679))))) then cipherstatepack(1-proj-2-tuple(v_679),increment_nonce(2-proj-2-tuple(v_676))) else fail-any) else fail-any)) in
        {295}let v_681: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_666)) && (success?(3-proj-3-tuple(v_675)) && success?(1-proj-3-tuple(v_675)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-2-tuple(v_676))))) then (if not-caught-fail(v_677) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if not-caught-fail(v_680) then (v_680,3-proj-3-tuple(v_678),1-proj-3-tuple(v_678)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let v_682: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) in
        {297}let v_683: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_666)) && success?(symmetricstatepack(1-proj-3-tuple(v_681),2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),3-proj-3-tuple(v_666))) else fail-any) else fail-any)) in
        {298}let v_684: bitstring = catch-fail((if success?(3-proj-3-tuple(v_666)) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if (not-caught-fail(v_681) && success?(is-true(success?(1-proj-3-tuple(v_681))))) then (if not-caught-fail(v_683) then (v_683,2-proj-3-tuple(v_681),3-proj-3-tuple(v_681)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {299}let v_685: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_684),2-proj-7-tuple(v_665),3-proj-7-tuple(v_665),4-proj-7-tuple(v_665),5-proj-7-tuple(v_665),6-proj-7-tuple(v_665),7-proj-7-tuple(v_665))) in
        {300}let v_686: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_684))) in
        {301}let v_687: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_686),zero)) in
        {302}let v_688: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_686),zero)) in
        {303}let v_689: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_686),zero)) in
        {304}let v_690: bitstring = catch-fail((if success?(2-proj-3-tuple(v_686)) then (if not-caught-fail(v_687) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (v_687,v_688,v_689) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {305}let v_691: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_690)) then cipherstatepack(1-proj-3-tuple(v_690),minnonce) else fail-any)) in
        {306}let v_692: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_690)) then cipherstatepack(2-proj-3-tuple(v_690),minnonce) else fail-any)) in
        {307}let v_693: bitstring = catch-fail((if success?(1-proj-3-tuple(v_684)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (1-proj-3-tuple(v_684),v_691,v_692) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {308}let (hs_694: handshakestate,re_695: key,plaintext_c: bitstring,valid_696: bool,cs1_697: cipherstate,cs2_698: cipherstate) = (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-7-tuple(v_665))))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then (if not-caught-fail(v_667) then (if not-caught-fail(v_674) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if (v_667 && 3-proj-3-tuple(v_684)) then (if not-caught-fail(v_685) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then (v_685,getpublickey(3-proj-7-tuple(v_665)),2-proj-3-tuple(v_684),true,2-proj-3-tuple(v_693),3-proj-3-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {309}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_696);
        {310}insert statestore(bob,alice,statepack_d(hs_694));
        {311}event RecvEnd(valid_696)
    ) | (
        {313}event LeakS(phase0,bob);
        {314}out(pub, key_s(bob))
    ) | (
        {315}phase 1;
        {316}event LeakS(phase1,bob);
        {317}out(pub, key_s(bob))
    )
) | (
    {318}let s_699: keypair = keypairpack(empty,empty) in
    (
        {319}let e_700: keypair = keypairpack(empty,empty) in
        {320}let v_701: key = catch-fail(dhexp(key_s(charlie),g)) in
        {321}let rs_702: key = getpublickey((if not-caught-fail(v_701) then keypairpack(v_701,key_s(charlie)) else fail-any)) in
        {322}let re_703: key = empty in
        {323}let v_704: bitstring = catch-fail(hash(somename,empty)) in
        {324}let v_705: key = catch-fail(v_704) in
        {325}let v_706: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {326}let v_707: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then symmetricstatepack(v_706,v_705,v_704) else fail-any) else fail-any) else fail-any))) in
        {327}let v_708: symmetricstate = catch-fail((if success?((if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (if not-caught-fail(v_706) then symmetricstatepack(v_706,v_705,v_704) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-3-tuple(v_707))))) then symmetricstatepack(1-proj-3-tuple(v_707),2-proj-3-tuple(v_707),hash(3-proj-3-tuple(v_707),empty)) else fail-any) else fail-any)) in
        {328}let v_709: bitstring = catch-fail(symmetricstateunpack(v_708)) in
        {329}let v_710: symmetricstate = catch-fail((if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_709),hash(3-proj-3-tuple(v_709),rs_702)) else fail-any)) in
        {330}let hs_711: handshakestate = (if not-caught-fail(v_708) then (if not-caught-fail(v_710) then handshakestatepack(v_710,s_699,e_700,rs_702,re_703,empty,false) else fail-any) else fail-any) in
        {331}insert statestore(bob,charlie,statepack_a(hs_711))
    ) | (
        {353}get statestore(=bob,=charlie,statepack_a(hs_712: handshakestate)) in
        {332}in(pub, message_a_713: bitstring);
        {333}let v_714: bitstring = catch-fail(handshakestateunpack(hs_712)) in
        {334}let v_715: bitstring = catch-fail(deconcat3(message_a_713)) in
        {335}let v_716: bool = catch-fail(true) in
        {336}let v_717: key = catch-fail(1-proj-3-tuple(v_715)) in
        {337}let v_718: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_714))) in
        {338}let v_719: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_714)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then symmetricstatepack(1-proj-3-tuple(v_718),2-proj-3-tuple(v_718),hash(3-proj-3-tuple(v_718),v_717)) else fail-any) else fail-any)) in
        {339}let v_720: bitstring = catch-fail(symmetricstateunpack(v_719)) in
        {340}let v_721: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_720))) in
        {341}let v_722: aead = catch-fail(decrypt(1-proj-2-tuple(v_721),2-proj-2-tuple(v_721),3-proj-3-tuple(v_720),3-proj-3-tuple(v_715))) in
        {342}let v_723: bitstring = catch-fail(aeadunpack(v_722)) in
        {343}let v_724: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_720))) in
        {344}let v_725: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_721))) && success?(1-proj-3-tuple(v_720))) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-2-tuple(v_724))))) then cipherstatepack(1-proj-2-tuple(v_724),increment_nonce(2-proj-2-tuple(v_721))) else fail-any) else fail-any)) in
        {345}let v_726: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_715)) && (success?(3-proj-3-tuple(v_720)) && success?(1-proj-3-tuple(v_720)))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-2-tuple(v_721))))) then (if not-caught-fail(v_722) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then (if not-caught-fail(v_725) then (v_725,3-proj-3-tuple(v_723),1-proj-3-tuple(v_723)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {346}let v_727: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_726),2-proj-3-tuple(v_720),3-proj-3-tuple(v_720)))) in
        {347}let v_728: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_715)) && success?(symmetricstatepack(1-proj-3-tuple(v_726),2-proj-3-tuple(v_720),3-proj-3-tuple(v_720)))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then symmetricstatepack(1-proj-3-tuple(v_727),2-proj-3-tuple(v_727),hash(3-proj-3-tuple(v_727),3-proj-3-tuple(v_715))) else fail-any) else fail-any)) in
        {348}let v_729: bitstring = catch-fail((if success?(3-proj-3-tuple(v_715)) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-3-tuple(v_726))))) then (if not-caught-fail(v_728) then (v_728,2-proj-3-tuple(v_726),3-proj-3-tuple(v_726)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {349}let v_730: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_729),2-proj-7-tuple(v_714),3-proj-7-tuple(v_714),4-proj-7-tuple(v_714),v_717,6-proj-7-tuple(v_714),7-proj-7-tuple(v_714))) in
        {350}let (hs_731: handshakestate,re_732: key,plaintext_a_733: bitstring,valid_734: bool) = (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-7-tuple(v_714))))) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (if not-caught-fail(v_719) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-3-tuple(v_729))))) then (if (v_716 && 3-proj-3-tuple(v_729)) then (if not-caught-fail(v_730) then (v_730,getpublickey(3-proj-7-tuple(v_714)),2-proj-3-tuple(v_729),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {351}event RecvMsg(bob,charlie,stage_a,plaintext_a_733,valid_734);
        {352}insert statestore(bob,charlie,statepack_b(hs_731))
    ) | (
        {383}get statestore(=bob,=charlie,statepack_b(hs_735: handshakestate)) in
        {354}let v_736: bitstring = catch-fail(handshakestateunpack(hs_735)) in
        {355}let v_737: bitstring = catch-fail((empty,empty,empty)) in
        {356}let v_738: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {357}let v_739: keypair = catch-fail((if not-caught-fail(v_738) then keypairpack(v_738,key_e(bob,charlie)) else fail-any)) in
        {358}let v_740: bitstring = catch-fail(getpublickey(v_739)) in
        {359}let v_741: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_736))) in
        {360}let v_742: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_736)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_741),hash(3-proj-3-tuple(v_741),v_740)) else fail-any) else fail-any)) in
        {361}let v_743: bitstring = catch-fail(keypairunpack(v_739)) in
        {362}let v_744: bitstring = catch-fail(symmetricstateunpack(v_742)) in
        {363}let v_745: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_744),(if success?(5-proj-7-tuple(v_736)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {364}let v_746: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_744),(if success?(5-proj-7-tuple(v_736)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {365}let v_747: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_744),(if success?(5-proj-7-tuple(v_736)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_736)) else fail-any) else fail-any))) in
        {366}let v_748: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_736)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_736)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_744))) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (v_745,v_746,v_747) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {367}let v_749: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_736)) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),5-proj-7-tuple(v_736)) else fail-any) else fail-any)) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_748)) then cipherstatepack(2-proj-3-tuple(v_748),minnonce) else fail-any),1-proj-3-tuple(v_748),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any)) in
        {368}let v_750: bitstring = catch-fail(symmetricstateunpack(v_749)) in
        {369}let v_751: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {370}let v_752: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_751),2-proj-2-tuple(v_751),3-proj-3-tuple(v_750),msg_b(bob,charlie))) in
        {371}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {372}let v_754: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_751))) && success?(1-proj-3-tuple(v_750))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then cipherstatepack(1-proj-2-tuple(v_753),increment_nonce(2-proj-2-tuple(v_751))) else fail-any) else fail-any)) in
        {373}let v_755: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_750)) && success?(1-proj-3-tuple(v_750))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then (if not-caught-fail(v_752) then (if not-caught-fail(v_754) then (v_754,v_752) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {374}let v_756: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_755),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) in
        {375}let v_757: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_755)) && success?(symmetricstatepack(1-proj-2-tuple(v_755),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_756),hash(3-proj-3-tuple(v_756),2-proj-2-tuple(v_755))) else fail-any) else fail-any)) in
        {376}let v_758: bitstring = catch-fail((if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then (if not-caught-fail(v_757) then (v_757,2-proj-2-tuple(v_755)) else fail-any) else fail-any) else fail-any)) in
        {377}let v_759: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_758),2-proj-7-tuple(v_736),v_739,4-proj-7-tuple(v_736),5-proj-7-tuple(v_736),6-proj-7-tuple(v_736),7-proj-7-tuple(v_736))) in
        {378}let v_760: bitstring = catch-fail(concat3(v_740,2-proj-3-tuple(v_737),2-proj-2-tuple(v_758))) in
        {379}let (hs_761: handshakestate,re_762: key,message_b_763: bitstring) = (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-7-tuple(v_736))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (if not-caught-fail(v_742) then (if not-caught-fail(v_749) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then (if not-caught-fail(v_759) then (if not-caught-fail(v_760) then (v_759,5-proj-7-tuple(v_736),v_760) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {380}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {381}insert statestore(bob,charlie,statepack_c(hs_761));
        {382}out(pub, message_b_763)
    ) | (
        {418}get statestore(=bob,=charlie,statepack_c(hs_764: handshakestate)) in
        {384}in(pub, message_c_765: bitstring);
        {385}let v_766: bitstring = catch-fail(handshakestateunpack(hs_764)) in
        {386}let v_767: bitstring = catch-fail(deconcat3(message_c_765)) in
        {387}let v_768: bool = catch-fail(true) in
        {388}let v_769: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_766))) in
        {389}let v_770: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_766))) in
        {390}let v_771: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_770),(if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any))) in
        {391}let v_772: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_770),(if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any))) in
        {392}let v_773: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_770),(if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any))) in
        {393}let v_774: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_770))) then (if not-caught-fail(v_771) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (v_771,v_772,v_773) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {394}let v_775: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_766)) && success?(3-proj-7-tuple(v_766))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-2-tuple(v_769))))) then dhexp(2-proj-2-tuple(v_769),4-proj-7-tuple(v_766)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_766))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-3-tuple(v_770))))) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_774)) then cipherstatepack(2-proj-3-tuple(v_774),minnonce) else fail-any),1-proj-3-tuple(v_774),3-proj-3-tuple(v_770)) else fail-any) else fail-any) else fail-any)) in
        {395}let v_776: bitstring = catch-fail(symmetricstateunpack(v_775)) in
        {396}let v_777: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {397}let v_778: aead = catch-fail(decrypt(1-proj-2-tuple(v_777),2-proj-2-tuple(v_777),3-proj-3-tuple(v_776),3-proj-3-tuple(v_767))) in
        {398}let v_779: bitstring = catch-fail(aeadunpack(v_778)) in
        {399}let v_780: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_776))) in
        {400}let v_781: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_777))) && success?(1-proj-3-tuple(v_776))) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then cipherstatepack(1-proj-2-tuple(v_780),increment_nonce(2-proj-2-tuple(v_777))) else fail-any) else fail-any)) in
        {401}let v_782: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_767)) && (success?(3-proj-3-tuple(v_776)) && success?(1-proj-3-tuple(v_776)))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then (if not-caught-fail(v_778) then (if (not-caught-fail(v_779) && success?(is-true(success?(1-proj-3-tuple(v_779))))) then (if not-caught-fail(v_781) then (v_781,3-proj-3-tuple(v_779),1-proj-3-tuple(v_779)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {402}let v_783: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) in
        {403}let v_784: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_767)) && success?(symmetricstatepack(1-proj-3-tuple(v_782),2-proj-3-tuple(v_776),3-proj-3-tuple(v_776)))) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-3-tuple(v_783))))) then symmetricstatepack(1-proj-3-tuple(v_783),2-proj-3-tuple(v_783),hash(3-proj-3-tuple(v_783),3-proj-3-tuple(v_767))) else fail-any) else fail-any)) in
        {404}let v_785: bitstring = catch-fail((if success?(3-proj-3-tuple(v_767)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-3-tuple(v_776))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_784) then (v_784,2-proj-3-tuple(v_782),3-proj-3-tuple(v_782)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {405}let v_786: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_785),2-proj-7-tuple(v_766),3-proj-7-tuple(v_766),4-proj-7-tuple(v_766),5-proj-7-tuple(v_766),6-proj-7-tuple(v_766),7-proj-7-tuple(v_766))) in
        {406}let v_787: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_785))) in
        {407}let v_788: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_787),zero)) in
        {408}let v_789: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_787),zero)) in
        {409}let v_790: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_787),zero)) in
        {410}let v_791: bitstring = catch-fail((if success?(2-proj-3-tuple(v_787)) then (if not-caught-fail(v_788) then (if not-caught-fail(v_789) then (if not-caught-fail(v_790) then (v_788,v_789,v_790) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {411}let v_792: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_791)) then cipherstatepack(1-proj-3-tuple(v_791),minnonce) else fail-any)) in
        {412}let v_793: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_791)) then cipherstatepack(2-proj-3-tuple(v_791),minnonce) else fail-any)) in
        {413}let v_794: bitstring = catch-fail((if success?(1-proj-3-tuple(v_785)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then (if not-caught-fail(v_792) then (if not-caught-fail(v_793) then (1-proj-3-tuple(v_785),v_792,v_793) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {414}let (hs_795: handshakestate,re_796: key,plaintext_c_797: bitstring,valid_798: bool,cs1_799: cipherstate,cs2_800: cipherstate) = (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-7-tuple(v_766))))) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if not-caught-fail(v_768) then (if not-caught-fail(v_775) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (if (v_768 && 3-proj-3-tuple(v_785)) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then (v_786,getpublickey(3-proj-7-tuple(v_766)),2-proj-3-tuple(v_785),true,2-proj-3-tuple(v_794),3-proj-3-tuple(v_794)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {415}event RecvMsg(bob,charlie,stage_c,plaintext_c_797,valid_798);
        {416}insert statestore(bob,charlie,statepack_d(hs_795));
        {417}event RecvEnd(valid_798)
    ) | (
        {419}event LeakS(phase0,bob);
        {420}out(pub, key_s(bob))
    ) | (
        {421}phase 1;
        {422}event LeakS(phase1,bob);
        {423}out(pub, key_s(bob))
    )
) | (
    {424}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 153 rules in the queue.
400 rules inserted. The rule base contains 386 rules. 20 rules in the queue.
600 rules inserted. The rule base contains 578 rules. 100 rules in the queue.
800 rules inserted. The rule base contains 746 rules. 61 rules in the queue.
1000 rules inserted. The rule base contains 856 rules. 56 rules in the queue.
1200 rules inserted. The rule base contains 1017 rules. 104 rules in the queue.
1400 rules inserted. The rule base contains 1105 rules. 91 rules in the queue.
1600 rules inserted. The rule base contains 1250 rules. 112 rules in the queue.
1800 rules inserted. The rule base contains 1408 rules. 138 rules in the queue.
2000 rules inserted. The rule base contains 1521 rules. 94 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {245}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_881,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {245}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {245}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

7. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

8. By 1, the attacker may have the channel pub.
By 7, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 6, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

15. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

16. By 9, the attacker may know empty.
By 15, the attacker may know minnonce.
By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

17. By 16, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob).
attacker(msg_a(alice,bob)).

18. By 17, the attacker may know msg_a(alice,bob).
So the attacker may know msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_881,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {246}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {277}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {274}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {275}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {142}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {246}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {277}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {274}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {276}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {173}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {145}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {172}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {206}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {203}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {205}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {312}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {278}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {309}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_881,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {246}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {277}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {274}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {275}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {142}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {246}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {277}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {274}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {276}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {173}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {145}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {172}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {206}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {203}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {205}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {312}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {278}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {309}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {246}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {277}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {274}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {275}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {142}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {121}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {144}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {141}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {143}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {247}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {226}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {246}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {277}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {274}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {276}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {173}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {145}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {172}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {206}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {203}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {205}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {312}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {278}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {309}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {247}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 3 may be received at input {226}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {246}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 4 may be read at get {277}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {274}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {275}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

6. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {37}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {225}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {247}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 10 may be received at input {226}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {246}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 11 may be read at get {277}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {274}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {276}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {68}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {40}.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {67}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {101}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {98}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {100}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 5 may be read at get {312}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,bob),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,bob))) that may be sent on channel pub by 14 may be received at input {278}.
So event RecvEnd(true) may be executed at {311}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
