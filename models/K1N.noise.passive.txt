File "K1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "K1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "K1N.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "K1N.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "K1N.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "K1N.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 337, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 338, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 347, characters 6-7:
Warning: identifier re rebound.
File "K1N.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 360, characters 6-7:
Warning: identifier re rebound.
File "K1N.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 385, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 387, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 534, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 385, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 387, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 526, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 328, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 329, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 329, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 330, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 519, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 360, characters 6-7:
Warning: identifier re rebound.
File "K1N.noise.passive.pv", line 361, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 363, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 364, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 366, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 511, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "K1N.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "K1N.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 307, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 307, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 308, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 584, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 337, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 337, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 338, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 577, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 374, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 375, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 377, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 569, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 315, character 6:
Warning: identifier e rebound.
File "K1N.noise.passive.pv", line 316, characters 6-7:
Warning: identifier ne rebound.
File "K1N.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 319, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "K1N.noise.passive.pv", line 321, characters 6-7:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "K1N.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 562, characters 8-9:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 347, characters 6-7:
Warning: identifier re rebound.
File "K1N.noise.passive.pv", line 348, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 350, characters 7-8:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 352, characters 7-8:
Warning: identifier hs rebound.
File "K1N.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "K1N.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "K1N.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let v_446: key = catch-fail(dhexp(key_s(alice),g)) in
    {3}let s_447: keypair = (if not-caught-fail(v_446) then keypairpack(v_446,key_s(alice)) else fail-any) in
    {4}out(pub, getpublickey(s_447));
    (
        {5}let e_448: keypair = keypairpack(empty,empty) in
        {6}let rs_449: key = empty in
        {7}let re_450: key = empty in
        {8}let v_451: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_452: key = catch-fail(v_451) in
        {10}let v_453: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_454: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_451) then (if not-caught-fail(v_452) then (if not-caught-fail(v_453) then symmetricstatepack(v_453,v_452,v_451) else fail-any) else fail-any) else fail-any))) in
        {12}let v_455: symmetricstate = catch-fail((if success?((if not-caught-fail(v_451) then (if not-caught-fail(v_452) then (if not-caught-fail(v_453) then symmetricstatepack(v_453,v_452,v_451) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_454) && success?(is-true(success?(1-proj-3-tuple(v_454))))) then symmetricstatepack(1-proj-3-tuple(v_454),2-proj-3-tuple(v_454),hash(3-proj-3-tuple(v_454),empty)) else fail-any) else fail-any)) in
        {13}let v_456: bitstring = catch-fail(symmetricstateunpack(v_455)) in
        {14}let v_457: symmetricstate = catch-fail((if success?(getpublickey(s_447)) then (if (not-caught-fail(v_456) && success?(is-true(success?(1-proj-3-tuple(v_456))))) then symmetricstatepack(1-proj-3-tuple(v_456),2-proj-3-tuple(v_456),hash(3-proj-3-tuple(v_456),getpublickey(s_447))) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_455) then (if not-caught-fail(v_457) then handshakestatepack(v_457,s_447,e_448,rs_449,re_450,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {39}get statestore(=alice,=bob,statepack_a(hs_458: handshakestate)) in
        {17}let v_459: bitstring = catch-fail(handshakestateunpack(hs_458)) in
        {18}let v_460: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_461: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_462: keypair = catch-fail((if not-caught-fail(v_461) then keypairpack(v_461,key_e(alice,bob)) else fail-any)) in
        {21}let v_463: bitstring = catch-fail(getpublickey(v_462)) in
        {22}let v_464: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_459))) in
        {23}let v_465: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_459)) then (if (not-caught-fail(v_464) && success?(is-true(success?(1-proj-3-tuple(v_464))))) then symmetricstatepack(1-proj-3-tuple(v_464),2-proj-3-tuple(v_464),hash(3-proj-3-tuple(v_464),v_463)) else fail-any) else fail-any)) in
        {24}let v_466: bitstring = catch-fail(symmetricstateunpack(v_465)) in
        {25}let v_467: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_466))) in
        {26}let v_468: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_467),2-proj-2-tuple(v_467),3-proj-3-tuple(v_466),msg_a(alice,bob))) in
        {27}let v_469: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_466))) in
        {28}let v_470: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_467))) && success?(1-proj-3-tuple(v_466))) then (if (not-caught-fail(v_469) && success?(is-true(success?(1-proj-2-tuple(v_469))))) then cipherstatepack(1-proj-2-tuple(v_469),increment_nonce(2-proj-2-tuple(v_467))) else fail-any) else fail-any)) in
        {29}let v_471: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_466)) && success?(1-proj-3-tuple(v_466))) then (if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-2-tuple(v_467))))) then (if not-caught-fail(v_468) then (if not-caught-fail(v_470) then (v_470,v_468) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_472: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_471),2-proj-3-tuple(v_466),3-proj-3-tuple(v_466)))) in
        {31}let v_473: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_471)) && success?(symmetricstatepack(1-proj-2-tuple(v_471),2-proj-3-tuple(v_466),3-proj-3-tuple(v_466)))) then (if (not-caught-fail(v_472) && success?(is-true(success?(1-proj-3-tuple(v_472))))) then symmetricstatepack(1-proj-3-tuple(v_472),2-proj-3-tuple(v_472),hash(3-proj-3-tuple(v_472),2-proj-2-tuple(v_471))) else fail-any) else fail-any)) in
        {32}let v_474: bitstring = catch-fail((if (not-caught-fail(v_466) && success?(is-true(success?(1-proj-3-tuple(v_466))))) then (if (not-caught-fail(v_471) && success?(is-true(success?(1-proj-2-tuple(v_471))))) then (if not-caught-fail(v_473) then (v_473,2-proj-2-tuple(v_471)) else fail-any) else fail-any) else fail-any)) in
        {33}let v_475: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_474),2-proj-7-tuple(v_459),v_462,4-proj-7-tuple(v_459),5-proj-7-tuple(v_459),6-proj-7-tuple(v_459),7-proj-7-tuple(v_459))) in
        {34}let v_476: bitstring = catch-fail(concat3(v_463,2-proj-3-tuple(v_460),2-proj-2-tuple(v_474))) in
        {35}let (hs_477: handshakestate,re_478: key,message_a: bitstring) = (if (not-caught-fail(v_459) && success?(is-true(success?(1-proj-7-tuple(v_459))))) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-3-tuple(v_460))))) then (if not-caught-fail(v_462) then (if not-caught-fail(v_463) then (if not-caught-fail(v_465) then (if (not-caught-fail(v_474) && success?(is-true(success?(1-proj-2-tuple(v_474))))) then (if not-caught-fail(v_475) then (if not-caught-fail(v_476) then (v_475,5-proj-7-tuple(v_459),v_476) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {36}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {37}insert statestore(alice,bob,statepack_b(hs_477));
        {38}out(pub, message_a)
    ) | (
        {68}get statestore(=alice,=bob,statepack_b(hs_479: handshakestate)) in
        {40}in(pub, message_b: bitstring);
        {41}let v_480: bitstring = catch-fail(handshakestateunpack(hs_479)) in
        {42}let v_481: bitstring = catch-fail(deconcat3(message_b)) in
        {43}let v_482: bool = catch-fail(true) in
        {44}let v_483: key = catch-fail(1-proj-3-tuple(v_481)) in
        {45}let v_484: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_480))) in
        {46}let v_485: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_480)) then (if (not-caught-fail(v_484) && success?(is-true(success?(1-proj-3-tuple(v_484))))) then symmetricstatepack(1-proj-3-tuple(v_484),2-proj-3-tuple(v_484),hash(3-proj-3-tuple(v_484),v_483)) else fail-any) else fail-any)) in
        {47}let v_486: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_480))) in
        {48}let v_487: bitstring = catch-fail(symmetricstateunpack(v_485)) in
        {49}let v_488: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any))) in
        {50}let v_489: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any))) in
        {51}let v_490: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_487),(if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any))) in
        {52}let v_491: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_487))) then (if not-caught-fail(v_488) then (if not-caught-fail(v_489) then (if not-caught-fail(v_490) then (v_488,v_489,v_490) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {53}let v_492: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_480)) then (if (not-caught-fail(v_486) && success?(is-true(success?(1-proj-2-tuple(v_486))))) then dhexp(2-proj-2-tuple(v_486),v_483) else fail-any) else fail-any)) then (if (not-caught-fail(v_487) && success?(is-true(success?(1-proj-3-tuple(v_487))))) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_491)) then cipherstatepack(2-proj-3-tuple(v_491),minnonce) else fail-any),1-proj-3-tuple(v_491),3-proj-3-tuple(v_487)) else fail-any) else fail-any) else fail-any)) in
        {54}let v_493: bitstring = catch-fail(symmetricstateunpack(v_492)) in
        {55}let v_494: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {56}let v_495: aead = catch-fail(decrypt(1-proj-2-tuple(v_494),2-proj-2-tuple(v_494),3-proj-3-tuple(v_493),3-proj-3-tuple(v_481))) in
        {57}let v_496: bitstring = catch-fail(aeadunpack(v_495)) in
        {58}let v_497: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_493))) in
        {59}let v_498: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_494))) && success?(1-proj-3-tuple(v_493))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-2-tuple(v_497))))) then cipherstatepack(1-proj-2-tuple(v_497),increment_nonce(2-proj-2-tuple(v_494))) else fail-any) else fail-any)) in
        {60}let v_499: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_481)) && (success?(3-proj-3-tuple(v_493)) && success?(1-proj-3-tuple(v_493)))) then (if (not-caught-fail(v_494) && success?(is-true(success?(1-proj-2-tuple(v_494))))) then (if not-caught-fail(v_495) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-3-tuple(v_496))))) then (if not-caught-fail(v_498) then (v_498,3-proj-3-tuple(v_496),1-proj-3-tuple(v_496)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_500: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) in
        {62}let v_501: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_481)) && success?(symmetricstatepack(1-proj-3-tuple(v_499),2-proj-3-tuple(v_493),3-proj-3-tuple(v_493)))) then (if (not-caught-fail(v_500) && success?(is-true(success?(1-proj-3-tuple(v_500))))) then symmetricstatepack(1-proj-3-tuple(v_500),2-proj-3-tuple(v_500),hash(3-proj-3-tuple(v_500),3-proj-3-tuple(v_481))) else fail-any) else fail-any)) in
        {63}let v_502: bitstring = catch-fail((if success?(3-proj-3-tuple(v_481)) then (if (not-caught-fail(v_493) && success?(is-true(success?(1-proj-3-tuple(v_493))))) then (if (not-caught-fail(v_499) && success?(is-true(success?(1-proj-3-tuple(v_499))))) then (if not-caught-fail(v_501) then (v_501,2-proj-3-tuple(v_499),3-proj-3-tuple(v_499)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let v_503: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_502),2-proj-7-tuple(v_480),3-proj-7-tuple(v_480),4-proj-7-tuple(v_480),v_483,6-proj-7-tuple(v_480),7-proj-7-tuple(v_480))) in
        {65}let (hs_504: handshakestate,re_505: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_480) && success?(is-true(success?(1-proj-7-tuple(v_480))))) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then (if not-caught-fail(v_482) then (if not-caught-fail(v_483) then (if not-caught-fail(v_485) then (if not-caught-fail(v_492) then (if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then (if (v_482 && 3-proj-3-tuple(v_502)) then (if not-caught-fail(v_503) then (v_503,getpublickey(3-proj-7-tuple(v_480)),2-proj-3-tuple(v_502),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {66}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {67}insert statestore(alice,bob,statepack_c(hs_504))
    ) | (
        {93}get statestore(=alice,=bob,statepack_c(hs_506: handshakestate)) in
        {69}let v_507: bitstring = catch-fail(handshakestateunpack(hs_506)) in
        {70}let v_508: bitstring = catch-fail((empty,empty,empty)) in
        {71}let v_509: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_507))) in
        {72}let v_510: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_507))) in
        {73}let v_511: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_510),(if (success?(5-proj-7-tuple(v_507)) && success?(2-proj-7-tuple(v_507))) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),5-proj-7-tuple(v_507)) else fail-any) else fail-any))) in
        {74}let v_512: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_510),(if (success?(5-proj-7-tuple(v_507)) && success?(2-proj-7-tuple(v_507))) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),5-proj-7-tuple(v_507)) else fail-any) else fail-any))) in
        {75}let v_513: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_510),(if (success?(5-proj-7-tuple(v_507)) && success?(2-proj-7-tuple(v_507))) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),5-proj-7-tuple(v_507)) else fail-any) else fail-any))) in
        {76}let v_514: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_507)) && success?(2-proj-7-tuple(v_507))) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),5-proj-7-tuple(v_507)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_510))) then (if not-caught-fail(v_511) then (if not-caught-fail(v_512) then (if not-caught-fail(v_513) then (v_511,v_512,v_513) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {77}let v_515: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_507)) && success?(2-proj-7-tuple(v_507))) then (if (not-caught-fail(v_509) && success?(is-true(success?(1-proj-2-tuple(v_509))))) then dhexp(2-proj-2-tuple(v_509),5-proj-7-tuple(v_507)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_507))) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-3-tuple(v_510))))) then (if (not-caught-fail(v_514) && success?(is-true(success?(1-proj-3-tuple(v_514))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_514)) then cipherstatepack(2-proj-3-tuple(v_514),minnonce) else fail-any),1-proj-3-tuple(v_514),3-proj-3-tuple(v_510)) else fail-any) else fail-any) else fail-any)) in
        {78}let v_516: bitstring = catch-fail(symmetricstateunpack(v_515)) in
        {79}let v_517: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_516))) in
        {80}let v_518: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_517),2-proj-2-tuple(v_517),3-proj-3-tuple(v_516),msg_c(alice,bob))) in
        {81}let v_519: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_516))) in
        {82}let v_520: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_517))) && success?(1-proj-3-tuple(v_516))) then (if (not-caught-fail(v_519) && success?(is-true(success?(1-proj-2-tuple(v_519))))) then cipherstatepack(1-proj-2-tuple(v_519),increment_nonce(2-proj-2-tuple(v_517))) else fail-any) else fail-any)) in
        {83}let v_521: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_516)) && success?(1-proj-3-tuple(v_516))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then (if not-caught-fail(v_518) then (if not-caught-fail(v_520) then (v_520,v_518) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {84}let v_522: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_521),2-proj-3-tuple(v_516),3-proj-3-tuple(v_516)))) in
        {85}let v_523: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_521)) && success?(symmetricstatepack(1-proj-2-tuple(v_521),2-proj-3-tuple(v_516),3-proj-3-tuple(v_516)))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then symmetricstatepack(1-proj-3-tuple(v_522),2-proj-3-tuple(v_522),hash(3-proj-3-tuple(v_522),2-proj-2-tuple(v_521))) else fail-any) else fail-any)) in
        {86}let v_524: bitstring = catch-fail((if (not-caught-fail(v_516) && success?(is-true(success?(1-proj-3-tuple(v_516))))) then (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-2-tuple(v_521))))) then (if not-caught-fail(v_523) then (v_523,2-proj-2-tuple(v_521)) else fail-any) else fail-any) else fail-any)) in
        {87}let v_525: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_524),2-proj-7-tuple(v_507),3-proj-7-tuple(v_507),4-proj-7-tuple(v_507),5-proj-7-tuple(v_507),6-proj-7-tuple(v_507),7-proj-7-tuple(v_507))) in
        {88}let v_526: bitstring = catch-fail(concat3(1-proj-3-tuple(v_508),2-proj-3-tuple(v_508),2-proj-2-tuple(v_524))) in
        {89}let (hs_527: handshakestate,re_528: key,message_c: bitstring) = (if (not-caught-fail(v_507) && success?(is-true(success?(1-proj-7-tuple(v_507))))) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then (if not-caught-fail(v_515) then (if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-2-tuple(v_524))))) then (if not-caught-fail(v_525) then (if not-caught-fail(v_526) then (v_525,5-proj-7-tuple(v_507),v_526) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {90}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {91}insert statestore(alice,bob,statepack_d(hs_527));
        {92}out(pub, message_c)
    ) | (
        {121}get statestore(=alice,=bob,statepack_d(hs_529: handshakestate)) in
        {94}in(pub, message_d: bitstring);
        {95}let v_530: bitstring = catch-fail(handshakestateunpack(hs_529)) in
        {96}let v_531: bitstring = catch-fail(deconcat3(message_d)) in
        {97}let v_532: bool = catch-fail(true) in
        {98}let v_533: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_530))) in
        {99}let v_534: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_533))) in
        {100}let v_535: aead = catch-fail(decrypt(1-proj-2-tuple(v_534),2-proj-2-tuple(v_534),3-proj-3-tuple(v_533),3-proj-3-tuple(v_531))) in
        {101}let v_536: bitstring = catch-fail(aeadunpack(v_535)) in
        {102}let v_537: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_533))) in
        {103}let v_538: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_534))) && success?(1-proj-3-tuple(v_533))) then (if (not-caught-fail(v_537) && success?(is-true(success?(1-proj-2-tuple(v_537))))) then cipherstatepack(1-proj-2-tuple(v_537),increment_nonce(2-proj-2-tuple(v_534))) else fail-any) else fail-any)) in
        {104}let v_539: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_531)) && (success?(3-proj-3-tuple(v_533)) && success?(1-proj-3-tuple(v_533)))) then (if (not-caught-fail(v_534) && success?(is-true(success?(1-proj-2-tuple(v_534))))) then (if not-caught-fail(v_535) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then (if not-caught-fail(v_538) then (v_538,3-proj-3-tuple(v_536),1-proj-3-tuple(v_536)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {105}let v_540: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_533),3-proj-3-tuple(v_533)))) in
        {106}let v_541: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_531)) && success?(symmetricstatepack(1-proj-3-tuple(v_539),2-proj-3-tuple(v_533),3-proj-3-tuple(v_533)))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-3-tuple(v_540))))) then symmetricstatepack(1-proj-3-tuple(v_540),2-proj-3-tuple(v_540),hash(3-proj-3-tuple(v_540),3-proj-3-tuple(v_531))) else fail-any) else fail-any)) in
        {107}let v_542: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_531)) && success?(1-proj-7-tuple(v_530))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-3-tuple(v_533))))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if not-caught-fail(v_541) then (v_541,2-proj-3-tuple(v_539),3-proj-3-tuple(v_539)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {108}let v_543: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_542),2-proj-7-tuple(v_530),3-proj-7-tuple(v_530),4-proj-7-tuple(v_530),5-proj-7-tuple(v_530),6-proj-7-tuple(v_530),7-proj-7-tuple(v_530))) in
        {109}let v_544: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_542))) in
        {110}let v_545: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_544),zero)) in
        {111}let v_546: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_544),zero)) in
        {112}let v_547: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_544),zero)) in
        {113}let v_548: bitstring = catch-fail((if success?(2-proj-3-tuple(v_544)) then (if not-caught-fail(v_545) then (if not-caught-fail(v_546) then (if not-caught-fail(v_547) then (v_545,v_546,v_547) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_549: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_548)) then cipherstatepack(1-proj-3-tuple(v_548),minnonce) else fail-any)) in
        {115}let v_550: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_548)) then cipherstatepack(2-proj-3-tuple(v_548),minnonce) else fail-any)) in
        {116}let v_551: bitstring = catch-fail((if success?(1-proj-3-tuple(v_542)) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-3-tuple(v_544))))) then (if (not-caught-fail(v_548) && success?(is-true(success?(1-proj-3-tuple(v_548))))) then (if not-caught-fail(v_549) then (if not-caught-fail(v_550) then (1-proj-3-tuple(v_542),v_549,v_550) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {117}let (hs_552: handshakestate,re_553: key,plaintext_d: bitstring,valid_554: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-7-tuple(v_530))))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-3-tuple(v_531))))) then (if not-caught-fail(v_532) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-3-tuple(v_542))))) then (if (v_532 && 3-proj-3-tuple(v_542)) then (if not-caught-fail(v_543) then (if (not-caught-fail(v_551) && success?(is-true(success?(1-proj-3-tuple(v_551))))) then (v_543,getpublickey(3-proj-7-tuple(v_530)),2-proj-3-tuple(v_542),true,2-proj-3-tuple(v_551),3-proj-3-tuple(v_551)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {118}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_554);
        {119}insert statestore(alice,bob,statepack_e(hs_552));
        {120}event RecvEnd(valid_554)
    ) | (
        {122}event LeakS(phase0,alice);
        {123}out(pub, key_s(alice))
    ) | (
        {124}phase 1;
        {125}event LeakS(phase1,alice);
        {126}out(pub, key_s(alice))
    )
) | (
    {127}let v_555: key = catch-fail(dhexp(key_s(alice),g)) in
    {128}let s_556: keypair = (if not-caught-fail(v_555) then keypairpack(v_555,key_s(alice)) else fail-any) in
    {129}out(pub, getpublickey(s_556));
    (
        {130}let e_557: keypair = keypairpack(empty,empty) in
        {131}let rs_558: key = empty in
        {132}let re_559: key = empty in
        {133}let v_560: bitstring = catch-fail(hash(somename,empty)) in
        {134}let v_561: key = catch-fail(v_560) in
        {135}let v_562: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {136}let v_563: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then symmetricstatepack(v_562,v_561,v_560) else fail-any) else fail-any) else fail-any))) in
        {137}let v_564: symmetricstate = catch-fail((if success?((if not-caught-fail(v_560) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then symmetricstatepack(v_562,v_561,v_560) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_563) && success?(is-true(success?(1-proj-3-tuple(v_563))))) then symmetricstatepack(1-proj-3-tuple(v_563),2-proj-3-tuple(v_563),hash(3-proj-3-tuple(v_563),empty)) else fail-any) else fail-any)) in
        {138}let v_565: bitstring = catch-fail(symmetricstateunpack(v_564)) in
        {139}let v_566: symmetricstate = catch-fail((if success?(getpublickey(s_556)) then (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-3-tuple(v_565))))) then symmetricstatepack(1-proj-3-tuple(v_565),2-proj-3-tuple(v_565),hash(3-proj-3-tuple(v_565),getpublickey(s_556))) else fail-any) else fail-any)) in
        {140}let hs_567: handshakestate = (if not-caught-fail(v_564) then (if not-caught-fail(v_566) then handshakestatepack(v_566,s_556,e_557,rs_558,re_559,empty,true) else fail-any) else fail-any) in
        {141}insert statestore(alice,charlie,statepack_a(hs_567))
    ) | (
        {164}get statestore(=alice,=charlie,statepack_a(hs_568: handshakestate)) in
        {142}let v_569: bitstring = catch-fail(handshakestateunpack(hs_568)) in
        {143}let v_570: bitstring = catch-fail((empty,empty,empty)) in
        {144}let v_571: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {145}let v_572: keypair = catch-fail((if not-caught-fail(v_571) then keypairpack(v_571,key_e(alice,charlie)) else fail-any)) in
        {146}let v_573: bitstring = catch-fail(getpublickey(v_572)) in
        {147}let v_574: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_569))) in
        {148}let v_575: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_569)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),v_573)) else fail-any) else fail-any)) in
        {149}let v_576: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {150}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {151}let v_578: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_577),2-proj-2-tuple(v_577),3-proj-3-tuple(v_576),msg_a(alice,charlie))) in
        {152}let v_579: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_576))) in
        {153}let v_580: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_577))) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-2-tuple(v_579))))) then cipherstatepack(1-proj-2-tuple(v_579),increment_nonce(2-proj-2-tuple(v_577))) else fail-any) else fail-any)) in
        {154}let v_581: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_576)) && success?(1-proj-3-tuple(v_576))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then (if not-caught-fail(v_578) then (if not-caught-fail(v_580) then (v_580,v_578) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {155}let v_582: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) in
        {156}let v_583: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_581)) && success?(symmetricstatepack(1-proj-2-tuple(v_581),2-proj-3-tuple(v_576),3-proj-3-tuple(v_576)))) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then symmetricstatepack(1-proj-3-tuple(v_582),2-proj-3-tuple(v_582),hash(3-proj-3-tuple(v_582),2-proj-2-tuple(v_581))) else fail-any) else fail-any)) in
        {157}let v_584: bitstring = catch-fail((if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if (not-caught-fail(v_581) && success?(is-true(success?(1-proj-2-tuple(v_581))))) then (if not-caught-fail(v_583) then (v_583,2-proj-2-tuple(v_581)) else fail-any) else fail-any) else fail-any)) in
        {158}let v_585: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_584),2-proj-7-tuple(v_569),v_572,4-proj-7-tuple(v_569),5-proj-7-tuple(v_569),6-proj-7-tuple(v_569),7-proj-7-tuple(v_569))) in
        {159}let v_586: bitstring = catch-fail(concat3(v_573,2-proj-3-tuple(v_570),2-proj-2-tuple(v_584))) in
        {160}let (hs_587: handshakestate,re_588: key,message_a_589: bitstring) = (if (not-caught-fail(v_569) && success?(is-true(success?(1-proj-7-tuple(v_569))))) then (if (not-caught-fail(v_570) && success?(is-true(success?(1-proj-3-tuple(v_570))))) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then (if not-caught-fail(v_575) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then (if not-caught-fail(v_585) then (if not-caught-fail(v_586) then (v_585,5-proj-7-tuple(v_569),v_586) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {161}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {162}insert statestore(alice,charlie,statepack_b(hs_587));
        {163}out(pub, message_a_589)
    ) | (
        {193}get statestore(=alice,=charlie,statepack_b(hs_590: handshakestate)) in
        {165}in(pub, message_b_591: bitstring);
        {166}let v_592: bitstring = catch-fail(handshakestateunpack(hs_590)) in
        {167}let v_593: bitstring = catch-fail(deconcat3(message_b_591)) in
        {168}let v_594: bool = catch-fail(true) in
        {169}let v_595: key = catch-fail(1-proj-3-tuple(v_593)) in
        {170}let v_596: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_592))) in
        {171}let v_597: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_592)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_596),hash(3-proj-3-tuple(v_596),v_595)) else fail-any) else fail-any)) in
        {172}let v_598: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_592))) in
        {173}let v_599: bitstring = catch-fail(symmetricstateunpack(v_597)) in
        {174}let v_600: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_599),(if success?(3-proj-7-tuple(v_592)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_595) else fail-any) else fail-any))) in
        {175}let v_601: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_599),(if success?(3-proj-7-tuple(v_592)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_595) else fail-any) else fail-any))) in
        {176}let v_602: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_599),(if success?(3-proj-7-tuple(v_592)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_595) else fail-any) else fail-any))) in
        {177}let v_603: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_592)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_595) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_599))) then (if not-caught-fail(v_600) then (if not-caught-fail(v_601) then (if not-caught-fail(v_602) then (v_600,v_601,v_602) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {178}let v_604: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_592)) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then dhexp(2-proj-2-tuple(v_598),v_595) else fail-any) else fail-any)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-3-tuple(v_603))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_603)) then cipherstatepack(2-proj-3-tuple(v_603),minnonce) else fail-any),1-proj-3-tuple(v_603),3-proj-3-tuple(v_599)) else fail-any) else fail-any) else fail-any)) in
        {179}let v_605: bitstring = catch-fail(symmetricstateunpack(v_604)) in
        {180}let v_606: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_605))) in
        {181}let v_607: aead = catch-fail(decrypt(1-proj-2-tuple(v_606),2-proj-2-tuple(v_606),3-proj-3-tuple(v_605),3-proj-3-tuple(v_593))) in
        {182}let v_608: bitstring = catch-fail(aeadunpack(v_607)) in
        {183}let v_609: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_605))) in
        {184}let v_610: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_606))) && success?(1-proj-3-tuple(v_605))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then cipherstatepack(1-proj-2-tuple(v_609),increment_nonce(2-proj-2-tuple(v_606))) else fail-any) else fail-any)) in
        {185}let v_611: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_593)) && (success?(3-proj-3-tuple(v_605)) && success?(1-proj-3-tuple(v_605)))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-2-tuple(v_606))))) then (if not-caught-fail(v_607) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if not-caught-fail(v_610) then (v_610,3-proj-3-tuple(v_608),1-proj-3-tuple(v_608)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {186}let v_612: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)))) in
        {187}let v_613: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_593)) && success?(symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)))) then (if (not-caught-fail(v_612) && success?(is-true(success?(1-proj-3-tuple(v_612))))) then symmetricstatepack(1-proj-3-tuple(v_612),2-proj-3-tuple(v_612),hash(3-proj-3-tuple(v_612),3-proj-3-tuple(v_593))) else fail-any) else fail-any)) in
        {188}let v_614: bitstring = catch-fail((if success?(3-proj-3-tuple(v_593)) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then (if not-caught-fail(v_613) then (v_613,2-proj-3-tuple(v_611),3-proj-3-tuple(v_611)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {189}let v_615: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_614),2-proj-7-tuple(v_592),3-proj-7-tuple(v_592),4-proj-7-tuple(v_592),v_595,6-proj-7-tuple(v_592),7-proj-7-tuple(v_592))) in
        {190}let (hs_616: handshakestate,re_617: key,plaintext_b_618: bitstring,valid_619: bool) = (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-7-tuple(v_592))))) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_595) then (if not-caught-fail(v_597) then (if not-caught-fail(v_604) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (v_594 && 3-proj-3-tuple(v_614)) then (if not-caught-fail(v_615) then (v_615,getpublickey(3-proj-7-tuple(v_592)),2-proj-3-tuple(v_614),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {191}event RecvMsg(alice,charlie,stage_b,plaintext_b_618,valid_619);
        {192}insert statestore(alice,charlie,statepack_c(hs_616))
    ) | (
        {218}get statestore(=alice,=charlie,statepack_c(hs_620: handshakestate)) in
        {194}let v_621: bitstring = catch-fail(handshakestateunpack(hs_620)) in
        {195}let v_622: bitstring = catch-fail((empty,empty,empty)) in
        {196}let v_623: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_621))) in
        {197}let v_624: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_621))) in
        {198}let v_625: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_624),(if (success?(5-proj-7-tuple(v_621)) && success?(2-proj-7-tuple(v_621))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),5-proj-7-tuple(v_621)) else fail-any) else fail-any))) in
        {199}let v_626: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_624),(if (success?(5-proj-7-tuple(v_621)) && success?(2-proj-7-tuple(v_621))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),5-proj-7-tuple(v_621)) else fail-any) else fail-any))) in
        {200}let v_627: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_624),(if (success?(5-proj-7-tuple(v_621)) && success?(2-proj-7-tuple(v_621))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),5-proj-7-tuple(v_621)) else fail-any) else fail-any))) in
        {201}let v_628: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_621)) && success?(2-proj-7-tuple(v_621))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),5-proj-7-tuple(v_621)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_624))) then (if not-caught-fail(v_625) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_625,v_626,v_627) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {202}let v_629: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_621)) && success?(2-proj-7-tuple(v_621))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-2-tuple(v_623))))) then dhexp(2-proj-2-tuple(v_623),5-proj-7-tuple(v_621)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_621))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-3-tuple(v_624))))) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_628)) then cipherstatepack(2-proj-3-tuple(v_628),minnonce) else fail-any),1-proj-3-tuple(v_628),3-proj-3-tuple(v_624)) else fail-any) else fail-any) else fail-any)) in
        {203}let v_630: bitstring = catch-fail(symmetricstateunpack(v_629)) in
        {204}let v_631: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_630))) in
        {205}let v_632: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_631),2-proj-2-tuple(v_631),3-proj-3-tuple(v_630),msg_c(alice,charlie))) in
        {206}let v_633: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_630))) in
        {207}let v_634: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_631))) && success?(1-proj-3-tuple(v_630))) then (if (not-caught-fail(v_633) && success?(is-true(success?(1-proj-2-tuple(v_633))))) then cipherstatepack(1-proj-2-tuple(v_633),increment_nonce(2-proj-2-tuple(v_631))) else fail-any) else fail-any)) in
        {208}let v_635: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_630)) && success?(1-proj-3-tuple(v_630))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-2-tuple(v_631))))) then (if not-caught-fail(v_632) then (if not-caught-fail(v_634) then (v_634,v_632) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {209}let v_636: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_635),2-proj-3-tuple(v_630),3-proj-3-tuple(v_630)))) in
        {210}let v_637: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_635)) && success?(symmetricstatepack(1-proj-2-tuple(v_635),2-proj-3-tuple(v_630),3-proj-3-tuple(v_630)))) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then symmetricstatepack(1-proj-3-tuple(v_636),2-proj-3-tuple(v_636),hash(3-proj-3-tuple(v_636),2-proj-2-tuple(v_635))) else fail-any) else fail-any)) in
        {211}let v_638: bitstring = catch-fail((if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-2-tuple(v_635))))) then (if not-caught-fail(v_637) then (v_637,2-proj-2-tuple(v_635)) else fail-any) else fail-any) else fail-any)) in
        {212}let v_639: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_638),2-proj-7-tuple(v_621),3-proj-7-tuple(v_621),4-proj-7-tuple(v_621),5-proj-7-tuple(v_621),6-proj-7-tuple(v_621),7-proj-7-tuple(v_621))) in
        {213}let v_640: bitstring = catch-fail(concat3(1-proj-3-tuple(v_622),2-proj-3-tuple(v_622),2-proj-2-tuple(v_638))) in
        {214}let (hs_641: handshakestate,re_642: key,message_c_643: bitstring) = (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-7-tuple(v_621))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-3-tuple(v_622))))) then (if not-caught-fail(v_629) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-2-tuple(v_638))))) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (v_639,5-proj-7-tuple(v_621),v_640) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {215}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {216}insert statestore(alice,charlie,statepack_d(hs_641));
        {217}out(pub, message_c_643)
    ) | (
        {246}get statestore(=alice,=charlie,statepack_d(hs_644: handshakestate)) in
        {219}in(pub, message_d_645: bitstring);
        {220}let v_646: bitstring = catch-fail(handshakestateunpack(hs_644)) in
        {221}let v_647: bitstring = catch-fail(deconcat3(message_d_645)) in
        {222}let v_648: bool = catch-fail(true) in
        {223}let v_649: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_646))) in
        {224}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {225}let v_651: aead = catch-fail(decrypt(1-proj-2-tuple(v_650),2-proj-2-tuple(v_650),3-proj-3-tuple(v_649),3-proj-3-tuple(v_647))) in
        {226}let v_652: bitstring = catch-fail(aeadunpack(v_651)) in
        {227}let v_653: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_649))) in
        {228}let v_654: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_650))) && success?(1-proj-3-tuple(v_649))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-2-tuple(v_653))))) then cipherstatepack(1-proj-2-tuple(v_653),increment_nonce(2-proj-2-tuple(v_650))) else fail-any) else fail-any)) in
        {229}let v_655: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_647)) && (success?(3-proj-3-tuple(v_649)) && success?(1-proj-3-tuple(v_649)))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then (if not-caught-fail(v_651) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-3-tuple(v_652))))) then (if not-caught-fail(v_654) then (v_654,3-proj-3-tuple(v_652),1-proj-3-tuple(v_652)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {230}let v_656: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) in
        {231}let v_657: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_647)) && success?(symmetricstatepack(1-proj-3-tuple(v_655),2-proj-3-tuple(v_649),3-proj-3-tuple(v_649)))) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_656),hash(3-proj-3-tuple(v_656),3-proj-3-tuple(v_647))) else fail-any) else fail-any)) in
        {232}let v_658: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_647)) && success?(1-proj-7-tuple(v_646))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-3-tuple(v_655))))) then (if not-caught-fail(v_657) then (v_657,2-proj-3-tuple(v_655),3-proj-3-tuple(v_655)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {233}let v_659: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_658),2-proj-7-tuple(v_646),3-proj-7-tuple(v_646),4-proj-7-tuple(v_646),5-proj-7-tuple(v_646),6-proj-7-tuple(v_646),7-proj-7-tuple(v_646))) in
        {234}let v_660: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_658))) in
        {235}let v_661: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_660),zero)) in
        {236}let v_662: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_660),zero)) in
        {237}let v_663: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_660),zero)) in
        {238}let v_664: bitstring = catch-fail((if success?(2-proj-3-tuple(v_660)) then (if not-caught-fail(v_661) then (if not-caught-fail(v_662) then (if not-caught-fail(v_663) then (v_661,v_662,v_663) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_665: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_664)) then cipherstatepack(1-proj-3-tuple(v_664),minnonce) else fail-any)) in
        {240}let v_666: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_664)) then cipherstatepack(2-proj-3-tuple(v_664),minnonce) else fail-any)) in
        {241}let v_667: bitstring = catch-fail((if success?(1-proj-3-tuple(v_658)) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (1-proj-3-tuple(v_658),v_665,v_666) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {242}let (hs_668: handshakestate,re_669: key,plaintext_d_670: bitstring,valid_671: bool,cs1_672: cipherstate,cs2_673: cipherstate) = (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-7-tuple(v_646))))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if not-caught-fail(v_648) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then (if (v_648 && 3-proj-3-tuple(v_658)) then (if not-caught-fail(v_659) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (v_659,getpublickey(3-proj-7-tuple(v_646)),2-proj-3-tuple(v_658),true,2-proj-3-tuple(v_667),3-proj-3-tuple(v_667)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {243}event RecvMsg(alice,charlie,stage_d,plaintext_d_670,valid_671);
        {244}insert statestore(alice,charlie,statepack_e(hs_668));
        {245}event RecvEnd(valid_671)
    ) | (
        {247}event LeakS(phase0,alice);
        {248}out(pub, key_s(alice))
    ) | (
        {249}phase 1;
        {250}event LeakS(phase1,alice);
        {251}out(pub, key_s(alice))
    )
) | (
    {252}let s_674: keypair = keypairpack(empty,empty) in
    (
        {253}let e_675: keypair = keypairpack(empty,empty) in
        {254}let v_676: key = catch-fail(dhexp(key_s(alice),g)) in
        {255}let rs_677: key = getpublickey((if not-caught-fail(v_676) then keypairpack(v_676,key_s(alice)) else fail-any)) in
        {256}let re_678: key = empty in
        {257}let v_679: bitstring = catch-fail(hash(somename,empty)) in
        {258}let v_680: key = catch-fail(v_679) in
        {259}let v_681: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {260}let v_682: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then symmetricstatepack(v_681,v_680,v_679) else fail-any) else fail-any) else fail-any))) in
        {261}let v_683: symmetricstate = catch-fail((if success?((if not-caught-fail(v_679) then (if not-caught-fail(v_680) then (if not-caught-fail(v_681) then symmetricstatepack(v_681,v_680,v_679) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then symmetricstatepack(1-proj-3-tuple(v_682),2-proj-3-tuple(v_682),hash(3-proj-3-tuple(v_682),empty)) else fail-any) else fail-any)) in
        {262}let v_684: bitstring = catch-fail(symmetricstateunpack(v_683)) in
        {263}let v_685: symmetricstate = catch-fail((if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then symmetricstatepack(1-proj-3-tuple(v_684),2-proj-3-tuple(v_684),hash(3-proj-3-tuple(v_684),rs_677)) else fail-any)) in
        {264}let hs_686: handshakestate = (if not-caught-fail(v_683) then (if not-caught-fail(v_685) then handshakestatepack(v_685,s_674,e_675,rs_677,re_678,empty,false) else fail-any) else fail-any) in
        {265}insert statestore(bob,alice,statepack_a(hs_686))
    ) | (
        {287}get statestore(=bob,=alice,statepack_a(hs_687: handshakestate)) in
        {266}in(pub, message_a_688: bitstring);
        {267}let v_689: bitstring = catch-fail(handshakestateunpack(hs_687)) in
        {268}let v_690: bitstring = catch-fail(deconcat3(message_a_688)) in
        {269}let v_691: bool = catch-fail(true) in
        {270}let v_692: key = catch-fail(1-proj-3-tuple(v_690)) in
        {271}let v_693: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_689))) in
        {272}let v_694: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_689)) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-3-tuple(v_693))))) then symmetricstatepack(1-proj-3-tuple(v_693),2-proj-3-tuple(v_693),hash(3-proj-3-tuple(v_693),v_692)) else fail-any) else fail-any)) in
        {273}let v_695: bitstring = catch-fail(symmetricstateunpack(v_694)) in
        {274}let v_696: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_695))) in
        {275}let v_697: aead = catch-fail(decrypt(1-proj-2-tuple(v_696),2-proj-2-tuple(v_696),3-proj-3-tuple(v_695),3-proj-3-tuple(v_690))) in
        {276}let v_698: bitstring = catch-fail(aeadunpack(v_697)) in
        {277}let v_699: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_695))) in
        {278}let v_700: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_696))) && success?(1-proj-3-tuple(v_695))) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-2-tuple(v_699))))) then cipherstatepack(1-proj-2-tuple(v_699),increment_nonce(2-proj-2-tuple(v_696))) else fail-any) else fail-any)) in
        {279}let v_701: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_690)) && (success?(3-proj-3-tuple(v_695)) && success?(1-proj-3-tuple(v_695)))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_697) then (if (not-caught-fail(v_698) && success?(is-true(success?(1-proj-3-tuple(v_698))))) then (if not-caught-fail(v_700) then (v_700,3-proj-3-tuple(v_698),1-proj-3-tuple(v_698)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {280}let v_702: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)))) in
        {281}let v_703: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_690)) && success?(symmetricstatepack(1-proj-3-tuple(v_701),2-proj-3-tuple(v_695),3-proj-3-tuple(v_695)))) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then symmetricstatepack(1-proj-3-tuple(v_702),2-proj-3-tuple(v_702),hash(3-proj-3-tuple(v_702),3-proj-3-tuple(v_690))) else fail-any) else fail-any)) in
        {282}let v_704: bitstring = catch-fail((if success?(3-proj-3-tuple(v_690)) then (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-3-tuple(v_695))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if not-caught-fail(v_703) then (v_703,2-proj-3-tuple(v_701),3-proj-3-tuple(v_701)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {283}let v_705: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_704),2-proj-7-tuple(v_689),3-proj-7-tuple(v_689),4-proj-7-tuple(v_689),v_692,6-proj-7-tuple(v_689),7-proj-7-tuple(v_689))) in
        {284}let (hs_706: handshakestate,re_707: key,plaintext_a: bitstring,valid_708: bool) = (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-7-tuple(v_689))))) then (if (not-caught-fail(v_690) && success?(is-true(success?(1-proj-3-tuple(v_690))))) then (if not-caught-fail(v_691) then (if not-caught-fail(v_692) then (if not-caught-fail(v_694) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-3-tuple(v_704))))) then (if (v_691 && 3-proj-3-tuple(v_704)) then (if not-caught-fail(v_705) then (v_705,getpublickey(3-proj-7-tuple(v_689)),2-proj-3-tuple(v_704),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {285}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_708);
        {286}insert statestore(bob,alice,statepack_b(hs_706))
    ) | (
        {317}get statestore(=bob,=alice,statepack_b(hs_709: handshakestate)) in
        {288}let v_710: bitstring = catch-fail(handshakestateunpack(hs_709)) in
        {289}let v_711: bitstring = catch-fail((empty,empty,empty)) in
        {290}let v_712: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {291}let v_713: keypair = catch-fail((if not-caught-fail(v_712) then keypairpack(v_712,key_e(bob,alice)) else fail-any)) in
        {292}let v_714: bitstring = catch-fail(getpublickey(v_713)) in
        {293}let v_715: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_710))) in
        {294}let v_716: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_710)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then symmetricstatepack(1-proj-3-tuple(v_715),2-proj-3-tuple(v_715),hash(3-proj-3-tuple(v_715),v_714)) else fail-any) else fail-any)) in
        {295}let v_717: bitstring = catch-fail(keypairunpack(v_713)) in
        {296}let v_718: bitstring = catch-fail(symmetricstateunpack(v_716)) in
        {297}let v_719: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_718),(if success?(5-proj-7-tuple(v_710)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),5-proj-7-tuple(v_710)) else fail-any) else fail-any))) in
        {298}let v_720: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_718),(if success?(5-proj-7-tuple(v_710)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),5-proj-7-tuple(v_710)) else fail-any) else fail-any))) in
        {299}let v_721: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_718),(if success?(5-proj-7-tuple(v_710)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),5-proj-7-tuple(v_710)) else fail-any) else fail-any))) in
        {300}let v_722: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_710)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),5-proj-7-tuple(v_710)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_718))) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (if not-caught-fail(v_721) then (v_719,v_720,v_721) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {301}let v_723: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_710)) then (if (not-caught-fail(v_717) && success?(is-true(success?(1-proj-2-tuple(v_717))))) then dhexp(2-proj-2-tuple(v_717),5-proj-7-tuple(v_710)) else fail-any) else fail-any)) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_722)) then cipherstatepack(2-proj-3-tuple(v_722),minnonce) else fail-any),1-proj-3-tuple(v_722),3-proj-3-tuple(v_718)) else fail-any) else fail-any) else fail-any)) in
        {302}let v_724: bitstring = catch-fail(symmetricstateunpack(v_723)) in
        {303}let v_725: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_724))) in
        {304}let v_726: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_725),2-proj-2-tuple(v_725),3-proj-3-tuple(v_724),msg_b(bob,alice))) in
        {305}let v_727: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_724))) in
        {306}let v_728: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_725))) && success?(1-proj-3-tuple(v_724))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-2-tuple(v_727))))) then cipherstatepack(1-proj-2-tuple(v_727),increment_nonce(2-proj-2-tuple(v_725))) else fail-any) else fail-any)) in
        {307}let v_729: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_724)) && success?(1-proj-3-tuple(v_724))) then (if (not-caught-fail(v_725) && success?(is-true(success?(1-proj-2-tuple(v_725))))) then (if not-caught-fail(v_726) then (if not-caught-fail(v_728) then (v_728,v_726) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {308}let v_730: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_729),2-proj-3-tuple(v_724),3-proj-3-tuple(v_724)))) in
        {309}let v_731: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_729)) && success?(symmetricstatepack(1-proj-2-tuple(v_729),2-proj-3-tuple(v_724),3-proj-3-tuple(v_724)))) then (if (not-caught-fail(v_730) && success?(is-true(success?(1-proj-3-tuple(v_730))))) then symmetricstatepack(1-proj-3-tuple(v_730),2-proj-3-tuple(v_730),hash(3-proj-3-tuple(v_730),2-proj-2-tuple(v_729))) else fail-any) else fail-any)) in
        {310}let v_732: bitstring = catch-fail((if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if (not-caught-fail(v_729) && success?(is-true(success?(1-proj-2-tuple(v_729))))) then (if not-caught-fail(v_731) then (v_731,2-proj-2-tuple(v_729)) else fail-any) else fail-any) else fail-any)) in
        {311}let v_733: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_732),2-proj-7-tuple(v_710),v_713,4-proj-7-tuple(v_710),5-proj-7-tuple(v_710),6-proj-7-tuple(v_710),7-proj-7-tuple(v_710))) in
        {312}let v_734: bitstring = catch-fail(concat3(v_714,2-proj-3-tuple(v_711),2-proj-2-tuple(v_732))) in
        {313}let (hs_735: handshakestate,re_736: key,message_b_737: bitstring) = (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-7-tuple(v_710))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if not-caught-fail(v_713) then (if not-caught-fail(v_714) then (if not-caught-fail(v_716) then (if not-caught-fail(v_723) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-2-tuple(v_732))))) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then (v_733,5-proj-7-tuple(v_710),v_734) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {314}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {315}insert statestore(bob,alice,statepack_c(hs_735));
        {316}out(pub, message_b_737)
    ) | (
        {343}get statestore(=bob,=alice,statepack_c(hs_738: handshakestate)) in
        {318}in(pub, message_c_739: bitstring);
        {319}let v_740: bitstring = catch-fail(handshakestateunpack(hs_738)) in
        {320}let v_741: bitstring = catch-fail(deconcat3(message_c_739)) in
        {321}let v_742: bool = catch-fail(true) in
        {322}let v_743: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_740))) in
        {323}let v_744: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_740))) in
        {324}let v_745: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_744),(if (success?(4-proj-7-tuple(v_740)) && success?(3-proj-7-tuple(v_740))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),4-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {325}let v_746: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_744),(if (success?(4-proj-7-tuple(v_740)) && success?(3-proj-7-tuple(v_740))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),4-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {326}let v_747: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_744),(if (success?(4-proj-7-tuple(v_740)) && success?(3-proj-7-tuple(v_740))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),4-proj-7-tuple(v_740)) else fail-any) else fail-any))) in
        {327}let v_748: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_740)) && success?(3-proj-7-tuple(v_740))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),4-proj-7-tuple(v_740)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_744))) then (if not-caught-fail(v_745) then (if not-caught-fail(v_746) then (if not-caught-fail(v_747) then (v_745,v_746,v_747) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {328}let v_749: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_740)) && success?(3-proj-7-tuple(v_740))) then (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-2-tuple(v_743))))) then dhexp(2-proj-2-tuple(v_743),4-proj-7-tuple(v_740)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_740))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-3-tuple(v_748))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_748)) then cipherstatepack(2-proj-3-tuple(v_748),minnonce) else fail-any),1-proj-3-tuple(v_748),3-proj-3-tuple(v_744)) else fail-any) else fail-any) else fail-any)) in
        {329}let v_750: bitstring = catch-fail(symmetricstateunpack(v_749)) in
        {330}let v_751: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {331}let v_752: aead = catch-fail(decrypt(1-proj-2-tuple(v_751),2-proj-2-tuple(v_751),3-proj-3-tuple(v_750),3-proj-3-tuple(v_741))) in
        {332}let v_753: bitstring = catch-fail(aeadunpack(v_752)) in
        {333}let v_754: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_750))) in
        {334}let v_755: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_751))) && success?(1-proj-3-tuple(v_750))) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-2-tuple(v_754))))) then cipherstatepack(1-proj-2-tuple(v_754),increment_nonce(2-proj-2-tuple(v_751))) else fail-any) else fail-any)) in
        {335}let v_756: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_741)) && (success?(3-proj-3-tuple(v_750)) && success?(1-proj-3-tuple(v_750)))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then (if not-caught-fail(v_752) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then (if not-caught-fail(v_755) then (v_755,3-proj-3-tuple(v_753),1-proj-3-tuple(v_753)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {336}let v_757: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) in
        {337}let v_758: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_741)) && success?(symmetricstatepack(1-proj-3-tuple(v_756),2-proj-3-tuple(v_750),3-proj-3-tuple(v_750)))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-3-tuple(v_757))))) then symmetricstatepack(1-proj-3-tuple(v_757),2-proj-3-tuple(v_757),hash(3-proj-3-tuple(v_757),3-proj-3-tuple(v_741))) else fail-any) else fail-any)) in
        {338}let v_759: bitstring = catch-fail((if success?(3-proj-3-tuple(v_741)) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-3-tuple(v_750))))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then (if not-caught-fail(v_758) then (v_758,2-proj-3-tuple(v_756),3-proj-3-tuple(v_756)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {339}let v_760: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_759),2-proj-7-tuple(v_740),3-proj-7-tuple(v_740),4-proj-7-tuple(v_740),5-proj-7-tuple(v_740),6-proj-7-tuple(v_740),7-proj-7-tuple(v_740))) in
        {340}let (hs_761: handshakestate,re_762: key,plaintext_c: bitstring,valid_763: bool) = (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-7-tuple(v_740))))) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then (if not-caught-fail(v_742) then (if not-caught-fail(v_749) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-3-tuple(v_759))))) then (if (v_742 && 3-proj-3-tuple(v_759)) then (if not-caught-fail(v_760) then (v_760,getpublickey(3-proj-7-tuple(v_740)),2-proj-3-tuple(v_759),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {341}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_763);
        {342}insert statestore(bob,alice,statepack_d(hs_761))
    ) | (
        {369}get statestore(=bob,=alice,statepack_d(hs_764: handshakestate)) in
        {344}let v_765: bitstring = catch-fail(handshakestateunpack(hs_764)) in
        {345}let v_766: bitstring = catch-fail((empty,empty,empty)) in
        {346}let v_767: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_765))) in
        {347}let v_768: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {348}let v_769: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_768),2-proj-2-tuple(v_768),3-proj-3-tuple(v_767),msg_d(bob,alice))) in
        {349}let v_770: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_767))) in
        {350}let v_771: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_768))) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-2-tuple(v_770))))) then cipherstatepack(1-proj-2-tuple(v_770),increment_nonce(2-proj-2-tuple(v_768))) else fail-any) else fail-any)) in
        {351}let v_772: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_767)) && success?(1-proj-3-tuple(v_767))) then (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-2-tuple(v_768))))) then (if not-caught-fail(v_769) then (if not-caught-fail(v_771) then (v_771,v_769) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_773: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_772),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) in
        {353}let v_774: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_772)) && success?(symmetricstatepack(1-proj-2-tuple(v_772),2-proj-3-tuple(v_767),3-proj-3-tuple(v_767)))) then (if (not-caught-fail(v_773) && success?(is-true(success?(1-proj-3-tuple(v_773))))) then symmetricstatepack(1-proj-3-tuple(v_773),2-proj-3-tuple(v_773),hash(3-proj-3-tuple(v_773),2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {354}let v_775: bitstring = catch-fail((if success?(1-proj-7-tuple(v_765)) then (if (not-caught-fail(v_767) && success?(is-true(success?(1-proj-3-tuple(v_767))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_774) then (v_774,2-proj-2-tuple(v_772)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_776: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_775),2-proj-7-tuple(v_765),3-proj-7-tuple(v_765),4-proj-7-tuple(v_765),5-proj-7-tuple(v_765),6-proj-7-tuple(v_765),7-proj-7-tuple(v_765))) in
        {356}let v_777: bitstring = catch-fail(concat3(1-proj-3-tuple(v_766),2-proj-3-tuple(v_766),2-proj-2-tuple(v_775))) in
        {357}let v_778: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_775))) in
        {358}let v_779: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_778),zero)) in
        {359}let v_780: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_778),zero)) in
        {360}let v_781: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_778),zero)) in
        {361}let v_782: bitstring = catch-fail((if success?(2-proj-3-tuple(v_778)) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (v_779,v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {362}let v_783: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_782)) then cipherstatepack(1-proj-3-tuple(v_782),minnonce) else fail-any)) in
        {363}let v_784: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_782)) then cipherstatepack(2-proj-3-tuple(v_782),minnonce) else fail-any)) in
        {364}let v_785: bitstring = catch-fail((if success?(1-proj-2-tuple(v_775)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if not-caught-fail(v_783) then (if not-caught-fail(v_784) then (1-proj-2-tuple(v_775),v_783,v_784) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {365}let (hs_786: handshakestate,re_787: key,message_d_788: bitstring,cs1_789: cipherstate,cs2_790: cipherstate) = (if (not-caught-fail(v_765) && success?(is-true(success?(1-proj-7-tuple(v_765))))) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-3-tuple(v_766))))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then (v_776,5-proj-7-tuple(v_765),v_777,2-proj-3-tuple(v_785),3-proj-3-tuple(v_785)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {366}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {367}insert statestore(bob,alice,statepack_e(hs_786));
        {368}out(pub, message_d_788)
    ) | (
        {370}event LeakS(phase0,bob);
        {371}out(pub, key_s(bob))
    ) | (
        {372}phase 1;
        {373}event LeakS(phase1,bob);
        {374}out(pub, key_s(bob))
    )
) | (
    {375}let s_791: keypair = keypairpack(empty,empty) in
    (
        {376}let e_792: keypair = keypairpack(empty,empty) in
        {377}let v_793: key = catch-fail(dhexp(key_s(charlie),g)) in
        {378}let rs_794: key = getpublickey((if not-caught-fail(v_793) then keypairpack(v_793,key_s(charlie)) else fail-any)) in
        {379}let re_795: key = empty in
        {380}let v_796: bitstring = catch-fail(hash(somename,empty)) in
        {381}let v_797: key = catch-fail(v_796) in
        {382}let v_798: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {383}let v_799: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_796) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then symmetricstatepack(v_798,v_797,v_796) else fail-any) else fail-any) else fail-any))) in
        {384}let v_800: symmetricstate = catch-fail((if success?((if not-caught-fail(v_796) then (if not-caught-fail(v_797) then (if not-caught-fail(v_798) then symmetricstatepack(v_798,v_797,v_796) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then symmetricstatepack(1-proj-3-tuple(v_799),2-proj-3-tuple(v_799),hash(3-proj-3-tuple(v_799),empty)) else fail-any) else fail-any)) in
        {385}let v_801: bitstring = catch-fail(symmetricstateunpack(v_800)) in
        {386}let v_802: symmetricstate = catch-fail((if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then symmetricstatepack(1-proj-3-tuple(v_801),2-proj-3-tuple(v_801),hash(3-proj-3-tuple(v_801),rs_794)) else fail-any)) in
        {387}let hs_803: handshakestate = (if not-caught-fail(v_800) then (if not-caught-fail(v_802) then handshakestatepack(v_802,s_791,e_792,rs_794,re_795,empty,false) else fail-any) else fail-any) in
        {388}insert statestore(bob,charlie,statepack_a(hs_803))
    ) | (
        {410}get statestore(=bob,=charlie,statepack_a(hs_804: handshakestate)) in
        {389}in(pub, message_a_805: bitstring);
        {390}let v_806: bitstring = catch-fail(handshakestateunpack(hs_804)) in
        {391}let v_807: bitstring = catch-fail(deconcat3(message_a_805)) in
        {392}let v_808: bool = catch-fail(true) in
        {393}let v_809: key = catch-fail(1-proj-3-tuple(v_807)) in
        {394}let v_810: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_806))) in
        {395}let v_811: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_806)) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),v_809)) else fail-any) else fail-any)) in
        {396}let v_812: bitstring = catch-fail(symmetricstateunpack(v_811)) in
        {397}let v_813: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_812))) in
        {398}let v_814: aead = catch-fail(decrypt(1-proj-2-tuple(v_813),2-proj-2-tuple(v_813),3-proj-3-tuple(v_812),3-proj-3-tuple(v_807))) in
        {399}let v_815: bitstring = catch-fail(aeadunpack(v_814)) in
        {400}let v_816: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_812))) in
        {401}let v_817: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_813))) && success?(1-proj-3-tuple(v_812))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then cipherstatepack(1-proj-2-tuple(v_816),increment_nonce(2-proj-2-tuple(v_813))) else fail-any) else fail-any)) in
        {402}let v_818: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_807)) && (success?(3-proj-3-tuple(v_812)) && success?(1-proj-3-tuple(v_812)))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-2-tuple(v_813))))) then (if not-caught-fail(v_814) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then (if not-caught-fail(v_817) then (v_817,3-proj-3-tuple(v_815),1-proj-3-tuple(v_815)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {403}let v_819: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)))) in
        {404}let v_820: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_807)) && success?(symmetricstatepack(1-proj-3-tuple(v_818),2-proj-3-tuple(v_812),3-proj-3-tuple(v_812)))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),3-proj-3-tuple(v_807))) else fail-any) else fail-any)) in
        {405}let v_821: bitstring = catch-fail((if success?(3-proj-3-tuple(v_807)) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-3-tuple(v_812))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-3-tuple(v_818))))) then (if not-caught-fail(v_820) then (v_820,2-proj-3-tuple(v_818),3-proj-3-tuple(v_818)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {406}let v_822: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_821),2-proj-7-tuple(v_806),3-proj-7-tuple(v_806),4-proj-7-tuple(v_806),v_809,6-proj-7-tuple(v_806),7-proj-7-tuple(v_806))) in
        {407}let (hs_823: handshakestate,re_824: key,plaintext_a_825: bitstring,valid_826: bool) = (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-7-tuple(v_806))))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if not-caught-fail(v_808) then (if not-caught-fail(v_809) then (if not-caught-fail(v_811) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-3-tuple(v_821))))) then (if (v_808 && 3-proj-3-tuple(v_821)) then (if not-caught-fail(v_822) then (v_822,getpublickey(3-proj-7-tuple(v_806)),2-proj-3-tuple(v_821),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {408}event RecvMsg(bob,charlie,stage_a,plaintext_a_825,valid_826);
        {409}insert statestore(bob,charlie,statepack_b(hs_823))
    ) | (
        {440}get statestore(=bob,=charlie,statepack_b(hs_827: handshakestate)) in
        {411}let v_828: bitstring = catch-fail(handshakestateunpack(hs_827)) in
        {412}let v_829: bitstring = catch-fail((empty,empty,empty)) in
        {413}let v_830: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {414}let v_831: keypair = catch-fail((if not-caught-fail(v_830) then keypairpack(v_830,key_e(bob,charlie)) else fail-any)) in
        {415}let v_832: bitstring = catch-fail(getpublickey(v_831)) in
        {416}let v_833: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_828))) in
        {417}let v_834: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_828)) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then symmetricstatepack(1-proj-3-tuple(v_833),2-proj-3-tuple(v_833),hash(3-proj-3-tuple(v_833),v_832)) else fail-any) else fail-any)) in
        {418}let v_835: bitstring = catch-fail(keypairunpack(v_831)) in
        {419}let v_836: bitstring = catch-fail(symmetricstateunpack(v_834)) in
        {420}let v_837: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_836),(if success?(5-proj-7-tuple(v_828)) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_828)) else fail-any) else fail-any))) in
        {421}let v_838: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_836),(if success?(5-proj-7-tuple(v_828)) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_828)) else fail-any) else fail-any))) in
        {422}let v_839: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_836),(if success?(5-proj-7-tuple(v_828)) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_828)) else fail-any) else fail-any))) in
        {423}let v_840: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_828)) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_828)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_836))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (if not-caught-fail(v_839) then (v_837,v_838,v_839) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {424}let v_841: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_828)) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_828)) else fail-any) else fail-any)) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_840)) then cipherstatepack(2-proj-3-tuple(v_840),minnonce) else fail-any),1-proj-3-tuple(v_840),3-proj-3-tuple(v_836)) else fail-any) else fail-any) else fail-any)) in
        {425}let v_842: bitstring = catch-fail(symmetricstateunpack(v_841)) in
        {426}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {427}let v_844: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_843),2-proj-2-tuple(v_843),3-proj-3-tuple(v_842),msg_b(bob,charlie))) in
        {428}let v_845: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {429}let v_846: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_843))) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-2-tuple(v_845))))) then cipherstatepack(1-proj-2-tuple(v_845),increment_nonce(2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {430}let v_847: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_844) then (if not-caught-fail(v_846) then (v_846,v_844) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_848: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) in
        {432}let v_849: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_847)) && success?(symmetricstatepack(1-proj-2-tuple(v_847),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_848),hash(3-proj-3-tuple(v_848),2-proj-2-tuple(v_847))) else fail-any) else fail-any)) in
        {433}let v_850: bitstring = catch-fail((if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_849) then (v_849,2-proj-2-tuple(v_847)) else fail-any) else fail-any) else fail-any)) in
        {434}let v_851: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_850),2-proj-7-tuple(v_828),v_831,4-proj-7-tuple(v_828),5-proj-7-tuple(v_828),6-proj-7-tuple(v_828),7-proj-7-tuple(v_828))) in
        {435}let v_852: bitstring = catch-fail(concat3(v_832,2-proj-3-tuple(v_829),2-proj-2-tuple(v_850))) in
        {436}let (hs_853: handshakestate,re_854: key,message_b_855: bitstring) = (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-7-tuple(v_828))))) then (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-3-tuple(v_829))))) then (if not-caught-fail(v_831) then (if not-caught-fail(v_832) then (if not-caught-fail(v_834) then (if not-caught-fail(v_841) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then (if not-caught-fail(v_851) then (if not-caught-fail(v_852) then (v_851,5-proj-7-tuple(v_828),v_852) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {437}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {438}insert statestore(bob,charlie,statepack_c(hs_853));
        {439}out(pub, message_b_855)
    ) | (
        {466}get statestore(=bob,=charlie,statepack_c(hs_856: handshakestate)) in
        {441}in(pub, message_c_857: bitstring);
        {442}let v_858: bitstring = catch-fail(handshakestateunpack(hs_856)) in
        {443}let v_859: bitstring = catch-fail(deconcat3(message_c_857)) in
        {444}let v_860: bool = catch-fail(true) in
        {445}let v_861: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_858))) in
        {446}let v_862: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_858))) in
        {447}let v_863: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_862),(if (success?(4-proj-7-tuple(v_858)) && success?(3-proj-7-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),4-proj-7-tuple(v_858)) else fail-any) else fail-any))) in
        {448}let v_864: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_862),(if (success?(4-proj-7-tuple(v_858)) && success?(3-proj-7-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),4-proj-7-tuple(v_858)) else fail-any) else fail-any))) in
        {449}let v_865: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_862),(if (success?(4-proj-7-tuple(v_858)) && success?(3-proj-7-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),4-proj-7-tuple(v_858)) else fail-any) else fail-any))) in
        {450}let v_866: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_858)) && success?(3-proj-7-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),4-proj-7-tuple(v_858)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_862))) then (if not-caught-fail(v_863) then (if not-caught-fail(v_864) then (if not-caught-fail(v_865) then (v_863,v_864,v_865) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {451}let v_867: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_858)) && success?(3-proj-7-tuple(v_858))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then dhexp(2-proj-2-tuple(v_861),4-proj-7-tuple(v_858)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_858))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-3-tuple(v_862))))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_866)) then cipherstatepack(2-proj-3-tuple(v_866),minnonce) else fail-any),1-proj-3-tuple(v_866),3-proj-3-tuple(v_862)) else fail-any) else fail-any) else fail-any)) in
        {452}let v_868: bitstring = catch-fail(symmetricstateunpack(v_867)) in
        {453}let v_869: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_868))) in
        {454}let v_870: aead = catch-fail(decrypt(1-proj-2-tuple(v_869),2-proj-2-tuple(v_869),3-proj-3-tuple(v_868),3-proj-3-tuple(v_859))) in
        {455}let v_871: bitstring = catch-fail(aeadunpack(v_870)) in
        {456}let v_872: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_868))) in
        {457}let v_873: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_869))) && success?(1-proj-3-tuple(v_868))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then cipherstatepack(1-proj-2-tuple(v_872),increment_nonce(2-proj-2-tuple(v_869))) else fail-any) else fail-any)) in
        {458}let v_874: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_859)) && (success?(3-proj-3-tuple(v_868)) && success?(1-proj-3-tuple(v_868)))) then (if (not-caught-fail(v_869) && success?(is-true(success?(1-proj-2-tuple(v_869))))) then (if not-caught-fail(v_870) then (if (not-caught-fail(v_871) && success?(is-true(success?(1-proj-3-tuple(v_871))))) then (if not-caught-fail(v_873) then (v_873,3-proj-3-tuple(v_871),1-proj-3-tuple(v_871)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {459}let v_875: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_868),3-proj-3-tuple(v_868)))) in
        {460}let v_876: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_859)) && success?(symmetricstatepack(1-proj-3-tuple(v_874),2-proj-3-tuple(v_868),3-proj-3-tuple(v_868)))) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-3-tuple(v_875))))) then symmetricstatepack(1-proj-3-tuple(v_875),2-proj-3-tuple(v_875),hash(3-proj-3-tuple(v_875),3-proj-3-tuple(v_859))) else fail-any) else fail-any)) in
        {461}let v_877: bitstring = catch-fail((if success?(3-proj-3-tuple(v_859)) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-3-tuple(v_868))))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if not-caught-fail(v_876) then (v_876,2-proj-3-tuple(v_874),3-proj-3-tuple(v_874)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {462}let v_878: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_877),2-proj-7-tuple(v_858),3-proj-7-tuple(v_858),4-proj-7-tuple(v_858),5-proj-7-tuple(v_858),6-proj-7-tuple(v_858),7-proj-7-tuple(v_858))) in
        {463}let (hs_879: handshakestate,re_880: key,plaintext_c_881: bitstring,valid_882: bool) = (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-7-tuple(v_858))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_867) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (v_860 && 3-proj-3-tuple(v_877)) then (if not-caught-fail(v_878) then (v_878,getpublickey(3-proj-7-tuple(v_858)),2-proj-3-tuple(v_877),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {464}event RecvMsg(bob,charlie,stage_c,plaintext_c_881,valid_882);
        {465}insert statestore(bob,charlie,statepack_d(hs_879))
    ) | (
        {492}get statestore(=bob,=charlie,statepack_d(hs_883: handshakestate)) in
        {467}let v_884: bitstring = catch-fail(handshakestateunpack(hs_883)) in
        {468}let v_885: bitstring = catch-fail((empty,empty,empty)) in
        {469}let v_886: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_884))) in
        {470}let v_887: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_886))) in
        {471}let v_888: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_887),2-proj-2-tuple(v_887),3-proj-3-tuple(v_886),msg_d(bob,charlie))) in
        {472}let v_889: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_886))) in
        {473}let v_890: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_887))) && success?(1-proj-3-tuple(v_886))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-2-tuple(v_889))))) then cipherstatepack(1-proj-2-tuple(v_889),increment_nonce(2-proj-2-tuple(v_887))) else fail-any) else fail-any)) in
        {474}let v_891: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_886)) && success?(1-proj-3-tuple(v_886))) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-2-tuple(v_887))))) then (if not-caught-fail(v_888) then (if not-caught-fail(v_890) then (v_890,v_888) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {475}let v_892: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_891),2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)))) in
        {476}let v_893: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_891)) && success?(symmetricstatepack(1-proj-2-tuple(v_891),2-proj-3-tuple(v_886),3-proj-3-tuple(v_886)))) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then symmetricstatepack(1-proj-3-tuple(v_892),2-proj-3-tuple(v_892),hash(3-proj-3-tuple(v_892),2-proj-2-tuple(v_891))) else fail-any) else fail-any)) in
        {477}let v_894: bitstring = catch-fail((if success?(1-proj-7-tuple(v_884)) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then (if not-caught-fail(v_893) then (v_893,2-proj-2-tuple(v_891)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {478}let v_895: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_894),2-proj-7-tuple(v_884),3-proj-7-tuple(v_884),4-proj-7-tuple(v_884),5-proj-7-tuple(v_884),6-proj-7-tuple(v_884),7-proj-7-tuple(v_884))) in
        {479}let v_896: bitstring = catch-fail(concat3(1-proj-3-tuple(v_885),2-proj-3-tuple(v_885),2-proj-2-tuple(v_894))) in
        {480}let v_897: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_894))) in
        {481}let v_898: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_897),zero)) in
        {482}let v_899: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_897),zero)) in
        {483}let v_900: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_897),zero)) in
        {484}let v_901: bitstring = catch-fail((if success?(2-proj-3-tuple(v_897)) then (if not-caught-fail(v_898) then (if not-caught-fail(v_899) then (if not-caught-fail(v_900) then (v_898,v_899,v_900) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_902: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_901)) then cipherstatepack(1-proj-3-tuple(v_901),minnonce) else fail-any)) in
        {486}let v_903: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_901)) then cipherstatepack(2-proj-3-tuple(v_901),minnonce) else fail-any)) in
        {487}let v_904: bitstring = catch-fail((if success?(1-proj-2-tuple(v_894)) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-3-tuple(v_901))))) then (if not-caught-fail(v_902) then (if not-caught-fail(v_903) then (1-proj-2-tuple(v_894),v_902,v_903) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {488}let (hs_905: handshakestate,re_906: key,message_d_907: bitstring,cs1_908: cipherstate,cs2_909: cipherstate) = (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-7-tuple(v_884))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-2-tuple(v_894))))) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-3-tuple(v_904))))) then (v_895,5-proj-7-tuple(v_884),v_896,2-proj-3-tuple(v_904),3-proj-3-tuple(v_904)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {489}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {490}insert statestore(bob,charlie,statepack_e(hs_905));
        {491}out(pub, message_d_907)
    ) | (
        {493}event LeakS(phase0,bob);
        {494}out(pub, key_s(bob))
    ) | (
        {495}phase 1;
        {496}event LeakS(phase1,bob);
        {497}out(pub, key_s(bob))
    )
) | (
    {498}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 138 rules in the queue.
400 rules inserted. The rule base contains 388 rules. 90 rules in the queue.
600 rules inserted. The rule base contains 578 rules. 152 rules in the queue.
800 rules inserted. The rule base contains 753 rules. 132 rules in the queue.
1000 rules inserted. The rule base contains 884 rules. 114 rules in the queue.
1200 rules inserted. The rule base contains 1040 rules. 104 rules in the queue.
1400 rules inserted. The rule base contains 1171 rules. 130 rules in the queue.
1600 rules inserted. The rule base contains 1323 rules. 152 rules in the queue.
1800 rules inserted. The rule base contains 1401 rules. 115 rules in the queue.
2000 rules inserted. The rule base contains 1542 rules. 147 rules in the queue.
2200 rules inserted. The rule base contains 1698 rules. 198 rules in the queue.
2400 rules inserted. The rule base contains 1846 rules. 218 rules in the queue.
2600 rules inserted. The rule base contains 1974 rules. 174 rules in the queue.
2800 rules inserted. The rule base contains 2099 rules. 165 rules in the queue.
3000 rules inserted. The rule base contains 2224 rules. 142 rules in the queue.
3200 rules inserted. The rule base contains 2339 rules. 141 rules in the queue.
3400 rules inserted. The rule base contains 2421 rules. 73 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {285}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_990,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {285}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {285}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {39}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {36}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {38}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(alice),g) may be sent on channel pub at output {4}.
mess(pub,dhexp(key_s(alice),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(alice),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(alice),g) by listening on this channel.
attacker(dhexp(key_s(alice),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(alice),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_990,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {317}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {314}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {315}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {162}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {317}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {314}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {316}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {193}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {165}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {192}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {218}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {215}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {217}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {343}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {318}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {341}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_990,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {317}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {314}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {315}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {162}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {317}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {314}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {316}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {193}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {165}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {192}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {218}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {215}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {217}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {343}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {318}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {341}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 1 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

5. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 4 may be read at get {317}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {314}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {315}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

6. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

7. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 6 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) may be inserted in a table at insert {162}.
table(statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true)))).

8. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) may be inserted in a table at insert {265}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false)))).

9. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {141}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true)))).

10. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 9 may be read at get {164}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {161}.
So the message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) may be sent on channel pub at output {163}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))).

11. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),empty,empty,false))) that may be in a table by 8 may be read at get {287}.
The message concat3(dhexp(key_e(alice,charlie),g),empty,encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))) that may be sent on channel pub by 10 may be received at input {266}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) may be inserted in a table at insert {286}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false)))).

12. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 11 may be read at get {317}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {314}.
So the message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) may be sent on channel pub at output {316}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))).

13. The entry statestore(alice,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(minnonce)),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,empty,empty,true))) that may be in a table by 7 may be read at get {193}.
The message concat3(dhexp(key_e(bob,alice),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))) that may be sent on channel pub by 12 may be received at input {165}.
So the entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {192}.
table(statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true)))).

14. The entry statestore(alice,charlie,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,charlie),g),key_e(alice,charlie)),empty,dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 13 may be read at get {218}.
The event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true) may be executed at {215}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) may be sent on channel pub at output {217}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie)))).

15. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,charlie),g),empty,false))) that may be in a table by 5 may be read at get {343}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(bob,alice),dhexp(key_e(alice,charlie),g))),dhexp(key_e(bob,alice),dhexp(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,charlie),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(alice),g)),dhexp(key_e(alice,charlie),g)),msg_a(alice,charlie))),dhexp(key_e(bob,alice),g)),msg_b(bob,alice))),msg_c(alice,charlie))) that may be sent on channel pub by 14 may be received at input {318}.
So event RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true) may be executed at {341}.
end(RecvMsg(bob,alice,stage_c,msg_c(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_990,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
