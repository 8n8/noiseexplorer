File "X1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 261, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 262, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 262, character 36:
Warning: identifier h rebound.
File "X1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "X1K.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "X1K.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 316, character 6:
Warning: identifier e rebound.
File "X1K.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ne rebound.
File "X1K.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "X1K.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1K.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 356, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 357, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 366, characters 6-7:
Warning: identifier re rebound.
File "X1K.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 370, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 372, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 380, characters 6-7:
Warning: identifier re rebound.
File "X1K.noise.passive.pv", line 381, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 383, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 384, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 386, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 394, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 394, characters 48-53:
Warning: identifier valid1 rebound.
File "X1K.noise.passive.pv", line 395, characters 6-7:
Warning: identifier rs rebound.
File "X1K.noise.passive.pv", line 396, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 398, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 406, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 407, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 409, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 417, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 419, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 427, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 429, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 629, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 427, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 429, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 621, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 348, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 348, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 349, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 614, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 406, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 407, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 409, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 606, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 329, character 6:
Warning: identifier s rebound.
File "X1K.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1K.noise.passive.pv", line 331, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 331, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 332, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 599, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 380, characters 6-7:
Warning: identifier re rebound.
File "X1K.noise.passive.pv", line 381, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 383, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 384, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 386, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 591, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 303, character 6:
Warning: identifier e rebound.
File "X1K.noise.passive.pv", line 304, characters 6-7:
Warning: identifier ne rebound.
File "X1K.noise.passive.pv", line 305, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 308, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 308, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 309, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 694, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 356, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 356, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 357, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 687, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 417, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 419, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 679, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 339, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 340, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 340, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 341, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 672, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 394, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 394, characters 48-53:
Warning: identifier valid1 rebound.
File "X1K.noise.passive.pv", line 395, characters 6-7:
Warning: identifier rs rebound.
File "X1K.noise.passive.pv", line 396, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 398, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 664, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 316, character 6:
Warning: identifier e rebound.
File "X1K.noise.passive.pv", line 317, characters 6-7:
Warning: identifier ne rebound.
File "X1K.noise.passive.pv", line 318, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 320, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 271, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 272, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 657, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 366, characters 6-7:
Warning: identifier re rebound.
File "X1K.noise.passive.pv", line 367, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 369, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 370, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 372, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 252, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 277, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 278, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 297, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_566: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_566));
    (
        {4}let e_567: keypair = keypairpack(empty,empty) in
        {5}let v_568: key = catch-fail(dhexp(key_s(bob),g)) in
        {6}let rs_569: key = getpublickey((if not-caught-fail(v_568) then keypairpack(v_568,key_s(bob)) else fail-any)) in
        {7}let re_570: key = empty in
        {8}let v_571: bitstring = catch-fail(hash(somename,empty)) in
        {9}let v_572: key = catch-fail(v_571) in
        {10}let v_573: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {11}let v_574: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then symmetricstatepack(v_573,v_572,v_571) else fail-any) else fail-any) else fail-any))) in
        {12}let v_575: symmetricstate = catch-fail((if success?((if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then symmetricstatepack(v_573,v_572,v_571) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),empty)) else fail-any) else fail-any)) in
        {13}let v_576: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {14}let v_577: symmetricstate = catch-fail((if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then symmetricstatepack(1-proj-3-tuple(v_576),2-proj-3-tuple(v_576),hash(3-proj-3-tuple(v_576),rs_569)) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_575) then (if not-caught-fail(v_577) then handshakestatepack(v_577,s_566,e_567,rs_569,re_570,empty,true) else fail-any) else fail-any) in
        {16}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {46}get statestore(=alice,=bob,statepack_a(hs_578: handshakestate)) in
        {17}let v_579: bitstring = catch-fail(handshakestateunpack(hs_578)) in
        {18}let v_580: bitstring = catch-fail((empty,empty,empty)) in
        {19}let v_581: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {20}let v_582: keypair = catch-fail((if not-caught-fail(v_581) then keypairpack(v_581,key_e(alice,bob)) else fail-any)) in
        {21}let v_583: bitstring = catch-fail(getpublickey(v_582)) in
        {22}let v_584: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_579))) in
        {23}let v_585: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_579)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then symmetricstatepack(1-proj-3-tuple(v_584),2-proj-3-tuple(v_584),hash(3-proj-3-tuple(v_584),v_583)) else fail-any) else fail-any)) in
        {24}let v_586: bitstring = catch-fail(keypairunpack(v_582)) in
        {25}let v_587: bitstring = catch-fail(symmetricstateunpack(v_585)) in
        {26}let v_588: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_587),(if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any))) in
        {27}let v_589: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_587),(if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any))) in
        {28}let v_590: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_587),(if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any))) in
        {29}let v_591: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_587))) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (v_588,v_589,v_590) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {30}let v_592: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_591)) then cipherstatepack(2-proj-3-tuple(v_591),minnonce) else fail-any),1-proj-3-tuple(v_591),3-proj-3-tuple(v_587)) else fail-any) else fail-any) else fail-any)) in
        {31}let v_593: bitstring = catch-fail(symmetricstateunpack(v_592)) in
        {32}let v_594: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_593))) in
        {33}let v_595: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_594),2-proj-2-tuple(v_594),3-proj-3-tuple(v_593),msg_a(alice,bob))) in
        {34}let v_596: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_593))) in
        {35}let v_597: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_594))) && success?(1-proj-3-tuple(v_593))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then cipherstatepack(1-proj-2-tuple(v_596),increment_nonce(2-proj-2-tuple(v_594))) else fail-any) else fail-any)) in
        {36}let v_598: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_593)) && success?(1-proj-3-tuple(v_593))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then (if not-caught-fail(v_595) then (if not-caught-fail(v_597) then (v_597,v_595) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {37}let v_599: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_598),2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)))) in
        {38}let v_600: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_598)) && success?(symmetricstatepack(1-proj-2-tuple(v_598),2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then symmetricstatepack(1-proj-3-tuple(v_599),2-proj-3-tuple(v_599),hash(3-proj-3-tuple(v_599),2-proj-2-tuple(v_598))) else fail-any) else fail-any)) in
        {39}let v_601: bitstring = catch-fail((if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then (if not-caught-fail(v_600) then (v_600,2-proj-2-tuple(v_598)) else fail-any) else fail-any) else fail-any)) in
        {40}let v_602: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_601),2-proj-7-tuple(v_579),v_582,4-proj-7-tuple(v_579),5-proj-7-tuple(v_579),6-proj-7-tuple(v_579),7-proj-7-tuple(v_579))) in
        {41}let v_603: bitstring = catch-fail(concat3(v_583,2-proj-3-tuple(v_580),2-proj-2-tuple(v_601))) in
        {42}let (hs_604: handshakestate,re_605: key,message_a: bitstring) = (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-7-tuple(v_579))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (if not-caught-fail(v_585) then (if not-caught-fail(v_592) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (v_602,5-proj-7-tuple(v_579),v_603) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {43}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {44}insert statestore(alice,bob,statepack_b(hs_604));
        {45}out(pub, message_a)
    ) | (
        {75}get statestore(=alice,=bob,statepack_b(hs_606: handshakestate)) in
        {47}in(pub, message_b: bitstring);
        {48}let v_607: bitstring = catch-fail(handshakestateunpack(hs_606)) in
        {49}let v_608: bitstring = catch-fail(deconcat3(message_b)) in
        {50}let v_609: bool = catch-fail(true) in
        {51}let v_610: key = catch-fail(1-proj-3-tuple(v_608)) in
        {52}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_607))) in
        {53}let v_612: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_607)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),v_610)) else fail-any) else fail-any)) in
        {54}let v_613: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_607))) in
        {55}let v_614: bitstring = catch-fail(symmetricstateunpack(v_612)) in
        {56}let v_615: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {57}let v_616: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {58}let v_617: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {59}let v_618: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_614))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (v_615,v_616,v_617) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {60}let v_619: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_618)) then cipherstatepack(2-proj-3-tuple(v_618),minnonce) else fail-any),1-proj-3-tuple(v_618),3-proj-3-tuple(v_614)) else fail-any) else fail-any) else fail-any)) in
        {61}let v_620: bitstring = catch-fail(symmetricstateunpack(v_619)) in
        {62}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {63}let v_622: aead = catch-fail(decrypt(1-proj-2-tuple(v_621),2-proj-2-tuple(v_621),3-proj-3-tuple(v_620),3-proj-3-tuple(v_608))) in
        {64}let v_623: bitstring = catch-fail(aeadunpack(v_622)) in
        {65}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {66}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_621))) && success?(1-proj-3-tuple(v_620))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_621))) else fail-any) else fail-any)) in
        {67}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_608)) && (success?(3-proj-3-tuple(v_620)) && success?(1-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_622) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,3-proj-3-tuple(v_623),1-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) in
        {69}let v_628: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_608)) && success?(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),3-proj-3-tuple(v_608))) else fail-any) else fail-any)) in
        {70}let v_629: bitstring = catch-fail((if success?(3-proj-3-tuple(v_608)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {71}let v_630: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_629),2-proj-7-tuple(v_607),3-proj-7-tuple(v_607),4-proj-7-tuple(v_607),v_610,6-proj-7-tuple(v_607),7-proj-7-tuple(v_607))) in
        {72}let (hs_631: handshakestate,re_632: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-7-tuple(v_607))))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (if not-caught-fail(v_619) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (v_609 && 3-proj-3-tuple(v_629)) then (if not-caught-fail(v_630) then (v_630,getpublickey(3-proj-7-tuple(v_607)),2-proj-3-tuple(v_629),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {73}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {74}insert statestore(alice,bob,statepack_c(hs_631))
    ) | (
        {104}get statestore(=alice,=bob,statepack_c(hs_633: handshakestate)) in
        {76}let v_634: bitstring = catch-fail(handshakestateunpack(hs_633)) in
        {77}let v_635: bitstring = catch-fail((empty,empty,empty)) in
        {78}let v_636: key = catch-fail(dhexp(key_s(alice),g)) in
        {79}let v_637: keypair = catch-fail((if not-caught-fail(v_636) then keypairpack(v_636,key_s(alice)) else fail-any)) in
        {80}let v_638: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_634))) in
        {81}let v_639: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_638))) in
        {82}let v_640: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_639),2-proj-2-tuple(v_639),3-proj-3-tuple(v_638),getpublickey(v_637))) in
        {83}let v_641: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_638))) in
        {84}let v_642: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_639))) && success?(1-proj-3-tuple(v_638))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then cipherstatepack(1-proj-2-tuple(v_641),increment_nonce(2-proj-2-tuple(v_639))) else fail-any) else fail-any)) in
        {85}let v_643: bitstring = catch-fail((if (success?(getpublickey(v_637)) && (success?(3-proj-3-tuple(v_638)) && success?(1-proj-3-tuple(v_638)))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then (if not-caught-fail(v_640) then (if not-caught-fail(v_642) then (v_642,v_640) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_644: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_643),2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)))) in
        {87}let v_645: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_643)) && success?(symmetricstatepack(1-proj-2-tuple(v_643),2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then symmetricstatepack(1-proj-3-tuple(v_644),2-proj-3-tuple(v_644),hash(3-proj-3-tuple(v_644),2-proj-2-tuple(v_643))) else fail-any) else fail-any)) in
        {88}let v_646: bitstring = catch-fail((if (success?(getpublickey(v_637)) && success?(1-proj-7-tuple(v_634))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then (if not-caught-fail(v_645) then (v_645,2-proj-2-tuple(v_643)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {89}let v_647: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_646))) in
        {90}let v_648: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {91}let v_649: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_648),2-proj-2-tuple(v_648),3-proj-3-tuple(v_647),msg_c(alice,bob))) in
        {92}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {93}let v_651: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_648))) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then cipherstatepack(1-proj-2-tuple(v_650),increment_nonce(2-proj-2-tuple(v_648))) else fail-any) else fail-any)) in
        {94}let v_652: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_647)) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_649) then (if not-caught-fail(v_651) then (v_651,v_649) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {95}let v_653: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_652),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) in
        {96}let v_654: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_652)) && success?(symmetricstatepack(1-proj-2-tuple(v_652),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_653),hash(3-proj-3-tuple(v_653),2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {97}let v_655: bitstring = catch-fail((if success?(1-proj-2-tuple(v_646)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_654) then (v_654,2-proj-2-tuple(v_652)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_656: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_655),v_637,3-proj-7-tuple(v_634),4-proj-7-tuple(v_634),5-proj-7-tuple(v_634),6-proj-7-tuple(v_634),7-proj-7-tuple(v_634))) in
        {99}let v_657: bitstring = catch-fail(concat3(1-proj-3-tuple(v_635),2-proj-2-tuple(v_646),2-proj-2-tuple(v_655))) in
        {100}let (hs_658: handshakestate,re_659: key,message_c: bitstring) = (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-7-tuple(v_634))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (v_656,5-proj-7-tuple(v_634),v_657) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {101}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {102}insert statestore(alice,bob,statepack_d(hs_658));
        {103}out(pub, message_c)
    ) | (
        {130}get statestore(=alice,=bob,statepack_d(hs_660: handshakestate)) in
        {105}in(pub, message_d: bitstring);
        {106}let v_661: bitstring = catch-fail(handshakestateunpack(hs_660)) in
        {107}let v_662: bitstring = catch-fail(deconcat3(message_d)) in
        {108}let v_663: bool = catch-fail(true) in
        {109}let v_664: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_661))) in
        {110}let v_665: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_661))) in
        {111}let v_666: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_665),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {112}let v_667: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_665),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {113}let v_668: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_665),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {114}let v_669: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_665))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (v_666,v_667,v_668) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_670: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_661))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_669)) then cipherstatepack(2-proj-3-tuple(v_669),minnonce) else fail-any),1-proj-3-tuple(v_669),3-proj-3-tuple(v_665)) else fail-any) else fail-any) else fail-any)) in
        {116}let v_671: bitstring = catch-fail(symmetricstateunpack(v_670)) in
        {117}let v_672: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_671))) in
        {118}let v_673: aead = catch-fail(decrypt(1-proj-2-tuple(v_672),2-proj-2-tuple(v_672),3-proj-3-tuple(v_671),3-proj-3-tuple(v_662))) in
        {119}let v_674: bitstring = catch-fail(aeadunpack(v_673)) in
        {120}let v_675: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_671))) in
        {121}let v_676: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_672))) && success?(1-proj-3-tuple(v_671))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then cipherstatepack(1-proj-2-tuple(v_675),increment_nonce(2-proj-2-tuple(v_672))) else fail-any) else fail-any)) in
        {122}let v_677: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_662)) && (success?(3-proj-3-tuple(v_671)) && success?(1-proj-3-tuple(v_671)))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then (if not-caught-fail(v_673) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if not-caught-fail(v_676) then (v_676,3-proj-3-tuple(v_674),1-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {123}let v_678: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_677),2-proj-3-tuple(v_671),3-proj-3-tuple(v_671)))) in
        {124}let v_679: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_662)) && success?(symmetricstatepack(1-proj-3-tuple(v_677),2-proj-3-tuple(v_671),3-proj-3-tuple(v_671)))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then symmetricstatepack(1-proj-3-tuple(v_678),2-proj-3-tuple(v_678),hash(3-proj-3-tuple(v_678),3-proj-3-tuple(v_662))) else fail-any) else fail-any)) in
        {125}let v_680: bitstring = catch-fail((if success?(3-proj-3-tuple(v_662)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if not-caught-fail(v_679) then (v_679,2-proj-3-tuple(v_677),3-proj-3-tuple(v_677)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {126}let v_681: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_680),2-proj-7-tuple(v_661),3-proj-7-tuple(v_661),4-proj-7-tuple(v_661),5-proj-7-tuple(v_661),6-proj-7-tuple(v_661),7-proj-7-tuple(v_661))) in
        {127}let (hs_682: handshakestate,re_683: key,plaintext_d: bitstring,valid_684: bool) = (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-7-tuple(v_661))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_670) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (v_663 && 3-proj-3-tuple(v_680)) then (if not-caught-fail(v_681) then (v_681,getpublickey(3-proj-7-tuple(v_661)),2-proj-3-tuple(v_680),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {128}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_684);
        {129}insert statestore(alice,bob,statepack_e(hs_682))
    ) | (
        {148}get statestore(=alice,=bob,statepack_e(hs_685: handshakestate)) in
        {131}let v_686: bitstring = catch-fail(handshakestateunpack(hs_685)) in
        {132}let v_687: bitstring = catch-fail((empty,empty,empty)) in
        {133}let v_688: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_686))) in
        {134}let v_689: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {135}let v_690: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_689),2-proj-2-tuple(v_689),3-proj-3-tuple(v_688),msg_e(alice,bob))) in
        {136}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {137}let v_692: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_689))) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then cipherstatepack(1-proj-2-tuple(v_691),increment_nonce(2-proj-2-tuple(v_689))) else fail-any) else fail-any)) in
        {138}let v_693: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_688)) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then (v_692,v_690) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_694: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) in
        {140}let v_695: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_693)) && success?(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack(1-proj-3-tuple(v_694),2-proj-3-tuple(v_694),hash(3-proj-3-tuple(v_694),2-proj-2-tuple(v_693))) else fail-any) else fail-any)) in
        {141}let v_696: bitstring = catch-fail((if success?(1-proj-7-tuple(v_686)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,2-proj-2-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {142}let v_697: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_696),2-proj-7-tuple(v_686),3-proj-7-tuple(v_686),4-proj-7-tuple(v_686),5-proj-7-tuple(v_686),6-proj-7-tuple(v_686),7-proj-7-tuple(v_686))) in
        {143}let v_698: bitstring = catch-fail(concat3(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),2-proj-2-tuple(v_696))) in
        {144}let (hs_699: handshakestate,re_700: key,message_e: bitstring) = (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-7-tuple(v_686))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (v_697,5-proj-7-tuple(v_686),v_698) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {145}event SendMsg(alice,bob,stage_e,msg_e(alice,bob),true);
        {146}insert statestore(alice,bob,statepack_f(hs_699));
        {147}out(pub, message_e)
    ) | (
        {176}get statestore(=alice,=bob,statepack_f(hs_701: handshakestate)) in
        {149}in(pub, message_f: bitstring);
        {150}let v_702: bitstring = catch-fail(handshakestateunpack(hs_701)) in
        {151}let v_703: bitstring = catch-fail(deconcat3(message_f)) in
        {152}let v_704: bool = catch-fail(true) in
        {153}let v_705: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_702))) in
        {154}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_705))) in
        {155}let v_707: aead = catch-fail(decrypt(1-proj-2-tuple(v_706),2-proj-2-tuple(v_706),3-proj-3-tuple(v_705),3-proj-3-tuple(v_703))) in
        {156}let v_708: bitstring = catch-fail(aeadunpack(v_707)) in
        {157}let v_709: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_705))) in
        {158}let v_710: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_706))) && success?(1-proj-3-tuple(v_705))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then cipherstatepack(1-proj-2-tuple(v_709),increment_nonce(2-proj-2-tuple(v_706))) else fail-any) else fail-any)) in
        {159}let v_711: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_703)) && (success?(3-proj-3-tuple(v_705)) && success?(1-proj-3-tuple(v_705)))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then (if not-caught-fail(v_707) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,3-proj-3-tuple(v_708),1-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {160}let v_712: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_711),2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)))) in
        {161}let v_713: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_703)) && success?(symmetricstatepack(1-proj-3-tuple(v_711),2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_712),hash(3-proj-3-tuple(v_712),3-proj-3-tuple(v_703))) else fail-any) else fail-any)) in
        {162}let v_714: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_703)) && success?(1-proj-7-tuple(v_702))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if not-caught-fail(v_713) then (v_713,2-proj-3-tuple(v_711),3-proj-3-tuple(v_711)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {163}let v_715: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_714),2-proj-7-tuple(v_702),3-proj-7-tuple(v_702),4-proj-7-tuple(v_702),5-proj-7-tuple(v_702),6-proj-7-tuple(v_702),7-proj-7-tuple(v_702))) in
        {164}let v_716: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_714))) in
        {165}let v_717: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_716),zero)) in
        {166}let v_718: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_716),zero)) in
        {167}let v_719: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_716),zero)) in
        {168}let v_720: bitstring = catch-fail((if success?(2-proj-3-tuple(v_716)) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (v_717,v_718,v_719) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {169}let v_721: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_720)) then cipherstatepack(1-proj-3-tuple(v_720),minnonce) else fail-any)) in
        {170}let v_722: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_720)) then cipherstatepack(2-proj-3-tuple(v_720),minnonce) else fail-any)) in
        {171}let v_723: bitstring = catch-fail((if success?(1-proj-3-tuple(v_714)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (1-proj-3-tuple(v_714),v_721,v_722) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {172}let (hs_724: handshakestate,re_725: key,plaintext_f: bitstring,valid_726: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-7-tuple(v_702))))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if (v_704 && 3-proj-3-tuple(v_714)) then (if not-caught-fail(v_715) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then (v_715,getpublickey(3-proj-7-tuple(v_702)),2-proj-3-tuple(v_714),true,2-proj-3-tuple(v_723),3-proj-3-tuple(v_723)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {173}event RecvMsg(alice,bob,stage_f,plaintext_f,valid_726);
        {174}insert statestore(alice,bob,statepack_g(hs_724));
        {175}event RecvEnd(valid_726)
    ) | (
        {177}event LeakS(phase0,alice);
        {178}out(pub, key_s(alice))
    ) | (
        {179}phase 1;
        {180}event LeakS(phase1,alice);
        {181}out(pub, key_s(alice))
    )
) | (
    {182}let s_727: keypair = keypairpack(empty,empty) in
    {183}out(pub, getpublickey(s_727));
    (
        {184}let e_728: keypair = keypairpack(empty,empty) in
        {185}let v_729: key = catch-fail(dhexp(key_s(charlie),g)) in
        {186}let rs_730: key = getpublickey((if not-caught-fail(v_729) then keypairpack(v_729,key_s(charlie)) else fail-any)) in
        {187}let re_731: key = empty in
        {188}let v_732: bitstring = catch-fail(hash(somename,empty)) in
        {189}let v_733: key = catch-fail(v_732) in
        {190}let v_734: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {191}let v_735: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then symmetricstatepack(v_734,v_733,v_732) else fail-any) else fail-any) else fail-any))) in
        {192}let v_736: symmetricstate = catch-fail((if success?((if not-caught-fail(v_732) then (if not-caught-fail(v_733) then (if not-caught-fail(v_734) then symmetricstatepack(v_734,v_733,v_732) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_735) && success?(is-true(success?(1-proj-3-tuple(v_735))))) then symmetricstatepack(1-proj-3-tuple(v_735),2-proj-3-tuple(v_735),hash(3-proj-3-tuple(v_735),empty)) else fail-any) else fail-any)) in
        {193}let v_737: bitstring = catch-fail(symmetricstateunpack(v_736)) in
        {194}let v_738: symmetricstate = catch-fail((if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_737),hash(3-proj-3-tuple(v_737),rs_730)) else fail-any)) in
        {195}let hs_739: handshakestate = (if not-caught-fail(v_736) then (if not-caught-fail(v_738) then handshakestatepack(v_738,s_727,e_728,rs_730,re_731,empty,true) else fail-any) else fail-any) in
        {196}insert statestore(alice,charlie,statepack_a(hs_739))
    ) | (
        {226}get statestore(=alice,=charlie,statepack_a(hs_740: handshakestate)) in
        {197}let v_741: bitstring = catch-fail(handshakestateunpack(hs_740)) in
        {198}let v_742: bitstring = catch-fail((empty,empty,empty)) in
        {199}let v_743: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {200}let v_744: keypair = catch-fail((if not-caught-fail(v_743) then keypairpack(v_743,key_e(alice,charlie)) else fail-any)) in
        {201}let v_745: bitstring = catch-fail(getpublickey(v_744)) in
        {202}let v_746: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_741))) in
        {203}let v_747: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_741)) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-3-tuple(v_746))))) then symmetricstatepack(1-proj-3-tuple(v_746),2-proj-3-tuple(v_746),hash(3-proj-3-tuple(v_746),v_745)) else fail-any) else fail-any)) in
        {204}let v_748: bitstring = catch-fail(keypairunpack(v_744)) in
        {205}let v_749: bitstring = catch-fail(symmetricstateunpack(v_747)) in
        {206}let v_750: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_749),(if success?(4-proj-7-tuple(v_741)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),4-proj-7-tuple(v_741)) else fail-any) else fail-any))) in
        {207}let v_751: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_749),(if success?(4-proj-7-tuple(v_741)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),4-proj-7-tuple(v_741)) else fail-any) else fail-any))) in
        {208}let v_752: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_749),(if success?(4-proj-7-tuple(v_741)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),4-proj-7-tuple(v_741)) else fail-any) else fail-any))) in
        {209}let v_753: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_741)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),4-proj-7-tuple(v_741)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_749))) then (if not-caught-fail(v_750) then (if not-caught-fail(v_751) then (if not-caught-fail(v_752) then (v_750,v_751,v_752) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {210}let v_754: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_741)) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then dhexp(2-proj-2-tuple(v_748),4-proj-7-tuple(v_741)) else fail-any) else fail-any)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-3-tuple(v_753))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_753)) then cipherstatepack(2-proj-3-tuple(v_753),minnonce) else fail-any),1-proj-3-tuple(v_753),3-proj-3-tuple(v_749)) else fail-any) else fail-any) else fail-any)) in
        {211}let v_755: bitstring = catch-fail(symmetricstateunpack(v_754)) in
        {212}let v_756: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_755))) in
        {213}let v_757: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_756),2-proj-2-tuple(v_756),3-proj-3-tuple(v_755),msg_a(alice,charlie))) in
        {214}let v_758: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_755))) in
        {215}let v_759: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_756))) && success?(1-proj-3-tuple(v_755))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-2-tuple(v_758))))) then cipherstatepack(1-proj-2-tuple(v_758),increment_nonce(2-proj-2-tuple(v_756))) else fail-any) else fail-any)) in
        {216}let v_760: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_755)) && success?(1-proj-3-tuple(v_755))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-2-tuple(v_756))))) then (if not-caught-fail(v_757) then (if not-caught-fail(v_759) then (v_759,v_757) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {217}let v_761: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_760),2-proj-3-tuple(v_755),3-proj-3-tuple(v_755)))) in
        {218}let v_762: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_760)) && success?(symmetricstatepack(1-proj-2-tuple(v_760),2-proj-3-tuple(v_755),3-proj-3-tuple(v_755)))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-3-tuple(v_761))))) then symmetricstatepack(1-proj-3-tuple(v_761),2-proj-3-tuple(v_761),hash(3-proj-3-tuple(v_761),2-proj-2-tuple(v_760))) else fail-any) else fail-any)) in
        {219}let v_763: bitstring = catch-fail((if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-3-tuple(v_755))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then (if not-caught-fail(v_762) then (v_762,2-proj-2-tuple(v_760)) else fail-any) else fail-any) else fail-any)) in
        {220}let v_764: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_763),2-proj-7-tuple(v_741),v_744,4-proj-7-tuple(v_741),5-proj-7-tuple(v_741),6-proj-7-tuple(v_741),7-proj-7-tuple(v_741))) in
        {221}let v_765: bitstring = catch-fail(concat3(v_745,2-proj-3-tuple(v_742),2-proj-2-tuple(v_763))) in
        {222}let (hs_766: handshakestate,re_767: key,message_a_768: bitstring) = (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-7-tuple(v_741))))) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if not-caught-fail(v_744) then (if not-caught-fail(v_745) then (if not-caught-fail(v_747) then (if not-caught-fail(v_754) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then (if not-caught-fail(v_764) then (if not-caught-fail(v_765) then (v_764,5-proj-7-tuple(v_741),v_765) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {223}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {224}insert statestore(alice,charlie,statepack_b(hs_766));
        {225}out(pub, message_a_768)
    ) | (
        {255}get statestore(=alice,=charlie,statepack_b(hs_769: handshakestate)) in
        {227}in(pub, message_b_770: bitstring);
        {228}let v_771: bitstring = catch-fail(handshakestateunpack(hs_769)) in
        {229}let v_772: bitstring = catch-fail(deconcat3(message_b_770)) in
        {230}let v_773: bool = catch-fail(true) in
        {231}let v_774: key = catch-fail(1-proj-3-tuple(v_772)) in
        {232}let v_775: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_771))) in
        {233}let v_776: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_771)) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then symmetricstatepack(1-proj-3-tuple(v_775),2-proj-3-tuple(v_775),hash(3-proj-3-tuple(v_775),v_774)) else fail-any) else fail-any)) in
        {234}let v_777: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_771))) in
        {235}let v_778: bitstring = catch-fail(symmetricstateunpack(v_776)) in
        {236}let v_779: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_778),(if success?(3-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any))) in
        {237}let v_780: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_778),(if success?(3-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any))) in
        {238}let v_781: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_778),(if success?(3-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any))) in
        {239}let v_782: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_778))) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (if not-caught-fail(v_781) then (v_779,v_780,v_781) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {240}let v_783: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_771)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-2-tuple(v_777))))) then dhexp(2-proj-2-tuple(v_777),v_774) else fail-any) else fail-any)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_782)) then cipherstatepack(2-proj-3-tuple(v_782),minnonce) else fail-any),1-proj-3-tuple(v_782),3-proj-3-tuple(v_778)) else fail-any) else fail-any) else fail-any)) in
        {241}let v_784: bitstring = catch-fail(symmetricstateunpack(v_783)) in
        {242}let v_785: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {243}let v_786: aead = catch-fail(decrypt(1-proj-2-tuple(v_785),2-proj-2-tuple(v_785),3-proj-3-tuple(v_784),3-proj-3-tuple(v_772))) in
        {244}let v_787: bitstring = catch-fail(aeadunpack(v_786)) in
        {245}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_784))) in
        {246}let v_789: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_785))) && success?(1-proj-3-tuple(v_784))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then cipherstatepack(1-proj-2-tuple(v_788),increment_nonce(2-proj-2-tuple(v_785))) else fail-any) else fail-any)) in
        {247}let v_790: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_772)) && (success?(3-proj-3-tuple(v_784)) && success?(1-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-2-tuple(v_785))))) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if not-caught-fail(v_789) then (v_789,3-proj-3-tuple(v_787),1-proj-3-tuple(v_787)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let v_791: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) in
        {249}let v_792: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_772)) && success?(symmetricstatepack(1-proj-3-tuple(v_790),2-proj-3-tuple(v_784),3-proj-3-tuple(v_784)))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-3-tuple(v_791))))) then symmetricstatepack(1-proj-3-tuple(v_791),2-proj-3-tuple(v_791),hash(3-proj-3-tuple(v_791),3-proj-3-tuple(v_772))) else fail-any) else fail-any)) in
        {250}let v_793: bitstring = catch-fail((if success?(3-proj-3-tuple(v_772)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_792) then (v_792,2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {251}let v_794: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_793),2-proj-7-tuple(v_771),3-proj-7-tuple(v_771),4-proj-7-tuple(v_771),v_774,6-proj-7-tuple(v_771),7-proj-7-tuple(v_771))) in
        {252}let (hs_795: handshakestate,re_796: key,plaintext_b_797: bitstring,valid_798: bool) = (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-7-tuple(v_771))))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-3-tuple(v_772))))) then (if not-caught-fail(v_773) then (if not-caught-fail(v_774) then (if not-caught-fail(v_776) then (if not-caught-fail(v_783) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if (v_773 && 3-proj-3-tuple(v_793)) then (if not-caught-fail(v_794) then (v_794,getpublickey(3-proj-7-tuple(v_771)),2-proj-3-tuple(v_793),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {253}event RecvMsg(alice,charlie,stage_b,plaintext_b_797,valid_798);
        {254}insert statestore(alice,charlie,statepack_c(hs_795))
    ) | (
        {284}get statestore(=alice,=charlie,statepack_c(hs_799: handshakestate)) in
        {256}let v_800: bitstring = catch-fail(handshakestateunpack(hs_799)) in
        {257}let v_801: bitstring = catch-fail((empty,empty,empty)) in
        {258}let v_802: key = catch-fail(dhexp(key_s(alice),g)) in
        {259}let v_803: keypair = catch-fail((if not-caught-fail(v_802) then keypairpack(v_802,key_s(alice)) else fail-any)) in
        {260}let v_804: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_800))) in
        {261}let v_805: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_804))) in
        {262}let v_806: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_805),2-proj-2-tuple(v_805),3-proj-3-tuple(v_804),getpublickey(v_803))) in
        {263}let v_807: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_804))) in
        {264}let v_808: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_805))) && success?(1-proj-3-tuple(v_804))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-2-tuple(v_807))))) then cipherstatepack(1-proj-2-tuple(v_807),increment_nonce(2-proj-2-tuple(v_805))) else fail-any) else fail-any)) in
        {265}let v_809: bitstring = catch-fail((if (success?(getpublickey(v_803)) && (success?(3-proj-3-tuple(v_804)) && success?(1-proj-3-tuple(v_804)))) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-2-tuple(v_805))))) then (if not-caught-fail(v_806) then (if not-caught-fail(v_808) then (v_808,v_806) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_810: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_809),2-proj-3-tuple(v_804),3-proj-3-tuple(v_804)))) in
        {267}let v_811: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_809)) && success?(symmetricstatepack(1-proj-2-tuple(v_809),2-proj-3-tuple(v_804),3-proj-3-tuple(v_804)))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-3-tuple(v_810))))) then symmetricstatepack(1-proj-3-tuple(v_810),2-proj-3-tuple(v_810),hash(3-proj-3-tuple(v_810),2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {268}let v_812: bitstring = catch-fail((if (success?(getpublickey(v_803)) && success?(1-proj-7-tuple(v_800))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_811) then (v_811,2-proj-2-tuple(v_809)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {269}let v_813: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_812))) in
        {270}let v_814: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_813))) in
        {271}let v_815: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_814),2-proj-2-tuple(v_814),3-proj-3-tuple(v_813),msg_c(alice,charlie))) in
        {272}let v_816: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_813))) in
        {273}let v_817: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_814))) && success?(1-proj-3-tuple(v_813))) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-2-tuple(v_816))))) then cipherstatepack(1-proj-2-tuple(v_816),increment_nonce(2-proj-2-tuple(v_814))) else fail-any) else fail-any)) in
        {274}let v_818: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_813)) && success?(1-proj-3-tuple(v_813))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-2-tuple(v_814))))) then (if not-caught-fail(v_815) then (if not-caught-fail(v_817) then (v_817,v_815) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {275}let v_819: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_818),2-proj-3-tuple(v_813),3-proj-3-tuple(v_813)))) in
        {276}let v_820: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_818)) && success?(symmetricstatepack(1-proj-2-tuple(v_818),2-proj-3-tuple(v_813),3-proj-3-tuple(v_813)))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then symmetricstatepack(1-proj-3-tuple(v_819),2-proj-3-tuple(v_819),hash(3-proj-3-tuple(v_819),2-proj-2-tuple(v_818))) else fail-any) else fail-any)) in
        {277}let v_821: bitstring = catch-fail((if success?(1-proj-2-tuple(v_812)) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then (if (not-caught-fail(v_818) && success?(is-true(success?(1-proj-2-tuple(v_818))))) then (if not-caught-fail(v_820) then (v_820,2-proj-2-tuple(v_818)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {278}let v_822: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_821),v_803,3-proj-7-tuple(v_800),4-proj-7-tuple(v_800),5-proj-7-tuple(v_800),6-proj-7-tuple(v_800),7-proj-7-tuple(v_800))) in
        {279}let v_823: bitstring = catch-fail(concat3(1-proj-3-tuple(v_801),2-proj-2-tuple(v_812),2-proj-2-tuple(v_821))) in
        {280}let (hs_824: handshakestate,re_825: key,message_c_826: bitstring) = (if (not-caught-fail(v_800) && success?(is-true(success?(1-proj-7-tuple(v_800))))) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-3-tuple(v_801))))) then (if not-caught-fail(v_803) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_822) then (if not-caught-fail(v_823) then (v_822,5-proj-7-tuple(v_800),v_823) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {281}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {282}insert statestore(alice,charlie,statepack_d(hs_824));
        {283}out(pub, message_c_826)
    ) | (
        {310}get statestore(=alice,=charlie,statepack_d(hs_827: handshakestate)) in
        {285}in(pub, message_d_828: bitstring);
        {286}let v_829: bitstring = catch-fail(handshakestateunpack(hs_827)) in
        {287}let v_830: bitstring = catch-fail(deconcat3(message_d_828)) in
        {288}let v_831: bool = catch-fail(true) in
        {289}let v_832: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_829))) in
        {290}let v_833: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_829))) in
        {291}let v_834: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_833),(if (success?(5-proj-7-tuple(v_829)) && success?(2-proj-7-tuple(v_829))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),5-proj-7-tuple(v_829)) else fail-any) else fail-any))) in
        {292}let v_835: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_833),(if (success?(5-proj-7-tuple(v_829)) && success?(2-proj-7-tuple(v_829))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),5-proj-7-tuple(v_829)) else fail-any) else fail-any))) in
        {293}let v_836: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_833),(if (success?(5-proj-7-tuple(v_829)) && success?(2-proj-7-tuple(v_829))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),5-proj-7-tuple(v_829)) else fail-any) else fail-any))) in
        {294}let v_837: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_829)) && success?(2-proj-7-tuple(v_829))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),5-proj-7-tuple(v_829)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_833))) then (if not-caught-fail(v_834) then (if not-caught-fail(v_835) then (if not-caught-fail(v_836) then (v_834,v_835,v_836) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {295}let v_838: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_829)) && success?(2-proj-7-tuple(v_829))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then dhexp(2-proj-2-tuple(v_832),5-proj-7-tuple(v_829)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_829))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if (not-caught-fail(v_837) && success?(is-true(success?(1-proj-3-tuple(v_837))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_837)) then cipherstatepack(2-proj-3-tuple(v_837),minnonce) else fail-any),1-proj-3-tuple(v_837),3-proj-3-tuple(v_833)) else fail-any) else fail-any) else fail-any)) in
        {296}let v_839: bitstring = catch-fail(symmetricstateunpack(v_838)) in
        {297}let v_840: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_839))) in
        {298}let v_841: aead = catch-fail(decrypt(1-proj-2-tuple(v_840),2-proj-2-tuple(v_840),3-proj-3-tuple(v_839),3-proj-3-tuple(v_830))) in
        {299}let v_842: bitstring = catch-fail(aeadunpack(v_841)) in
        {300}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_839))) in
        {301}let v_844: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_840))) && success?(1-proj-3-tuple(v_839))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then cipherstatepack(1-proj-2-tuple(v_843),increment_nonce(2-proj-2-tuple(v_840))) else fail-any) else fail-any)) in
        {302}let v_845: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_830)) && (success?(3-proj-3-tuple(v_839)) && success?(1-proj-3-tuple(v_839)))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-2-tuple(v_840))))) then (if not-caught-fail(v_841) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if not-caught-fail(v_844) then (v_844,3-proj-3-tuple(v_842),1-proj-3-tuple(v_842)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let v_846: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)))) in
        {304}let v_847: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_830)) && success?(symmetricstatepack(1-proj-3-tuple(v_845),2-proj-3-tuple(v_839),3-proj-3-tuple(v_839)))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then symmetricstatepack(1-proj-3-tuple(v_846),2-proj-3-tuple(v_846),hash(3-proj-3-tuple(v_846),3-proj-3-tuple(v_830))) else fail-any) else fail-any)) in
        {305}let v_848: bitstring = catch-fail((if success?(3-proj-3-tuple(v_830)) then (if (not-caught-fail(v_839) && success?(is-true(success?(1-proj-3-tuple(v_839))))) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if not-caught-fail(v_847) then (v_847,2-proj-3-tuple(v_845),3-proj-3-tuple(v_845)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {306}let v_849: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_848),2-proj-7-tuple(v_829),3-proj-7-tuple(v_829),4-proj-7-tuple(v_829),5-proj-7-tuple(v_829),6-proj-7-tuple(v_829),7-proj-7-tuple(v_829))) in
        {307}let (hs_850: handshakestate,re_851: key,plaintext_d_852: bitstring,valid_853: bool) = (if (not-caught-fail(v_829) && success?(is-true(success?(1-proj-7-tuple(v_829))))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_831) then (if not-caught-fail(v_838) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if (v_831 && 3-proj-3-tuple(v_848)) then (if not-caught-fail(v_849) then (v_849,getpublickey(3-proj-7-tuple(v_829)),2-proj-3-tuple(v_848),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {308}event RecvMsg(alice,charlie,stage_d,plaintext_d_852,valid_853);
        {309}insert statestore(alice,charlie,statepack_e(hs_850))
    ) | (
        {328}get statestore(=alice,=charlie,statepack_e(hs_854: handshakestate)) in
        {311}let v_855: bitstring = catch-fail(handshakestateunpack(hs_854)) in
        {312}let v_856: bitstring = catch-fail((empty,empty,empty)) in
        {313}let v_857: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_855))) in
        {314}let v_858: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_857))) in
        {315}let v_859: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_858),2-proj-2-tuple(v_858),3-proj-3-tuple(v_857),msg_e(alice,charlie))) in
        {316}let v_860: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_857))) in
        {317}let v_861: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_858))) && success?(1-proj-3-tuple(v_857))) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-2-tuple(v_860))))) then cipherstatepack(1-proj-2-tuple(v_860),increment_nonce(2-proj-2-tuple(v_858))) else fail-any) else fail-any)) in
        {318}let v_862: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_857)) && success?(1-proj-3-tuple(v_857))) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then (if not-caught-fail(v_859) then (if not-caught-fail(v_861) then (v_861,v_859) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {319}let v_863: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_862),2-proj-3-tuple(v_857),3-proj-3-tuple(v_857)))) in
        {320}let v_864: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_862)) && success?(symmetricstatepack(1-proj-2-tuple(v_862),2-proj-3-tuple(v_857),3-proj-3-tuple(v_857)))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack(1-proj-3-tuple(v_863),2-proj-3-tuple(v_863),hash(3-proj-3-tuple(v_863),2-proj-2-tuple(v_862))) else fail-any) else fail-any)) in
        {321}let v_865: bitstring = catch-fail((if success?(1-proj-7-tuple(v_855)) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if (not-caught-fail(v_862) && success?(is-true(success?(1-proj-2-tuple(v_862))))) then (if not-caught-fail(v_864) then (v_864,2-proj-2-tuple(v_862)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {322}let v_866: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_865),2-proj-7-tuple(v_855),3-proj-7-tuple(v_855),4-proj-7-tuple(v_855),5-proj-7-tuple(v_855),6-proj-7-tuple(v_855),7-proj-7-tuple(v_855))) in
        {323}let v_867: bitstring = catch-fail(concat3(1-proj-3-tuple(v_856),2-proj-3-tuple(v_856),2-proj-2-tuple(v_865))) in
        {324}let (hs_868: handshakestate,re_869: key,message_e_870: bitstring) = (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-7-tuple(v_855))))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_866) then (if not-caught-fail(v_867) then (v_866,5-proj-7-tuple(v_855),v_867) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {325}event SendMsg(alice,charlie,stage_e,msg_e(alice,charlie),true);
        {326}insert statestore(alice,charlie,statepack_f(hs_868));
        {327}out(pub, message_e_870)
    ) | (
        {356}get statestore(=alice,=charlie,statepack_f(hs_871: handshakestate)) in
        {329}in(pub, message_f_872: bitstring);
        {330}let v_873: bitstring = catch-fail(handshakestateunpack(hs_871)) in
        {331}let v_874: bitstring = catch-fail(deconcat3(message_f_872)) in
        {332}let v_875: bool = catch-fail(true) in
        {333}let v_876: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_873))) in
        {334}let v_877: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_876))) in
        {335}let v_878: aead = catch-fail(decrypt(1-proj-2-tuple(v_877),2-proj-2-tuple(v_877),3-proj-3-tuple(v_876),3-proj-3-tuple(v_874))) in
        {336}let v_879: bitstring = catch-fail(aeadunpack(v_878)) in
        {337}let v_880: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_876))) in
        {338}let v_881: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_877))) && success?(1-proj-3-tuple(v_876))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then cipherstatepack(1-proj-2-tuple(v_880),increment_nonce(2-proj-2-tuple(v_877))) else fail-any) else fail-any)) in
        {339}let v_882: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_874)) && (success?(3-proj-3-tuple(v_876)) && success?(1-proj-3-tuple(v_876)))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-2-tuple(v_877))))) then (if not-caught-fail(v_878) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if not-caught-fail(v_881) then (v_881,3-proj-3-tuple(v_879),1-proj-3-tuple(v_879)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {340}let v_883: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)))) in
        {341}let v_884: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_874)) && success?(symmetricstatepack(1-proj-3-tuple(v_882),2-proj-3-tuple(v_876),3-proj-3-tuple(v_876)))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then symmetricstatepack(1-proj-3-tuple(v_883),2-proj-3-tuple(v_883),hash(3-proj-3-tuple(v_883),3-proj-3-tuple(v_874))) else fail-any) else fail-any)) in
        {342}let v_885: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_874)) && success?(1-proj-7-tuple(v_873))) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-3-tuple(v_876))))) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if not-caught-fail(v_884) then (v_884,2-proj-3-tuple(v_882),3-proj-3-tuple(v_882)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {343}let v_886: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_885),2-proj-7-tuple(v_873),3-proj-7-tuple(v_873),4-proj-7-tuple(v_873),5-proj-7-tuple(v_873),6-proj-7-tuple(v_873),7-proj-7-tuple(v_873))) in
        {344}let v_887: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_885))) in
        {345}let v_888: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_887),zero)) in
        {346}let v_889: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_887),zero)) in
        {347}let v_890: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_887),zero)) in
        {348}let v_891: bitstring = catch-fail((if success?(2-proj-3-tuple(v_887)) then (if not-caught-fail(v_888) then (if not-caught-fail(v_889) then (if not-caught-fail(v_890) then (v_888,v_889,v_890) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {349}let v_892: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_891)) then cipherstatepack(1-proj-3-tuple(v_891),minnonce) else fail-any)) in
        {350}let v_893: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_891)) then cipherstatepack(2-proj-3-tuple(v_891),minnonce) else fail-any)) in
        {351}let v_894: bitstring = catch-fail((if success?(1-proj-3-tuple(v_885)) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-3-tuple(v_891))))) then (if not-caught-fail(v_892) then (if not-caught-fail(v_893) then (1-proj-3-tuple(v_885),v_892,v_893) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let (hs_895: handshakestate,re_896: key,plaintext_f_897: bitstring,valid_898: bool,cs1_899: cipherstate,cs2_900: cipherstate) = (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-7-tuple(v_873))))) then (if (not-caught-fail(v_874) && success?(is-true(success?(1-proj-3-tuple(v_874))))) then (if not-caught-fail(v_875) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if (v_875 && 3-proj-3-tuple(v_885)) then (if not-caught-fail(v_886) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (v_886,getpublickey(3-proj-7-tuple(v_873)),2-proj-3-tuple(v_885),true,2-proj-3-tuple(v_894),3-proj-3-tuple(v_894)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {353}event RecvMsg(alice,charlie,stage_f,plaintext_f_897,valid_898);
        {354}insert statestore(alice,charlie,statepack_g(hs_895));
        {355}event RecvEnd(valid_898)
    ) | (
        {357}event LeakS(phase0,alice);
        {358}out(pub, key_s(alice))
    ) | (
        {359}phase 1;
        {360}event LeakS(phase1,alice);
        {361}out(pub, key_s(alice))
    )
) | (
    {362}let v_901: key = catch-fail(dhexp(key_s(bob),g)) in
    {363}let s_902: keypair = (if not-caught-fail(v_901) then keypairpack(v_901,key_s(bob)) else fail-any) in
    {364}out(pub, getpublickey(s_902));
    (
        {365}let e_903: keypair = keypairpack(empty,empty) in
        {366}let rs_904: key = empty in
        {367}let re_905: key = empty in
        {368}let v_906: bitstring = catch-fail(hash(somename,empty)) in
        {369}let v_907: key = catch-fail(v_906) in
        {370}let v_908: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {371}let v_909: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then symmetricstatepack(v_908,v_907,v_906) else fail-any) else fail-any) else fail-any))) in
        {372}let v_910: symmetricstate = catch-fail((if success?((if not-caught-fail(v_906) then (if not-caught-fail(v_907) then (if not-caught-fail(v_908) then symmetricstatepack(v_908,v_907,v_906) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then symmetricstatepack(1-proj-3-tuple(v_909),2-proj-3-tuple(v_909),hash(3-proj-3-tuple(v_909),empty)) else fail-any) else fail-any)) in
        {373}let v_911: bitstring = catch-fail(symmetricstateunpack(v_910)) in
        {374}let v_912: symmetricstate = catch-fail((if success?(getpublickey(s_902)) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then symmetricstatepack(1-proj-3-tuple(v_911),2-proj-3-tuple(v_911),hash(3-proj-3-tuple(v_911),getpublickey(s_902))) else fail-any) else fail-any)) in
        {375}let hs_913: handshakestate = (if not-caught-fail(v_910) then (if not-caught-fail(v_912) then handshakestatepack(v_912,s_902,e_903,rs_904,re_905,empty,false) else fail-any) else fail-any) in
        {376}insert statestore(bob,alice,statepack_a(hs_913))
    ) | (
        {405}get statestore(=bob,=alice,statepack_a(hs_914: handshakestate)) in
        {377}in(pub, message_a_915: bitstring);
        {378}let v_916: bitstring = catch-fail(handshakestateunpack(hs_914)) in
        {379}let v_917: bitstring = catch-fail(deconcat3(message_a_915)) in
        {380}let v_918: bool = catch-fail(true) in
        {381}let v_919: key = catch-fail(1-proj-3-tuple(v_917)) in
        {382}let v_920: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_916))) in
        {383}let v_921: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_916)) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-3-tuple(v_920))))) then symmetricstatepack(1-proj-3-tuple(v_920),2-proj-3-tuple(v_920),hash(3-proj-3-tuple(v_920),v_919)) else fail-any) else fail-any)) in
        {384}let v_922: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_916))) in
        {385}let v_923: bitstring = catch-fail(symmetricstateunpack(v_921)) in
        {386}let v_924: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_923),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),v_919) else fail-any) else fail-any))) in
        {387}let v_925: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_923),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),v_919) else fail-any) else fail-any))) in
        {388}let v_926: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_923),(if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),v_919) else fail-any) else fail-any))) in
        {389}let v_927: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),v_919) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_923))) then (if not-caught-fail(v_924) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (v_924,v_925,v_926) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let v_928: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_916)) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then dhexp(2-proj-2-tuple(v_922),v_919) else fail-any) else fail-any)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-3-tuple(v_923))))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-3-tuple(v_927))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_927)) then cipherstatepack(2-proj-3-tuple(v_927),minnonce) else fail-any),1-proj-3-tuple(v_927),3-proj-3-tuple(v_923)) else fail-any) else fail-any) else fail-any)) in
        {391}let v_929: bitstring = catch-fail(symmetricstateunpack(v_928)) in
        {392}let v_930: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {393}let v_931: aead = catch-fail(decrypt(1-proj-2-tuple(v_930),2-proj-2-tuple(v_930),3-proj-3-tuple(v_929),3-proj-3-tuple(v_917))) in
        {394}let v_932: bitstring = catch-fail(aeadunpack(v_931)) in
        {395}let v_933: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_929))) in
        {396}let v_934: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_930))) && success?(1-proj-3-tuple(v_929))) then (if (not-caught-fail(v_933) && success?(is-true(success?(1-proj-2-tuple(v_933))))) then cipherstatepack(1-proj-2-tuple(v_933),increment_nonce(2-proj-2-tuple(v_930))) else fail-any) else fail-any)) in
        {397}let v_935: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_917)) && (success?(3-proj-3-tuple(v_929)) && success?(1-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then (if not-caught-fail(v_931) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then (if not-caught-fail(v_934) then (v_934,3-proj-3-tuple(v_932),1-proj-3-tuple(v_932)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {398}let v_936: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) in
        {399}let v_937: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_917)) && success?(symmetricstatepack(1-proj-3-tuple(v_935),2-proj-3-tuple(v_929),3-proj-3-tuple(v_929)))) then (if (not-caught-fail(v_936) && success?(is-true(success?(1-proj-3-tuple(v_936))))) then symmetricstatepack(1-proj-3-tuple(v_936),2-proj-3-tuple(v_936),hash(3-proj-3-tuple(v_936),3-proj-3-tuple(v_917))) else fail-any) else fail-any)) in
        {400}let v_938: bitstring = catch-fail((if success?(3-proj-3-tuple(v_917)) then (if (not-caught-fail(v_929) && success?(is-true(success?(1-proj-3-tuple(v_929))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then (if not-caught-fail(v_937) then (v_937,2-proj-3-tuple(v_935),3-proj-3-tuple(v_935)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {401}let v_939: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_938),2-proj-7-tuple(v_916),3-proj-7-tuple(v_916),4-proj-7-tuple(v_916),v_919,6-proj-7-tuple(v_916),7-proj-7-tuple(v_916))) in
        {402}let (hs_940: handshakestate,re_941: key,plaintext_a: bitstring,valid_942: bool) = (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-7-tuple(v_916))))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if not-caught-fail(v_918) then (if not-caught-fail(v_919) then (if not-caught-fail(v_921) then (if not-caught-fail(v_928) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-3-tuple(v_938))))) then (if (v_918 && 3-proj-3-tuple(v_938)) then (if not-caught-fail(v_939) then (v_939,getpublickey(3-proj-7-tuple(v_916)),2-proj-3-tuple(v_938),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {403}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_942);
        {404}insert statestore(bob,alice,statepack_b(hs_940))
    ) | (
        {435}get statestore(=bob,=alice,statepack_b(hs_943: handshakestate)) in
        {406}let v_944: bitstring = catch-fail(handshakestateunpack(hs_943)) in
        {407}let v_945: bitstring = catch-fail((empty,empty,empty)) in
        {408}let v_946: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {409}let v_947: keypair = catch-fail((if not-caught-fail(v_946) then keypairpack(v_946,key_e(bob,alice)) else fail-any)) in
        {410}let v_948: bitstring = catch-fail(getpublickey(v_947)) in
        {411}let v_949: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_944))) in
        {412}let v_950: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_944)) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then symmetricstatepack(1-proj-3-tuple(v_949),2-proj-3-tuple(v_949),hash(3-proj-3-tuple(v_949),v_948)) else fail-any) else fail-any)) in
        {413}let v_951: bitstring = catch-fail(keypairunpack(v_947)) in
        {414}let v_952: bitstring = catch-fail(symmetricstateunpack(v_950)) in
        {415}let v_953: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_952),(if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then dhexp(2-proj-2-tuple(v_951),5-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {416}let v_954: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_952),(if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then dhexp(2-proj-2-tuple(v_951),5-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {417}let v_955: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_952),(if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then dhexp(2-proj-2-tuple(v_951),5-proj-7-tuple(v_944)) else fail-any) else fail-any))) in
        {418}let v_956: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then dhexp(2-proj-2-tuple(v_951),5-proj-7-tuple(v_944)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_952))) then (if not-caught-fail(v_953) then (if not-caught-fail(v_954) then (if not-caught-fail(v_955) then (v_953,v_954,v_955) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {419}let v_957: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_944)) then (if (not-caught-fail(v_951) && success?(is-true(success?(1-proj-2-tuple(v_951))))) then dhexp(2-proj-2-tuple(v_951),5-proj-7-tuple(v_944)) else fail-any) else fail-any)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-3-tuple(v_956))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_956)) then cipherstatepack(2-proj-3-tuple(v_956),minnonce) else fail-any),1-proj-3-tuple(v_956),3-proj-3-tuple(v_952)) else fail-any) else fail-any) else fail-any)) in
        {420}let v_958: bitstring = catch-fail(symmetricstateunpack(v_957)) in
        {421}let v_959: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_958))) in
        {422}let v_960: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_959),2-proj-2-tuple(v_959),3-proj-3-tuple(v_958),msg_b(bob,alice))) in
        {423}let v_961: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_958))) in
        {424}let v_962: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_959))) && success?(1-proj-3-tuple(v_958))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-2-tuple(v_961))))) then cipherstatepack(1-proj-2-tuple(v_961),increment_nonce(2-proj-2-tuple(v_959))) else fail-any) else fail-any)) in
        {425}let v_963: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_958)) && success?(1-proj-3-tuple(v_958))) then (if (not-caught-fail(v_959) && success?(is-true(success?(1-proj-2-tuple(v_959))))) then (if not-caught-fail(v_960) then (if not-caught-fail(v_962) then (v_962,v_960) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {426}let v_964: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_963),2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)))) in
        {427}let v_965: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_963)) && success?(symmetricstatepack(1-proj-2-tuple(v_963),2-proj-3-tuple(v_958),3-proj-3-tuple(v_958)))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then symmetricstatepack(1-proj-3-tuple(v_964),2-proj-3-tuple(v_964),hash(3-proj-3-tuple(v_964),2-proj-2-tuple(v_963))) else fail-any) else fail-any)) in
        {428}let v_966: bitstring = catch-fail((if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then (if not-caught-fail(v_965) then (v_965,2-proj-2-tuple(v_963)) else fail-any) else fail-any) else fail-any)) in
        {429}let v_967: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_966),2-proj-7-tuple(v_944),v_947,4-proj-7-tuple(v_944),5-proj-7-tuple(v_944),6-proj-7-tuple(v_944),7-proj-7-tuple(v_944))) in
        {430}let v_968: bitstring = catch-fail(concat3(v_948,2-proj-3-tuple(v_945),2-proj-2-tuple(v_966))) in
        {431}let (hs_969: handshakestate,re_970: key,message_b_971: bitstring) = (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-7-tuple(v_944))))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then (if not-caught-fail(v_947) then (if not-caught-fail(v_948) then (if not-caught-fail(v_950) then (if not-caught-fail(v_957) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-2-tuple(v_966))))) then (if not-caught-fail(v_967) then (if not-caught-fail(v_968) then (v_967,5-proj-7-tuple(v_944),v_968) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {432}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {433}insert statestore(bob,alice,statepack_c(hs_969));
        {434}out(pub, message_b_971)
    ) | (
        {466}get statestore(=bob,=alice,statepack_c(hs_972: handshakestate)) in
        {436}in(pub, message_c_973: bitstring);
        {437}let v_974: bitstring = catch-fail(handshakestateunpack(hs_972)) in
        {438}let v_975: bitstring = catch-fail(deconcat3(message_c_973)) in
        {439}let v_976: bool = catch-fail(true) in
        {440}let v_977: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_974))) in
        {441}let v_978: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_977))) in
        {442}let v_979: aead = catch-fail(decrypt(1-proj-2-tuple(v_978),2-proj-2-tuple(v_978),3-proj-3-tuple(v_977),2-proj-3-tuple(v_975))) in
        {443}let v_980: bitstring = catch-fail(aeadunpack(v_979)) in
        {444}let v_981: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_977))) in
        {445}let v_982: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_978))) && success?(1-proj-3-tuple(v_977))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-2-tuple(v_981))))) then cipherstatepack(1-proj-2-tuple(v_981),increment_nonce(2-proj-2-tuple(v_978))) else fail-any) else fail-any)) in
        {446}let v_983: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_975)) && (success?(3-proj-3-tuple(v_977)) && success?(1-proj-3-tuple(v_977)))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then (if not-caught-fail(v_979) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-3-tuple(v_980))))) then (if not-caught-fail(v_982) then (v_982,3-proj-3-tuple(v_980),1-proj-3-tuple(v_980)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let v_984: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_983),2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)))) in
        {448}let v_985: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_975)) && success?(symmetricstatepack(1-proj-3-tuple(v_983),2-proj-3-tuple(v_977),3-proj-3-tuple(v_977)))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-3-tuple(v_984))))) then symmetricstatepack(1-proj-3-tuple(v_984),2-proj-3-tuple(v_984),hash(3-proj-3-tuple(v_984),2-proj-3-tuple(v_975))) else fail-any) else fail-any)) in
        {449}let v_986: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_975)) && success?(1-proj-7-tuple(v_974))) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if not-caught-fail(v_985) then (v_985,2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {450}let v_987: key = catch-fail(2-proj-3-tuple(v_986)) in
        {451}let v_988: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_986))) in
        {452}let v_989: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_988))) in
        {453}let v_990: aead = catch-fail(decrypt(1-proj-2-tuple(v_989),2-proj-2-tuple(v_989),3-proj-3-tuple(v_988),3-proj-3-tuple(v_975))) in
        {454}let v_991: bitstring = catch-fail(aeadunpack(v_990)) in
        {455}let v_992: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_988))) in
        {456}let v_993: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_989))) && success?(1-proj-3-tuple(v_988))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then cipherstatepack(1-proj-2-tuple(v_992),increment_nonce(2-proj-2-tuple(v_989))) else fail-any) else fail-any)) in
        {457}let v_994: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_975)) && (success?(3-proj-3-tuple(v_988)) && success?(1-proj-3-tuple(v_988)))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-2-tuple(v_989))))) then (if not-caught-fail(v_990) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-3-tuple(v_991))))) then (if not-caught-fail(v_993) then (v_993,3-proj-3-tuple(v_991),1-proj-3-tuple(v_991)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {458}let v_995: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_994),2-proj-3-tuple(v_988),3-proj-3-tuple(v_988)))) in
        {459}let v_996: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_975)) && success?(symmetricstatepack(1-proj-3-tuple(v_994),2-proj-3-tuple(v_988),3-proj-3-tuple(v_988)))) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-3-tuple(v_995))))) then symmetricstatepack(1-proj-3-tuple(v_995),2-proj-3-tuple(v_995),hash(3-proj-3-tuple(v_995),3-proj-3-tuple(v_975))) else fail-any) else fail-any)) in
        {460}let v_997: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_975)) && success?(1-proj-3-tuple(v_986))) then (if (not-caught-fail(v_988) && success?(is-true(success?(1-proj-3-tuple(v_988))))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then (if not-caught-fail(v_996) then (v_996,2-proj-3-tuple(v_994),3-proj-3-tuple(v_994)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {461}let v_998: key = catch-fail(dhexp(key_s(alice),g)) in
        {462}let v_999: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_997),2-proj-7-tuple(v_974),3-proj-7-tuple(v_974),v_987,5-proj-7-tuple(v_974),6-proj-7-tuple(v_974),7-proj-7-tuple(v_974))) in
        {463}let (hs_1000: handshakestate,re_1001: key,plaintext_c: bitstring,valid_1002: bool) = (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-7-tuple(v_974))))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-3-tuple(v_975))))) then (if not-caught-fail(v_976) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if not-caught-fail(v_987) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then (if ((3-proj-3-tuple(v_986) && 3-proj-3-tuple(v_997)) && (v_987 = getpublickey((if not-caught-fail(v_998) then keypairpack(v_998,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_999) then (v_999,getpublickey(3-proj-7-tuple(v_974)),2-proj-3-tuple(v_997),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {464}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_1002);
        {465}insert statestore(bob,alice,statepack_d(hs_1000))
    ) | (
        {491}get statestore(=bob,=alice,statepack_d(hs_1003: handshakestate)) in
        {467}let v_1004: bitstring = catch-fail(handshakestateunpack(hs_1003)) in
        {468}let v_1005: bitstring = catch-fail((empty,empty,empty)) in
        {469}let v_1006: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1004))) in
        {470}let v_1007: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1004))) in
        {471}let v_1008: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1007),(if (success?(4-proj-7-tuple(v_1004)) && success?(3-proj-7-tuple(v_1004))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_1004)) else fail-any) else fail-any))) in
        {472}let v_1009: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1007),(if (success?(4-proj-7-tuple(v_1004)) && success?(3-proj-7-tuple(v_1004))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_1004)) else fail-any) else fail-any))) in
        {473}let v_1010: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1007),(if (success?(4-proj-7-tuple(v_1004)) && success?(3-proj-7-tuple(v_1004))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_1004)) else fail-any) else fail-any))) in
        {474}let v_1011: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1004)) && success?(3-proj-7-tuple(v_1004))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_1004)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1007))) then (if not-caught-fail(v_1008) then (if not-caught-fail(v_1009) then (if not-caught-fail(v_1010) then (v_1008,v_1009,v_1010) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {475}let v_1012: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1004)) && success?(3-proj-7-tuple(v_1004))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_1004)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1004))) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1011)) then cipherstatepack(2-proj-3-tuple(v_1011),minnonce) else fail-any),1-proj-3-tuple(v_1011),3-proj-3-tuple(v_1007)) else fail-any) else fail-any) else fail-any)) in
        {476}let v_1013: bitstring = catch-fail(symmetricstateunpack(v_1012)) in
        {477}let v_1014: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1013))) in
        {478}let v_1015: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1014),2-proj-2-tuple(v_1014),3-proj-3-tuple(v_1013),msg_d(bob,alice))) in
        {479}let v_1016: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1013))) in
        {480}let v_1017: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1014))) && success?(1-proj-3-tuple(v_1013))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-2-tuple(v_1016))))) then cipherstatepack(1-proj-2-tuple(v_1016),increment_nonce(2-proj-2-tuple(v_1014))) else fail-any) else fail-any)) in
        {481}let v_1018: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1013)) && success?(1-proj-3-tuple(v_1013))) then (if (not-caught-fail(v_1014) && success?(is-true(success?(1-proj-2-tuple(v_1014))))) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1017) then (v_1017,v_1015) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {482}let v_1019: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1018),2-proj-3-tuple(v_1013),3-proj-3-tuple(v_1013)))) in
        {483}let v_1020: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1018)) && success?(symmetricstatepack(1-proj-2-tuple(v_1018),2-proj-3-tuple(v_1013),3-proj-3-tuple(v_1013)))) then (if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then symmetricstatepack(1-proj-3-tuple(v_1019),2-proj-3-tuple(v_1019),hash(3-proj-3-tuple(v_1019),2-proj-2-tuple(v_1018))) else fail-any) else fail-any)) in
        {484}let v_1021: bitstring = catch-fail((if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-3-tuple(v_1013))))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then (if not-caught-fail(v_1020) then (v_1020,2-proj-2-tuple(v_1018)) else fail-any) else fail-any) else fail-any)) in
        {485}let v_1022: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1021),2-proj-7-tuple(v_1004),3-proj-7-tuple(v_1004),4-proj-7-tuple(v_1004),5-proj-7-tuple(v_1004),6-proj-7-tuple(v_1004),7-proj-7-tuple(v_1004))) in
        {486}let v_1023: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1005),2-proj-3-tuple(v_1005),2-proj-2-tuple(v_1021))) in
        {487}let (hs_1024: handshakestate,re_1025: key,message_d_1026: bitstring) = (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-7-tuple(v_1004))))) then (if (not-caught-fail(v_1005) && success?(is-true(success?(1-proj-3-tuple(v_1005))))) then (if not-caught-fail(v_1012) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-2-tuple(v_1021))))) then (if not-caught-fail(v_1022) then (if not-caught-fail(v_1023) then (v_1022,5-proj-7-tuple(v_1004),v_1023) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {488}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {489}insert statestore(bob,alice,statepack_e(hs_1024));
        {490}out(pub, message_d_1026)
    ) | (
        {510}get statestore(=bob,=alice,statepack_e(hs_1027: handshakestate)) in
        {492}in(pub, message_e_1028: bitstring);
        {493}let v_1029: bitstring = catch-fail(handshakestateunpack(hs_1027)) in
        {494}let v_1030: bitstring = catch-fail(deconcat3(message_e_1028)) in
        {495}let v_1031: bool = catch-fail(true) in
        {496}let v_1032: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1029))) in
        {497}let v_1033: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1032))) in
        {498}let v_1034: aead = catch-fail(decrypt(1-proj-2-tuple(v_1033),2-proj-2-tuple(v_1033),3-proj-3-tuple(v_1032),3-proj-3-tuple(v_1030))) in
        {499}let v_1035: bitstring = catch-fail(aeadunpack(v_1034)) in
        {500}let v_1036: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1032))) in
        {501}let v_1037: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1033))) && success?(1-proj-3-tuple(v_1032))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-2-tuple(v_1036))))) then cipherstatepack(1-proj-2-tuple(v_1036),increment_nonce(2-proj-2-tuple(v_1033))) else fail-any) else fail-any)) in
        {502}let v_1038: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1030)) && (success?(3-proj-3-tuple(v_1032)) && success?(1-proj-3-tuple(v_1032)))) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-2-tuple(v_1033))))) then (if not-caught-fail(v_1034) then (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-3-tuple(v_1035))))) then (if not-caught-fail(v_1037) then (v_1037,3-proj-3-tuple(v_1035),1-proj-3-tuple(v_1035)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {503}let v_1039: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1032),3-proj-3-tuple(v_1032)))) in
        {504}let v_1040: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1030)) && success?(symmetricstatepack(1-proj-3-tuple(v_1038),2-proj-3-tuple(v_1032),3-proj-3-tuple(v_1032)))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1039),hash(3-proj-3-tuple(v_1039),3-proj-3-tuple(v_1030))) else fail-any) else fail-any)) in
        {505}let v_1041: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1030)) && success?(1-proj-7-tuple(v_1029))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-3-tuple(v_1032))))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then (if not-caught-fail(v_1040) then (v_1040,2-proj-3-tuple(v_1038),3-proj-3-tuple(v_1038)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {506}let v_1042: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1041),2-proj-7-tuple(v_1029),3-proj-7-tuple(v_1029),4-proj-7-tuple(v_1029),5-proj-7-tuple(v_1029),6-proj-7-tuple(v_1029),7-proj-7-tuple(v_1029))) in
        {507}let (hs_1043: handshakestate,re_1044: key,plaintext_e: bitstring,valid_1045: bool) = (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-7-tuple(v_1029))))) then (if (not-caught-fail(v_1030) && success?(is-true(success?(1-proj-3-tuple(v_1030))))) then (if not-caught-fail(v_1031) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if (v_1031 && 3-proj-3-tuple(v_1041)) then (if not-caught-fail(v_1042) then (v_1042,getpublickey(3-proj-7-tuple(v_1029)),2-proj-3-tuple(v_1041),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {508}event RecvMsg(bob,alice,stage_e,plaintext_e,valid_1045);
        {509}insert statestore(bob,alice,statepack_f(hs_1043))
    ) | (
        {536}get statestore(=bob,=alice,statepack_f(hs_1046: handshakestate)) in
        {511}let v_1047: bitstring = catch-fail(handshakestateunpack(hs_1046)) in
        {512}let v_1048: bitstring = catch-fail((empty,empty,empty)) in
        {513}let v_1049: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1047))) in
        {514}let v_1050: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1049))) in
        {515}let v_1051: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1050),2-proj-2-tuple(v_1050),3-proj-3-tuple(v_1049),msg_f(bob,alice))) in
        {516}let v_1052: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1049))) in
        {517}let v_1053: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1050))) && success?(1-proj-3-tuple(v_1049))) then (if (not-caught-fail(v_1052) && success?(is-true(success?(1-proj-2-tuple(v_1052))))) then cipherstatepack(1-proj-2-tuple(v_1052),increment_nonce(2-proj-2-tuple(v_1050))) else fail-any) else fail-any)) in
        {518}let v_1054: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1049)) && success?(1-proj-3-tuple(v_1049))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-2-tuple(v_1050))))) then (if not-caught-fail(v_1051) then (if not-caught-fail(v_1053) then (v_1053,v_1051) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {519}let v_1055: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1054),2-proj-3-tuple(v_1049),3-proj-3-tuple(v_1049)))) in
        {520}let v_1056: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1054)) && success?(symmetricstatepack(1-proj-2-tuple(v_1054),2-proj-3-tuple(v_1049),3-proj-3-tuple(v_1049)))) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then symmetricstatepack(1-proj-3-tuple(v_1055),2-proj-3-tuple(v_1055),hash(3-proj-3-tuple(v_1055),2-proj-2-tuple(v_1054))) else fail-any) else fail-any)) in
        {521}let v_1057: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1047)) then (if (not-caught-fail(v_1049) && success?(is-true(success?(1-proj-3-tuple(v_1049))))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then (if not-caught-fail(v_1056) then (v_1056,2-proj-2-tuple(v_1054)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {522}let v_1058: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1057),2-proj-7-tuple(v_1047),3-proj-7-tuple(v_1047),4-proj-7-tuple(v_1047),5-proj-7-tuple(v_1047),6-proj-7-tuple(v_1047),7-proj-7-tuple(v_1047))) in
        {523}let v_1059: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1048),2-proj-3-tuple(v_1048),2-proj-2-tuple(v_1057))) in
        {524}let v_1060: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1057))) in
        {525}let v_1061: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1060),zero)) in
        {526}let v_1062: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1060),zero)) in
        {527}let v_1063: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1060),zero)) in
        {528}let v_1064: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1060)) then (if not-caught-fail(v_1061) then (if not-caught-fail(v_1062) then (if not-caught-fail(v_1063) then (v_1061,v_1062,v_1063) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1065: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1064)) then cipherstatepack(1-proj-3-tuple(v_1064),minnonce) else fail-any)) in
        {530}let v_1066: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1064)) then cipherstatepack(2-proj-3-tuple(v_1064),minnonce) else fail-any)) in
        {531}let v_1067: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1057)) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-3-tuple(v_1060))))) then (if (not-caught-fail(v_1064) && success?(is-true(success?(1-proj-3-tuple(v_1064))))) then (if not-caught-fail(v_1065) then (if not-caught-fail(v_1066) then (1-proj-2-tuple(v_1057),v_1065,v_1066) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let (hs_1068: handshakestate,re_1069: key,message_f_1070: bitstring,cs1_1071: cipherstate,cs2_1072: cipherstate) = (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-7-tuple(v_1047))))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-2-tuple(v_1057))))) then (if not-caught-fail(v_1058) then (if not-caught-fail(v_1059) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then (v_1058,5-proj-7-tuple(v_1047),v_1059,2-proj-3-tuple(v_1067),3-proj-3-tuple(v_1067)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {533}event SendMsg(bob,alice,stage_f,msg_f(bob,alice),true);
        {534}insert statestore(bob,alice,statepack_g(hs_1068));
        {535}out(pub, message_f_1070)
    ) | (
        {537}event LeakS(phase0,bob);
        {538}out(pub, key_s(bob))
    ) | (
        {539}phase 1;
        {540}event LeakS(phase1,bob);
        {541}out(pub, key_s(bob))
    )
) | (
    {542}let v_1073: key = catch-fail(dhexp(key_s(bob),g)) in
    {543}let s_1074: keypair = (if not-caught-fail(v_1073) then keypairpack(v_1073,key_s(bob)) else fail-any) in
    {544}out(pub, getpublickey(s_1074));
    (
        {545}let e_1075: keypair = keypairpack(empty,empty) in
        {546}let rs_1076: key = empty in
        {547}let re_1077: key = empty in
        {548}let v_1078: bitstring = catch-fail(hash(somename,empty)) in
        {549}let v_1079: key = catch-fail(v_1078) in
        {550}let v_1080: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {551}let v_1081: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1078) then (if not-caught-fail(v_1079) then (if not-caught-fail(v_1080) then symmetricstatepack(v_1080,v_1079,v_1078) else fail-any) else fail-any) else fail-any))) in
        {552}let v_1082: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1078) then (if not-caught-fail(v_1079) then (if not-caught-fail(v_1080) then symmetricstatepack(v_1080,v_1079,v_1078) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1081) && success?(is-true(success?(1-proj-3-tuple(v_1081))))) then symmetricstatepack(1-proj-3-tuple(v_1081),2-proj-3-tuple(v_1081),hash(3-proj-3-tuple(v_1081),empty)) else fail-any) else fail-any)) in
        {553}let v_1083: bitstring = catch-fail(symmetricstateunpack(v_1082)) in
        {554}let v_1084: symmetricstate = catch-fail((if success?(getpublickey(s_1074)) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then symmetricstatepack(1-proj-3-tuple(v_1083),2-proj-3-tuple(v_1083),hash(3-proj-3-tuple(v_1083),getpublickey(s_1074))) else fail-any) else fail-any)) in
        {555}let hs_1085: handshakestate = (if not-caught-fail(v_1082) then (if not-caught-fail(v_1084) then handshakestatepack(v_1084,s_1074,e_1075,rs_1076,re_1077,empty,false) else fail-any) else fail-any) in
        {556}insert statestore(bob,charlie,statepack_a(hs_1085))
    ) | (
        {585}get statestore(=bob,=charlie,statepack_a(hs_1086: handshakestate)) in
        {557}in(pub, message_a_1087: bitstring);
        {558}let v_1088: bitstring = catch-fail(handshakestateunpack(hs_1086)) in
        {559}let v_1089: bitstring = catch-fail(deconcat3(message_a_1087)) in
        {560}let v_1090: bool = catch-fail(true) in
        {561}let v_1091: key = catch-fail(1-proj-3-tuple(v_1089)) in
        {562}let v_1092: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1088))) in
        {563}let v_1093: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1088)) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-3-tuple(v_1092))))) then symmetricstatepack(1-proj-3-tuple(v_1092),2-proj-3-tuple(v_1092),hash(3-proj-3-tuple(v_1092),v_1091)) else fail-any) else fail-any)) in
        {564}let v_1094: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1088))) in
        {565}let v_1095: bitstring = catch-fail(symmetricstateunpack(v_1093)) in
        {566}let v_1096: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1095),(if success?(2-proj-7-tuple(v_1088)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),v_1091) else fail-any) else fail-any))) in
        {567}let v_1097: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1095),(if success?(2-proj-7-tuple(v_1088)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),v_1091) else fail-any) else fail-any))) in
        {568}let v_1098: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1095),(if success?(2-proj-7-tuple(v_1088)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),v_1091) else fail-any) else fail-any))) in
        {569}let v_1099: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1088)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),v_1091) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1095))) then (if not-caught-fail(v_1096) then (if not-caught-fail(v_1097) then (if not-caught-fail(v_1098) then (v_1096,v_1097,v_1098) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {570}let v_1100: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1088)) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-2-tuple(v_1094))))) then dhexp(2-proj-2-tuple(v_1094),v_1091) else fail-any) else fail-any)) then (if (not-caught-fail(v_1095) && success?(is-true(success?(1-proj-3-tuple(v_1095))))) then (if (not-caught-fail(v_1099) && success?(is-true(success?(1-proj-3-tuple(v_1099))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1099)) then cipherstatepack(2-proj-3-tuple(v_1099),minnonce) else fail-any),1-proj-3-tuple(v_1099),3-proj-3-tuple(v_1095)) else fail-any) else fail-any) else fail-any)) in
        {571}let v_1101: bitstring = catch-fail(symmetricstateunpack(v_1100)) in
        {572}let v_1102: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1101))) in
        {573}let v_1103: aead = catch-fail(decrypt(1-proj-2-tuple(v_1102),2-proj-2-tuple(v_1102),3-proj-3-tuple(v_1101),3-proj-3-tuple(v_1089))) in
        {574}let v_1104: bitstring = catch-fail(aeadunpack(v_1103)) in
        {575}let v_1105: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1101))) in
        {576}let v_1106: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1102))) && success?(1-proj-3-tuple(v_1101))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then cipherstatepack(1-proj-2-tuple(v_1105),increment_nonce(2-proj-2-tuple(v_1102))) else fail-any) else fail-any)) in
        {577}let v_1107: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1089)) && (success?(3-proj-3-tuple(v_1101)) && success?(1-proj-3-tuple(v_1101)))) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then (if not-caught-fail(v_1103) then (if (not-caught-fail(v_1104) && success?(is-true(success?(1-proj-3-tuple(v_1104))))) then (if not-caught-fail(v_1106) then (v_1106,3-proj-3-tuple(v_1104),1-proj-3-tuple(v_1104)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {578}let v_1108: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1107),2-proj-3-tuple(v_1101),3-proj-3-tuple(v_1101)))) in
        {579}let v_1109: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1089)) && success?(symmetricstatepack(1-proj-3-tuple(v_1107),2-proj-3-tuple(v_1101),3-proj-3-tuple(v_1101)))) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-3-tuple(v_1108))))) then symmetricstatepack(1-proj-3-tuple(v_1108),2-proj-3-tuple(v_1108),hash(3-proj-3-tuple(v_1108),3-proj-3-tuple(v_1089))) else fail-any) else fail-any)) in
        {580}let v_1110: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1089)) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-3-tuple(v_1101))))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then (if not-caught-fail(v_1109) then (v_1109,2-proj-3-tuple(v_1107),3-proj-3-tuple(v_1107)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {581}let v_1111: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1110),2-proj-7-tuple(v_1088),3-proj-7-tuple(v_1088),4-proj-7-tuple(v_1088),v_1091,6-proj-7-tuple(v_1088),7-proj-7-tuple(v_1088))) in
        {582}let (hs_1112: handshakestate,re_1113: key,plaintext_a_1114: bitstring,valid_1115: bool) = (if (not-caught-fail(v_1088) && success?(is-true(success?(1-proj-7-tuple(v_1088))))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-3-tuple(v_1089))))) then (if not-caught-fail(v_1090) then (if not-caught-fail(v_1091) then (if not-caught-fail(v_1093) then (if not-caught-fail(v_1100) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-3-tuple(v_1110))))) then (if (v_1090 && 3-proj-3-tuple(v_1110)) then (if not-caught-fail(v_1111) then (v_1111,getpublickey(3-proj-7-tuple(v_1088)),2-proj-3-tuple(v_1110),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {583}event RecvMsg(bob,charlie,stage_a,plaintext_a_1114,valid_1115);
        {584}insert statestore(bob,charlie,statepack_b(hs_1112))
    ) | (
        {615}get statestore(=bob,=charlie,statepack_b(hs_1116: handshakestate)) in
        {586}let v_1117: bitstring = catch-fail(handshakestateunpack(hs_1116)) in
        {587}let v_1118: bitstring = catch-fail((empty,empty,empty)) in
        {588}let v_1119: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {589}let v_1120: keypair = catch-fail((if not-caught-fail(v_1119) then keypairpack(v_1119,key_e(bob,charlie)) else fail-any)) in
        {590}let v_1121: bitstring = catch-fail(getpublickey(v_1120)) in
        {591}let v_1122: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1117))) in
        {592}let v_1123: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1117)) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-3-tuple(v_1122))))) then symmetricstatepack(1-proj-3-tuple(v_1122),2-proj-3-tuple(v_1122),hash(3-proj-3-tuple(v_1122),v_1121)) else fail-any) else fail-any)) in
        {593}let v_1124: bitstring = catch-fail(keypairunpack(v_1120)) in
        {594}let v_1125: bitstring = catch-fail(symmetricstateunpack(v_1123)) in
        {595}let v_1126: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1125),(if success?(5-proj-7-tuple(v_1117)) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then dhexp(2-proj-2-tuple(v_1124),5-proj-7-tuple(v_1117)) else fail-any) else fail-any))) in
        {596}let v_1127: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1125),(if success?(5-proj-7-tuple(v_1117)) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then dhexp(2-proj-2-tuple(v_1124),5-proj-7-tuple(v_1117)) else fail-any) else fail-any))) in
        {597}let v_1128: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1125),(if success?(5-proj-7-tuple(v_1117)) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then dhexp(2-proj-2-tuple(v_1124),5-proj-7-tuple(v_1117)) else fail-any) else fail-any))) in
        {598}let v_1129: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1117)) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then dhexp(2-proj-2-tuple(v_1124),5-proj-7-tuple(v_1117)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1125))) then (if not-caught-fail(v_1126) then (if not-caught-fail(v_1127) then (if not-caught-fail(v_1128) then (v_1126,v_1127,v_1128) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {599}let v_1130: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1117)) then (if (not-caught-fail(v_1124) && success?(is-true(success?(1-proj-2-tuple(v_1124))))) then dhexp(2-proj-2-tuple(v_1124),5-proj-7-tuple(v_1117)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then (if (not-caught-fail(v_1129) && success?(is-true(success?(1-proj-3-tuple(v_1129))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1129)) then cipherstatepack(2-proj-3-tuple(v_1129),minnonce) else fail-any),1-proj-3-tuple(v_1129),3-proj-3-tuple(v_1125)) else fail-any) else fail-any) else fail-any)) in
        {600}let v_1131: bitstring = catch-fail(symmetricstateunpack(v_1130)) in
        {601}let v_1132: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1131))) in
        {602}let v_1133: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1132),2-proj-2-tuple(v_1132),3-proj-3-tuple(v_1131),msg_b(bob,charlie))) in
        {603}let v_1134: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1131))) in
        {604}let v_1135: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1132))) && success?(1-proj-3-tuple(v_1131))) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-2-tuple(v_1134))))) then cipherstatepack(1-proj-2-tuple(v_1134),increment_nonce(2-proj-2-tuple(v_1132))) else fail-any) else fail-any)) in
        {605}let v_1136: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1131)) && success?(1-proj-3-tuple(v_1131))) then (if (not-caught-fail(v_1132) && success?(is-true(success?(1-proj-2-tuple(v_1132))))) then (if not-caught-fail(v_1133) then (if not-caught-fail(v_1135) then (v_1135,v_1133) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {606}let v_1137: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1136),2-proj-3-tuple(v_1131),3-proj-3-tuple(v_1131)))) in
        {607}let v_1138: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1136)) && success?(symmetricstatepack(1-proj-2-tuple(v_1136),2-proj-3-tuple(v_1131),3-proj-3-tuple(v_1131)))) then (if (not-caught-fail(v_1137) && success?(is-true(success?(1-proj-3-tuple(v_1137))))) then symmetricstatepack(1-proj-3-tuple(v_1137),2-proj-3-tuple(v_1137),hash(3-proj-3-tuple(v_1137),2-proj-2-tuple(v_1136))) else fail-any) else fail-any)) in
        {608}let v_1139: bitstring = catch-fail((if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-3-tuple(v_1131))))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-2-tuple(v_1136))))) then (if not-caught-fail(v_1138) then (v_1138,2-proj-2-tuple(v_1136)) else fail-any) else fail-any) else fail-any)) in
        {609}let v_1140: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1139),2-proj-7-tuple(v_1117),v_1120,4-proj-7-tuple(v_1117),5-proj-7-tuple(v_1117),6-proj-7-tuple(v_1117),7-proj-7-tuple(v_1117))) in
        {610}let v_1141: bitstring = catch-fail(concat3(v_1121,2-proj-3-tuple(v_1118),2-proj-2-tuple(v_1139))) in
        {611}let (hs_1142: handshakestate,re_1143: key,message_b_1144: bitstring) = (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-7-tuple(v_1117))))) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-3-tuple(v_1118))))) then (if not-caught-fail(v_1120) then (if not-caught-fail(v_1121) then (if not-caught-fail(v_1123) then (if not-caught-fail(v_1130) then (if (not-caught-fail(v_1139) && success?(is-true(success?(1-proj-2-tuple(v_1139))))) then (if not-caught-fail(v_1140) then (if not-caught-fail(v_1141) then (v_1140,5-proj-7-tuple(v_1117),v_1141) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {612}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {613}insert statestore(bob,charlie,statepack_c(hs_1142));
        {614}out(pub, message_b_1144)
    ) | (
        {646}get statestore(=bob,=charlie,statepack_c(hs_1145: handshakestate)) in
        {616}in(pub, message_c_1146: bitstring);
        {617}let v_1147: bitstring = catch-fail(handshakestateunpack(hs_1145)) in
        {618}let v_1148: bitstring = catch-fail(deconcat3(message_c_1146)) in
        {619}let v_1149: bool = catch-fail(true) in
        {620}let v_1150: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1147))) in
        {621}let v_1151: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1150))) in
        {622}let v_1152: aead = catch-fail(decrypt(1-proj-2-tuple(v_1151),2-proj-2-tuple(v_1151),3-proj-3-tuple(v_1150),2-proj-3-tuple(v_1148))) in
        {623}let v_1153: bitstring = catch-fail(aeadunpack(v_1152)) in
        {624}let v_1154: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1150))) in
        {625}let v_1155: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1151))) && success?(1-proj-3-tuple(v_1150))) then (if (not-caught-fail(v_1154) && success?(is-true(success?(1-proj-2-tuple(v_1154))))) then cipherstatepack(1-proj-2-tuple(v_1154),increment_nonce(2-proj-2-tuple(v_1151))) else fail-any) else fail-any)) in
        {626}let v_1156: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1148)) && (success?(3-proj-3-tuple(v_1150)) && success?(1-proj-3-tuple(v_1150)))) then (if (not-caught-fail(v_1151) && success?(is-true(success?(1-proj-2-tuple(v_1151))))) then (if not-caught-fail(v_1152) then (if (not-caught-fail(v_1153) && success?(is-true(success?(1-proj-3-tuple(v_1153))))) then (if not-caught-fail(v_1155) then (v_1155,3-proj-3-tuple(v_1153),1-proj-3-tuple(v_1153)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {627}let v_1157: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1156),2-proj-3-tuple(v_1150),3-proj-3-tuple(v_1150)))) in
        {628}let v_1158: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1148)) && success?(symmetricstatepack(1-proj-3-tuple(v_1156),2-proj-3-tuple(v_1150),3-proj-3-tuple(v_1150)))) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-3-tuple(v_1157))))) then symmetricstatepack(1-proj-3-tuple(v_1157),2-proj-3-tuple(v_1157),hash(3-proj-3-tuple(v_1157),2-proj-3-tuple(v_1148))) else fail-any) else fail-any)) in
        {629}let v_1159: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1148)) && success?(1-proj-7-tuple(v_1147))) then (if (not-caught-fail(v_1150) && success?(is-true(success?(1-proj-3-tuple(v_1150))))) then (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-3-tuple(v_1156))))) then (if not-caught-fail(v_1158) then (v_1158,2-proj-3-tuple(v_1156),3-proj-3-tuple(v_1156)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {630}let v_1160: key = catch-fail(2-proj-3-tuple(v_1159)) in
        {631}let v_1161: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1159))) in
        {632}let v_1162: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1161))) in
        {633}let v_1163: aead = catch-fail(decrypt(1-proj-2-tuple(v_1162),2-proj-2-tuple(v_1162),3-proj-3-tuple(v_1161),3-proj-3-tuple(v_1148))) in
        {634}let v_1164: bitstring = catch-fail(aeadunpack(v_1163)) in
        {635}let v_1165: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1161))) in
        {636}let v_1166: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1162))) && success?(1-proj-3-tuple(v_1161))) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-2-tuple(v_1165))))) then cipherstatepack(1-proj-2-tuple(v_1165),increment_nonce(2-proj-2-tuple(v_1162))) else fail-any) else fail-any)) in
        {637}let v_1167: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1148)) && (success?(3-proj-3-tuple(v_1161)) && success?(1-proj-3-tuple(v_1161)))) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-2-tuple(v_1162))))) then (if not-caught-fail(v_1163) then (if (not-caught-fail(v_1164) && success?(is-true(success?(1-proj-3-tuple(v_1164))))) then (if not-caught-fail(v_1166) then (v_1166,3-proj-3-tuple(v_1164),1-proj-3-tuple(v_1164)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {638}let v_1168: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1167),2-proj-3-tuple(v_1161),3-proj-3-tuple(v_1161)))) in
        {639}let v_1169: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1148)) && success?(symmetricstatepack(1-proj-3-tuple(v_1167),2-proj-3-tuple(v_1161),3-proj-3-tuple(v_1161)))) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-3-tuple(v_1168))))) then symmetricstatepack(1-proj-3-tuple(v_1168),2-proj-3-tuple(v_1168),hash(3-proj-3-tuple(v_1168),3-proj-3-tuple(v_1148))) else fail-any) else fail-any)) in
        {640}let v_1170: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1148)) && success?(1-proj-3-tuple(v_1159))) then (if (not-caught-fail(v_1161) && success?(is-true(success?(1-proj-3-tuple(v_1161))))) then (if (not-caught-fail(v_1167) && success?(is-true(success?(1-proj-3-tuple(v_1167))))) then (if not-caught-fail(v_1169) then (v_1169,2-proj-3-tuple(v_1167),3-proj-3-tuple(v_1167)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {641}let v_1171: key = catch-fail(dhexp(key_s(charlie),g)) in
        {642}let v_1172: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1170),2-proj-7-tuple(v_1147),3-proj-7-tuple(v_1147),v_1160,5-proj-7-tuple(v_1147),6-proj-7-tuple(v_1147),7-proj-7-tuple(v_1147))) in
        {643}let (hs_1173: handshakestate,re_1174: key,plaintext_c_1175: bitstring,valid_1176: bool) = (if (not-caught-fail(v_1147) && success?(is-true(success?(1-proj-7-tuple(v_1147))))) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-3-tuple(v_1148))))) then (if not-caught-fail(v_1149) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-3-tuple(v_1159))))) then (if not-caught-fail(v_1160) then (if (not-caught-fail(v_1170) && success?(is-true(success?(1-proj-3-tuple(v_1170))))) then (if ((3-proj-3-tuple(v_1159) && 3-proj-3-tuple(v_1170)) && (v_1160 = getpublickey((if not-caught-fail(v_1171) then keypairpack(v_1171,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1172) then (v_1172,getpublickey(3-proj-7-tuple(v_1147)),2-proj-3-tuple(v_1170),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {644}event RecvMsg(bob,charlie,stage_c,plaintext_c_1175,valid_1176);
        {645}insert statestore(bob,charlie,statepack_d(hs_1173))
    ) | (
        {671}get statestore(=bob,=charlie,statepack_d(hs_1177: handshakestate)) in
        {647}let v_1178: bitstring = catch-fail(handshakestateunpack(hs_1177)) in
        {648}let v_1179: bitstring = catch-fail((empty,empty,empty)) in
        {649}let v_1180: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1178))) in
        {650}let v_1181: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1178))) in
        {651}let v_1182: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1181),(if (success?(4-proj-7-tuple(v_1178)) && success?(3-proj-7-tuple(v_1178))) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-2-tuple(v_1180))))) then dhexp(2-proj-2-tuple(v_1180),4-proj-7-tuple(v_1178)) else fail-any) else fail-any))) in
        {652}let v_1183: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1181),(if (success?(4-proj-7-tuple(v_1178)) && success?(3-proj-7-tuple(v_1178))) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-2-tuple(v_1180))))) then dhexp(2-proj-2-tuple(v_1180),4-proj-7-tuple(v_1178)) else fail-any) else fail-any))) in
        {653}let v_1184: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1181),(if (success?(4-proj-7-tuple(v_1178)) && success?(3-proj-7-tuple(v_1178))) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-2-tuple(v_1180))))) then dhexp(2-proj-2-tuple(v_1180),4-proj-7-tuple(v_1178)) else fail-any) else fail-any))) in
        {654}let v_1185: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1178)) && success?(3-proj-7-tuple(v_1178))) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-2-tuple(v_1180))))) then dhexp(2-proj-2-tuple(v_1180),4-proj-7-tuple(v_1178)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1181))) then (if not-caught-fail(v_1182) then (if not-caught-fail(v_1183) then (if not-caught-fail(v_1184) then (v_1182,v_1183,v_1184) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {655}let v_1186: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1178)) && success?(3-proj-7-tuple(v_1178))) then (if (not-caught-fail(v_1180) && success?(is-true(success?(1-proj-2-tuple(v_1180))))) then dhexp(2-proj-2-tuple(v_1180),4-proj-7-tuple(v_1178)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1178))) then (if (not-caught-fail(v_1181) && success?(is-true(success?(1-proj-3-tuple(v_1181))))) then (if (not-caught-fail(v_1185) && success?(is-true(success?(1-proj-3-tuple(v_1185))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1185)) then cipherstatepack(2-proj-3-tuple(v_1185),minnonce) else fail-any),1-proj-3-tuple(v_1185),3-proj-3-tuple(v_1181)) else fail-any) else fail-any) else fail-any)) in
        {656}let v_1187: bitstring = catch-fail(symmetricstateunpack(v_1186)) in
        {657}let v_1188: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1187))) in
        {658}let v_1189: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1188),2-proj-2-tuple(v_1188),3-proj-3-tuple(v_1187),msg_d(bob,charlie))) in
        {659}let v_1190: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1187))) in
        {660}let v_1191: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1188))) && success?(1-proj-3-tuple(v_1187))) then (if (not-caught-fail(v_1190) && success?(is-true(success?(1-proj-2-tuple(v_1190))))) then cipherstatepack(1-proj-2-tuple(v_1190),increment_nonce(2-proj-2-tuple(v_1188))) else fail-any) else fail-any)) in
        {661}let v_1192: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1187)) && success?(1-proj-3-tuple(v_1187))) then (if (not-caught-fail(v_1188) && success?(is-true(success?(1-proj-2-tuple(v_1188))))) then (if not-caught-fail(v_1189) then (if not-caught-fail(v_1191) then (v_1191,v_1189) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {662}let v_1193: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1192),2-proj-3-tuple(v_1187),3-proj-3-tuple(v_1187)))) in
        {663}let v_1194: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1192)) && success?(symmetricstatepack(1-proj-2-tuple(v_1192),2-proj-3-tuple(v_1187),3-proj-3-tuple(v_1187)))) then (if (not-caught-fail(v_1193) && success?(is-true(success?(1-proj-3-tuple(v_1193))))) then symmetricstatepack(1-proj-3-tuple(v_1193),2-proj-3-tuple(v_1193),hash(3-proj-3-tuple(v_1193),2-proj-2-tuple(v_1192))) else fail-any) else fail-any)) in
        {664}let v_1195: bitstring = catch-fail((if (not-caught-fail(v_1187) && success?(is-true(success?(1-proj-3-tuple(v_1187))))) then (if (not-caught-fail(v_1192) && success?(is-true(success?(1-proj-2-tuple(v_1192))))) then (if not-caught-fail(v_1194) then (v_1194,2-proj-2-tuple(v_1192)) else fail-any) else fail-any) else fail-any)) in
        {665}let v_1196: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1195),2-proj-7-tuple(v_1178),3-proj-7-tuple(v_1178),4-proj-7-tuple(v_1178),5-proj-7-tuple(v_1178),6-proj-7-tuple(v_1178),7-proj-7-tuple(v_1178))) in
        {666}let v_1197: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1179),2-proj-3-tuple(v_1179),2-proj-2-tuple(v_1195))) in
        {667}let (hs_1198: handshakestate,re_1199: key,message_d_1200: bitstring) = (if (not-caught-fail(v_1178) && success?(is-true(success?(1-proj-7-tuple(v_1178))))) then (if (not-caught-fail(v_1179) && success?(is-true(success?(1-proj-3-tuple(v_1179))))) then (if not-caught-fail(v_1186) then (if (not-caught-fail(v_1195) && success?(is-true(success?(1-proj-2-tuple(v_1195))))) then (if not-caught-fail(v_1196) then (if not-caught-fail(v_1197) then (v_1196,5-proj-7-tuple(v_1178),v_1197) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {668}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {669}insert statestore(bob,charlie,statepack_e(hs_1198));
        {670}out(pub, message_d_1200)
    ) | (
        {690}get statestore(=bob,=charlie,statepack_e(hs_1201: handshakestate)) in
        {672}in(pub, message_e_1202: bitstring);
        {673}let v_1203: bitstring = catch-fail(handshakestateunpack(hs_1201)) in
        {674}let v_1204: bitstring = catch-fail(deconcat3(message_e_1202)) in
        {675}let v_1205: bool = catch-fail(true) in
        {676}let v_1206: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1203))) in
        {677}let v_1207: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1206))) in
        {678}let v_1208: aead = catch-fail(decrypt(1-proj-2-tuple(v_1207),2-proj-2-tuple(v_1207),3-proj-3-tuple(v_1206),3-proj-3-tuple(v_1204))) in
        {679}let v_1209: bitstring = catch-fail(aeadunpack(v_1208)) in
        {680}let v_1210: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1206))) in
        {681}let v_1211: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1207))) && success?(1-proj-3-tuple(v_1206))) then (if (not-caught-fail(v_1210) && success?(is-true(success?(1-proj-2-tuple(v_1210))))) then cipherstatepack(1-proj-2-tuple(v_1210),increment_nonce(2-proj-2-tuple(v_1207))) else fail-any) else fail-any)) in
        {682}let v_1212: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1204)) && (success?(3-proj-3-tuple(v_1206)) && success?(1-proj-3-tuple(v_1206)))) then (if (not-caught-fail(v_1207) && success?(is-true(success?(1-proj-2-tuple(v_1207))))) then (if not-caught-fail(v_1208) then (if (not-caught-fail(v_1209) && success?(is-true(success?(1-proj-3-tuple(v_1209))))) then (if not-caught-fail(v_1211) then (v_1211,3-proj-3-tuple(v_1209),1-proj-3-tuple(v_1209)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {683}let v_1213: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1212),2-proj-3-tuple(v_1206),3-proj-3-tuple(v_1206)))) in
        {684}let v_1214: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1204)) && success?(symmetricstatepack(1-proj-3-tuple(v_1212),2-proj-3-tuple(v_1206),3-proj-3-tuple(v_1206)))) then (if (not-caught-fail(v_1213) && success?(is-true(success?(1-proj-3-tuple(v_1213))))) then symmetricstatepack(1-proj-3-tuple(v_1213),2-proj-3-tuple(v_1213),hash(3-proj-3-tuple(v_1213),3-proj-3-tuple(v_1204))) else fail-any) else fail-any)) in
        {685}let v_1215: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1204)) && success?(1-proj-7-tuple(v_1203))) then (if (not-caught-fail(v_1206) && success?(is-true(success?(1-proj-3-tuple(v_1206))))) then (if (not-caught-fail(v_1212) && success?(is-true(success?(1-proj-3-tuple(v_1212))))) then (if not-caught-fail(v_1214) then (v_1214,2-proj-3-tuple(v_1212),3-proj-3-tuple(v_1212)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {686}let v_1216: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1215),2-proj-7-tuple(v_1203),3-proj-7-tuple(v_1203),4-proj-7-tuple(v_1203),5-proj-7-tuple(v_1203),6-proj-7-tuple(v_1203),7-proj-7-tuple(v_1203))) in
        {687}let (hs_1217: handshakestate,re_1218: key,plaintext_e_1219: bitstring,valid_1220: bool) = (if (not-caught-fail(v_1203) && success?(is-true(success?(1-proj-7-tuple(v_1203))))) then (if (not-caught-fail(v_1204) && success?(is-true(success?(1-proj-3-tuple(v_1204))))) then (if not-caught-fail(v_1205) then (if (not-caught-fail(v_1215) && success?(is-true(success?(1-proj-3-tuple(v_1215))))) then (if (v_1205 && 3-proj-3-tuple(v_1215)) then (if not-caught-fail(v_1216) then (v_1216,getpublickey(3-proj-7-tuple(v_1203)),2-proj-3-tuple(v_1215),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {688}event RecvMsg(bob,charlie,stage_e,plaintext_e_1219,valid_1220);
        {689}insert statestore(bob,charlie,statepack_f(hs_1217))
    ) | (
        {716}get statestore(=bob,=charlie,statepack_f(hs_1221: handshakestate)) in
        {691}let v_1222: bitstring = catch-fail(handshakestateunpack(hs_1221)) in
        {692}let v_1223: bitstring = catch-fail((empty,empty,empty)) in
        {693}let v_1224: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1222))) in
        {694}let v_1225: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1224))) in
        {695}let v_1226: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1225),2-proj-2-tuple(v_1225),3-proj-3-tuple(v_1224),msg_f(bob,charlie))) in
        {696}let v_1227: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1224))) in
        {697}let v_1228: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1225))) && success?(1-proj-3-tuple(v_1224))) then (if (not-caught-fail(v_1227) && success?(is-true(success?(1-proj-2-tuple(v_1227))))) then cipherstatepack(1-proj-2-tuple(v_1227),increment_nonce(2-proj-2-tuple(v_1225))) else fail-any) else fail-any)) in
        {698}let v_1229: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1224)) && success?(1-proj-3-tuple(v_1224))) then (if (not-caught-fail(v_1225) && success?(is-true(success?(1-proj-2-tuple(v_1225))))) then (if not-caught-fail(v_1226) then (if not-caught-fail(v_1228) then (v_1228,v_1226) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {699}let v_1230: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1229),2-proj-3-tuple(v_1224),3-proj-3-tuple(v_1224)))) in
        {700}let v_1231: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1229)) && success?(symmetricstatepack(1-proj-2-tuple(v_1229),2-proj-3-tuple(v_1224),3-proj-3-tuple(v_1224)))) then (if (not-caught-fail(v_1230) && success?(is-true(success?(1-proj-3-tuple(v_1230))))) then symmetricstatepack(1-proj-3-tuple(v_1230),2-proj-3-tuple(v_1230),hash(3-proj-3-tuple(v_1230),2-proj-2-tuple(v_1229))) else fail-any) else fail-any)) in
        {701}let v_1232: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1222)) then (if (not-caught-fail(v_1224) && success?(is-true(success?(1-proj-3-tuple(v_1224))))) then (if (not-caught-fail(v_1229) && success?(is-true(success?(1-proj-2-tuple(v_1229))))) then (if not-caught-fail(v_1231) then (v_1231,2-proj-2-tuple(v_1229)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {702}let v_1233: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1232),2-proj-7-tuple(v_1222),3-proj-7-tuple(v_1222),4-proj-7-tuple(v_1222),5-proj-7-tuple(v_1222),6-proj-7-tuple(v_1222),7-proj-7-tuple(v_1222))) in
        {703}let v_1234: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1223),2-proj-3-tuple(v_1223),2-proj-2-tuple(v_1232))) in
        {704}let v_1235: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1232))) in
        {705}let v_1236: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1235),zero)) in
        {706}let v_1237: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1235),zero)) in
        {707}let v_1238: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1235),zero)) in
        {708}let v_1239: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1235)) then (if not-caught-fail(v_1236) then (if not-caught-fail(v_1237) then (if not-caught-fail(v_1238) then (v_1236,v_1237,v_1238) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {709}let v_1240: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1239)) then cipherstatepack(1-proj-3-tuple(v_1239),minnonce) else fail-any)) in
        {710}let v_1241: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1239)) then cipherstatepack(2-proj-3-tuple(v_1239),minnonce) else fail-any)) in
        {711}let v_1242: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1232)) then (if (not-caught-fail(v_1235) && success?(is-true(success?(1-proj-3-tuple(v_1235))))) then (if (not-caught-fail(v_1239) && success?(is-true(success?(1-proj-3-tuple(v_1239))))) then (if not-caught-fail(v_1240) then (if not-caught-fail(v_1241) then (1-proj-2-tuple(v_1232),v_1240,v_1241) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {712}let (hs_1243: handshakestate,re_1244: key,message_f_1245: bitstring,cs1_1246: cipherstate,cs2_1247: cipherstate) = (if (not-caught-fail(v_1222) && success?(is-true(success?(1-proj-7-tuple(v_1222))))) then (if (not-caught-fail(v_1223) && success?(is-true(success?(1-proj-3-tuple(v_1223))))) then (if (not-caught-fail(v_1232) && success?(is-true(success?(1-proj-2-tuple(v_1232))))) then (if not-caught-fail(v_1233) then (if not-caught-fail(v_1234) then (if (not-caught-fail(v_1242) && success?(is-true(success?(1-proj-3-tuple(v_1242))))) then (v_1233,5-proj-7-tuple(v_1222),v_1234,2-proj-3-tuple(v_1242),3-proj-3-tuple(v_1242)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {713}event SendMsg(bob,charlie,stage_f,msg_f(bob,charlie),true);
        {714}insert statestore(bob,charlie,statepack_g(hs_1243));
        {715}out(pub, message_f_1245)
    ) | (
        {717}event LeakS(phase0,bob);
        {718}out(pub, key_s(bob))
    ) | (
        {719}phase 1;
        {720}event LeakS(phase1,bob);
        {721}out(pub, key_s(bob))
    )
) | (
    {722}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1328,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1328,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1328,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1328,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1328,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1328,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1328,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1328,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1328,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1328,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1328,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1328,stage_f,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_f(bob,alice)); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 171 rules in the queue.
400 rules inserted. The rule base contains 394 rules. 61 rules in the queue.
600 rules inserted. The rule base contains 578 rules. 161 rules in the queue.
800 rules inserted. The rule base contains 766 rules. 133 rules in the queue.
1000 rules inserted. The rule base contains 959 rules. 333 rules in the queue.
1200 rules inserted. The rule base contains 1141 rules. 199 rules in the queue.
1400 rules inserted. The rule base contains 1317 rules. 257 rules in the queue.
1600 rules inserted. The rule base contains 1466 rules. 356 rules in the queue.
1800 rules inserted. The rule base contains 1624 rules. 411 rules in the queue.
2000 rules inserted. The rule base contains 1789 rules. 409 rules in the queue.
2200 rules inserted. The rule base contains 1928 rules. 421 rules in the queue.
2400 rules inserted. The rule base contains 2060 rules. 465 rules in the queue.
2600 rules inserted. The rule base contains 2218 rules. 488 rules in the queue.
2800 rules inserted. The rule base contains 2397 rules. 488 rules in the queue.
3000 rules inserted. The rule base contains 2570 rules. 480 rules in the queue.
3200 rules inserted. The rule base contains 2745 rules. 518 rules in the queue.
3400 rules inserted. The rule base contains 2920 rules. 562 rules in the queue.
3600 rules inserted. The rule base contains 3014 rules. 567 rules in the queue.
3800 rules inserted. The rule base contains 3142 rules. 542 rules in the queue.
4000 rules inserted. The rule base contains 3277 rules. 529 rules in the queue.
4200 rules inserted. The rule base contains 3426 rules. 510 rules in the queue.
4400 rules inserted. The rule base contains 3578 rules. 501 rules in the queue.
4600 rules inserted. The rule base contains 3731 rules. 523 rules in the queue.
4800 rules inserted. The rule base contains 3851 rules. 537 rules in the queue.
5000 rules inserted. The rule base contains 3958 rules. 535 rules in the queue.
5200 rules inserted. The rule base contains 4087 rules. 529 rules in the queue.
5400 rules inserted. The rule base contains 4188 rules. 520 rules in the queue.
5600 rules inserted. The rule base contains 4271 rules. 474 rules in the queue.
5800 rules inserted. The rule base contains 4373 rules. 466 rules in the queue.
6000 rules inserted. The rule base contains 4508 rules. 478 rules in the queue.
6200 rules inserted. The rule base contains 4607 rules. 473 rules in the queue.
6400 rules inserted. The rule base contains 4713 rules. 477 rules in the queue.
6600 rules inserted. The rule base contains 4830 rules. 474 rules in the queue.
6800 rules inserted. The rule base contains 4982 rules. 481 rules in the queue.
7000 rules inserted. The rule base contains 5088 rules. 467 rules in the queue.
7200 rules inserted. The rule base contains 5205 rules. 462 rules in the queue.
7400 rules inserted. The rule base contains 5312 rules. 430 rules in the queue.
7600 rules inserted. The rule base contains 5439 rules. 432 rules in the queue.
7800 rules inserted. The rule base contains 5606 rules. 477 rules in the queue.
8000 rules inserted. The rule base contains 5690 rules. 418 rules in the queue.
8200 rules inserted. The rule base contains 5779 rules. 392 rules in the queue.
8400 rules inserted. The rule base contains 5881 rules. 357 rules in the queue.
8600 rules inserted. The rule base contains 6003 rules. 306 rules in the queue.
8800 rules inserted. The rule base contains 6153 rules. 307 rules in the queue.
9000 rules inserted. The rule base contains 6234 rules. 270 rules in the queue.
9200 rules inserted. The rule base contains 6371 rules. 268 rules in the queue.
9400 rules inserted. The rule base contains 6493 rules. 262 rules in the queue.
9600 rules inserted. The rule base contains 6647 rules. 291 rules in the queue.
9800 rules inserted. The rule base contains 6772 rules. 312 rules in the queue.
10000 rules inserted. The rule base contains 6939 rules. 318 rules in the queue.
10200 rules inserted. The rule base contains 7095 rules. 328 rules in the queue.
10400 rules inserted. The rule base contains 7245 rules. 303 rules in the queue.
10600 rules inserted. The rule base contains 7414 rules. 323 rules in the queue.
10800 rules inserted. The rule base contains 7555 rules. 267 rules in the queue.
11000 rules inserted. The rule base contains 7698 rules. 261 rules in the queue.
11200 rules inserted. The rule base contains 7859 rules. 288 rules in the queue.
11400 rules inserted. The rule base contains 8023 rules. 280 rules in the queue.
11600 rules inserted. The rule base contains 8159 rules. 263 rules in the queue.
11800 rules inserted. The rule base contains 8284 rules. 239 rules in the queue.
12000 rules inserted. The rule base contains 8420 rules. 199 rules in the queue.
12200 rules inserted. The rule base contains 8551 rules. 194 rules in the queue.
12400 rules inserted. The rule base contains 8680 rules. 195 rules in the queue.
12600 rules inserted. The rule base contains 8809 rules. 167 rules in the queue.
12800 rules inserted. The rule base contains 8921 rules. 99 rules in the queue.
13000 rules inserted. The rule base contains 8995 rules. 35 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1328,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1328,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1328,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1328,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {364}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. The event LeakS(phase0,bob) may be executed at {537}.
So the message key_s(bob) may be sent on channel pub at output {538}.
mess(pub,key_s(bob)).

19. By 1, the attacker may have the channel pub.
By 18, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

20. By 19, the attacker may know key_s(bob).
By 7, the attacker may know dhexp(key_e(alice,bob),g).
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
attacker(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

21. By 12, the attacker may know hash(somename,empty).
By 20, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).
So the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

9. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

10. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

11. The event LeakS(phase1,bob) may be executed at {540}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {541}.
mess_p1(pub,key_s(bob)).

12. By 10, the attacker may have the channel pub in phase 1.
By 11, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

13. By 12, the attacker may know key_s(bob) in phase 1.
By 9, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 13, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 12, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

22. By 16, the attacker may know hash(somename,empty) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

8. By 7, the attacker may know dhexp(key_e(alice,bob),g).
So the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),g)).

9. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

10. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

11. The event LeakS(phase1,bob) may be executed at {540}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {541}.
mess_p1(pub,key_s(bob)).

12. By 10, the attacker may have the channel pub in phase 1.
By 11, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

13. By 12, the attacker may know key_s(bob) in phase 1.
By 9, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 13, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 12, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know dhexp(key_e(alice,bob),g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_e(alice,bob),dhexp(key_s(bob),g))).

22. By 16, the attacker may know hash(somename,empty) in phase 1.
By 21, the attacker may know dhexp(key_e(alice,bob),dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {44}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {556}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {585}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {557}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {584}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {615}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {612}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {614}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {47}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1328,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1328,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1328,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1328,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {44}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {556}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {585}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {557}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {584}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {615}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {612}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {614}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {47}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {44}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {556}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {46}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {43}.
So the message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) may be sent on channel pub at output {45}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {585}.
The message concat3(dhexp(key_e(alice,bob),g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {557}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {584}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {615}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {612}.
So the message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) may be sent on channel pub at output {614}.
mess(pub,concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {75}.
The message concat3(dhexp(key_e(bob,charlie),g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),dhexp(key_e(alice,bob),dhexp(key_e(bob,charlie),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_e(alice,bob),g)),msg_a(alice,bob))),dhexp(key_e(bob,charlie),g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {47}.
We have dhexp(key_e(bob,charlie),g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {73}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1328,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1328,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1328,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1328,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1328,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1328,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1328,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1328,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1328,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1328,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1328,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1328,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1328,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1328,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1328,stage_f,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1328,stage_f,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_f(bob,alice))
RESULT not attacker_p1(msg_f(bob,alice)) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
