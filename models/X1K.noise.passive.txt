File "X1K.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "X1K.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 292, character 6:
Warning: identifier e rebound.
File "X1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "X1K.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 297, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 298, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 306, character 6:
Warning: identifier e rebound.
File "X1K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ne rebound.
File "X1K.noise.passive.pv", line 308, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 319, character 6:
Warning: identifier s rebound.
File "X1K.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1K.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 346, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 347, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 356, characters 6-7:
Warning: identifier re rebound.
File "X1K.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 370, characters 6-7:
Warning: identifier re rebound.
File "X1K.noise.passive.pv", line 371, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 373, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 374, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 376, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 384, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 384, characters 48-53:
Warning: identifier valid1 rebound.
File "X1K.noise.passive.pv", line 385, characters 6-7:
Warning: identifier rs rebound.
File "X1K.noise.passive.pv", line 386, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 388, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 396, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 397, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 399, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 407, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 409, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 417, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 419, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 619, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 417, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 419, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 611, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 338, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 338, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 339, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 604, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 396, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 397, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 399, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 596, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 319, character 6:
Warning: identifier s rebound.
File "X1K.noise.passive.pv", line 320, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 320, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "X1K.noise.passive.pv", line 321, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 321, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 322, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 589, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 370, characters 6-7:
Warning: identifier re rebound.
File "X1K.noise.passive.pv", line 371, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 373, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 374, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 376, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 581, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 292, character 6:
Warning: identifier e rebound.
File "X1K.noise.passive.pv", line 293, characters 6-7:
Warning: identifier ne rebound.
File "X1K.noise.passive.pv", line 294, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 296, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 297, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 297, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 298, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 280, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 684, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 346, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 346, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 347, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 677, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 407, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 409, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 669, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 329, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 662, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 384, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 384, characters 48-53:
Warning: identifier valid1 rebound.
File "X1K.noise.passive.pv", line 385, characters 6-7:
Warning: identifier rs rebound.
File "X1K.noise.passive.pv", line 386, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 388, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 654, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 306, character 6:
Warning: identifier e rebound.
File "X1K.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ne rebound.
File "X1K.noise.passive.pv", line 308, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 311, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 311, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "X1K.noise.passive.pv", line 312, characters 6-7:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 647, characters 8-9:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 356, characters 6-7:
Warning: identifier re rebound.
File "X1K.noise.passive.pv", line 357, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 362, characters 7-8:
Warning: identifier hs rebound.
File "X1K.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "X1K.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "X1K.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "X1K.noise.passive.pv", line 285, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_566: keypair = keypairpack(empty,empty) in
    {6}out(pub, getpublickey(s_566));
    (
        {7}let e_567: keypair = keypairpack(empty,empty) in
        {8}let v_568: key = catch-fail(dhexp(key_s(them),g)) in
        {9}let rs_569: key = getpublickey((if not-caught-fail(v_568) then keypairpack(v_568,key_s(them)) else fail-any)) in
        {10}let re_570: key = empty in
        {11}let v_571: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_572: key = catch-fail(v_571) in
        {13}let v_573: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_574: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then symmetricstatepack(v_573,v_572,v_571) else fail-any) else fail-any) else fail-any))) in
        {15}let v_575: symmetricstate = catch-fail((if success?((if not-caught-fail(v_571) then (if not-caught-fail(v_572) then (if not-caught-fail(v_573) then symmetricstatepack(v_573,v_572,v_571) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack(1-proj-3-tuple(v_574),2-proj-3-tuple(v_574),hash(3-proj-3-tuple(v_574),empty)) else fail-any) else fail-any)) in
        {16}let v_576: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {17}let v_577: symmetricstate = catch-fail((if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then symmetricstatepack(1-proj-3-tuple(v_576),2-proj-3-tuple(v_576),hash(3-proj-3-tuple(v_576),rs_569)) else fail-any)) in
        {18}let hs: handshakestate = (if not-caught-fail(v_575) then (if not-caught-fail(v_577) then handshakestatepack(v_577,s_566,e_567,rs_569,re_570,empty,true) else fail-any) else fail-any) in
        {19}insert statestore(me,them,statepack_a(hs))
    ) | (
        {50}get statestore(=me,=them,statepack_a(hs_578: handshakestate)) in
        {20}let v_579: bitstring = catch-fail(handshakestateunpack(hs_578)) in
        {21}let v_580: bitstring = catch-fail((empty,empty,empty)) in
        {22}new key_e[me,them]: key;
        {23}let v_581: key = catch-fail(dhexp(key_e,g)) in
        {24}let v_582: keypair = catch-fail((if not-caught-fail(v_581) then keypairpack(v_581,key_e) else fail-any)) in
        {25}let v_583: bitstring = catch-fail(getpublickey(v_582)) in
        {26}let v_584: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_579))) in
        {27}let v_585: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_579)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-3-tuple(v_584))))) then symmetricstatepack(1-proj-3-tuple(v_584),2-proj-3-tuple(v_584),hash(3-proj-3-tuple(v_584),v_583)) else fail-any) else fail-any)) in
        {28}let v_586: bitstring = catch-fail(keypairunpack(v_582)) in
        {29}let v_587: bitstring = catch-fail(symmetricstateunpack(v_585)) in
        {30}let v_588: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_587),(if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any))) in
        {31}let v_589: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_587),(if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any))) in
        {32}let v_590: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_587),(if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any))) in
        {33}let v_591: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_587))) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (if not-caught-fail(v_590) then (v_588,v_589,v_590) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {34}let v_592: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_579)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-2-tuple(v_586))))) then dhexp(2-proj-2-tuple(v_586),4-proj-7-tuple(v_579)) else fail-any) else fail-any)) then (if (not-caught-fail(v_587) && success?(is-true(success?(1-proj-3-tuple(v_587))))) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_591)) then cipherstatepack(2-proj-3-tuple(v_591),minnonce) else fail-any),1-proj-3-tuple(v_591),3-proj-3-tuple(v_587)) else fail-any) else fail-any) else fail-any)) in
        {35}let v_593: bitstring = catch-fail(symmetricstateunpack(v_592)) in
        {36}let v_594: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_593))) in
        {37}let v_595: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_594),2-proj-2-tuple(v_594),3-proj-3-tuple(v_593),msg_a(me,them))) in
        {38}let v_596: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_593))) in
        {39}let v_597: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_594))) && success?(1-proj-3-tuple(v_593))) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-2-tuple(v_596))))) then cipherstatepack(1-proj-2-tuple(v_596),increment_nonce(2-proj-2-tuple(v_594))) else fail-any) else fail-any)) in
        {40}let v_598: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_593)) && success?(1-proj-3-tuple(v_593))) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-2-tuple(v_594))))) then (if not-caught-fail(v_595) then (if not-caught-fail(v_597) then (v_597,v_595) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_599: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_598),2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)))) in
        {42}let v_600: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_598)) && success?(symmetricstatepack(1-proj-2-tuple(v_598),2-proj-3-tuple(v_593),3-proj-3-tuple(v_593)))) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then symmetricstatepack(1-proj-3-tuple(v_599),2-proj-3-tuple(v_599),hash(3-proj-3-tuple(v_599),2-proj-2-tuple(v_598))) else fail-any) else fail-any)) in
        {43}let v_601: bitstring = catch-fail((if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-2-tuple(v_598))))) then (if not-caught-fail(v_600) then (v_600,2-proj-2-tuple(v_598)) else fail-any) else fail-any) else fail-any)) in
        {44}let v_602: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_601),2-proj-7-tuple(v_579),v_582,4-proj-7-tuple(v_579),5-proj-7-tuple(v_579),6-proj-7-tuple(v_579),7-proj-7-tuple(v_579))) in
        {45}let v_603: bitstring = catch-fail(concat3(v_583,2-proj-3-tuple(v_580),2-proj-2-tuple(v_601))) in
        {46}let (hs_604: handshakestate,re_605: key,message_a: bitstring) = (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-7-tuple(v_579))))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then (if not-caught-fail(v_582) then (if not-caught-fail(v_583) then (if not-caught-fail(v_585) then (if not-caught-fail(v_592) then (if (not-caught-fail(v_601) && success?(is-true(success?(1-proj-2-tuple(v_601))))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (v_602,5-proj-7-tuple(v_579),v_603) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {47}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {48}insert statestore(me,them,statepack_b(hs_604));
        {49}out(pub, message_a)
    ) | (
        {79}get statestore(=me,=them,statepack_b(hs_606: handshakestate)) in
        {51}in(pub, message_b: bitstring);
        {52}let v_607: bitstring = catch-fail(handshakestateunpack(hs_606)) in
        {53}let v_608: bitstring = catch-fail(deconcat3(message_b)) in
        {54}let v_609: bool = catch-fail(true) in
        {55}let v_610: key = catch-fail(1-proj-3-tuple(v_608)) in
        {56}let v_611: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_607))) in
        {57}let v_612: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_607)) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-3-tuple(v_611))))) then symmetricstatepack(1-proj-3-tuple(v_611),2-proj-3-tuple(v_611),hash(3-proj-3-tuple(v_611),v_610)) else fail-any) else fail-any)) in
        {58}let v_613: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_607))) in
        {59}let v_614: bitstring = catch-fail(symmetricstateunpack(v_612)) in
        {60}let v_615: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {61}let v_616: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {62}let v_617: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_614),(if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any))) in
        {63}let v_618: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_614))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_616) then (if not-caught-fail(v_617) then (v_615,v_616,v_617) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {64}let v_619: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_607)) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then dhexp(2-proj-2-tuple(v_613),v_610) else fail-any) else fail-any)) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-3-tuple(v_618))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_618)) then cipherstatepack(2-proj-3-tuple(v_618),minnonce) else fail-any),1-proj-3-tuple(v_618),3-proj-3-tuple(v_614)) else fail-any) else fail-any) else fail-any)) in
        {65}let v_620: bitstring = catch-fail(symmetricstateunpack(v_619)) in
        {66}let v_621: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {67}let v_622: aead = catch-fail(decrypt(1-proj-2-tuple(v_621),2-proj-2-tuple(v_621),3-proj-3-tuple(v_620),3-proj-3-tuple(v_608))) in
        {68}let v_623: bitstring = catch-fail(aeadunpack(v_622)) in
        {69}let v_624: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_620))) in
        {70}let v_625: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_621))) && success?(1-proj-3-tuple(v_620))) then (if (not-caught-fail(v_624) && success?(is-true(success?(1-proj-2-tuple(v_624))))) then cipherstatepack(1-proj-2-tuple(v_624),increment_nonce(2-proj-2-tuple(v_621))) else fail-any) else fail-any)) in
        {71}let v_626: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_608)) && (success?(3-proj-3-tuple(v_620)) && success?(1-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_621) && success?(is-true(success?(1-proj-2-tuple(v_621))))) then (if not-caught-fail(v_622) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_625) then (v_625,3-proj-3-tuple(v_623),1-proj-3-tuple(v_623)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_627: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) in
        {73}let v_628: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_608)) && success?(symmetricstatepack(1-proj-3-tuple(v_626),2-proj-3-tuple(v_620),3-proj-3-tuple(v_620)))) then (if (not-caught-fail(v_627) && success?(is-true(success?(1-proj-3-tuple(v_627))))) then symmetricstatepack(1-proj-3-tuple(v_627),2-proj-3-tuple(v_627),hash(3-proj-3-tuple(v_627),3-proj-3-tuple(v_608))) else fail-any) else fail-any)) in
        {74}let v_629: bitstring = catch-fail((if success?(3-proj-3-tuple(v_608)) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-3-tuple(v_620))))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-3-tuple(v_626))))) then (if not-caught-fail(v_628) then (v_628,2-proj-3-tuple(v_626),3-proj-3-tuple(v_626)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {75}let v_630: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_629),2-proj-7-tuple(v_607),3-proj-7-tuple(v_607),4-proj-7-tuple(v_607),v_610,6-proj-7-tuple(v_607),7-proj-7-tuple(v_607))) in
        {76}let (hs_631: handshakestate,re_632: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-7-tuple(v_607))))) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if not-caught-fail(v_609) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (if not-caught-fail(v_619) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-3-tuple(v_629))))) then (if (v_609 && 3-proj-3-tuple(v_629)) then (if not-caught-fail(v_630) then (v_630,getpublickey(3-proj-7-tuple(v_607)),2-proj-3-tuple(v_629),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {77}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {78}insert statestore(me,them,statepack_c(hs_631))
    ) | (
        {108}get statestore(=me,=them,statepack_c(hs_633: handshakestate)) in
        {80}let v_634: bitstring = catch-fail(handshakestateunpack(hs_633)) in
        {81}let v_635: bitstring = catch-fail((empty,empty,empty)) in
        {82}let v_636: key = catch-fail(dhexp(key_s(me),g)) in
        {83}let v_637: keypair = catch-fail((if not-caught-fail(v_636) then keypairpack(v_636,key_s(me)) else fail-any)) in
        {84}let v_638: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_634))) in
        {85}let v_639: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_638))) in
        {86}let v_640: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_639),2-proj-2-tuple(v_639),3-proj-3-tuple(v_638),getpublickey(v_637))) in
        {87}let v_641: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_638))) in
        {88}let v_642: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_639))) && success?(1-proj-3-tuple(v_638))) then (if (not-caught-fail(v_641) && success?(is-true(success?(1-proj-2-tuple(v_641))))) then cipherstatepack(1-proj-2-tuple(v_641),increment_nonce(2-proj-2-tuple(v_639))) else fail-any) else fail-any)) in
        {89}let v_643: bitstring = catch-fail((if (success?(getpublickey(v_637)) && (success?(3-proj-3-tuple(v_638)) && success?(1-proj-3-tuple(v_638)))) then (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-2-tuple(v_639))))) then (if not-caught-fail(v_640) then (if not-caught-fail(v_642) then (v_642,v_640) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_644: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_643),2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)))) in
        {91}let v_645: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_643)) && success?(symmetricstatepack(1-proj-2-tuple(v_643),2-proj-3-tuple(v_638),3-proj-3-tuple(v_638)))) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-3-tuple(v_644))))) then symmetricstatepack(1-proj-3-tuple(v_644),2-proj-3-tuple(v_644),hash(3-proj-3-tuple(v_644),2-proj-2-tuple(v_643))) else fail-any) else fail-any)) in
        {92}let v_646: bitstring = catch-fail((if (success?(getpublickey(v_637)) && success?(1-proj-7-tuple(v_634))) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-2-tuple(v_643))))) then (if not-caught-fail(v_645) then (v_645,2-proj-2-tuple(v_643)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {93}let v_647: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_646))) in
        {94}let v_648: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {95}let v_649: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_648),2-proj-2-tuple(v_648),3-proj-3-tuple(v_647),msg_c(me,them))) in
        {96}let v_650: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_647))) in
        {97}let v_651: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_648))) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_650) && success?(is-true(success?(1-proj-2-tuple(v_650))))) then cipherstatepack(1-proj-2-tuple(v_650),increment_nonce(2-proj-2-tuple(v_648))) else fail-any) else fail-any)) in
        {98}let v_652: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_647)) && success?(1-proj-3-tuple(v_647))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-2-tuple(v_648))))) then (if not-caught-fail(v_649) then (if not-caught-fail(v_651) then (v_651,v_649) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {99}let v_653: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_652),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) in
        {100}let v_654: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_652)) && success?(symmetricstatepack(1-proj-2-tuple(v_652),2-proj-3-tuple(v_647),3-proj-3-tuple(v_647)))) then (if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then symmetricstatepack(1-proj-3-tuple(v_653),2-proj-3-tuple(v_653),hash(3-proj-3-tuple(v_653),2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {101}let v_655: bitstring = catch-fail((if success?(1-proj-2-tuple(v_646)) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_654) then (v_654,2-proj-2-tuple(v_652)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {102}let v_656: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_655),v_637,3-proj-7-tuple(v_634),4-proj-7-tuple(v_634),5-proj-7-tuple(v_634),6-proj-7-tuple(v_634),7-proj-7-tuple(v_634))) in
        {103}let v_657: bitstring = catch-fail(concat3(1-proj-3-tuple(v_635),2-proj-2-tuple(v_646),2-proj-2-tuple(v_655))) in
        {104}let (hs_658: handshakestate,re_659: key,message_c: bitstring) = (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-7-tuple(v_634))))) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then (if not-caught-fail(v_637) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-2-tuple(v_646))))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then (if not-caught-fail(v_656) then (if not-caught-fail(v_657) then (v_656,5-proj-7-tuple(v_634),v_657) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {105}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {106}insert statestore(me,them,statepack_d(hs_658));
        {107}out(pub, message_c)
    ) | (
        {134}get statestore(=me,=them,statepack_d(hs_660: handshakestate)) in
        {109}in(pub, message_d: bitstring);
        {110}let v_661: bitstring = catch-fail(handshakestateunpack(hs_660)) in
        {111}let v_662: bitstring = catch-fail(deconcat3(message_d)) in
        {112}let v_663: bool = catch-fail(true) in
        {113}let v_664: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_661))) in
        {114}let v_665: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_661))) in
        {115}let v_666: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_665),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {116}let v_667: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_665),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {117}let v_668: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_665),(if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any))) in
        {118}let v_669: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_665))) then (if not-caught-fail(v_666) then (if not-caught-fail(v_667) then (if not-caught-fail(v_668) then (v_666,v_667,v_668) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {119}let v_670: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_661)) && success?(2-proj-7-tuple(v_661))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-2-tuple(v_664))))) then dhexp(2-proj-2-tuple(v_664),5-proj-7-tuple(v_661)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_661))) then (if (not-caught-fail(v_665) && success?(is-true(success?(1-proj-3-tuple(v_665))))) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_669)) then cipherstatepack(2-proj-3-tuple(v_669),minnonce) else fail-any),1-proj-3-tuple(v_669),3-proj-3-tuple(v_665)) else fail-any) else fail-any) else fail-any)) in
        {120}let v_671: bitstring = catch-fail(symmetricstateunpack(v_670)) in
        {121}let v_672: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_671))) in
        {122}let v_673: aead = catch-fail(decrypt(1-proj-2-tuple(v_672),2-proj-2-tuple(v_672),3-proj-3-tuple(v_671),3-proj-3-tuple(v_662))) in
        {123}let v_674: bitstring = catch-fail(aeadunpack(v_673)) in
        {124}let v_675: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_671))) in
        {125}let v_676: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_672))) && success?(1-proj-3-tuple(v_671))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then cipherstatepack(1-proj-2-tuple(v_675),increment_nonce(2-proj-2-tuple(v_672))) else fail-any) else fail-any)) in
        {126}let v_677: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_662)) && (success?(3-proj-3-tuple(v_671)) && success?(1-proj-3-tuple(v_671)))) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-2-tuple(v_672))))) then (if not-caught-fail(v_673) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-3-tuple(v_674))))) then (if not-caught-fail(v_676) then (v_676,3-proj-3-tuple(v_674),1-proj-3-tuple(v_674)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {127}let v_678: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_677),2-proj-3-tuple(v_671),3-proj-3-tuple(v_671)))) in
        {128}let v_679: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_662)) && success?(symmetricstatepack(1-proj-3-tuple(v_677),2-proj-3-tuple(v_671),3-proj-3-tuple(v_671)))) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then symmetricstatepack(1-proj-3-tuple(v_678),2-proj-3-tuple(v_678),hash(3-proj-3-tuple(v_678),3-proj-3-tuple(v_662))) else fail-any) else fail-any)) in
        {129}let v_680: bitstring = catch-fail((if success?(3-proj-3-tuple(v_662)) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-3-tuple(v_677))))) then (if not-caught-fail(v_679) then (v_679,2-proj-3-tuple(v_677),3-proj-3-tuple(v_677)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {130}let v_681: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_680),2-proj-7-tuple(v_661),3-proj-7-tuple(v_661),4-proj-7-tuple(v_661),5-proj-7-tuple(v_661),6-proj-7-tuple(v_661),7-proj-7-tuple(v_661))) in
        {131}let (hs_682: handshakestate,re_683: key,plaintext_d: bitstring,valid_684: bool) = (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-7-tuple(v_661))))) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-3-tuple(v_662))))) then (if not-caught-fail(v_663) then (if not-caught-fail(v_670) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then (if (v_663 && 3-proj-3-tuple(v_680)) then (if not-caught-fail(v_681) then (v_681,getpublickey(3-proj-7-tuple(v_661)),2-proj-3-tuple(v_680),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {132}event RecvMsg(me,them,stage_d,plaintext_d,valid_684);
        {133}insert statestore(me,them,statepack_e(hs_682))
    ) | (
        {152}get statestore(=me,=them,statepack_e(hs_685: handshakestate)) in
        {135}let v_686: bitstring = catch-fail(handshakestateunpack(hs_685)) in
        {136}let v_687: bitstring = catch-fail((empty,empty,empty)) in
        {137}let v_688: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_686))) in
        {138}let v_689: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {139}let v_690: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_689),2-proj-2-tuple(v_689),3-proj-3-tuple(v_688),msg_e(me,them))) in
        {140}let v_691: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_688))) in
        {141}let v_692: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_689))) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then cipherstatepack(1-proj-2-tuple(v_691),increment_nonce(2-proj-2-tuple(v_689))) else fail-any) else fail-any)) in
        {142}let v_693: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_688)) && success?(1-proj-3-tuple(v_688))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then (if not-caught-fail(v_690) then (if not-caught-fail(v_692) then (v_692,v_690) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {143}let v_694: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) in
        {144}let v_695: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_693)) && success?(symmetricstatepack(1-proj-2-tuple(v_693),2-proj-3-tuple(v_688),3-proj-3-tuple(v_688)))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-3-tuple(v_694))))) then symmetricstatepack(1-proj-3-tuple(v_694),2-proj-3-tuple(v_694),hash(3-proj-3-tuple(v_694),2-proj-2-tuple(v_693))) else fail-any) else fail-any)) in
        {145}let v_696: bitstring = catch-fail((if success?(1-proj-7-tuple(v_686)) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if (not-caught-fail(v_693) && success?(is-true(success?(1-proj-2-tuple(v_693))))) then (if not-caught-fail(v_695) then (v_695,2-proj-2-tuple(v_693)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {146}let v_697: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_696),2-proj-7-tuple(v_686),3-proj-7-tuple(v_686),4-proj-7-tuple(v_686),5-proj-7-tuple(v_686),6-proj-7-tuple(v_686),7-proj-7-tuple(v_686))) in
        {147}let v_698: bitstring = catch-fail(concat3(1-proj-3-tuple(v_687),2-proj-3-tuple(v_687),2-proj-2-tuple(v_696))) in
        {148}let (hs_699: handshakestate,re_700: key,message_e: bitstring) = (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-7-tuple(v_686))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-3-tuple(v_687))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-2-tuple(v_696))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (v_697,5-proj-7-tuple(v_686),v_698) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {149}event SendMsg(me,them,stage_e,msg_e(me,them),true);
        {150}insert statestore(me,them,statepack_f(hs_699));
        {151}out(pub, message_e)
    ) | (
        {180}get statestore(=me,=them,statepack_f(hs_701: handshakestate)) in
        {153}in(pub, message_f: bitstring);
        {154}let v_702: bitstring = catch-fail(handshakestateunpack(hs_701)) in
        {155}let v_703: bitstring = catch-fail(deconcat3(message_f)) in
        {156}let v_704: bool = catch-fail(true) in
        {157}let v_705: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_702))) in
        {158}let v_706: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_705))) in
        {159}let v_707: aead = catch-fail(decrypt(1-proj-2-tuple(v_706),2-proj-2-tuple(v_706),3-proj-3-tuple(v_705),3-proj-3-tuple(v_703))) in
        {160}let v_708: bitstring = catch-fail(aeadunpack(v_707)) in
        {161}let v_709: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_705))) in
        {162}let v_710: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_706))) && success?(1-proj-3-tuple(v_705))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-2-tuple(v_709))))) then cipherstatepack(1-proj-2-tuple(v_709),increment_nonce(2-proj-2-tuple(v_706))) else fail-any) else fail-any)) in
        {163}let v_711: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_703)) && (success?(3-proj-3-tuple(v_705)) && success?(1-proj-3-tuple(v_705)))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-2-tuple(v_706))))) then (if not-caught-fail(v_707) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-3-tuple(v_708))))) then (if not-caught-fail(v_710) then (v_710,3-proj-3-tuple(v_708),1-proj-3-tuple(v_708)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {164}let v_712: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_711),2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)))) in
        {165}let v_713: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_703)) && success?(symmetricstatepack(1-proj-3-tuple(v_711),2-proj-3-tuple(v_705),3-proj-3-tuple(v_705)))) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then symmetricstatepack(1-proj-3-tuple(v_712),2-proj-3-tuple(v_712),hash(3-proj-3-tuple(v_712),3-proj-3-tuple(v_703))) else fail-any) else fail-any)) in
        {166}let v_714: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_703)) && success?(1-proj-7-tuple(v_702))) then (if (not-caught-fail(v_705) && success?(is-true(success?(1-proj-3-tuple(v_705))))) then (if (not-caught-fail(v_711) && success?(is-true(success?(1-proj-3-tuple(v_711))))) then (if not-caught-fail(v_713) then (v_713,2-proj-3-tuple(v_711),3-proj-3-tuple(v_711)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {167}let v_715: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_714),2-proj-7-tuple(v_702),3-proj-7-tuple(v_702),4-proj-7-tuple(v_702),5-proj-7-tuple(v_702),6-proj-7-tuple(v_702),7-proj-7-tuple(v_702))) in
        {168}let v_716: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_714))) in
        {169}let v_717: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_716),zero)) in
        {170}let v_718: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_716),zero)) in
        {171}let v_719: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_716),zero)) in
        {172}let v_720: bitstring = catch-fail((if success?(2-proj-3-tuple(v_716)) then (if not-caught-fail(v_717) then (if not-caught-fail(v_718) then (if not-caught-fail(v_719) then (v_717,v_718,v_719) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {173}let v_721: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_720)) then cipherstatepack(1-proj-3-tuple(v_720),minnonce) else fail-any)) in
        {174}let v_722: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_720)) then cipherstatepack(2-proj-3-tuple(v_720),minnonce) else fail-any)) in
        {175}let v_723: bitstring = catch-fail((if success?(1-proj-3-tuple(v_714)) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-3-tuple(v_716))))) then (if (not-caught-fail(v_720) && success?(is-true(success?(1-proj-3-tuple(v_720))))) then (if not-caught-fail(v_721) then (if not-caught-fail(v_722) then (1-proj-3-tuple(v_714),v_721,v_722) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {176}let (hs_724: handshakestate,re_725: key,plaintext_f: bitstring,valid_726: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-7-tuple(v_702))))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if not-caught-fail(v_704) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if (v_704 && 3-proj-3-tuple(v_714)) then (if not-caught-fail(v_715) then (if (not-caught-fail(v_723) && success?(is-true(success?(1-proj-3-tuple(v_723))))) then (v_715,getpublickey(3-proj-7-tuple(v_702)),2-proj-3-tuple(v_714),true,2-proj-3-tuple(v_723),3-proj-3-tuple(v_723)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {177}event RecvMsg(me,them,stage_f,plaintext_f,valid_726);
        {178}insert statestore(me,them,statepack_g(hs_724));
        {179}event RecvEnd(valid_726)
    ) | (
        {181}event LeakS(phase0,me);
        {182}out(pub, key_s(me))
    ) | (
        {183}phase 1;
        {184}event LeakS(phase1,me);
        {185}out(pub, key_s(me))
    )
) | (
    {186}let them_727: principal = charlie in
    {187}let me_728: principal = alice in
    {188}let s_729: keypair = keypairpack(empty,empty) in
    {189}out(pub, getpublickey(s_729));
    (
        {190}let e_730: keypair = keypairpack(empty,empty) in
        {191}let v_731: key = catch-fail(dhexp(key_s(them_727),g)) in
        {192}let rs_732: key = getpublickey((if not-caught-fail(v_731) then keypairpack(v_731,key_s(them_727)) else fail-any)) in
        {193}let re_733: key = empty in
        {194}let v_734: bitstring = catch-fail(hash(somename,empty)) in
        {195}let v_735: key = catch-fail(v_734) in
        {196}let v_736: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {197}let v_737: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then symmetricstatepack(v_736,v_735,v_734) else fail-any) else fail-any) else fail-any))) in
        {198}let v_738: symmetricstate = catch-fail((if success?((if not-caught-fail(v_734) then (if not-caught-fail(v_735) then (if not-caught-fail(v_736) then symmetricstatepack(v_736,v_735,v_734) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then symmetricstatepack(1-proj-3-tuple(v_737),2-proj-3-tuple(v_737),hash(3-proj-3-tuple(v_737),empty)) else fail-any) else fail-any)) in
        {199}let v_739: bitstring = catch-fail(symmetricstateunpack(v_738)) in
        {200}let v_740: symmetricstate = catch-fail((if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_739),hash(3-proj-3-tuple(v_739),rs_732)) else fail-any)) in
        {201}let hs_741: handshakestate = (if not-caught-fail(v_738) then (if not-caught-fail(v_740) then handshakestatepack(v_740,s_729,e_730,rs_732,re_733,empty,true) else fail-any) else fail-any) in
        {202}insert statestore(me_728,them_727,statepack_a(hs_741))
    ) | (
        {233}get statestore(=me_728,=them_727,statepack_a(hs_742: handshakestate)) in
        {203}let v_743: bitstring = catch-fail(handshakestateunpack(hs_742)) in
        {204}let v_744: bitstring = catch-fail((empty,empty,empty)) in
        {205}new key_e_745[me_728,them_727]: key;
        {206}let v_746: key = catch-fail(dhexp(key_e_745,g)) in
        {207}let v_747: keypair = catch-fail((if not-caught-fail(v_746) then keypairpack(v_746,key_e_745) else fail-any)) in
        {208}let v_748: bitstring = catch-fail(getpublickey(v_747)) in
        {209}let v_749: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_743))) in
        {210}let v_750: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_743)) then (if (not-caught-fail(v_749) && success?(is-true(success?(1-proj-3-tuple(v_749))))) then symmetricstatepack(1-proj-3-tuple(v_749),2-proj-3-tuple(v_749),hash(3-proj-3-tuple(v_749),v_748)) else fail-any) else fail-any)) in
        {211}let v_751: bitstring = catch-fail(keypairunpack(v_747)) in
        {212}let v_752: bitstring = catch-fail(symmetricstateunpack(v_750)) in
        {213}let v_753: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_752),(if success?(4-proj-7-tuple(v_743)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),4-proj-7-tuple(v_743)) else fail-any) else fail-any))) in
        {214}let v_754: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_752),(if success?(4-proj-7-tuple(v_743)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),4-proj-7-tuple(v_743)) else fail-any) else fail-any))) in
        {215}let v_755: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_752),(if success?(4-proj-7-tuple(v_743)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),4-proj-7-tuple(v_743)) else fail-any) else fail-any))) in
        {216}let v_756: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_743)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),4-proj-7-tuple(v_743)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_752))) then (if not-caught-fail(v_753) then (if not-caught-fail(v_754) then (if not-caught-fail(v_755) then (v_753,v_754,v_755) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {217}let v_757: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_743)) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-2-tuple(v_751))))) then dhexp(2-proj-2-tuple(v_751),4-proj-7-tuple(v_743)) else fail-any) else fail-any)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if (not-caught-fail(v_756) && success?(is-true(success?(1-proj-3-tuple(v_756))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_756)) then cipherstatepack(2-proj-3-tuple(v_756),minnonce) else fail-any),1-proj-3-tuple(v_756),3-proj-3-tuple(v_752)) else fail-any) else fail-any) else fail-any)) in
        {218}let v_758: bitstring = catch-fail(symmetricstateunpack(v_757)) in
        {219}let v_759: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_758))) in
        {220}let v_760: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_759),2-proj-2-tuple(v_759),3-proj-3-tuple(v_758),msg_a(me_728,them_727))) in
        {221}let v_761: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_758))) in
        {222}let v_762: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_759))) && success?(1-proj-3-tuple(v_758))) then (if (not-caught-fail(v_761) && success?(is-true(success?(1-proj-2-tuple(v_761))))) then cipherstatepack(1-proj-2-tuple(v_761),increment_nonce(2-proj-2-tuple(v_759))) else fail-any) else fail-any)) in
        {223}let v_763: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_758)) && success?(1-proj-3-tuple(v_758))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then (if not-caught-fail(v_760) then (if not-caught-fail(v_762) then (v_762,v_760) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {224}let v_764: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_763),2-proj-3-tuple(v_758),3-proj-3-tuple(v_758)))) in
        {225}let v_765: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_763)) && success?(symmetricstatepack(1-proj-2-tuple(v_763),2-proj-3-tuple(v_758),3-proj-3-tuple(v_758)))) then (if (not-caught-fail(v_764) && success?(is-true(success?(1-proj-3-tuple(v_764))))) then symmetricstatepack(1-proj-3-tuple(v_764),2-proj-3-tuple(v_764),hash(3-proj-3-tuple(v_764),2-proj-2-tuple(v_763))) else fail-any) else fail-any)) in
        {226}let v_766: bitstring = catch-fail((if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then (if (not-caught-fail(v_763) && success?(is-true(success?(1-proj-2-tuple(v_763))))) then (if not-caught-fail(v_765) then (v_765,2-proj-2-tuple(v_763)) else fail-any) else fail-any) else fail-any)) in
        {227}let v_767: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_766),2-proj-7-tuple(v_743),v_747,4-proj-7-tuple(v_743),5-proj-7-tuple(v_743),6-proj-7-tuple(v_743),7-proj-7-tuple(v_743))) in
        {228}let v_768: bitstring = catch-fail(concat3(v_748,2-proj-3-tuple(v_744),2-proj-2-tuple(v_766))) in
        {229}let (hs_769: handshakestate,re_770: key,message_a_771: bitstring) = (if (not-caught-fail(v_743) && success?(is-true(success?(1-proj-7-tuple(v_743))))) then (if (not-caught-fail(v_744) && success?(is-true(success?(1-proj-3-tuple(v_744))))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_748) then (if not-caught-fail(v_750) then (if not-caught-fail(v_757) then (if (not-caught-fail(v_766) && success?(is-true(success?(1-proj-2-tuple(v_766))))) then (if not-caught-fail(v_767) then (if not-caught-fail(v_768) then (v_767,5-proj-7-tuple(v_743),v_768) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {230}event SendMsg(me_728,them_727,stage_a,msg_a(me_728,them_727),true);
        {231}insert statestore(me_728,them_727,statepack_b(hs_769));
        {232}out(pub, message_a_771)
    ) | (
        {262}get statestore(=me_728,=them_727,statepack_b(hs_772: handshakestate)) in
        {234}in(pub, message_b_773: bitstring);
        {235}let v_774: bitstring = catch-fail(handshakestateunpack(hs_772)) in
        {236}let v_775: bitstring = catch-fail(deconcat3(message_b_773)) in
        {237}let v_776: bool = catch-fail(true) in
        {238}let v_777: key = catch-fail(1-proj-3-tuple(v_775)) in
        {239}let v_778: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_774))) in
        {240}let v_779: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_774)) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then symmetricstatepack(1-proj-3-tuple(v_778),2-proj-3-tuple(v_778),hash(3-proj-3-tuple(v_778),v_777)) else fail-any) else fail-any)) in
        {241}let v_780: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_774))) in
        {242}let v_781: bitstring = catch-fail(symmetricstateunpack(v_779)) in
        {243}let v_782: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_781),(if success?(3-proj-7-tuple(v_774)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),v_777) else fail-any) else fail-any))) in
        {244}let v_783: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_781),(if success?(3-proj-7-tuple(v_774)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),v_777) else fail-any) else fail-any))) in
        {245}let v_784: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_781),(if success?(3-proj-7-tuple(v_774)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),v_777) else fail-any) else fail-any))) in
        {246}let v_785: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_774)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),v_777) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_781))) then (if not-caught-fail(v_782) then (if not-caught-fail(v_783) then (if not-caught-fail(v_784) then (v_782,v_783,v_784) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {247}let v_786: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_774)) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-2-tuple(v_780))))) then dhexp(2-proj-2-tuple(v_780),v_777) else fail-any) else fail-any)) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then (if (not-caught-fail(v_785) && success?(is-true(success?(1-proj-3-tuple(v_785))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_785)) then cipherstatepack(2-proj-3-tuple(v_785),minnonce) else fail-any),1-proj-3-tuple(v_785),3-proj-3-tuple(v_781)) else fail-any) else fail-any) else fail-any)) in
        {248}let v_787: bitstring = catch-fail(symmetricstateunpack(v_786)) in
        {249}let v_788: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_787))) in
        {250}let v_789: aead = catch-fail(decrypt(1-proj-2-tuple(v_788),2-proj-2-tuple(v_788),3-proj-3-tuple(v_787),3-proj-3-tuple(v_775))) in
        {251}let v_790: bitstring = catch-fail(aeadunpack(v_789)) in
        {252}let v_791: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_787))) in
        {253}let v_792: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_788))) && success?(1-proj-3-tuple(v_787))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-2-tuple(v_791))))) then cipherstatepack(1-proj-2-tuple(v_791),increment_nonce(2-proj-2-tuple(v_788))) else fail-any) else fail-any)) in
        {254}let v_793: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_775)) && (success?(3-proj-3-tuple(v_787)) && success?(1-proj-3-tuple(v_787)))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-2-tuple(v_788))))) then (if not-caught-fail(v_789) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if not-caught-fail(v_792) then (v_792,3-proj-3-tuple(v_790),1-proj-3-tuple(v_790)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {255}let v_794: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)))) in
        {256}let v_795: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_775)) && success?(symmetricstatepack(1-proj-3-tuple(v_793),2-proj-3-tuple(v_787),3-proj-3-tuple(v_787)))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-3-tuple(v_794))))) then symmetricstatepack(1-proj-3-tuple(v_794),2-proj-3-tuple(v_794),hash(3-proj-3-tuple(v_794),3-proj-3-tuple(v_775))) else fail-any) else fail-any)) in
        {257}let v_796: bitstring = catch-fail((if success?(3-proj-3-tuple(v_775)) then (if (not-caught-fail(v_787) && success?(is-true(success?(1-proj-3-tuple(v_787))))) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if not-caught-fail(v_795) then (v_795,2-proj-3-tuple(v_793),3-proj-3-tuple(v_793)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {258}let v_797: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_796),2-proj-7-tuple(v_774),3-proj-7-tuple(v_774),4-proj-7-tuple(v_774),v_777,6-proj-7-tuple(v_774),7-proj-7-tuple(v_774))) in
        {259}let (hs_798: handshakestate,re_799: key,plaintext_b_800: bitstring,valid_801: bool) = (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-7-tuple(v_774))))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-3-tuple(v_775))))) then (if not-caught-fail(v_776) then (if not-caught-fail(v_777) then (if not-caught-fail(v_779) then (if not-caught-fail(v_786) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then (if (v_776 && 3-proj-3-tuple(v_796)) then (if not-caught-fail(v_797) then (v_797,getpublickey(3-proj-7-tuple(v_774)),2-proj-3-tuple(v_796),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {260}event RecvMsg(me_728,them_727,stage_b,plaintext_b_800,valid_801);
        {261}insert statestore(me_728,them_727,statepack_c(hs_798))
    ) | (
        {291}get statestore(=me_728,=them_727,statepack_c(hs_802: handshakestate)) in
        {263}let v_803: bitstring = catch-fail(handshakestateunpack(hs_802)) in
        {264}let v_804: bitstring = catch-fail((empty,empty,empty)) in
        {265}let v_805: key = catch-fail(dhexp(key_s(me_728),g)) in
        {266}let v_806: keypair = catch-fail((if not-caught-fail(v_805) then keypairpack(v_805,key_s(me_728)) else fail-any)) in
        {267}let v_807: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_803))) in
        {268}let v_808: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_807))) in
        {269}let v_809: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_808),2-proj-2-tuple(v_808),3-proj-3-tuple(v_807),getpublickey(v_806))) in
        {270}let v_810: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_807))) in
        {271}let v_811: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_808))) && success?(1-proj-3-tuple(v_807))) then (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-2-tuple(v_810))))) then cipherstatepack(1-proj-2-tuple(v_810),increment_nonce(2-proj-2-tuple(v_808))) else fail-any) else fail-any)) in
        {272}let v_812: bitstring = catch-fail((if (success?(getpublickey(v_806)) && (success?(3-proj-3-tuple(v_807)) && success?(1-proj-3-tuple(v_807)))) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-2-tuple(v_808))))) then (if not-caught-fail(v_809) then (if not-caught-fail(v_811) then (v_811,v_809) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_813: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_812),2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)))) in
        {274}let v_814: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_812)) && success?(symmetricstatepack(1-proj-2-tuple(v_812),2-proj-3-tuple(v_807),3-proj-3-tuple(v_807)))) then (if (not-caught-fail(v_813) && success?(is-true(success?(1-proj-3-tuple(v_813))))) then symmetricstatepack(1-proj-3-tuple(v_813),2-proj-3-tuple(v_813),hash(3-proj-3-tuple(v_813),2-proj-2-tuple(v_812))) else fail-any) else fail-any)) in
        {275}let v_815: bitstring = catch-fail((if (success?(getpublickey(v_806)) && success?(1-proj-7-tuple(v_803))) then (if (not-caught-fail(v_807) && success?(is-true(success?(1-proj-3-tuple(v_807))))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then (if not-caught-fail(v_814) then (v_814,2-proj-2-tuple(v_812)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {276}let v_816: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_815))) in
        {277}let v_817: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_816))) in
        {278}let v_818: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_817),2-proj-2-tuple(v_817),3-proj-3-tuple(v_816),msg_c(me_728,them_727))) in
        {279}let v_819: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_816))) in
        {280}let v_820: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_817))) && success?(1-proj-3-tuple(v_816))) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-2-tuple(v_819))))) then cipherstatepack(1-proj-2-tuple(v_819),increment_nonce(2-proj-2-tuple(v_817))) else fail-any) else fail-any)) in
        {281}let v_821: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_816)) && success?(1-proj-3-tuple(v_816))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-2-tuple(v_817))))) then (if not-caught-fail(v_818) then (if not-caught-fail(v_820) then (v_820,v_818) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {282}let v_822: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_821),2-proj-3-tuple(v_816),3-proj-3-tuple(v_816)))) in
        {283}let v_823: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_821)) && success?(symmetricstatepack(1-proj-2-tuple(v_821),2-proj-3-tuple(v_816),3-proj-3-tuple(v_816)))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then symmetricstatepack(1-proj-3-tuple(v_822),2-proj-3-tuple(v_822),hash(3-proj-3-tuple(v_822),2-proj-2-tuple(v_821))) else fail-any) else fail-any)) in
        {284}let v_824: bitstring = catch-fail((if success?(1-proj-2-tuple(v_815)) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if (not-caught-fail(v_821) && success?(is-true(success?(1-proj-2-tuple(v_821))))) then (if not-caught-fail(v_823) then (v_823,2-proj-2-tuple(v_821)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {285}let v_825: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_824),v_806,3-proj-7-tuple(v_803),4-proj-7-tuple(v_803),5-proj-7-tuple(v_803),6-proj-7-tuple(v_803),7-proj-7-tuple(v_803))) in
        {286}let v_826: bitstring = catch-fail(concat3(1-proj-3-tuple(v_804),2-proj-2-tuple(v_815),2-proj-2-tuple(v_824))) in
        {287}let (hs_827: handshakestate,re_828: key,message_c_829: bitstring) = (if (not-caught-fail(v_803) && success?(is-true(success?(1-proj-7-tuple(v_803))))) then (if (not-caught-fail(v_804) && success?(is-true(success?(1-proj-3-tuple(v_804))))) then (if not-caught-fail(v_806) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-2-tuple(v_815))))) then (if (not-caught-fail(v_824) && success?(is-true(success?(1-proj-2-tuple(v_824))))) then (if not-caught-fail(v_825) then (if not-caught-fail(v_826) then (v_825,5-proj-7-tuple(v_803),v_826) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {288}event SendMsg(me_728,them_727,stage_c,msg_c(me_728,them_727),true);
        {289}insert statestore(me_728,them_727,statepack_d(hs_827));
        {290}out(pub, message_c_829)
    ) | (
        {317}get statestore(=me_728,=them_727,statepack_d(hs_830: handshakestate)) in
        {292}in(pub, message_d_831: bitstring);
        {293}let v_832: bitstring = catch-fail(handshakestateunpack(hs_830)) in
        {294}let v_833: bitstring = catch-fail(deconcat3(message_d_831)) in
        {295}let v_834: bool = catch-fail(true) in
        {296}let v_835: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_832))) in
        {297}let v_836: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_832))) in
        {298}let v_837: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_836),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {299}let v_838: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_836),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {300}let v_839: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_836),(if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_832)) else fail-any) else fail-any))) in
        {301}let v_840: bitstring = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_836))) then (if not-caught-fail(v_837) then (if not-caught-fail(v_838) then (if not-caught-fail(v_839) then (v_837,v_838,v_839) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {302}let v_841: symmetricstate = catch-fail((if (success?((if (success?(5-proj-7-tuple(v_832)) && success?(2-proj-7-tuple(v_832))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then dhexp(2-proj-2-tuple(v_835),5-proj-7-tuple(v_832)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_832))) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then (if (not-caught-fail(v_840) && success?(is-true(success?(1-proj-3-tuple(v_840))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_840)) then cipherstatepack(2-proj-3-tuple(v_840),minnonce) else fail-any),1-proj-3-tuple(v_840),3-proj-3-tuple(v_836)) else fail-any) else fail-any) else fail-any)) in
        {303}let v_842: bitstring = catch-fail(symmetricstateunpack(v_841)) in
        {304}let v_843: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {305}let v_844: aead = catch-fail(decrypt(1-proj-2-tuple(v_843),2-proj-2-tuple(v_843),3-proj-3-tuple(v_842),3-proj-3-tuple(v_833))) in
        {306}let v_845: bitstring = catch-fail(aeadunpack(v_844)) in
        {307}let v_846: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_842))) in
        {308}let v_847: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_843))) && success?(1-proj-3-tuple(v_842))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-2-tuple(v_846))))) then cipherstatepack(1-proj-2-tuple(v_846),increment_nonce(2-proj-2-tuple(v_843))) else fail-any) else fail-any)) in
        {309}let v_848: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_833)) && (success?(3-proj-3-tuple(v_842)) && success?(1-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-2-tuple(v_843))))) then (if not-caught-fail(v_844) then (if (not-caught-fail(v_845) && success?(is-true(success?(1-proj-3-tuple(v_845))))) then (if not-caught-fail(v_847) then (v_847,3-proj-3-tuple(v_845),1-proj-3-tuple(v_845)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {310}let v_849: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) in
        {311}let v_850: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_833)) && success?(symmetricstatepack(1-proj-3-tuple(v_848),2-proj-3-tuple(v_842),3-proj-3-tuple(v_842)))) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then symmetricstatepack(1-proj-3-tuple(v_849),2-proj-3-tuple(v_849),hash(3-proj-3-tuple(v_849),3-proj-3-tuple(v_833))) else fail-any) else fail-any)) in
        {312}let v_851: bitstring = catch-fail((if success?(3-proj-3-tuple(v_833)) then (if (not-caught-fail(v_842) && success?(is-true(success?(1-proj-3-tuple(v_842))))) then (if (not-caught-fail(v_848) && success?(is-true(success?(1-proj-3-tuple(v_848))))) then (if not-caught-fail(v_850) then (v_850,2-proj-3-tuple(v_848),3-proj-3-tuple(v_848)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {313}let v_852: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_851),2-proj-7-tuple(v_832),3-proj-7-tuple(v_832),4-proj-7-tuple(v_832),5-proj-7-tuple(v_832),6-proj-7-tuple(v_832),7-proj-7-tuple(v_832))) in
        {314}let (hs_853: handshakestate,re_854: key,plaintext_d_855: bitstring,valid_856: bool) = (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-7-tuple(v_832))))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if not-caught-fail(v_834) then (if not-caught-fail(v_841) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-3-tuple(v_851))))) then (if (v_834 && 3-proj-3-tuple(v_851)) then (if not-caught-fail(v_852) then (v_852,getpublickey(3-proj-7-tuple(v_832)),2-proj-3-tuple(v_851),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {315}event RecvMsg(me_728,them_727,stage_d,plaintext_d_855,valid_856);
        {316}insert statestore(me_728,them_727,statepack_e(hs_853))
    ) | (
        {335}get statestore(=me_728,=them_727,statepack_e(hs_857: handshakestate)) in
        {318}let v_858: bitstring = catch-fail(handshakestateunpack(hs_857)) in
        {319}let v_859: bitstring = catch-fail((empty,empty,empty)) in
        {320}let v_860: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_858))) in
        {321}let v_861: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_860))) in
        {322}let v_862: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_861),2-proj-2-tuple(v_861),3-proj-3-tuple(v_860),msg_e(me_728,them_727))) in
        {323}let v_863: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_860))) in
        {324}let v_864: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_861))) && success?(1-proj-3-tuple(v_860))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-2-tuple(v_863))))) then cipherstatepack(1-proj-2-tuple(v_863),increment_nonce(2-proj-2-tuple(v_861))) else fail-any) else fail-any)) in
        {325}let v_865: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_860)) && success?(1-proj-3-tuple(v_860))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-2-tuple(v_861))))) then (if not-caught-fail(v_862) then (if not-caught-fail(v_864) then (v_864,v_862) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {326}let v_866: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_865),2-proj-3-tuple(v_860),3-proj-3-tuple(v_860)))) in
        {327}let v_867: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_865)) && success?(symmetricstatepack(1-proj-2-tuple(v_865),2-proj-3-tuple(v_860),3-proj-3-tuple(v_860)))) then (if (not-caught-fail(v_866) && success?(is-true(success?(1-proj-3-tuple(v_866))))) then symmetricstatepack(1-proj-3-tuple(v_866),2-proj-3-tuple(v_866),hash(3-proj-3-tuple(v_866),2-proj-2-tuple(v_865))) else fail-any) else fail-any)) in
        {328}let v_868: bitstring = catch-fail((if success?(1-proj-7-tuple(v_858)) then (if (not-caught-fail(v_860) && success?(is-true(success?(1-proj-3-tuple(v_860))))) then (if (not-caught-fail(v_865) && success?(is-true(success?(1-proj-2-tuple(v_865))))) then (if not-caught-fail(v_867) then (v_867,2-proj-2-tuple(v_865)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {329}let v_869: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_868),2-proj-7-tuple(v_858),3-proj-7-tuple(v_858),4-proj-7-tuple(v_858),5-proj-7-tuple(v_858),6-proj-7-tuple(v_858),7-proj-7-tuple(v_858))) in
        {330}let v_870: bitstring = catch-fail(concat3(1-proj-3-tuple(v_859),2-proj-3-tuple(v_859),2-proj-2-tuple(v_868))) in
        {331}let (hs_871: handshakestate,re_872: key,message_e_873: bitstring) = (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-7-tuple(v_858))))) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-2-tuple(v_868))))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_870) then (v_869,5-proj-7-tuple(v_858),v_870) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {332}event SendMsg(me_728,them_727,stage_e,msg_e(me_728,them_727),true);
        {333}insert statestore(me_728,them_727,statepack_f(hs_871));
        {334}out(pub, message_e_873)
    ) | (
        {363}get statestore(=me_728,=them_727,statepack_f(hs_874: handshakestate)) in
        {336}in(pub, message_f_875: bitstring);
        {337}let v_876: bitstring = catch-fail(handshakestateunpack(hs_874)) in
        {338}let v_877: bitstring = catch-fail(deconcat3(message_f_875)) in
        {339}let v_878: bool = catch-fail(true) in
        {340}let v_879: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_876))) in
        {341}let v_880: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_879))) in
        {342}let v_881: aead = catch-fail(decrypt(1-proj-2-tuple(v_880),2-proj-2-tuple(v_880),3-proj-3-tuple(v_879),3-proj-3-tuple(v_877))) in
        {343}let v_882: bitstring = catch-fail(aeadunpack(v_881)) in
        {344}let v_883: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_879))) in
        {345}let v_884: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_880))) && success?(1-proj-3-tuple(v_879))) then (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-2-tuple(v_883))))) then cipherstatepack(1-proj-2-tuple(v_883),increment_nonce(2-proj-2-tuple(v_880))) else fail-any) else fail-any)) in
        {346}let v_885: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_877)) && (success?(3-proj-3-tuple(v_879)) && success?(1-proj-3-tuple(v_879)))) then (if (not-caught-fail(v_880) && success?(is-true(success?(1-proj-2-tuple(v_880))))) then (if not-caught-fail(v_881) then (if (not-caught-fail(v_882) && success?(is-true(success?(1-proj-3-tuple(v_882))))) then (if not-caught-fail(v_884) then (v_884,3-proj-3-tuple(v_882),1-proj-3-tuple(v_882)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {347}let v_886: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_885),2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)))) in
        {348}let v_887: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_877)) && success?(symmetricstatepack(1-proj-3-tuple(v_885),2-proj-3-tuple(v_879),3-proj-3-tuple(v_879)))) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-3-tuple(v_886))))) then symmetricstatepack(1-proj-3-tuple(v_886),2-proj-3-tuple(v_886),hash(3-proj-3-tuple(v_886),3-proj-3-tuple(v_877))) else fail-any) else fail-any)) in
        {349}let v_888: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_877)) && success?(1-proj-7-tuple(v_876))) then (if (not-caught-fail(v_879) && success?(is-true(success?(1-proj-3-tuple(v_879))))) then (if (not-caught-fail(v_885) && success?(is-true(success?(1-proj-3-tuple(v_885))))) then (if not-caught-fail(v_887) then (v_887,2-proj-3-tuple(v_885),3-proj-3-tuple(v_885)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {350}let v_889: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_888),2-proj-7-tuple(v_876),3-proj-7-tuple(v_876),4-proj-7-tuple(v_876),5-proj-7-tuple(v_876),6-proj-7-tuple(v_876),7-proj-7-tuple(v_876))) in
        {351}let v_890: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_888))) in
        {352}let v_891: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_890),zero)) in
        {353}let v_892: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_890),zero)) in
        {354}let v_893: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_890),zero)) in
        {355}let v_894: bitstring = catch-fail((if success?(2-proj-3-tuple(v_890)) then (if not-caught-fail(v_891) then (if not-caught-fail(v_892) then (if not-caught-fail(v_893) then (v_891,v_892,v_893) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {356}let v_895: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_894)) then cipherstatepack(1-proj-3-tuple(v_894),minnonce) else fail-any)) in
        {357}let v_896: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_894)) then cipherstatepack(2-proj-3-tuple(v_894),minnonce) else fail-any)) in
        {358}let v_897: bitstring = catch-fail((if success?(1-proj-3-tuple(v_888)) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-3-tuple(v_890))))) then (if (not-caught-fail(v_894) && success?(is-true(success?(1-proj-3-tuple(v_894))))) then (if not-caught-fail(v_895) then (if not-caught-fail(v_896) then (1-proj-3-tuple(v_888),v_895,v_896) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {359}let (hs_898: handshakestate,re_899: key,plaintext_f_900: bitstring,valid_901: bool,cs1_902: cipherstate,cs2_903: cipherstate) = (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-7-tuple(v_876))))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if not-caught-fail(v_878) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-3-tuple(v_888))))) then (if (v_878 && 3-proj-3-tuple(v_888)) then (if not-caught-fail(v_889) then (if (not-caught-fail(v_897) && success?(is-true(success?(1-proj-3-tuple(v_897))))) then (v_889,getpublickey(3-proj-7-tuple(v_876)),2-proj-3-tuple(v_888),true,2-proj-3-tuple(v_897),3-proj-3-tuple(v_897)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {360}event RecvMsg(me_728,them_727,stage_f,plaintext_f_900,valid_901);
        {361}insert statestore(me_728,them_727,statepack_g(hs_898));
        {362}event RecvEnd(valid_901)
    ) | (
        {364}event LeakS(phase0,me_728);
        {365}out(pub, key_s(me_728))
    ) | (
        {366}phase 1;
        {367}event LeakS(phase1,me_728);
        {368}out(pub, key_s(me_728))
    )
) | (
    {369}let them_904: principal = alice in
    {370}let me_905: principal = bob in
    {371}let v_906: key = catch-fail(dhexp(key_s(me_905),g)) in
    {372}let s_907: keypair = (if not-caught-fail(v_906) then keypairpack(v_906,key_s(me_905)) else fail-any) in
    {373}out(pub, getpublickey(s_907));
    (
        {374}let e_908: keypair = keypairpack(empty,empty) in
        {375}let rs_909: key = empty in
        {376}let re_910: key = empty in
        {377}let v_911: bitstring = catch-fail(hash(somename,empty)) in
        {378}let v_912: key = catch-fail(v_911) in
        {379}let v_913: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {380}let v_914: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then symmetricstatepack(v_913,v_912,v_911) else fail-any) else fail-any) else fail-any))) in
        {381}let v_915: symmetricstate = catch-fail((if success?((if not-caught-fail(v_911) then (if not-caught-fail(v_912) then (if not-caught-fail(v_913) then symmetricstatepack(v_913,v_912,v_911) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_914) && success?(is-true(success?(1-proj-3-tuple(v_914))))) then symmetricstatepack(1-proj-3-tuple(v_914),2-proj-3-tuple(v_914),hash(3-proj-3-tuple(v_914),empty)) else fail-any) else fail-any)) in
        {382}let v_916: bitstring = catch-fail(symmetricstateunpack(v_915)) in
        {383}let v_917: symmetricstate = catch-fail((if success?(getpublickey(s_907)) then (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-3-tuple(v_916))))) then symmetricstatepack(1-proj-3-tuple(v_916),2-proj-3-tuple(v_916),hash(3-proj-3-tuple(v_916),getpublickey(s_907))) else fail-any) else fail-any)) in
        {384}let hs_918: handshakestate = (if not-caught-fail(v_915) then (if not-caught-fail(v_917) then handshakestatepack(v_917,s_907,e_908,rs_909,re_910,empty,false) else fail-any) else fail-any) in
        {385}insert statestore(me_905,them_904,statepack_a(hs_918))
    ) | (
        {414}get statestore(=me_905,=them_904,statepack_a(hs_919: handshakestate)) in
        {386}in(pub, message_a_920: bitstring);
        {387}let v_921: bitstring = catch-fail(handshakestateunpack(hs_919)) in
        {388}let v_922: bitstring = catch-fail(deconcat3(message_a_920)) in
        {389}let v_923: bool = catch-fail(true) in
        {390}let v_924: key = catch-fail(1-proj-3-tuple(v_922)) in
        {391}let v_925: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_921))) in
        {392}let v_926: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_921)) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then symmetricstatepack(1-proj-3-tuple(v_925),2-proj-3-tuple(v_925),hash(3-proj-3-tuple(v_925),v_924)) else fail-any) else fail-any)) in
        {393}let v_927: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_921))) in
        {394}let v_928: bitstring = catch-fail(symmetricstateunpack(v_926)) in
        {395}let v_929: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_928),(if success?(2-proj-7-tuple(v_921)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),v_924) else fail-any) else fail-any))) in
        {396}let v_930: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_928),(if success?(2-proj-7-tuple(v_921)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),v_924) else fail-any) else fail-any))) in
        {397}let v_931: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_928),(if success?(2-proj-7-tuple(v_921)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),v_924) else fail-any) else fail-any))) in
        {398}let v_932: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_921)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),v_924) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_928))) then (if not-caught-fail(v_929) then (if not-caught-fail(v_930) then (if not-caught-fail(v_931) then (v_929,v_930,v_931) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {399}let v_933: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_921)) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then dhexp(2-proj-2-tuple(v_927),v_924) else fail-any) else fail-any)) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then (if (not-caught-fail(v_932) && success?(is-true(success?(1-proj-3-tuple(v_932))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_932)) then cipherstatepack(2-proj-3-tuple(v_932),minnonce) else fail-any),1-proj-3-tuple(v_932),3-proj-3-tuple(v_928)) else fail-any) else fail-any) else fail-any)) in
        {400}let v_934: bitstring = catch-fail(symmetricstateunpack(v_933)) in
        {401}let v_935: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_934))) in
        {402}let v_936: aead = catch-fail(decrypt(1-proj-2-tuple(v_935),2-proj-2-tuple(v_935),3-proj-3-tuple(v_934),3-proj-3-tuple(v_922))) in
        {403}let v_937: bitstring = catch-fail(aeadunpack(v_936)) in
        {404}let v_938: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_934))) in
        {405}let v_939: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_935))) && success?(1-proj-3-tuple(v_934))) then (if (not-caught-fail(v_938) && success?(is-true(success?(1-proj-2-tuple(v_938))))) then cipherstatepack(1-proj-2-tuple(v_938),increment_nonce(2-proj-2-tuple(v_935))) else fail-any) else fail-any)) in
        {406}let v_940: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_922)) && (success?(3-proj-3-tuple(v_934)) && success?(1-proj-3-tuple(v_934)))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-2-tuple(v_935))))) then (if not-caught-fail(v_936) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (if not-caught-fail(v_939) then (v_939,3-proj-3-tuple(v_937),1-proj-3-tuple(v_937)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_941: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_940),2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)))) in
        {408}let v_942: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_922)) && success?(symmetricstatepack(1-proj-3-tuple(v_940),2-proj-3-tuple(v_934),3-proj-3-tuple(v_934)))) then (if (not-caught-fail(v_941) && success?(is-true(success?(1-proj-3-tuple(v_941))))) then symmetricstatepack(1-proj-3-tuple(v_941),2-proj-3-tuple(v_941),hash(3-proj-3-tuple(v_941),3-proj-3-tuple(v_922))) else fail-any) else fail-any)) in
        {409}let v_943: bitstring = catch-fail((if success?(3-proj-3-tuple(v_922)) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-3-tuple(v_940))))) then (if not-caught-fail(v_942) then (v_942,2-proj-3-tuple(v_940),3-proj-3-tuple(v_940)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {410}let v_944: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_943),2-proj-7-tuple(v_921),3-proj-7-tuple(v_921),4-proj-7-tuple(v_921),v_924,6-proj-7-tuple(v_921),7-proj-7-tuple(v_921))) in
        {411}let (hs_945: handshakestate,re_946: key,plaintext_a: bitstring,valid_947: bool) = (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-7-tuple(v_921))))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-3-tuple(v_922))))) then (if not-caught-fail(v_923) then (if not-caught-fail(v_924) then (if not-caught-fail(v_926) then (if not-caught-fail(v_933) then (if (not-caught-fail(v_943) && success?(is-true(success?(1-proj-3-tuple(v_943))))) then (if (v_923 && 3-proj-3-tuple(v_943)) then (if not-caught-fail(v_944) then (v_944,getpublickey(3-proj-7-tuple(v_921)),2-proj-3-tuple(v_943),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {412}event RecvMsg(me_905,them_904,stage_a,plaintext_a,valid_947);
        {413}insert statestore(me_905,them_904,statepack_b(hs_945))
    ) | (
        {445}get statestore(=me_905,=them_904,statepack_b(hs_948: handshakestate)) in
        {415}let v_949: bitstring = catch-fail(handshakestateunpack(hs_948)) in
        {416}let v_950: bitstring = catch-fail((empty,empty,empty)) in
        {417}new key_e_951[me_905,them_904]: key;
        {418}let v_952: key = catch-fail(dhexp(key_e_951,g)) in
        {419}let v_953: keypair = catch-fail((if not-caught-fail(v_952) then keypairpack(v_952,key_e_951) else fail-any)) in
        {420}let v_954: bitstring = catch-fail(getpublickey(v_953)) in
        {421}let v_955: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_949))) in
        {422}let v_956: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_949)) then (if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then symmetricstatepack(1-proj-3-tuple(v_955),2-proj-3-tuple(v_955),hash(3-proj-3-tuple(v_955),v_954)) else fail-any) else fail-any)) in
        {423}let v_957: bitstring = catch-fail(keypairunpack(v_953)) in
        {424}let v_958: bitstring = catch-fail(symmetricstateunpack(v_956)) in
        {425}let v_959: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_958),(if success?(5-proj-7-tuple(v_949)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {426}let v_960: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_958),(if success?(5-proj-7-tuple(v_949)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {427}let v_961: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_958),(if success?(5-proj-7-tuple(v_949)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_949)) else fail-any) else fail-any))) in
        {428}let v_962: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_949)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_949)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_958))) then (if not-caught-fail(v_959) then (if not-caught-fail(v_960) then (if not-caught-fail(v_961) then (v_959,v_960,v_961) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {429}let v_963: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_949)) then (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-2-tuple(v_957))))) then dhexp(2-proj-2-tuple(v_957),5-proj-7-tuple(v_949)) else fail-any) else fail-any)) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if (not-caught-fail(v_962) && success?(is-true(success?(1-proj-3-tuple(v_962))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_962)) then cipherstatepack(2-proj-3-tuple(v_962),minnonce) else fail-any),1-proj-3-tuple(v_962),3-proj-3-tuple(v_958)) else fail-any) else fail-any) else fail-any)) in
        {430}let v_964: bitstring = catch-fail(symmetricstateunpack(v_963)) in
        {431}let v_965: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_964))) in
        {432}let v_966: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_965),2-proj-2-tuple(v_965),3-proj-3-tuple(v_964),msg_b(me_905,them_904))) in
        {433}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_964))) in
        {434}let v_968: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_965))) && success?(1-proj-3-tuple(v_964))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then cipherstatepack(1-proj-2-tuple(v_967),increment_nonce(2-proj-2-tuple(v_965))) else fail-any) else fail-any)) in
        {435}let v_969: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_964)) && success?(1-proj-3-tuple(v_964))) then (if (not-caught-fail(v_965) && success?(is-true(success?(1-proj-2-tuple(v_965))))) then (if not-caught-fail(v_966) then (if not-caught-fail(v_968) then (v_968,v_966) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {436}let v_970: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_969),2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)))) in
        {437}let v_971: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_969)) && success?(symmetricstatepack(1-proj-2-tuple(v_969),2-proj-3-tuple(v_964),3-proj-3-tuple(v_964)))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then symmetricstatepack(1-proj-3-tuple(v_970),2-proj-3-tuple(v_970),hash(3-proj-3-tuple(v_970),2-proj-2-tuple(v_969))) else fail-any) else fail-any)) in
        {438}let v_972: bitstring = catch-fail((if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-3-tuple(v_964))))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-2-tuple(v_969))))) then (if not-caught-fail(v_971) then (v_971,2-proj-2-tuple(v_969)) else fail-any) else fail-any) else fail-any)) in
        {439}let v_973: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_972),2-proj-7-tuple(v_949),v_953,4-proj-7-tuple(v_949),5-proj-7-tuple(v_949),6-proj-7-tuple(v_949),7-proj-7-tuple(v_949))) in
        {440}let v_974: bitstring = catch-fail(concat3(v_954,2-proj-3-tuple(v_950),2-proj-2-tuple(v_972))) in
        {441}let (hs_975: handshakestate,re_976: key,message_b_977: bitstring) = (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-7-tuple(v_949))))) then (if (not-caught-fail(v_950) && success?(is-true(success?(1-proj-3-tuple(v_950))))) then (if not-caught-fail(v_953) then (if not-caught-fail(v_954) then (if not-caught-fail(v_956) then (if not-caught-fail(v_963) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-2-tuple(v_972))))) then (if not-caught-fail(v_973) then (if not-caught-fail(v_974) then (v_973,5-proj-7-tuple(v_949),v_974) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {442}event SendMsg(me_905,them_904,stage_b,msg_b(me_905,them_904),true);
        {443}insert statestore(me_905,them_904,statepack_c(hs_975));
        {444}out(pub, message_b_977)
    ) | (
        {476}get statestore(=me_905,=them_904,statepack_c(hs_978: handshakestate)) in
        {446}in(pub, message_c_979: bitstring);
        {447}let v_980: bitstring = catch-fail(handshakestateunpack(hs_978)) in
        {448}let v_981: bitstring = catch-fail(deconcat3(message_c_979)) in
        {449}let v_982: bool = catch-fail(true) in
        {450}let v_983: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_980))) in
        {451}let v_984: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_983))) in
        {452}let v_985: aead = catch-fail(decrypt(1-proj-2-tuple(v_984),2-proj-2-tuple(v_984),3-proj-3-tuple(v_983),2-proj-3-tuple(v_981))) in
        {453}let v_986: bitstring = catch-fail(aeadunpack(v_985)) in
        {454}let v_987: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_983))) in
        {455}let v_988: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_984))) && success?(1-proj-3-tuple(v_983))) then (if (not-caught-fail(v_987) && success?(is-true(success?(1-proj-2-tuple(v_987))))) then cipherstatepack(1-proj-2-tuple(v_987),increment_nonce(2-proj-2-tuple(v_984))) else fail-any) else fail-any)) in
        {456}let v_989: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_981)) && (success?(3-proj-3-tuple(v_983)) && success?(1-proj-3-tuple(v_983)))) then (if (not-caught-fail(v_984) && success?(is-true(success?(1-proj-2-tuple(v_984))))) then (if not-caught-fail(v_985) then (if (not-caught-fail(v_986) && success?(is-true(success?(1-proj-3-tuple(v_986))))) then (if not-caught-fail(v_988) then (v_988,3-proj-3-tuple(v_986),1-proj-3-tuple(v_986)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {457}let v_990: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)))) in
        {458}let v_991: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_981)) && success?(symmetricstatepack(1-proj-3-tuple(v_989),2-proj-3-tuple(v_983),3-proj-3-tuple(v_983)))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then symmetricstatepack(1-proj-3-tuple(v_990),2-proj-3-tuple(v_990),hash(3-proj-3-tuple(v_990),2-proj-3-tuple(v_981))) else fail-any) else fail-any)) in
        {459}let v_992: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_981)) && success?(1-proj-7-tuple(v_980))) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-3-tuple(v_989))))) then (if not-caught-fail(v_991) then (v_991,2-proj-3-tuple(v_989),3-proj-3-tuple(v_989)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {460}let v_993: key = catch-fail(2-proj-3-tuple(v_992)) in
        {461}let v_994: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_992))) in
        {462}let v_995: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_994))) in
        {463}let v_996: aead = catch-fail(decrypt(1-proj-2-tuple(v_995),2-proj-2-tuple(v_995),3-proj-3-tuple(v_994),3-proj-3-tuple(v_981))) in
        {464}let v_997: bitstring = catch-fail(aeadunpack(v_996)) in
        {465}let v_998: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_994))) in
        {466}let v_999: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_995))) && success?(1-proj-3-tuple(v_994))) then (if (not-caught-fail(v_998) && success?(is-true(success?(1-proj-2-tuple(v_998))))) then cipherstatepack(1-proj-2-tuple(v_998),increment_nonce(2-proj-2-tuple(v_995))) else fail-any) else fail-any)) in
        {467}let v_1000: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_981)) && (success?(3-proj-3-tuple(v_994)) && success?(1-proj-3-tuple(v_994)))) then (if (not-caught-fail(v_995) && success?(is-true(success?(1-proj-2-tuple(v_995))))) then (if not-caught-fail(v_996) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then (if not-caught-fail(v_999) then (v_999,3-proj-3-tuple(v_997),1-proj-3-tuple(v_997)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {468}let v_1001: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1000),2-proj-3-tuple(v_994),3-proj-3-tuple(v_994)))) in
        {469}let v_1002: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_981)) && success?(symmetricstatepack(1-proj-3-tuple(v_1000),2-proj-3-tuple(v_994),3-proj-3-tuple(v_994)))) then (if (not-caught-fail(v_1001) && success?(is-true(success?(1-proj-3-tuple(v_1001))))) then symmetricstatepack(1-proj-3-tuple(v_1001),2-proj-3-tuple(v_1001),hash(3-proj-3-tuple(v_1001),3-proj-3-tuple(v_981))) else fail-any) else fail-any)) in
        {470}let v_1003: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_981)) && success?(1-proj-3-tuple(v_992))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-3-tuple(v_994))))) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then (if not-caught-fail(v_1002) then (v_1002,2-proj-3-tuple(v_1000),3-proj-3-tuple(v_1000)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {471}let v_1004: key = catch-fail(dhexp(key_s(them_904),g)) in
        {472}let v_1005: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1003),2-proj-7-tuple(v_980),3-proj-7-tuple(v_980),v_993,5-proj-7-tuple(v_980),6-proj-7-tuple(v_980),7-proj-7-tuple(v_980))) in
        {473}let (hs_1006: handshakestate,re_1007: key,plaintext_c: bitstring,valid_1008: bool) = (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-7-tuple(v_980))))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then (if not-caught-fail(v_982) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then (if not-caught-fail(v_993) then (if (not-caught-fail(v_1003) && success?(is-true(success?(1-proj-3-tuple(v_1003))))) then (if ((3-proj-3-tuple(v_992) && 3-proj-3-tuple(v_1003)) && (v_993 = getpublickey((if not-caught-fail(v_1004) then keypairpack(v_1004,key_s(them_904)) else fail-any)))) then (if not-caught-fail(v_1005) then (v_1005,getpublickey(3-proj-7-tuple(v_980)),2-proj-3-tuple(v_1003),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {474}event RecvMsg(me_905,them_904,stage_c,plaintext_c,valid_1008);
        {475}insert statestore(me_905,them_904,statepack_d(hs_1006))
    ) | (
        {501}get statestore(=me_905,=them_904,statepack_d(hs_1009: handshakestate)) in
        {477}let v_1010: bitstring = catch-fail(handshakestateunpack(hs_1009)) in
        {478}let v_1011: bitstring = catch-fail((empty,empty,empty)) in
        {479}let v_1012: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1010))) in
        {480}let v_1013: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1010))) in
        {481}let v_1014: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1013),(if (success?(4-proj-7-tuple(v_1010)) && success?(3-proj-7-tuple(v_1010))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_1010)) else fail-any) else fail-any))) in
        {482}let v_1015: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1013),(if (success?(4-proj-7-tuple(v_1010)) && success?(3-proj-7-tuple(v_1010))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_1010)) else fail-any) else fail-any))) in
        {483}let v_1016: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1013),(if (success?(4-proj-7-tuple(v_1010)) && success?(3-proj-7-tuple(v_1010))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_1010)) else fail-any) else fail-any))) in
        {484}let v_1017: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1010)) && success?(3-proj-7-tuple(v_1010))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_1010)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1013))) then (if not-caught-fail(v_1014) then (if not-caught-fail(v_1015) then (if not-caught-fail(v_1016) then (v_1014,v_1015,v_1016) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {485}let v_1018: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1010)) && success?(3-proj-7-tuple(v_1010))) then (if (not-caught-fail(v_1012) && success?(is-true(success?(1-proj-2-tuple(v_1012))))) then dhexp(2-proj-2-tuple(v_1012),4-proj-7-tuple(v_1010)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1010))) then (if (not-caught-fail(v_1013) && success?(is-true(success?(1-proj-3-tuple(v_1013))))) then (if (not-caught-fail(v_1017) && success?(is-true(success?(1-proj-3-tuple(v_1017))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1017)) then cipherstatepack(2-proj-3-tuple(v_1017),minnonce) else fail-any),1-proj-3-tuple(v_1017),3-proj-3-tuple(v_1013)) else fail-any) else fail-any) else fail-any)) in
        {486}let v_1019: bitstring = catch-fail(symmetricstateunpack(v_1018)) in
        {487}let v_1020: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1019))) in
        {488}let v_1021: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1020),2-proj-2-tuple(v_1020),3-proj-3-tuple(v_1019),msg_d(me_905,them_904))) in
        {489}let v_1022: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1019))) in
        {490}let v_1023: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1020))) && success?(1-proj-3-tuple(v_1019))) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-2-tuple(v_1022))))) then cipherstatepack(1-proj-2-tuple(v_1022),increment_nonce(2-proj-2-tuple(v_1020))) else fail-any) else fail-any)) in
        {491}let v_1024: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1019)) && success?(1-proj-3-tuple(v_1019))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then (if not-caught-fail(v_1021) then (if not-caught-fail(v_1023) then (v_1023,v_1021) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {492}let v_1025: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1024),2-proj-3-tuple(v_1019),3-proj-3-tuple(v_1019)))) in
        {493}let v_1026: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1024)) && success?(symmetricstatepack(1-proj-2-tuple(v_1024),2-proj-3-tuple(v_1019),3-proj-3-tuple(v_1019)))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then symmetricstatepack(1-proj-3-tuple(v_1025),2-proj-3-tuple(v_1025),hash(3-proj-3-tuple(v_1025),2-proj-2-tuple(v_1024))) else fail-any) else fail-any)) in
        {494}let v_1027: bitstring = catch-fail((if (not-caught-fail(v_1019) && success?(is-true(success?(1-proj-3-tuple(v_1019))))) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-2-tuple(v_1024))))) then (if not-caught-fail(v_1026) then (v_1026,2-proj-2-tuple(v_1024)) else fail-any) else fail-any) else fail-any)) in
        {495}let v_1028: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1027),2-proj-7-tuple(v_1010),3-proj-7-tuple(v_1010),4-proj-7-tuple(v_1010),5-proj-7-tuple(v_1010),6-proj-7-tuple(v_1010),7-proj-7-tuple(v_1010))) in
        {496}let v_1029: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1011),2-proj-3-tuple(v_1011),2-proj-2-tuple(v_1027))) in
        {497}let (hs_1030: handshakestate,re_1031: key,message_d_1032: bitstring) = (if (not-caught-fail(v_1010) && success?(is-true(success?(1-proj-7-tuple(v_1010))))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then (if not-caught-fail(v_1018) then (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-2-tuple(v_1027))))) then (if not-caught-fail(v_1028) then (if not-caught-fail(v_1029) then (v_1028,5-proj-7-tuple(v_1010),v_1029) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {498}event SendMsg(me_905,them_904,stage_d,msg_d(me_905,them_904),true);
        {499}insert statestore(me_905,them_904,statepack_e(hs_1030));
        {500}out(pub, message_d_1032)
    ) | (
        {520}get statestore(=me_905,=them_904,statepack_e(hs_1033: handshakestate)) in
        {502}in(pub, message_e_1034: bitstring);
        {503}let v_1035: bitstring = catch-fail(handshakestateunpack(hs_1033)) in
        {504}let v_1036: bitstring = catch-fail(deconcat3(message_e_1034)) in
        {505}let v_1037: bool = catch-fail(true) in
        {506}let v_1038: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1035))) in
        {507}let v_1039: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1038))) in
        {508}let v_1040: aead = catch-fail(decrypt(1-proj-2-tuple(v_1039),2-proj-2-tuple(v_1039),3-proj-3-tuple(v_1038),3-proj-3-tuple(v_1036))) in
        {509}let v_1041: bitstring = catch-fail(aeadunpack(v_1040)) in
        {510}let v_1042: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1038))) in
        {511}let v_1043: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1039))) && success?(1-proj-3-tuple(v_1038))) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-2-tuple(v_1042))))) then cipherstatepack(1-proj-2-tuple(v_1042),increment_nonce(2-proj-2-tuple(v_1039))) else fail-any) else fail-any)) in
        {512}let v_1044: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1036)) && (success?(3-proj-3-tuple(v_1038)) && success?(1-proj-3-tuple(v_1038)))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-2-tuple(v_1039))))) then (if not-caught-fail(v_1040) then (if (not-caught-fail(v_1041) && success?(is-true(success?(1-proj-3-tuple(v_1041))))) then (if not-caught-fail(v_1043) then (v_1043,3-proj-3-tuple(v_1041),1-proj-3-tuple(v_1041)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {513}let v_1045: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1044),2-proj-3-tuple(v_1038),3-proj-3-tuple(v_1038)))) in
        {514}let v_1046: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1036)) && success?(symmetricstatepack(1-proj-3-tuple(v_1044),2-proj-3-tuple(v_1038),3-proj-3-tuple(v_1038)))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-3-tuple(v_1045))))) then symmetricstatepack(1-proj-3-tuple(v_1045),2-proj-3-tuple(v_1045),hash(3-proj-3-tuple(v_1045),3-proj-3-tuple(v_1036))) else fail-any) else fail-any)) in
        {515}let v_1047: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1036)) && success?(1-proj-7-tuple(v_1035))) then (if (not-caught-fail(v_1038) && success?(is-true(success?(1-proj-3-tuple(v_1038))))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then (if not-caught-fail(v_1046) then (v_1046,2-proj-3-tuple(v_1044),3-proj-3-tuple(v_1044)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {516}let v_1048: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1047),2-proj-7-tuple(v_1035),3-proj-7-tuple(v_1035),4-proj-7-tuple(v_1035),5-proj-7-tuple(v_1035),6-proj-7-tuple(v_1035),7-proj-7-tuple(v_1035))) in
        {517}let (hs_1049: handshakestate,re_1050: key,plaintext_e: bitstring,valid_1051: bool) = (if (not-caught-fail(v_1035) && success?(is-true(success?(1-proj-7-tuple(v_1035))))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1037) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then (if (v_1037 && 3-proj-3-tuple(v_1047)) then (if not-caught-fail(v_1048) then (v_1048,getpublickey(3-proj-7-tuple(v_1035)),2-proj-3-tuple(v_1047),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {518}event RecvMsg(me_905,them_904,stage_e,plaintext_e,valid_1051);
        {519}insert statestore(me_905,them_904,statepack_f(hs_1049))
    ) | (
        {546}get statestore(=me_905,=them_904,statepack_f(hs_1052: handshakestate)) in
        {521}let v_1053: bitstring = catch-fail(handshakestateunpack(hs_1052)) in
        {522}let v_1054: bitstring = catch-fail((empty,empty,empty)) in
        {523}let v_1055: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1053))) in
        {524}let v_1056: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1055))) in
        {525}let v_1057: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1056),2-proj-2-tuple(v_1056),3-proj-3-tuple(v_1055),msg_f(me_905,them_904))) in
        {526}let v_1058: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1055))) in
        {527}let v_1059: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1056))) && success?(1-proj-3-tuple(v_1055))) then (if (not-caught-fail(v_1058) && success?(is-true(success?(1-proj-2-tuple(v_1058))))) then cipherstatepack(1-proj-2-tuple(v_1058),increment_nonce(2-proj-2-tuple(v_1056))) else fail-any) else fail-any)) in
        {528}let v_1060: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1055)) && success?(1-proj-3-tuple(v_1055))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-2-tuple(v_1056))))) then (if not-caught-fail(v_1057) then (if not-caught-fail(v_1059) then (v_1059,v_1057) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1061: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1060),2-proj-3-tuple(v_1055),3-proj-3-tuple(v_1055)))) in
        {530}let v_1062: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1060)) && success?(symmetricstatepack(1-proj-2-tuple(v_1060),2-proj-3-tuple(v_1055),3-proj-3-tuple(v_1055)))) then (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-3-tuple(v_1061))))) then symmetricstatepack(1-proj-3-tuple(v_1061),2-proj-3-tuple(v_1061),hash(3-proj-3-tuple(v_1061),2-proj-2-tuple(v_1060))) else fail-any) else fail-any)) in
        {531}let v_1063: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1053)) then (if (not-caught-fail(v_1055) && success?(is-true(success?(1-proj-3-tuple(v_1055))))) then (if (not-caught-fail(v_1060) && success?(is-true(success?(1-proj-2-tuple(v_1060))))) then (if not-caught-fail(v_1062) then (v_1062,2-proj-2-tuple(v_1060)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1064: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1063),2-proj-7-tuple(v_1053),3-proj-7-tuple(v_1053),4-proj-7-tuple(v_1053),5-proj-7-tuple(v_1053),6-proj-7-tuple(v_1053),7-proj-7-tuple(v_1053))) in
        {533}let v_1065: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1054),2-proj-3-tuple(v_1054),2-proj-2-tuple(v_1063))) in
        {534}let v_1066: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1063))) in
        {535}let v_1067: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1066),zero)) in
        {536}let v_1068: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1066),zero)) in
        {537}let v_1069: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1066),zero)) in
        {538}let v_1070: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1066)) then (if not-caught-fail(v_1067) then (if not-caught-fail(v_1068) then (if not-caught-fail(v_1069) then (v_1067,v_1068,v_1069) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {539}let v_1071: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1070)) then cipherstatepack(1-proj-3-tuple(v_1070),minnonce) else fail-any)) in
        {540}let v_1072: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1070)) then cipherstatepack(2-proj-3-tuple(v_1070),minnonce) else fail-any)) in
        {541}let v_1073: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1063)) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then (if (not-caught-fail(v_1070) && success?(is-true(success?(1-proj-3-tuple(v_1070))))) then (if not-caught-fail(v_1071) then (if not-caught-fail(v_1072) then (1-proj-2-tuple(v_1063),v_1071,v_1072) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {542}let (hs_1074: handshakestate,re_1075: key,message_f_1076: bitstring,cs1_1077: cipherstate,cs2_1078: cipherstate) = (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-7-tuple(v_1053))))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-3-tuple(v_1054))))) then (if (not-caught-fail(v_1063) && success?(is-true(success?(1-proj-2-tuple(v_1063))))) then (if not-caught-fail(v_1064) then (if not-caught-fail(v_1065) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-3-tuple(v_1073))))) then (v_1064,5-proj-7-tuple(v_1053),v_1065,2-proj-3-tuple(v_1073),3-proj-3-tuple(v_1073)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {543}event SendMsg(me_905,them_904,stage_f,msg_f(me_905,them_904),true);
        {544}insert statestore(me_905,them_904,statepack_g(hs_1074));
        {545}out(pub, message_f_1076)
    ) | (
        {547}event LeakS(phase0,me_905);
        {548}out(pub, key_s(me_905))
    ) | (
        {549}phase 1;
        {550}event LeakS(phase1,me_905);
        {551}out(pub, key_s(me_905))
    )
) | (
    {552}let them_1079: principal = charlie in
    {553}let me_1080: principal = bob in
    {554}let v_1081: key = catch-fail(dhexp(key_s(me_1080),g)) in
    {555}let s_1082: keypair = (if not-caught-fail(v_1081) then keypairpack(v_1081,key_s(me_1080)) else fail-any) in
    {556}out(pub, getpublickey(s_1082));
    (
        {557}let e_1083: keypair = keypairpack(empty,empty) in
        {558}let rs_1084: key = empty in
        {559}let re_1085: key = empty in
        {560}let v_1086: bitstring = catch-fail(hash(somename,empty)) in
        {561}let v_1087: key = catch-fail(v_1086) in
        {562}let v_1088: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {563}let v_1089: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1086) then (if not-caught-fail(v_1087) then (if not-caught-fail(v_1088) then symmetricstatepack(v_1088,v_1087,v_1086) else fail-any) else fail-any) else fail-any))) in
        {564}let v_1090: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1086) then (if not-caught-fail(v_1087) then (if not-caught-fail(v_1088) then symmetricstatepack(v_1088,v_1087,v_1086) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-3-tuple(v_1089))))) then symmetricstatepack(1-proj-3-tuple(v_1089),2-proj-3-tuple(v_1089),hash(3-proj-3-tuple(v_1089),empty)) else fail-any) else fail-any)) in
        {565}let v_1091: bitstring = catch-fail(symmetricstateunpack(v_1090)) in
        {566}let v_1092: symmetricstate = catch-fail((if success?(getpublickey(s_1082)) then (if (not-caught-fail(v_1091) && success?(is-true(success?(1-proj-3-tuple(v_1091))))) then symmetricstatepack(1-proj-3-tuple(v_1091),2-proj-3-tuple(v_1091),hash(3-proj-3-tuple(v_1091),getpublickey(s_1082))) else fail-any) else fail-any)) in
        {567}let hs_1093: handshakestate = (if not-caught-fail(v_1090) then (if not-caught-fail(v_1092) then handshakestatepack(v_1092,s_1082,e_1083,rs_1084,re_1085,empty,false) else fail-any) else fail-any) in
        {568}insert statestore(me_1080,them_1079,statepack_a(hs_1093))
    ) | (
        {597}get statestore(=me_1080,=them_1079,statepack_a(hs_1094: handshakestate)) in
        {569}in(pub, message_a_1095: bitstring);
        {570}let v_1096: bitstring = catch-fail(handshakestateunpack(hs_1094)) in
        {571}let v_1097: bitstring = catch-fail(deconcat3(message_a_1095)) in
        {572}let v_1098: bool = catch-fail(true) in
        {573}let v_1099: key = catch-fail(1-proj-3-tuple(v_1097)) in
        {574}let v_1100: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1096))) in
        {575}let v_1101: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1096)) then (if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-3-tuple(v_1100))))) then symmetricstatepack(1-proj-3-tuple(v_1100),2-proj-3-tuple(v_1100),hash(3-proj-3-tuple(v_1100),v_1099)) else fail-any) else fail-any)) in
        {576}let v_1102: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_1096))) in
        {577}let v_1103: bitstring = catch-fail(symmetricstateunpack(v_1101)) in
        {578}let v_1104: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1103),(if success?(2-proj-7-tuple(v_1096)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),v_1099) else fail-any) else fail-any))) in
        {579}let v_1105: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1103),(if success?(2-proj-7-tuple(v_1096)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),v_1099) else fail-any) else fail-any))) in
        {580}let v_1106: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1103),(if success?(2-proj-7-tuple(v_1096)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),v_1099) else fail-any) else fail-any))) in
        {581}let v_1107: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_1096)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),v_1099) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1103))) then (if not-caught-fail(v_1104) then (if not-caught-fail(v_1105) then (if not-caught-fail(v_1106) then (v_1104,v_1105,v_1106) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {582}let v_1108: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_1096)) then (if (not-caught-fail(v_1102) && success?(is-true(success?(1-proj-2-tuple(v_1102))))) then dhexp(2-proj-2-tuple(v_1102),v_1099) else fail-any) else fail-any)) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-3-tuple(v_1103))))) then (if (not-caught-fail(v_1107) && success?(is-true(success?(1-proj-3-tuple(v_1107))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1107)) then cipherstatepack(2-proj-3-tuple(v_1107),minnonce) else fail-any),1-proj-3-tuple(v_1107),3-proj-3-tuple(v_1103)) else fail-any) else fail-any) else fail-any)) in
        {583}let v_1109: bitstring = catch-fail(symmetricstateunpack(v_1108)) in
        {584}let v_1110: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1109))) in
        {585}let v_1111: aead = catch-fail(decrypt(1-proj-2-tuple(v_1110),2-proj-2-tuple(v_1110),3-proj-3-tuple(v_1109),3-proj-3-tuple(v_1097))) in
        {586}let v_1112: bitstring = catch-fail(aeadunpack(v_1111)) in
        {587}let v_1113: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1109))) in
        {588}let v_1114: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1110))) && success?(1-proj-3-tuple(v_1109))) then (if (not-caught-fail(v_1113) && success?(is-true(success?(1-proj-2-tuple(v_1113))))) then cipherstatepack(1-proj-2-tuple(v_1113),increment_nonce(2-proj-2-tuple(v_1110))) else fail-any) else fail-any)) in
        {589}let v_1115: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1097)) && (success?(3-proj-3-tuple(v_1109)) && success?(1-proj-3-tuple(v_1109)))) then (if (not-caught-fail(v_1110) && success?(is-true(success?(1-proj-2-tuple(v_1110))))) then (if not-caught-fail(v_1111) then (if (not-caught-fail(v_1112) && success?(is-true(success?(1-proj-3-tuple(v_1112))))) then (if not-caught-fail(v_1114) then (v_1114,3-proj-3-tuple(v_1112),1-proj-3-tuple(v_1112)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {590}let v_1116: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1115),2-proj-3-tuple(v_1109),3-proj-3-tuple(v_1109)))) in
        {591}let v_1117: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1097)) && success?(symmetricstatepack(1-proj-3-tuple(v_1115),2-proj-3-tuple(v_1109),3-proj-3-tuple(v_1109)))) then (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-3-tuple(v_1116))))) then symmetricstatepack(1-proj-3-tuple(v_1116),2-proj-3-tuple(v_1116),hash(3-proj-3-tuple(v_1116),3-proj-3-tuple(v_1097))) else fail-any) else fail-any)) in
        {592}let v_1118: bitstring = catch-fail((if success?(3-proj-3-tuple(v_1097)) then (if (not-caught-fail(v_1109) && success?(is-true(success?(1-proj-3-tuple(v_1109))))) then (if (not-caught-fail(v_1115) && success?(is-true(success?(1-proj-3-tuple(v_1115))))) then (if not-caught-fail(v_1117) then (v_1117,2-proj-3-tuple(v_1115),3-proj-3-tuple(v_1115)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {593}let v_1119: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1118),2-proj-7-tuple(v_1096),3-proj-7-tuple(v_1096),4-proj-7-tuple(v_1096),v_1099,6-proj-7-tuple(v_1096),7-proj-7-tuple(v_1096))) in
        {594}let (hs_1120: handshakestate,re_1121: key,plaintext_a_1122: bitstring,valid_1123: bool) = (if (not-caught-fail(v_1096) && success?(is-true(success?(1-proj-7-tuple(v_1096))))) then (if (not-caught-fail(v_1097) && success?(is-true(success?(1-proj-3-tuple(v_1097))))) then (if not-caught-fail(v_1098) then (if not-caught-fail(v_1099) then (if not-caught-fail(v_1101) then (if not-caught-fail(v_1108) then (if (not-caught-fail(v_1118) && success?(is-true(success?(1-proj-3-tuple(v_1118))))) then (if (v_1098 && 3-proj-3-tuple(v_1118)) then (if not-caught-fail(v_1119) then (v_1119,getpublickey(3-proj-7-tuple(v_1096)),2-proj-3-tuple(v_1118),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {595}event RecvMsg(me_1080,them_1079,stage_a,plaintext_a_1122,valid_1123);
        {596}insert statestore(me_1080,them_1079,statepack_b(hs_1120))
    ) | (
        {628}get statestore(=me_1080,=them_1079,statepack_b(hs_1124: handshakestate)) in
        {598}let v_1125: bitstring = catch-fail(handshakestateunpack(hs_1124)) in
        {599}let v_1126: bitstring = catch-fail((empty,empty,empty)) in
        {600}new key_e_1127[me_1080,them_1079]: key;
        {601}let v_1128: key = catch-fail(dhexp(key_e_1127,g)) in
        {602}let v_1129: keypair = catch-fail((if not-caught-fail(v_1128) then keypairpack(v_1128,key_e_1127) else fail-any)) in
        {603}let v_1130: bitstring = catch-fail(getpublickey(v_1129)) in
        {604}let v_1131: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1125))) in
        {605}let v_1132: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1125)) then (if (not-caught-fail(v_1131) && success?(is-true(success?(1-proj-3-tuple(v_1131))))) then symmetricstatepack(1-proj-3-tuple(v_1131),2-proj-3-tuple(v_1131),hash(3-proj-3-tuple(v_1131),v_1130)) else fail-any) else fail-any)) in
        {606}let v_1133: bitstring = catch-fail(keypairunpack(v_1129)) in
        {607}let v_1134: bitstring = catch-fail(symmetricstateunpack(v_1132)) in
        {608}let v_1135: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1134),(if success?(5-proj-7-tuple(v_1125)) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-2-tuple(v_1133))))) then dhexp(2-proj-2-tuple(v_1133),5-proj-7-tuple(v_1125)) else fail-any) else fail-any))) in
        {609}let v_1136: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1134),(if success?(5-proj-7-tuple(v_1125)) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-2-tuple(v_1133))))) then dhexp(2-proj-2-tuple(v_1133),5-proj-7-tuple(v_1125)) else fail-any) else fail-any))) in
        {610}let v_1137: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1134),(if success?(5-proj-7-tuple(v_1125)) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-2-tuple(v_1133))))) then dhexp(2-proj-2-tuple(v_1133),5-proj-7-tuple(v_1125)) else fail-any) else fail-any))) in
        {611}let v_1138: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1125)) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-2-tuple(v_1133))))) then dhexp(2-proj-2-tuple(v_1133),5-proj-7-tuple(v_1125)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1134))) then (if not-caught-fail(v_1135) then (if not-caught-fail(v_1136) then (if not-caught-fail(v_1137) then (v_1135,v_1136,v_1137) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {612}let v_1139: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1125)) then (if (not-caught-fail(v_1133) && success?(is-true(success?(1-proj-2-tuple(v_1133))))) then dhexp(2-proj-2-tuple(v_1133),5-proj-7-tuple(v_1125)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1134) && success?(is-true(success?(1-proj-3-tuple(v_1134))))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-3-tuple(v_1138))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1138)) then cipherstatepack(2-proj-3-tuple(v_1138),minnonce) else fail-any),1-proj-3-tuple(v_1138),3-proj-3-tuple(v_1134)) else fail-any) else fail-any) else fail-any)) in
        {613}let v_1140: bitstring = catch-fail(symmetricstateunpack(v_1139)) in
        {614}let v_1141: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1140))) in
        {615}let v_1142: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1141),2-proj-2-tuple(v_1141),3-proj-3-tuple(v_1140),msg_b(me_1080,them_1079))) in
        {616}let v_1143: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1140))) in
        {617}let v_1144: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1141))) && success?(1-proj-3-tuple(v_1140))) then (if (not-caught-fail(v_1143) && success?(is-true(success?(1-proj-2-tuple(v_1143))))) then cipherstatepack(1-proj-2-tuple(v_1143),increment_nonce(2-proj-2-tuple(v_1141))) else fail-any) else fail-any)) in
        {618}let v_1145: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1140)) && success?(1-proj-3-tuple(v_1140))) then (if (not-caught-fail(v_1141) && success?(is-true(success?(1-proj-2-tuple(v_1141))))) then (if not-caught-fail(v_1142) then (if not-caught-fail(v_1144) then (v_1144,v_1142) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {619}let v_1146: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1145),2-proj-3-tuple(v_1140),3-proj-3-tuple(v_1140)))) in
        {620}let v_1147: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1145)) && success?(symmetricstatepack(1-proj-2-tuple(v_1145),2-proj-3-tuple(v_1140),3-proj-3-tuple(v_1140)))) then (if (not-caught-fail(v_1146) && success?(is-true(success?(1-proj-3-tuple(v_1146))))) then symmetricstatepack(1-proj-3-tuple(v_1146),2-proj-3-tuple(v_1146),hash(3-proj-3-tuple(v_1146),2-proj-2-tuple(v_1145))) else fail-any) else fail-any)) in
        {621}let v_1148: bitstring = catch-fail((if (not-caught-fail(v_1140) && success?(is-true(success?(1-proj-3-tuple(v_1140))))) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-2-tuple(v_1145))))) then (if not-caught-fail(v_1147) then (v_1147,2-proj-2-tuple(v_1145)) else fail-any) else fail-any) else fail-any)) in
        {622}let v_1149: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1148),2-proj-7-tuple(v_1125),v_1129,4-proj-7-tuple(v_1125),5-proj-7-tuple(v_1125),6-proj-7-tuple(v_1125),7-proj-7-tuple(v_1125))) in
        {623}let v_1150: bitstring = catch-fail(concat3(v_1130,2-proj-3-tuple(v_1126),2-proj-2-tuple(v_1148))) in
        {624}let (hs_1151: handshakestate,re_1152: key,message_b_1153: bitstring) = (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-7-tuple(v_1125))))) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-3-tuple(v_1126))))) then (if not-caught-fail(v_1129) then (if not-caught-fail(v_1130) then (if not-caught-fail(v_1132) then (if not-caught-fail(v_1139) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-2-tuple(v_1148))))) then (if not-caught-fail(v_1149) then (if not-caught-fail(v_1150) then (v_1149,5-proj-7-tuple(v_1125),v_1150) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {625}event SendMsg(me_1080,them_1079,stage_b,msg_b(me_1080,them_1079),true);
        {626}insert statestore(me_1080,them_1079,statepack_c(hs_1151));
        {627}out(pub, message_b_1153)
    ) | (
        {659}get statestore(=me_1080,=them_1079,statepack_c(hs_1154: handshakestate)) in
        {629}in(pub, message_c_1155: bitstring);
        {630}let v_1156: bitstring = catch-fail(handshakestateunpack(hs_1154)) in
        {631}let v_1157: bitstring = catch-fail(deconcat3(message_c_1155)) in
        {632}let v_1158: bool = catch-fail(true) in
        {633}let v_1159: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1156))) in
        {634}let v_1160: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1159))) in
        {635}let v_1161: aead = catch-fail(decrypt(1-proj-2-tuple(v_1160),2-proj-2-tuple(v_1160),3-proj-3-tuple(v_1159),2-proj-3-tuple(v_1157))) in
        {636}let v_1162: bitstring = catch-fail(aeadunpack(v_1161)) in
        {637}let v_1163: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1159))) in
        {638}let v_1164: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1160))) && success?(1-proj-3-tuple(v_1159))) then (if (not-caught-fail(v_1163) && success?(is-true(success?(1-proj-2-tuple(v_1163))))) then cipherstatepack(1-proj-2-tuple(v_1163),increment_nonce(2-proj-2-tuple(v_1160))) else fail-any) else fail-any)) in
        {639}let v_1165: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1157)) && (success?(3-proj-3-tuple(v_1159)) && success?(1-proj-3-tuple(v_1159)))) then (if (not-caught-fail(v_1160) && success?(is-true(success?(1-proj-2-tuple(v_1160))))) then (if not-caught-fail(v_1161) then (if (not-caught-fail(v_1162) && success?(is-true(success?(1-proj-3-tuple(v_1162))))) then (if not-caught-fail(v_1164) then (v_1164,3-proj-3-tuple(v_1162),1-proj-3-tuple(v_1162)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {640}let v_1166: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1165),2-proj-3-tuple(v_1159),3-proj-3-tuple(v_1159)))) in
        {641}let v_1167: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1157)) && success?(symmetricstatepack(1-proj-3-tuple(v_1165),2-proj-3-tuple(v_1159),3-proj-3-tuple(v_1159)))) then (if (not-caught-fail(v_1166) && success?(is-true(success?(1-proj-3-tuple(v_1166))))) then symmetricstatepack(1-proj-3-tuple(v_1166),2-proj-3-tuple(v_1166),hash(3-proj-3-tuple(v_1166),2-proj-3-tuple(v_1157))) else fail-any) else fail-any)) in
        {642}let v_1168: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1157)) && success?(1-proj-7-tuple(v_1156))) then (if (not-caught-fail(v_1159) && success?(is-true(success?(1-proj-3-tuple(v_1159))))) then (if (not-caught-fail(v_1165) && success?(is-true(success?(1-proj-3-tuple(v_1165))))) then (if not-caught-fail(v_1167) then (v_1167,2-proj-3-tuple(v_1165),3-proj-3-tuple(v_1165)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {643}let v_1169: key = catch-fail(2-proj-3-tuple(v_1168)) in
        {644}let v_1170: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1168))) in
        {645}let v_1171: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1170))) in
        {646}let v_1172: aead = catch-fail(decrypt(1-proj-2-tuple(v_1171),2-proj-2-tuple(v_1171),3-proj-3-tuple(v_1170),3-proj-3-tuple(v_1157))) in
        {647}let v_1173: bitstring = catch-fail(aeadunpack(v_1172)) in
        {648}let v_1174: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1170))) in
        {649}let v_1175: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1171))) && success?(1-proj-3-tuple(v_1170))) then (if (not-caught-fail(v_1174) && success?(is-true(success?(1-proj-2-tuple(v_1174))))) then cipherstatepack(1-proj-2-tuple(v_1174),increment_nonce(2-proj-2-tuple(v_1171))) else fail-any) else fail-any)) in
        {650}let v_1176: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1157)) && (success?(3-proj-3-tuple(v_1170)) && success?(1-proj-3-tuple(v_1170)))) then (if (not-caught-fail(v_1171) && success?(is-true(success?(1-proj-2-tuple(v_1171))))) then (if not-caught-fail(v_1172) then (if (not-caught-fail(v_1173) && success?(is-true(success?(1-proj-3-tuple(v_1173))))) then (if not-caught-fail(v_1175) then (v_1175,3-proj-3-tuple(v_1173),1-proj-3-tuple(v_1173)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {651}let v_1177: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1176),2-proj-3-tuple(v_1170),3-proj-3-tuple(v_1170)))) in
        {652}let v_1178: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1157)) && success?(symmetricstatepack(1-proj-3-tuple(v_1176),2-proj-3-tuple(v_1170),3-proj-3-tuple(v_1170)))) then (if (not-caught-fail(v_1177) && success?(is-true(success?(1-proj-3-tuple(v_1177))))) then symmetricstatepack(1-proj-3-tuple(v_1177),2-proj-3-tuple(v_1177),hash(3-proj-3-tuple(v_1177),3-proj-3-tuple(v_1157))) else fail-any) else fail-any)) in
        {653}let v_1179: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1157)) && success?(1-proj-3-tuple(v_1168))) then (if (not-caught-fail(v_1170) && success?(is-true(success?(1-proj-3-tuple(v_1170))))) then (if (not-caught-fail(v_1176) && success?(is-true(success?(1-proj-3-tuple(v_1176))))) then (if not-caught-fail(v_1178) then (v_1178,2-proj-3-tuple(v_1176),3-proj-3-tuple(v_1176)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {654}let v_1180: key = catch-fail(dhexp(key_s(them_1079),g)) in
        {655}let v_1181: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1179),2-proj-7-tuple(v_1156),3-proj-7-tuple(v_1156),v_1169,5-proj-7-tuple(v_1156),6-proj-7-tuple(v_1156),7-proj-7-tuple(v_1156))) in
        {656}let (hs_1182: handshakestate,re_1183: key,plaintext_c_1184: bitstring,valid_1185: bool) = (if (not-caught-fail(v_1156) && success?(is-true(success?(1-proj-7-tuple(v_1156))))) then (if (not-caught-fail(v_1157) && success?(is-true(success?(1-proj-3-tuple(v_1157))))) then (if not-caught-fail(v_1158) then (if (not-caught-fail(v_1168) && success?(is-true(success?(1-proj-3-tuple(v_1168))))) then (if not-caught-fail(v_1169) then (if (not-caught-fail(v_1179) && success?(is-true(success?(1-proj-3-tuple(v_1179))))) then (if ((3-proj-3-tuple(v_1168) && 3-proj-3-tuple(v_1179)) && (v_1169 = getpublickey((if not-caught-fail(v_1180) then keypairpack(v_1180,key_s(them_1079)) else fail-any)))) then (if not-caught-fail(v_1181) then (v_1181,getpublickey(3-proj-7-tuple(v_1156)),2-proj-3-tuple(v_1179),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {657}event RecvMsg(me_1080,them_1079,stage_c,plaintext_c_1184,valid_1185);
        {658}insert statestore(me_1080,them_1079,statepack_d(hs_1182))
    ) | (
        {684}get statestore(=me_1080,=them_1079,statepack_d(hs_1186: handshakestate)) in
        {660}let v_1187: bitstring = catch-fail(handshakestateunpack(hs_1186)) in
        {661}let v_1188: bitstring = catch-fail((empty,empty,empty)) in
        {662}let v_1189: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_1187))) in
        {663}let v_1190: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1187))) in
        {664}let v_1191: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1190),(if (success?(4-proj-7-tuple(v_1187)) && success?(3-proj-7-tuple(v_1187))) then (if (not-caught-fail(v_1189) && success?(is-true(success?(1-proj-2-tuple(v_1189))))) then dhexp(2-proj-2-tuple(v_1189),4-proj-7-tuple(v_1187)) else fail-any) else fail-any))) in
        {665}let v_1192: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1190),(if (success?(4-proj-7-tuple(v_1187)) && success?(3-proj-7-tuple(v_1187))) then (if (not-caught-fail(v_1189) && success?(is-true(success?(1-proj-2-tuple(v_1189))))) then dhexp(2-proj-2-tuple(v_1189),4-proj-7-tuple(v_1187)) else fail-any) else fail-any))) in
        {666}let v_1193: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1190),(if (success?(4-proj-7-tuple(v_1187)) && success?(3-proj-7-tuple(v_1187))) then (if (not-caught-fail(v_1189) && success?(is-true(success?(1-proj-2-tuple(v_1189))))) then dhexp(2-proj-2-tuple(v_1189),4-proj-7-tuple(v_1187)) else fail-any) else fail-any))) in
        {667}let v_1194: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1187)) && success?(3-proj-7-tuple(v_1187))) then (if (not-caught-fail(v_1189) && success?(is-true(success?(1-proj-2-tuple(v_1189))))) then dhexp(2-proj-2-tuple(v_1189),4-proj-7-tuple(v_1187)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1190))) then (if not-caught-fail(v_1191) then (if not-caught-fail(v_1192) then (if not-caught-fail(v_1193) then (v_1191,v_1192,v_1193) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {668}let v_1195: symmetricstate = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_1187)) && success?(3-proj-7-tuple(v_1187))) then (if (not-caught-fail(v_1189) && success?(is-true(success?(1-proj-2-tuple(v_1189))))) then dhexp(2-proj-2-tuple(v_1189),4-proj-7-tuple(v_1187)) else fail-any) else fail-any)) && success?(1-proj-7-tuple(v_1187))) then (if (not-caught-fail(v_1190) && success?(is-true(success?(1-proj-3-tuple(v_1190))))) then (if (not-caught-fail(v_1194) && success?(is-true(success?(1-proj-3-tuple(v_1194))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1194)) then cipherstatepack(2-proj-3-tuple(v_1194),minnonce) else fail-any),1-proj-3-tuple(v_1194),3-proj-3-tuple(v_1190)) else fail-any) else fail-any) else fail-any)) in
        {669}let v_1196: bitstring = catch-fail(symmetricstateunpack(v_1195)) in
        {670}let v_1197: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1196))) in
        {671}let v_1198: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1197),2-proj-2-tuple(v_1197),3-proj-3-tuple(v_1196),msg_d(me_1080,them_1079))) in
        {672}let v_1199: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1196))) in
        {673}let v_1200: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1197))) && success?(1-proj-3-tuple(v_1196))) then (if (not-caught-fail(v_1199) && success?(is-true(success?(1-proj-2-tuple(v_1199))))) then cipherstatepack(1-proj-2-tuple(v_1199),increment_nonce(2-proj-2-tuple(v_1197))) else fail-any) else fail-any)) in
        {674}let v_1201: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1196)) && success?(1-proj-3-tuple(v_1196))) then (if (not-caught-fail(v_1197) && success?(is-true(success?(1-proj-2-tuple(v_1197))))) then (if not-caught-fail(v_1198) then (if not-caught-fail(v_1200) then (v_1200,v_1198) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {675}let v_1202: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1201),2-proj-3-tuple(v_1196),3-proj-3-tuple(v_1196)))) in
        {676}let v_1203: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1201)) && success?(symmetricstatepack(1-proj-2-tuple(v_1201),2-proj-3-tuple(v_1196),3-proj-3-tuple(v_1196)))) then (if (not-caught-fail(v_1202) && success?(is-true(success?(1-proj-3-tuple(v_1202))))) then symmetricstatepack(1-proj-3-tuple(v_1202),2-proj-3-tuple(v_1202),hash(3-proj-3-tuple(v_1202),2-proj-2-tuple(v_1201))) else fail-any) else fail-any)) in
        {677}let v_1204: bitstring = catch-fail((if (not-caught-fail(v_1196) && success?(is-true(success?(1-proj-3-tuple(v_1196))))) then (if (not-caught-fail(v_1201) && success?(is-true(success?(1-proj-2-tuple(v_1201))))) then (if not-caught-fail(v_1203) then (v_1203,2-proj-2-tuple(v_1201)) else fail-any) else fail-any) else fail-any)) in
        {678}let v_1205: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1204),2-proj-7-tuple(v_1187),3-proj-7-tuple(v_1187),4-proj-7-tuple(v_1187),5-proj-7-tuple(v_1187),6-proj-7-tuple(v_1187),7-proj-7-tuple(v_1187))) in
        {679}let v_1206: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1188),2-proj-3-tuple(v_1188),2-proj-2-tuple(v_1204))) in
        {680}let (hs_1207: handshakestate,re_1208: key,message_d_1209: bitstring) = (if (not-caught-fail(v_1187) && success?(is-true(success?(1-proj-7-tuple(v_1187))))) then (if (not-caught-fail(v_1188) && success?(is-true(success?(1-proj-3-tuple(v_1188))))) then (if not-caught-fail(v_1195) then (if (not-caught-fail(v_1204) && success?(is-true(success?(1-proj-2-tuple(v_1204))))) then (if not-caught-fail(v_1205) then (if not-caught-fail(v_1206) then (v_1205,5-proj-7-tuple(v_1187),v_1206) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {681}event SendMsg(me_1080,them_1079,stage_d,msg_d(me_1080,them_1079),true);
        {682}insert statestore(me_1080,them_1079,statepack_e(hs_1207));
        {683}out(pub, message_d_1209)
    ) | (
        {703}get statestore(=me_1080,=them_1079,statepack_e(hs_1210: handshakestate)) in
        {685}in(pub, message_e_1211: bitstring);
        {686}let v_1212: bitstring = catch-fail(handshakestateunpack(hs_1210)) in
        {687}let v_1213: bitstring = catch-fail(deconcat3(message_e_1211)) in
        {688}let v_1214: bool = catch-fail(true) in
        {689}let v_1215: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1212))) in
        {690}let v_1216: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1215))) in
        {691}let v_1217: aead = catch-fail(decrypt(1-proj-2-tuple(v_1216),2-proj-2-tuple(v_1216),3-proj-3-tuple(v_1215),3-proj-3-tuple(v_1213))) in
        {692}let v_1218: bitstring = catch-fail(aeadunpack(v_1217)) in
        {693}let v_1219: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1215))) in
        {694}let v_1220: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1216))) && success?(1-proj-3-tuple(v_1215))) then (if (not-caught-fail(v_1219) && success?(is-true(success?(1-proj-2-tuple(v_1219))))) then cipherstatepack(1-proj-2-tuple(v_1219),increment_nonce(2-proj-2-tuple(v_1216))) else fail-any) else fail-any)) in
        {695}let v_1221: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1213)) && (success?(3-proj-3-tuple(v_1215)) && success?(1-proj-3-tuple(v_1215)))) then (if (not-caught-fail(v_1216) && success?(is-true(success?(1-proj-2-tuple(v_1216))))) then (if not-caught-fail(v_1217) then (if (not-caught-fail(v_1218) && success?(is-true(success?(1-proj-3-tuple(v_1218))))) then (if not-caught-fail(v_1220) then (v_1220,3-proj-3-tuple(v_1218),1-proj-3-tuple(v_1218)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {696}let v_1222: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1221),2-proj-3-tuple(v_1215),3-proj-3-tuple(v_1215)))) in
        {697}let v_1223: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1213)) && success?(symmetricstatepack(1-proj-3-tuple(v_1221),2-proj-3-tuple(v_1215),3-proj-3-tuple(v_1215)))) then (if (not-caught-fail(v_1222) && success?(is-true(success?(1-proj-3-tuple(v_1222))))) then symmetricstatepack(1-proj-3-tuple(v_1222),2-proj-3-tuple(v_1222),hash(3-proj-3-tuple(v_1222),3-proj-3-tuple(v_1213))) else fail-any) else fail-any)) in
        {698}let v_1224: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1213)) && success?(1-proj-7-tuple(v_1212))) then (if (not-caught-fail(v_1215) && success?(is-true(success?(1-proj-3-tuple(v_1215))))) then (if (not-caught-fail(v_1221) && success?(is-true(success?(1-proj-3-tuple(v_1221))))) then (if not-caught-fail(v_1223) then (v_1223,2-proj-3-tuple(v_1221),3-proj-3-tuple(v_1221)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {699}let v_1225: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1224),2-proj-7-tuple(v_1212),3-proj-7-tuple(v_1212),4-proj-7-tuple(v_1212),5-proj-7-tuple(v_1212),6-proj-7-tuple(v_1212),7-proj-7-tuple(v_1212))) in
        {700}let (hs_1226: handshakestate,re_1227: key,plaintext_e_1228: bitstring,valid_1229: bool) = (if (not-caught-fail(v_1212) && success?(is-true(success?(1-proj-7-tuple(v_1212))))) then (if (not-caught-fail(v_1213) && success?(is-true(success?(1-proj-3-tuple(v_1213))))) then (if not-caught-fail(v_1214) then (if (not-caught-fail(v_1224) && success?(is-true(success?(1-proj-3-tuple(v_1224))))) then (if (v_1214 && 3-proj-3-tuple(v_1224)) then (if not-caught-fail(v_1225) then (v_1225,getpublickey(3-proj-7-tuple(v_1212)),2-proj-3-tuple(v_1224),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {701}event RecvMsg(me_1080,them_1079,stage_e,plaintext_e_1228,valid_1229);
        {702}insert statestore(me_1080,them_1079,statepack_f(hs_1226))
    ) | (
        {729}get statestore(=me_1080,=them_1079,statepack_f(hs_1230: handshakestate)) in
        {704}let v_1231: bitstring = catch-fail(handshakestateunpack(hs_1230)) in
        {705}let v_1232: bitstring = catch-fail((empty,empty,empty)) in
        {706}let v_1233: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1231))) in
        {707}let v_1234: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1233))) in
        {708}let v_1235: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1234),2-proj-2-tuple(v_1234),3-proj-3-tuple(v_1233),msg_f(me_1080,them_1079))) in
        {709}let v_1236: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1233))) in
        {710}let v_1237: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1234))) && success?(1-proj-3-tuple(v_1233))) then (if (not-caught-fail(v_1236) && success?(is-true(success?(1-proj-2-tuple(v_1236))))) then cipherstatepack(1-proj-2-tuple(v_1236),increment_nonce(2-proj-2-tuple(v_1234))) else fail-any) else fail-any)) in
        {711}let v_1238: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1233)) && success?(1-proj-3-tuple(v_1233))) then (if (not-caught-fail(v_1234) && success?(is-true(success?(1-proj-2-tuple(v_1234))))) then (if not-caught-fail(v_1235) then (if not-caught-fail(v_1237) then (v_1237,v_1235) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {712}let v_1239: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1238),2-proj-3-tuple(v_1233),3-proj-3-tuple(v_1233)))) in
        {713}let v_1240: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1238)) && success?(symmetricstatepack(1-proj-2-tuple(v_1238),2-proj-3-tuple(v_1233),3-proj-3-tuple(v_1233)))) then (if (not-caught-fail(v_1239) && success?(is-true(success?(1-proj-3-tuple(v_1239))))) then symmetricstatepack(1-proj-3-tuple(v_1239),2-proj-3-tuple(v_1239),hash(3-proj-3-tuple(v_1239),2-proj-2-tuple(v_1238))) else fail-any) else fail-any)) in
        {714}let v_1241: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1231)) then (if (not-caught-fail(v_1233) && success?(is-true(success?(1-proj-3-tuple(v_1233))))) then (if (not-caught-fail(v_1238) && success?(is-true(success?(1-proj-2-tuple(v_1238))))) then (if not-caught-fail(v_1240) then (v_1240,2-proj-2-tuple(v_1238)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {715}let v_1242: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1241),2-proj-7-tuple(v_1231),3-proj-7-tuple(v_1231),4-proj-7-tuple(v_1231),5-proj-7-tuple(v_1231),6-proj-7-tuple(v_1231),7-proj-7-tuple(v_1231))) in
        {716}let v_1243: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1232),2-proj-3-tuple(v_1232),2-proj-2-tuple(v_1241))) in
        {717}let v_1244: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1241))) in
        {718}let v_1245: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1244),zero)) in
        {719}let v_1246: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1244),zero)) in
        {720}let v_1247: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1244),zero)) in
        {721}let v_1248: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1244)) then (if not-caught-fail(v_1245) then (if not-caught-fail(v_1246) then (if not-caught-fail(v_1247) then (v_1245,v_1246,v_1247) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {722}let v_1249: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1248)) then cipherstatepack(1-proj-3-tuple(v_1248),minnonce) else fail-any)) in
        {723}let v_1250: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1248)) then cipherstatepack(2-proj-3-tuple(v_1248),minnonce) else fail-any)) in
        {724}let v_1251: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1241)) then (if (not-caught-fail(v_1244) && success?(is-true(success?(1-proj-3-tuple(v_1244))))) then (if (not-caught-fail(v_1248) && success?(is-true(success?(1-proj-3-tuple(v_1248))))) then (if not-caught-fail(v_1249) then (if not-caught-fail(v_1250) then (1-proj-2-tuple(v_1241),v_1249,v_1250) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {725}let (hs_1252: handshakestate,re_1253: key,message_f_1254: bitstring,cs1_1255: cipherstate,cs2_1256: cipherstate) = (if (not-caught-fail(v_1231) && success?(is-true(success?(1-proj-7-tuple(v_1231))))) then (if (not-caught-fail(v_1232) && success?(is-true(success?(1-proj-3-tuple(v_1232))))) then (if (not-caught-fail(v_1241) && success?(is-true(success?(1-proj-2-tuple(v_1241))))) then (if not-caught-fail(v_1242) then (if not-caught-fail(v_1243) then (if (not-caught-fail(v_1251) && success?(is-true(success?(1-proj-3-tuple(v_1251))))) then (v_1242,5-proj-7-tuple(v_1231),v_1243,2-proj-3-tuple(v_1251),3-proj-3-tuple(v_1251)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {726}event SendMsg(me_1080,them_1079,stage_f,msg_f(me_1080,them_1079),true);
        {727}insert statestore(me_1080,them_1079,statepack_g(hs_1252));
        {728}out(pub, message_f_1254)
    ) | (
        {730}event LeakS(phase0,me_1080);
        {731}out(pub, key_s(me_1080))
    ) | (
        {732}phase 1;
        {733}event LeakS(phase1,me_1080);
        {734}out(pub, key_s(me_1080))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1337,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1337,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1337,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1337,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1337,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1337,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1337,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1337,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1337,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1337,stage_e,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_e(alice,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1337,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1337,stage_f,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_f(bob,alice)); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 171 rules in the queue.
400 rules inserted. The rule base contains 394 rules. 59 rules in the queue.
600 rules inserted. The rule base contains 580 rules. 159 rules in the queue.
800 rules inserted. The rule base contains 768 rules. 136 rules in the queue.
1000 rules inserted. The rule base contains 961 rules. 329 rules in the queue.
1200 rules inserted. The rule base contains 1143 rules. 202 rules in the queue.
1400 rules inserted. The rule base contains 1318 rules. 258 rules in the queue.
1600 rules inserted. The rule base contains 1468 rules. 358 rules in the queue.
1800 rules inserted. The rule base contains 1626 rules. 414 rules in the queue.
2000 rules inserted. The rule base contains 1783 rules. 407 rules in the queue.
2200 rules inserted. The rule base contains 1930 rules. 421 rules in the queue.
2400 rules inserted. The rule base contains 2062 rules. 469 rules in the queue.
2600 rules inserted. The rule base contains 2219 rules. 489 rules in the queue.
2800 rules inserted. The rule base contains 2399 rules. 486 rules in the queue.
3000 rules inserted. The rule base contains 2571 rules. 482 rules in the queue.
3200 rules inserted. The rule base contains 2747 rules. 519 rules in the queue.
3400 rules inserted. The rule base contains 2872 rules. 563 rules in the queue.
3600 rules inserted. The rule base contains 3015 rules. 567 rules in the queue.
3800 rules inserted. The rule base contains 3144 rules. 543 rules in the queue.
4000 rules inserted. The rule base contains 3278 rules. 530 rules in the queue.
4200 rules inserted. The rule base contains 3427 rules. 508 rules in the queue.
4400 rules inserted. The rule base contains 3580 rules. 503 rules in the queue.
4600 rules inserted. The rule base contains 3730 rules. 523 rules in the queue.
4800 rules inserted. The rule base contains 3852 rules. 538 rules in the queue.
5000 rules inserted. The rule base contains 3957 rules. 534 rules in the queue.
5200 rules inserted. The rule base contains 4088 rules. 530 rules in the queue.
5400 rules inserted. The rule base contains 4187 rules. 519 rules in the queue.
5600 rules inserted. The rule base contains 4272 rules. 475 rules in the queue.
5800 rules inserted. The rule base contains 4375 rules. 469 rules in the queue.
6000 rules inserted. The rule base contains 4508 rules. 478 rules in the queue.
6200 rules inserted. The rule base contains 4608 rules. 474 rules in the queue.
6400 rules inserted. The rule base contains 4714 rules. 478 rules in the queue.
6600 rules inserted. The rule base contains 4830 rules. 473 rules in the queue.
6800 rules inserted. The rule base contains 4981 rules. 481 rules in the queue.
7000 rules inserted. The rule base contains 5088 rules. 468 rules in the queue.
7200 rules inserted. The rule base contains 5203 rules. 461 rules in the queue.
7400 rules inserted. The rule base contains 5313 rules. 431 rules in the queue.
7600 rules inserted. The rule base contains 5441 rules. 432 rules in the queue.
7800 rules inserted. The rule base contains 5607 rules. 478 rules in the queue.
8000 rules inserted. The rule base contains 5692 rules. 419 rules in the queue.
8200 rules inserted. The rule base contains 5779 rules. 390 rules in the queue.
8400 rules inserted. The rule base contains 5878 rules. 352 rules in the queue.
8600 rules inserted. The rule base contains 5999 rules. 302 rules in the queue.
8800 rules inserted. The rule base contains 6155 rules. 307 rules in the queue.
9000 rules inserted. The rule base contains 6234 rules. 270 rules in the queue.
9200 rules inserted. The rule base contains 6372 rules. 267 rules in the queue.
9400 rules inserted. The rule base contains 6495 rules. 262 rules in the queue.
9600 rules inserted. The rule base contains 6645 rules. 291 rules in the queue.
9800 rules inserted. The rule base contains 6773 rules. 314 rules in the queue.
10000 rules inserted. The rule base contains 6940 rules. 318 rules in the queue.
10200 rules inserted. The rule base contains 7097 rules. 328 rules in the queue.
10400 rules inserted. The rule base contains 7246 rules. 304 rules in the queue.
10600 rules inserted. The rule base contains 7416 rules. 323 rules in the queue.
10800 rules inserted. The rule base contains 7557 rules. 267 rules in the queue.
11000 rules inserted. The rule base contains 7700 rules. 258 rules in the queue.
11200 rules inserted. The rule base contains 7857 rules. 288 rules in the queue.
11400 rules inserted. The rule base contains 8024 rules. 280 rules in the queue.
11600 rules inserted. The rule base contains 8159 rules. 263 rules in the queue.
11800 rules inserted. The rule base contains 8285 rules. 240 rules in the queue.
12000 rules inserted. The rule base contains 8422 rules. 199 rules in the queue.
12200 rules inserted. The rule base contains 8553 rules. 190 rules in the queue.
12400 rules inserted. The rule base contains 8682 rules. 197 rules in the queue.
12600 rules inserted. The rule base contains 8809 rules. 165 rules in the queue.
12800 rules inserted. The rule base contains 8920 rules. 98 rules in the queue.
13000 rules inserted. The rule base contains 8994 rules. 33 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1337,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1337,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1337,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1337,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_37527464 = key_e[me = alice,them = bob,!1 = @sid_37527450]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_37527464,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_37527464,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_37527464,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_37527464,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_37527464,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_37527464,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_37527464,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_37527464,g).
attacker(dhexp(key_37527464,g)).

8. The message dhexp(key_s(bob),g) may be sent on channel pub at output {373}.
mess(pub,dhexp(key_s(bob),g)).

9. By 1, the attacker may have the channel pub.
By 8, the message dhexp(key_s(bob),g) may be sent on this channel.
So the attacker may obtain the message dhexp(key_s(bob),g) by listening on this channel.
attacker(dhexp(key_s(bob),g)).

10. Using the function empty the attacker may obtain empty.
attacker(empty).

11. Using the function somename the attacker may obtain somename.
attacker(somename).

12. By 11, the attacker may know somename.
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

13. By 12, the attacker may know hash(somename,empty).
By 10, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

14. By 13, the attacker may know hash(hash(somename,empty),empty).
By 9, the attacker may know dhexp(key_s(bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

15. By 14, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)).
By 7, the attacker may know dhexp(key_37527464,g).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g))).

16. By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g))).

17. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

18. The event LeakS(phase0,bob) may be executed at {547}.
So the message key_s(bob) may be sent on channel pub at output {548}.
mess(pub,key_s(bob)).

19. By 1, the attacker may have the channel pub.
By 18, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

20. By 19, the attacker may know key_s(bob).
By 7, the attacker may know dhexp(key_37527464,g).
Using the function dhexp the attacker may obtain dhexp(key_37527464,dhexp(key_s(bob),g)).
attacker(dhexp(key_37527464,dhexp(key_s(bob),g))).

21. By 12, the attacker may know hash(somename,empty).
By 20, the attacker may know dhexp(key_37527464,dhexp(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))).
attacker(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g)))).

22. By 21, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))).
So the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))) in phase 1.
By 17, the attacker may know minnonce in phase 1.
By 16, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527464,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527464,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(LeakS(phase0,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_37527541 = key_e[me = alice,them = bob,!1 = @sid_37527527]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_37527541,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_37527541,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_37527541,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_37527541,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_37527541,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_37527541,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_37527541,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_37527541,g).
attacker(dhexp(key_37527541,g)).

8. By 7, the attacker may know dhexp(key_37527541,g).
So the attacker may know dhexp(key_37527541,g) in phase 1.
attacker_p1(dhexp(key_37527541,g)).

9. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

10. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

11. The event LeakS(phase1,bob) may be executed at {550}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {551}.
mess_p1(pub,key_s(bob)).

12. By 10, the attacker may have the channel pub in phase 1.
By 11, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

13. By 12, the attacker may know key_s(bob) in phase 1.
By 9, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 13, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 8, the attacker may know dhexp(key_37527541,g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 12, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know dhexp(key_37527541,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_37527541,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_37527541,dhexp(key_s(bob),g))).

22. By 16, the attacker may know hash(somename,empty) in phase 1.
By 21, the attacker may know dhexp(key_37527541,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527541,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527541,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(LeakS(phase1,bob)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_37527617 = key_e[me = alice,them = bob,!1 = @sid_37527603]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_37527617,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_37527617,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_37527617,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_37527617,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_37527617,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_37527617,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob)).
attacker(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob)).
So the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_37527617,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_37527617,g).
attacker(dhexp(key_37527617,g)).

8. By 7, the attacker may know dhexp(key_37527617,g).
So the attacker may know dhexp(key_37527617,g) in phase 1.
attacker_p1(dhexp(key_37527617,g)).

9. Using the function g the attacker may obtain g in phase 1.
attacker_p1(g).

10. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

11. The event LeakS(phase1,bob) may be executed at {550}.
So the message key_s(bob) may be sent on channel pub in phase 1 at output {551}.
mess_p1(pub,key_s(bob)).

12. By 10, the attacker may have the channel pub in phase 1.
By 11, the message key_s(bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_s(bob) in phase 1 by listening on this channel.
attacker_p1(key_s(bob)).

13. By 12, the attacker may know key_s(bob) in phase 1.
By 9, the attacker may know g in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_s(bob),g) in phase 1.
attacker_p1(dhexp(key_s(bob),g)).

14. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

15. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

16. By 15, the attacker may know somename in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

17. By 16, the attacker may know hash(somename,empty) in phase 1.
By 14, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty) in phase 1.
attacker_p1(hash(hash(somename,empty),empty)).

18. By 17, the attacker may know hash(hash(somename,empty),empty) in phase 1.
By 13, the attacker may know dhexp(key_s(bob),g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
attacker_p1(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))).

19. By 18, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)) in phase 1.
By 8, the attacker may know dhexp(key_37527617,g) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g))).

20. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

21. By 12, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know dhexp(key_37527617,g) in phase 1.
Using the function dhexp the attacker may obtain dhexp(key_37527617,dhexp(key_s(bob),g)) in phase 1.
attacker_p1(dhexp(key_37527617,dhexp(key_s(bob),g))).

22. By 16, the attacker may know hash(somename,empty) in phase 1.
By 21, the attacker may know dhexp(key_37527617,dhexp(key_s(bob),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g)))).

23. By 22, the attacker may know hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))) in phase 1.
By 20, the attacker may know minnonce in phase 1.
By 19, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hash(somename,empty),dhexp(key_37527617,dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob))).

24. By 23, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527617,g)),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_37527683 = key_e_1127[me_1080 = bob,them_1079 = charlie,!1 = @sid_37527667]
key_37527684 = key_e[me = alice,them = bob,!1 = @sid_37527641]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527684,g),key_37527684),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {48}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527684,g),key_37527684),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {568}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_37527684,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_37527684,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {597}.
The message concat3(dhexp(key_37527684,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {569}.
We have dhexp(key_37527684,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527684,g),empty,false))) may be inserted in a table at insert {596}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527684,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527684,g),empty,false))) that may be in a table by 6 may be read at get {628}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {625}.
So the message concat3(dhexp(key_e_37527683,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),dhexp(key_37527684,dhexp(key_e_37527683,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob))),dhexp(key_e_37527683,g)),msg_b(bob,charlie))) may be sent on channel pub at output {627}.
mess(pub,concat3(dhexp(key_e_37527683,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),dhexp(key_37527684,dhexp(key_e_37527683,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob))),dhexp(key_e_37527683,g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527684,g),key_37527684),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {79}.
The message concat3(dhexp(key_e_37527683,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),dhexp(key_37527684,dhexp(key_e_37527683,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527684,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527684,g)),msg_a(alice,bob))),dhexp(key_e_37527683,g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {51}.
We have dhexp(key_e_37527683,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {77}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1337,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1337,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1337,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1337,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_37527756 = key_e_1127[me_1080 = bob,them_1079 = charlie,!1 = @sid_37527740]
key_37527757 = key_e[me = alice,them = bob,!1 = @sid_37527714]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527757,g),key_37527757),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {48}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527757,g),key_37527757),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {568}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_37527757,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_37527757,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {597}.
The message concat3(dhexp(key_37527757,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {569}.
We have dhexp(key_37527757,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527757,g),empty,false))) may be inserted in a table at insert {596}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527757,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527757,g),empty,false))) that may be in a table by 6 may be read at get {628}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {625}.
So the message concat3(dhexp(key_e_37527756,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),dhexp(key_37527757,dhexp(key_e_37527756,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob))),dhexp(key_e_37527756,g)),msg_b(bob,charlie))) may be sent on channel pub at output {627}.
mess(pub,concat3(dhexp(key_e_37527756,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),dhexp(key_37527757,dhexp(key_e_37527756,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob))),dhexp(key_e_37527756,g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527757,g),key_37527757),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {79}.
The message concat3(dhexp(key_e_37527756,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),dhexp(key_37527757,dhexp(key_e_37527756,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527757,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527757,g)),msg_a(alice,bob))),dhexp(key_e_37527756,g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {51}.
We have dhexp(key_e_37527756,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {77}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true))
Abbreviations:
key_e_37527823 = key_e_1127[me_1080 = bob,them_1079 = charlie,!1 = @sid_37527807]
key_37527824 = key_e[me = alice,them = bob,!1 = @sid_37527781]

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 1 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527824,g),key_37527824),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {48}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527824,g),key_37527824),dhexp(key_s(bob),g),empty,empty,true)))).

3. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {568}.
table(statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) may be inserted in a table at insert {19}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 4 may be read at get {50}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {47}.
So the message concat3(dhexp(key_37527824,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob))) may be sent on channel pub at output {49}.
mess(pub,concat3(dhexp(key_37527824,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob)))).

6. The entry statestore(bob,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {597}.
The message concat3(dhexp(key_37527824,g),empty,encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {569}.
We have dhexp(key_37527824,g) <> caught-fail.
So the entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527824,g),empty,false))) may be inserted in a table at insert {596}.
table(statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527824,g),empty,false)))).

7. The entry statestore(bob,charlie,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(empty,empty),empty,dhexp(key_37527824,g),empty,false))) that may be in a table by 6 may be read at get {628}.
The event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true) may be executed at {625}.
So the message concat3(dhexp(key_e_37527823,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),dhexp(key_37527824,dhexp(key_e_37527823,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob))),dhexp(key_e_37527823,g)),msg_b(bob,charlie))) may be sent on channel pub at output {627}.
mess(pub,concat3(dhexp(key_e_37527823,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),dhexp(key_37527824,dhexp(key_e_37527823,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob))),dhexp(key_e_37527823,g)),msg_b(bob,charlie)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),increment_nonce(minnonce)),hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(dhexp(key_37527824,g),key_37527824),dhexp(key_s(bob),g),empty,empty,true))) that may be in a table by 2 may be read at get {79}.
The message concat3(dhexp(key_e_37527823,g),empty,encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),dhexp(key_37527824,dhexp(key_e_37527823,g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),encrypt(hmac_hash2(hash(somename,empty),dhexp(key_s(bob),dhexp(key_37527824,g))),minnonce,hash(hash(hash(hash(somename,empty),empty),dhexp(key_s(bob),g)),dhexp(key_37527824,g)),msg_a(alice,bob))),dhexp(key_e_37527823,g)),msg_b(bob,charlie))) that may be sent on channel pub by 7 may be received at input {51}.
We have dhexp(key_e_37527823,g) <> caught-fail.
So event RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true) may be executed at {77}.
end(RecvMsg(alice,bob,stage_b,msg_b(bob,charlie),true)).


RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1337,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1337,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1337,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1337,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1337,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1337,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1337,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1337,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1337,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1337,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1337,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,c_1337,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_e,msg_e(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_e,m,true)) ==> event(SendMsg(alice,bob,stage_e,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_e(alice,bob))
RESULT not attacker_p1(msg_e(alice,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_e(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1337,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1337,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1337,stage_f,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,c_1337,stage_f,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_f,msg_f(bob,alice),true)) && begin(SendMsg(alice,bob,stage_e,msg_e(alice,bob),true)) && begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_f,msg_f(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_f,m,true)) ==> event(SendMsg(bob,alice,stage_f,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_f(bob,alice))
RESULT not attacker_p1(msg_f(bob,alice)) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_f(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
