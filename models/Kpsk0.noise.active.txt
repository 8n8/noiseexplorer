File "Kpsk0.noise.active.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Kpsk0.noise.active.pv", line 227, character 36:
Warning: identifier h rebound.
File "Kpsk0.noise.active.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "Kpsk0.noise.active.pv", line 237, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "Kpsk0.noise.active.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 257, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 271, character 6:
Warning: identifier e rebound.
File "Kpsk0.noise.active.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "Kpsk0.noise.active.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 277, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "Kpsk0.noise.active.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "Kpsk0.noise.active.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 288, characters 6-7:
Warning: identifier re rebound.
File "Kpsk0.noise.active.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 293, characters 7-8:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 295, characters 7-8:
Warning: identifier hs rebound.
File "Kpsk0.noise.active.pv", line 367, characters 8-9:
Warning: identifier hs rebound.
File "Kpsk0.noise.active.pv", line 270, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 271, character 6:
Warning: identifier e rebound.
File "Kpsk0.noise.active.pv", line 272, characters 6-7:
Warning: identifier ne rebound.
File "Kpsk0.noise.active.pv", line 273, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 274, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 275, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 276, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 277, characters 7-8:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 277, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "Kpsk0.noise.active.pv", line 278, characters 6-7:
Warning: identifier hs rebound.
File "Kpsk0.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Kpsk0.noise.active.pv", line 227, character 36:
Warning: identifier h rebound.
File "Kpsk0.noise.active.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 236, characters 7-8:
Warning: identifier cs rebound.
File "Kpsk0.noise.active.pv", line 237, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 257, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 258, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 399, characters 8-9:
Warning: identifier hs rebound.
File "Kpsk0.noise.active.pv", line 287, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 288, characters 6-7:
Warning: identifier re rebound.
File "Kpsk0.noise.active.pv", line 289, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 290, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 291, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 293, characters 7-8:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 295, characters 7-8:
Warning: identifier hs rebound.
File "Kpsk0.noise.active.pv", line 226, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 227, characters 7-8:
Warning: identifier cs rebound.
File "Kpsk0.noise.active.pv", line 227, character 36:
Warning: identifier h rebound.
File "Kpsk0.noise.active.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 217, characters 7-8:
Warning: identifier ck rebound.
File "Kpsk0.noise.active.pv", line 242, characters 7-8:
Warning: identifier cs rebound.
File "Kpsk0.noise.active.pv", line 243, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 263, characters 6-7:
Warning: identifier ss rebound.
File "Kpsk0.noise.active.pv", line 264, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Completing equations...
Completed equations:
dhexp_real(b_76,dhexp_real(a_75,g)) = dhexp_real(a_75,dhexp_real(b_76,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
{3}new sid: sessionid;
(
    {4}let v_401: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {5}let s_402: keypair = (if not-caught-fail(v_401) then keypairpack(validkey(v_401),key_s(alice)) else fail-any) in
    {6}out(pub, getpublickey(s_402));
    (
        {7}let e_403: keypair = keypairpack(empty,empty) in
        {8}let v_404: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
        {9}let rs_405: key = getpublickey((if not-caught-fail(v_404) then keypairpack(validkey(v_404),key_s(bob)) else fail-any)) in
        {10}let re_406: key = empty in
        {11}let v_407: bitstring = catch-fail(hash(somename,empty)) in
        {12}let v_408: key = catch-fail(v_407) in
        {13}let v_409: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {14}let v_410: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_407) then (if not-caught-fail(v_408) then (if not-caught-fail(v_409) then symmetricstatepack(v_409,v_408,v_407) else fail-any) else fail-any) else fail-any))) in
        {15}let v_411: symmetricstate = catch-fail((if success?((if not-caught-fail(v_407) then (if not-caught-fail(v_408) then (if not-caught-fail(v_409) then symmetricstatepack(v_409,v_408,v_407) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_410) && success?(is-true(success?(1-proj-3-tuple(v_410))))) then symmetricstatepack(1-proj-3-tuple(v_410),2-proj-3-tuple(v_410),hash(3-proj-3-tuple(v_410),empty)) else fail-any) else fail-any)) in
        {16}let v_412: bitstring = catch-fail(symmetricstateunpack(v_411)) in
        {17}let v_413: symmetricstate = catch-fail((if success?(getpublickey(s_402)) then (if (not-caught-fail(v_412) && success?(is-true(success?(1-proj-3-tuple(v_412))))) then symmetricstatepack(1-proj-3-tuple(v_412),2-proj-3-tuple(v_412),hash(3-proj-3-tuple(v_412),getpublickey(s_402))) else fail-any) else fail-any)) in
        {18}let v_414: bitstring = catch-fail(symmetricstateunpack(v_413)) in
        {19}let v_415: symmetricstate = catch-fail((if (not-caught-fail(v_414) && success?(is-true(success?(1-proj-3-tuple(v_414))))) then symmetricstatepack(1-proj-3-tuple(v_414),2-proj-3-tuple(v_414),hash(3-proj-3-tuple(v_414),rs_405)) else fail-any)) in
        {20}let hs: handshakestate = (if not-caught-fail(v_411) then (if not-caught-fail(v_413) then (if not-caught-fail(v_415) then handshakestatepack(v_415,s_402,e_403,rs_405,re_406,key_psk(alice,bob),true) else fail-any) else fail-any) else fail-any) in
        {21}insert statestore(alice,bob,sid,statepack_a(hs))
    ) | (
        {79}get statestore(=alice,=bob,=sid,statepack_a(hs_416: handshakestate)) in
        {22}let v_417: bitstring = catch-fail(handshakestateunpack(hs_416)) in
        {23}let v_418: bitstring = catch-fail((empty,empty,empty)) in
        {24}let v_419: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_417))) in
        {25}let v_420: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_419),6-proj-7-tuple(v_417))) in
        {26}let v_421: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_419),6-proj-7-tuple(v_417))) in
        {27}let v_422: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_419),6-proj-7-tuple(v_417))) in
        {28}let v_423: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_417)) && success?(2-proj-3-tuple(v_419))) then (if not-caught-fail(v_420) then (if not-caught-fail(v_421) then (if not-caught-fail(v_422) then (v_420,v_421,v_422) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_424: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_419),1-proj-3-tuple(v_423),3-proj-3-tuple(v_419)))) in
        {30}let v_425: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_423)) && success?(symmetricstatepack(1-proj-3-tuple(v_419),1-proj-3-tuple(v_423),3-proj-3-tuple(v_419)))) then (if (not-caught-fail(v_424) && success?(is-true(success?(1-proj-3-tuple(v_424))))) then symmetricstatepack(1-proj-3-tuple(v_424),2-proj-3-tuple(v_424),hash(3-proj-3-tuple(v_424),2-proj-3-tuple(v_423))) else fail-any) else fail-any))) in
        {31}let v_426: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_417)) && success?(1-proj-7-tuple(v_417))) then (if (not-caught-fail(v_419) && success?(is-true(success?(1-proj-3-tuple(v_419))))) then (if (not-caught-fail(v_423) && success?(is-true(success?(1-proj-3-tuple(v_423))))) then (if (not-caught-fail(v_425) && success?(is-true(success?(1-proj-3-tuple(v_425))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_423)) then cipherstatepack(3-proj-3-tuple(v_423),minnonce) else fail-any),1-proj-3-tuple(v_423),3-proj-3-tuple(v_425)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_427: key = catch-fail(dhexp(key_e(alice,bob,sid),validkey(g))) in
        {33}let v_428: keypair = catch-fail((if not-caught-fail(v_427) then keypairpack(validkey(v_427),key_e(alice,bob,sid)) else fail-any)) in
        {34}let v_429: bitstring = catch-fail(getpublickey(v_428)) in
        {35}let v_430: bitstring = catch-fail(symmetricstateunpack(v_426)) in
        {36}let v_431: symmetricstate = catch-fail((if (not-caught-fail(v_430) && success?(is-true(success?(1-proj-3-tuple(v_430))))) then symmetricstatepack(1-proj-3-tuple(v_430),2-proj-3-tuple(v_430),hash(3-proj-3-tuple(v_430),v_429)) else fail-any)) in
        {37}let v_432: bitstring = catch-fail(symmetricstateunpack(v_431)) in
        {38}let v_433: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_432),getpublickey(v_428))) in
        {39}let v_434: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_432),getpublickey(v_428))) in
        {40}let v_435: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_432),getpublickey(v_428))) in
        {41}let v_436: bitstring = catch-fail((if (success?(getpublickey(v_428)) && success?(2-proj-3-tuple(v_432))) then (if not-caught-fail(v_433) then (if not-caught-fail(v_434) then (if not-caught-fail(v_435) then (v_433,v_434,v_435) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_437: symmetricstate = catch-fail((if success?(getpublickey(v_428)) then (if (not-caught-fail(v_432) && success?(is-true(success?(1-proj-3-tuple(v_432))))) then (if (not-caught-fail(v_436) && success?(is-true(success?(1-proj-3-tuple(v_436))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_436)) then cipherstatepack(2-proj-3-tuple(v_436),minnonce) else fail-any),1-proj-3-tuple(v_436),3-proj-3-tuple(v_432)) else fail-any) else fail-any) else fail-any)) in
        {43}let v_438: bitstring = catch-fail(keypairunpack(v_428)) in
        {44}let v_439: bitstring = catch-fail(symmetricstateunpack(v_437)) in
        {45}let v_440: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_439),(if success?(4-proj-7-tuple(v_417)) then (if (not-caught-fail(v_438) && success?(is-true(success?(1-proj-2-tuple(v_438))))) then dhexp(2-proj-2-tuple(v_438),4-proj-7-tuple(v_417)) else fail-any) else fail-any))) in
        {46}let v_441: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_439),(if success?(4-proj-7-tuple(v_417)) then (if (not-caught-fail(v_438) && success?(is-true(success?(1-proj-2-tuple(v_438))))) then dhexp(2-proj-2-tuple(v_438),4-proj-7-tuple(v_417)) else fail-any) else fail-any))) in
        {47}let v_442: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_439),(if success?(4-proj-7-tuple(v_417)) then (if (not-caught-fail(v_438) && success?(is-true(success?(1-proj-2-tuple(v_438))))) then dhexp(2-proj-2-tuple(v_438),4-proj-7-tuple(v_417)) else fail-any) else fail-any))) in
        {48}let v_443: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_417)) then (if (not-caught-fail(v_438) && success?(is-true(success?(1-proj-2-tuple(v_438))))) then dhexp(2-proj-2-tuple(v_438),4-proj-7-tuple(v_417)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_439))) then (if not-caught-fail(v_440) then (if not-caught-fail(v_441) then (if not-caught-fail(v_442) then (v_440,v_441,v_442) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {49}let v_444: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_417)) then (if (not-caught-fail(v_438) && success?(is-true(success?(1-proj-2-tuple(v_438))))) then dhexp(2-proj-2-tuple(v_438),4-proj-7-tuple(v_417)) else fail-any) else fail-any)) then (if (not-caught-fail(v_439) && success?(is-true(success?(1-proj-3-tuple(v_439))))) then (if (not-caught-fail(v_443) && success?(is-true(success?(1-proj-3-tuple(v_443))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_443)) then cipherstatepack(2-proj-3-tuple(v_443),minnonce) else fail-any),1-proj-3-tuple(v_443),3-proj-3-tuple(v_439)) else fail-any) else fail-any) else fail-any)) in
        {50}let v_445: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_417))) in
        {51}let v_446: bitstring = catch-fail(symmetricstateunpack(v_444)) in
        {52}let v_447: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_446),(if (success?(4-proj-7-tuple(v_417)) && success?(2-proj-7-tuple(v_417))) then (if (not-caught-fail(v_445) && success?(is-true(success?(1-proj-2-tuple(v_445))))) then dhexp(2-proj-2-tuple(v_445),4-proj-7-tuple(v_417)) else fail-any) else fail-any))) in
        {53}let v_448: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_446),(if (success?(4-proj-7-tuple(v_417)) && success?(2-proj-7-tuple(v_417))) then (if (not-caught-fail(v_445) && success?(is-true(success?(1-proj-2-tuple(v_445))))) then dhexp(2-proj-2-tuple(v_445),4-proj-7-tuple(v_417)) else fail-any) else fail-any))) in
        {54}let v_449: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_446),(if (success?(4-proj-7-tuple(v_417)) && success?(2-proj-7-tuple(v_417))) then (if (not-caught-fail(v_445) && success?(is-true(success?(1-proj-2-tuple(v_445))))) then dhexp(2-proj-2-tuple(v_445),4-proj-7-tuple(v_417)) else fail-any) else fail-any))) in
        {55}let v_450: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_417)) && success?(2-proj-7-tuple(v_417))) then (if (not-caught-fail(v_445) && success?(is-true(success?(1-proj-2-tuple(v_445))))) then dhexp(2-proj-2-tuple(v_445),4-proj-7-tuple(v_417)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_446))) then (if not-caught-fail(v_447) then (if not-caught-fail(v_448) then (if not-caught-fail(v_449) then (v_447,v_448,v_449) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {56}let v_451: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_417)) && success?(2-proj-7-tuple(v_417))) then (if (not-caught-fail(v_445) && success?(is-true(success?(1-proj-2-tuple(v_445))))) then dhexp(2-proj-2-tuple(v_445),4-proj-7-tuple(v_417)) else fail-any) else fail-any)) then (if (not-caught-fail(v_446) && success?(is-true(success?(1-proj-3-tuple(v_446))))) then (if (not-caught-fail(v_450) && success?(is-true(success?(1-proj-3-tuple(v_450))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_450)) then cipherstatepack(2-proj-3-tuple(v_450),minnonce) else fail-any),1-proj-3-tuple(v_450),3-proj-3-tuple(v_446)) else fail-any) else fail-any) else fail-any)) in
        {57}let v_452: bitstring = catch-fail(symmetricstateunpack(v_451)) in
        {58}let v_453: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_452))) in
        {59}let v_454: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_453),2-proj-2-tuple(v_453),3-proj-3-tuple(v_452),msg_a(alice,bob,sid))) in
        {60}let v_455: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_452))) in
        {61}let v_456: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_453))) && success?(1-proj-3-tuple(v_452))) then (if (not-caught-fail(v_455) && success?(is-true(success?(1-proj-2-tuple(v_455))))) then cipherstatepack(1-proj-2-tuple(v_455),increment_nonce(2-proj-2-tuple(v_453))) else fail-any) else fail-any)) in
        {62}let v_457: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_452)) && success?(1-proj-3-tuple(v_452))) then (if (not-caught-fail(v_453) && success?(is-true(success?(1-proj-2-tuple(v_453))))) then (if not-caught-fail(v_454) then (if not-caught-fail(v_456) then (v_456,v_454) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {63}let v_458: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_457),2-proj-3-tuple(v_452),3-proj-3-tuple(v_452)))) in
        {64}let v_459: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_457)) && success?(symmetricstatepack(1-proj-2-tuple(v_457),2-proj-3-tuple(v_452),3-proj-3-tuple(v_452)))) then (if (not-caught-fail(v_458) && success?(is-true(success?(1-proj-3-tuple(v_458))))) then symmetricstatepack(1-proj-3-tuple(v_458),2-proj-3-tuple(v_458),hash(3-proj-3-tuple(v_458),2-proj-2-tuple(v_457))) else fail-any) else fail-any)) in
        {65}let v_460: bitstring = catch-fail((if (not-caught-fail(v_452) && success?(is-true(success?(1-proj-3-tuple(v_452))))) then (if (not-caught-fail(v_457) && success?(is-true(success?(1-proj-2-tuple(v_457))))) then (if not-caught-fail(v_459) then (v_459,2-proj-2-tuple(v_457)) else fail-any) else fail-any) else fail-any)) in
        {66}let v_461: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_460),2-proj-7-tuple(v_417),v_428,4-proj-7-tuple(v_417),5-proj-7-tuple(v_417),6-proj-7-tuple(v_417),7-proj-7-tuple(v_417))) in
        {67}let v_462: bitstring = catch-fail(concat3(v_429,2-proj-3-tuple(v_418),2-proj-2-tuple(v_460))) in
        {68}let v_463: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_460))) in
        {69}let v_464: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_463),zero)) in
        {70}let v_465: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_463),zero)) in
        {71}let v_466: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_463),zero)) in
        {72}let v_467: bitstring = catch-fail((if success?(2-proj-3-tuple(v_463)) then (if not-caught-fail(v_464) then (if not-caught-fail(v_465) then (if not-caught-fail(v_466) then (v_464,v_465,v_466) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {73}let v_468: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_467)) then cipherstatepack(1-proj-3-tuple(v_467),minnonce) else fail-any)) in
        {74}let v_469: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_467)) then cipherstatepack(2-proj-3-tuple(v_467),minnonce) else fail-any)) in
        {75}let v_470: bitstring = catch-fail((if success?(1-proj-2-tuple(v_460)) then (if (not-caught-fail(v_463) && success?(is-true(success?(1-proj-3-tuple(v_463))))) then (if (not-caught-fail(v_467) && success?(is-true(success?(1-proj-3-tuple(v_467))))) then (if not-caught-fail(v_468) then (if not-caught-fail(v_469) then (1-proj-2-tuple(v_460),v_468,v_469) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let (hs_471: handshakestate,message_a: bitstring,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_417) && success?(is-true(success?(1-proj-7-tuple(v_417))))) then (if (not-caught-fail(v_418) && success?(is-true(success?(1-proj-3-tuple(v_418))))) then (if not-caught-fail(v_426) then (if not-caught-fail(v_428) then (if not-caught-fail(v_429) then (if not-caught-fail(v_431) then (if not-caught-fail(v_437) then (if not-caught-fail(v_444) then (if not-caught-fail(v_451) then (if (not-caught-fail(v_460) && success?(is-true(success?(1-proj-2-tuple(v_460))))) then (if not-caught-fail(v_461) then (if not-caught-fail(v_462) then (if (not-caught-fail(v_470) && success?(is-true(success?(1-proj-3-tuple(v_470))))) then (v_461,v_462,2-proj-3-tuple(v_470),3-proj-3-tuple(v_470)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {77}event SendMsg(alice,bob,stagepack_a(sid),msg_a(alice,bob,sid));
        {78}out(pub, message_a)
    ) | (
        {80}event LeakPsk(phase0,alice,bob);
        {81}out(pub, key_psk(alice,bob))
    ) | (
        {82}phase 1;
        {83}event LeakPsk(phase1,alice,bob);
        {84}out(pub, key_psk(alice,bob))
    ) | (
        {85}event LeakS(phase0,alice);
        {86}out(pub, key_s(alice))
    ) | (
        {87}phase 1;
        {88}event LeakS(phase1,alice);
        {89}out(pub, key_s(alice))
    )
) | (
    {90}let v_472: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
    {91}let s_473: keypair = (if not-caught-fail(v_472) then keypairpack(validkey(v_472),key_s(alice)) else fail-any) in
    {92}out(pub, getpublickey(s_473));
    (
        {93}let e_474: keypair = keypairpack(empty,empty) in
        {94}let v_475: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {95}let rs_476: key = getpublickey((if not-caught-fail(v_475) then keypairpack(validkey(v_475),key_s(charlie)) else fail-any)) in
        {96}let re_477: key = empty in
        {97}let v_478: bitstring = catch-fail(hash(somename,empty)) in
        {98}let v_479: key = catch-fail(v_478) in
        {99}let v_480: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {100}let v_481: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any))) in
        {101}let v_482: symmetricstate = catch-fail((if success?((if not-caught-fail(v_478) then (if not-caught-fail(v_479) then (if not-caught-fail(v_480) then symmetricstatepack(v_480,v_479,v_478) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_481) && success?(is-true(success?(1-proj-3-tuple(v_481))))) then symmetricstatepack(1-proj-3-tuple(v_481),2-proj-3-tuple(v_481),hash(3-proj-3-tuple(v_481),empty)) else fail-any) else fail-any)) in
        {102}let v_483: bitstring = catch-fail(symmetricstateunpack(v_482)) in
        {103}let v_484: symmetricstate = catch-fail((if success?(getpublickey(s_473)) then (if (not-caught-fail(v_483) && success?(is-true(success?(1-proj-3-tuple(v_483))))) then symmetricstatepack(1-proj-3-tuple(v_483),2-proj-3-tuple(v_483),hash(3-proj-3-tuple(v_483),getpublickey(s_473))) else fail-any) else fail-any)) in
        {104}let v_485: bitstring = catch-fail(symmetricstateunpack(v_484)) in
        {105}let v_486: symmetricstate = catch-fail((if (not-caught-fail(v_485) && success?(is-true(success?(1-proj-3-tuple(v_485))))) then symmetricstatepack(1-proj-3-tuple(v_485),2-proj-3-tuple(v_485),hash(3-proj-3-tuple(v_485),rs_476)) else fail-any)) in
        {106}let hs_487: handshakestate = (if not-caught-fail(v_482) then (if not-caught-fail(v_484) then (if not-caught-fail(v_486) then handshakestatepack(v_486,s_473,e_474,rs_476,re_477,key_psk(alice,charlie),true) else fail-any) else fail-any) else fail-any) in
        {107}insert statestore(alice,charlie,sid,statepack_a(hs_487))
    ) | (
        {165}get statestore(=alice,=charlie,=sid,statepack_a(hs_488: handshakestate)) in
        {108}let v_489: bitstring = catch-fail(handshakestateunpack(hs_488)) in
        {109}let v_490: bitstring = catch-fail((empty,empty,empty)) in
        {110}let v_491: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_489))) in
        {111}let v_492: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_491),6-proj-7-tuple(v_489))) in
        {112}let v_493: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_491),6-proj-7-tuple(v_489))) in
        {113}let v_494: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_491),6-proj-7-tuple(v_489))) in
        {114}let v_495: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_489)) && success?(2-proj-3-tuple(v_491))) then (if not-caught-fail(v_492) then (if not-caught-fail(v_493) then (if not-caught-fail(v_494) then (v_492,v_493,v_494) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_496: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_491),1-proj-3-tuple(v_495),3-proj-3-tuple(v_491)))) in
        {116}let v_497: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_495)) && success?(symmetricstatepack(1-proj-3-tuple(v_491),1-proj-3-tuple(v_495),3-proj-3-tuple(v_491)))) then (if (not-caught-fail(v_496) && success?(is-true(success?(1-proj-3-tuple(v_496))))) then symmetricstatepack(1-proj-3-tuple(v_496),2-proj-3-tuple(v_496),hash(3-proj-3-tuple(v_496),2-proj-3-tuple(v_495))) else fail-any) else fail-any))) in
        {117}let v_498: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_489)) && success?(1-proj-7-tuple(v_489))) then (if (not-caught-fail(v_491) && success?(is-true(success?(1-proj-3-tuple(v_491))))) then (if (not-caught-fail(v_495) && success?(is-true(success?(1-proj-3-tuple(v_495))))) then (if (not-caught-fail(v_497) && success?(is-true(success?(1-proj-3-tuple(v_497))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_495)) then cipherstatepack(3-proj-3-tuple(v_495),minnonce) else fail-any),1-proj-3-tuple(v_495),3-proj-3-tuple(v_497)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_499: key = catch-fail(dhexp(key_e(alice,charlie,sid),validkey(g))) in
        {119}let v_500: keypair = catch-fail((if not-caught-fail(v_499) then keypairpack(validkey(v_499),key_e(alice,charlie,sid)) else fail-any)) in
        {120}let v_501: bitstring = catch-fail(getpublickey(v_500)) in
        {121}let v_502: bitstring = catch-fail(symmetricstateunpack(v_498)) in
        {122}let v_503: symmetricstate = catch-fail((if (not-caught-fail(v_502) && success?(is-true(success?(1-proj-3-tuple(v_502))))) then symmetricstatepack(1-proj-3-tuple(v_502),2-proj-3-tuple(v_502),hash(3-proj-3-tuple(v_502),v_501)) else fail-any)) in
        {123}let v_504: bitstring = catch-fail(symmetricstateunpack(v_503)) in
        {124}let v_505: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_504),getpublickey(v_500))) in
        {125}let v_506: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_504),getpublickey(v_500))) in
        {126}let v_507: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_504),getpublickey(v_500))) in
        {127}let v_508: bitstring = catch-fail((if (success?(getpublickey(v_500)) && success?(2-proj-3-tuple(v_504))) then (if not-caught-fail(v_505) then (if not-caught-fail(v_506) then (if not-caught-fail(v_507) then (v_505,v_506,v_507) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {128}let v_509: symmetricstate = catch-fail((if success?(getpublickey(v_500)) then (if (not-caught-fail(v_504) && success?(is-true(success?(1-proj-3-tuple(v_504))))) then (if (not-caught-fail(v_508) && success?(is-true(success?(1-proj-3-tuple(v_508))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_508)) then cipherstatepack(2-proj-3-tuple(v_508),minnonce) else fail-any),1-proj-3-tuple(v_508),3-proj-3-tuple(v_504)) else fail-any) else fail-any) else fail-any)) in
        {129}let v_510: bitstring = catch-fail(keypairunpack(v_500)) in
        {130}let v_511: bitstring = catch-fail(symmetricstateunpack(v_509)) in
        {131}let v_512: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_511),(if success?(4-proj-7-tuple(v_489)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-2-tuple(v_510))))) then dhexp(2-proj-2-tuple(v_510),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {132}let v_513: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_511),(if success?(4-proj-7-tuple(v_489)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-2-tuple(v_510))))) then dhexp(2-proj-2-tuple(v_510),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {133}let v_514: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_511),(if success?(4-proj-7-tuple(v_489)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-2-tuple(v_510))))) then dhexp(2-proj-2-tuple(v_510),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {134}let v_515: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_489)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-2-tuple(v_510))))) then dhexp(2-proj-2-tuple(v_510),4-proj-7-tuple(v_489)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_511))) then (if not-caught-fail(v_512) then (if not-caught-fail(v_513) then (if not-caught-fail(v_514) then (v_512,v_513,v_514) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_516: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_489)) then (if (not-caught-fail(v_510) && success?(is-true(success?(1-proj-2-tuple(v_510))))) then dhexp(2-proj-2-tuple(v_510),4-proj-7-tuple(v_489)) else fail-any) else fail-any)) then (if (not-caught-fail(v_511) && success?(is-true(success?(1-proj-3-tuple(v_511))))) then (if (not-caught-fail(v_515) && success?(is-true(success?(1-proj-3-tuple(v_515))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_515)) then cipherstatepack(2-proj-3-tuple(v_515),minnonce) else fail-any),1-proj-3-tuple(v_515),3-proj-3-tuple(v_511)) else fail-any) else fail-any) else fail-any)) in
        {136}let v_517: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_489))) in
        {137}let v_518: bitstring = catch-fail(symmetricstateunpack(v_516)) in
        {138}let v_519: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_518),(if (success?(4-proj-7-tuple(v_489)) && success?(2-proj-7-tuple(v_489))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then dhexp(2-proj-2-tuple(v_517),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {139}let v_520: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_518),(if (success?(4-proj-7-tuple(v_489)) && success?(2-proj-7-tuple(v_489))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then dhexp(2-proj-2-tuple(v_517),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {140}let v_521: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_518),(if (success?(4-proj-7-tuple(v_489)) && success?(2-proj-7-tuple(v_489))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then dhexp(2-proj-2-tuple(v_517),4-proj-7-tuple(v_489)) else fail-any) else fail-any))) in
        {141}let v_522: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_489)) && success?(2-proj-7-tuple(v_489))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then dhexp(2-proj-2-tuple(v_517),4-proj-7-tuple(v_489)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_518))) then (if not-caught-fail(v_519) then (if not-caught-fail(v_520) then (if not-caught-fail(v_521) then (v_519,v_520,v_521) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {142}let v_523: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_489)) && success?(2-proj-7-tuple(v_489))) then (if (not-caught-fail(v_517) && success?(is-true(success?(1-proj-2-tuple(v_517))))) then dhexp(2-proj-2-tuple(v_517),4-proj-7-tuple(v_489)) else fail-any) else fail-any)) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_522)) then cipherstatepack(2-proj-3-tuple(v_522),minnonce) else fail-any),1-proj-3-tuple(v_522),3-proj-3-tuple(v_518)) else fail-any) else fail-any) else fail-any)) in
        {143}let v_524: bitstring = catch-fail(symmetricstateunpack(v_523)) in
        {144}let v_525: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_524))) in
        {145}let v_526: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_525),2-proj-2-tuple(v_525),3-proj-3-tuple(v_524),msg_a(alice,charlie,sid))) in
        {146}let v_527: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_524))) in
        {147}let v_528: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_525))) && success?(1-proj-3-tuple(v_524))) then (if (not-caught-fail(v_527) && success?(is-true(success?(1-proj-2-tuple(v_527))))) then cipherstatepack(1-proj-2-tuple(v_527),increment_nonce(2-proj-2-tuple(v_525))) else fail-any) else fail-any)) in
        {148}let v_529: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_524)) && success?(1-proj-3-tuple(v_524))) then (if (not-caught-fail(v_525) && success?(is-true(success?(1-proj-2-tuple(v_525))))) then (if not-caught-fail(v_526) then (if not-caught-fail(v_528) then (v_528,v_526) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {149}let v_530: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_529),2-proj-3-tuple(v_524),3-proj-3-tuple(v_524)))) in
        {150}let v_531: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_529)) && success?(symmetricstatepack(1-proj-2-tuple(v_529),2-proj-3-tuple(v_524),3-proj-3-tuple(v_524)))) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then symmetricstatepack(1-proj-3-tuple(v_530),2-proj-3-tuple(v_530),hash(3-proj-3-tuple(v_530),2-proj-2-tuple(v_529))) else fail-any) else fail-any)) in
        {151}let v_532: bitstring = catch-fail((if (not-caught-fail(v_524) && success?(is-true(success?(1-proj-3-tuple(v_524))))) then (if (not-caught-fail(v_529) && success?(is-true(success?(1-proj-2-tuple(v_529))))) then (if not-caught-fail(v_531) then (v_531,2-proj-2-tuple(v_529)) else fail-any) else fail-any) else fail-any)) in
        {152}let v_533: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_532),2-proj-7-tuple(v_489),v_500,4-proj-7-tuple(v_489),5-proj-7-tuple(v_489),6-proj-7-tuple(v_489),7-proj-7-tuple(v_489))) in
        {153}let v_534: bitstring = catch-fail(concat3(v_501,2-proj-3-tuple(v_490),2-proj-2-tuple(v_532))) in
        {154}let v_535: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_532))) in
        {155}let v_536: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_535),zero)) in
        {156}let v_537: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_535),zero)) in
        {157}let v_538: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_535),zero)) in
        {158}let v_539: bitstring = catch-fail((if success?(2-proj-3-tuple(v_535)) then (if not-caught-fail(v_536) then (if not-caught-fail(v_537) then (if not-caught-fail(v_538) then (v_536,v_537,v_538) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {159}let v_540: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_539)) then cipherstatepack(1-proj-3-tuple(v_539),minnonce) else fail-any)) in
        {160}let v_541: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_539)) then cipherstatepack(2-proj-3-tuple(v_539),minnonce) else fail-any)) in
        {161}let v_542: bitstring = catch-fail((if success?(1-proj-2-tuple(v_532)) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-3-tuple(v_535))))) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if not-caught-fail(v_540) then (if not-caught-fail(v_541) then (1-proj-2-tuple(v_532),v_540,v_541) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {162}let (hs_543: handshakestate,message_a_544: bitstring,cs1_545: cipherstate,cs2_546: cipherstate) = (if (not-caught-fail(v_489) && success?(is-true(success?(1-proj-7-tuple(v_489))))) then (if (not-caught-fail(v_490) && success?(is-true(success?(1-proj-3-tuple(v_490))))) then (if not-caught-fail(v_498) then (if not-caught-fail(v_500) then (if not-caught-fail(v_501) then (if not-caught-fail(v_503) then (if not-caught-fail(v_509) then (if not-caught-fail(v_516) then (if not-caught-fail(v_523) then (if (not-caught-fail(v_532) && success?(is-true(success?(1-proj-2-tuple(v_532))))) then (if not-caught-fail(v_533) then (if not-caught-fail(v_534) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-3-tuple(v_542))))) then (v_533,v_534,2-proj-3-tuple(v_542),3-proj-3-tuple(v_542)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {163}event SendMsg(alice,charlie,stagepack_a(sid),msg_a(alice,charlie,sid));
        {164}out(pub, message_a_544)
    ) | (
        {166}event LeakPsk(phase0,alice,charlie);
        {167}out(pub, key_psk(alice,charlie))
    ) | (
        {168}phase 1;
        {169}event LeakPsk(phase1,alice,charlie);
        {170}out(pub, key_psk(alice,charlie))
    ) | (
        {171}event LeakS(phase0,alice);
        {172}out(pub, key_s(alice))
    ) | (
        {173}phase 1;
        {174}event LeakS(phase1,alice);
        {175}out(pub, key_s(alice))
    )
) | (
    {176}let v_547: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {177}let s_548: keypair = (if not-caught-fail(v_547) then keypairpack(validkey(v_547),key_s(bob)) else fail-any) in
    {178}out(pub, getpublickey(s_548));
    (
        {179}let e_549: keypair = keypairpack(empty,empty) in
        {180}let v_550: key = catch-fail(dhexp(key_s(alice),validkey(g))) in
        {181}let rs_551: key = getpublickey((if not-caught-fail(v_550) then keypairpack(validkey(v_550),key_s(alice)) else fail-any)) in
        {182}let re_552: key = empty in
        {183}let v_553: bitstring = catch-fail(hash(somename,empty)) in
        {184}let v_554: key = catch-fail(v_553) in
        {185}let v_555: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {186}let v_556: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (if not-caught-fail(v_555) then symmetricstatepack(v_555,v_554,v_553) else fail-any) else fail-any) else fail-any))) in
        {187}let v_557: symmetricstate = catch-fail((if success?((if not-caught-fail(v_553) then (if not-caught-fail(v_554) then (if not-caught-fail(v_555) then symmetricstatepack(v_555,v_554,v_553) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_556) && success?(is-true(success?(1-proj-3-tuple(v_556))))) then symmetricstatepack(1-proj-3-tuple(v_556),2-proj-3-tuple(v_556),hash(3-proj-3-tuple(v_556),empty)) else fail-any) else fail-any)) in
        {188}let v_558: bitstring = catch-fail(symmetricstateunpack(v_557)) in
        {189}let v_559: symmetricstate = catch-fail((if (not-caught-fail(v_558) && success?(is-true(success?(1-proj-3-tuple(v_558))))) then symmetricstatepack(1-proj-3-tuple(v_558),2-proj-3-tuple(v_558),hash(3-proj-3-tuple(v_558),rs_551)) else fail-any)) in
        {190}let v_560: bitstring = catch-fail(symmetricstateunpack(v_559)) in
        {191}let v_561: symmetricstate = catch-fail((if success?(getpublickey(s_548)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then symmetricstatepack(1-proj-3-tuple(v_560),2-proj-3-tuple(v_560),hash(3-proj-3-tuple(v_560),getpublickey(s_548))) else fail-any) else fail-any)) in
        {192}let hs_562: handshakestate = (if not-caught-fail(v_557) then (if not-caught-fail(v_559) then (if not-caught-fail(v_561) then handshakestatepack(v_561,s_548,e_549,rs_551,re_552,key_psk(alice,bob),false) else fail-any) else fail-any) else fail-any) in
        {193}insert statestore(bob,alice,sid,statepack_a(hs_562))
    ) | (
        {251}get statestore(=bob,=alice,=sid,statepack_a(hs_563: handshakestate)) in
        {194}in(pub, message_a_564: bitstring);
        {195}let v_565: bitstring = catch-fail(handshakestateunpack(hs_563)) in
        {196}let v_566: bitstring = catch-fail(deconcat3(message_a_564)) in
        {197}let v_567: bool = catch-fail(true) in
        {198}let v_568: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_565))) in
        {199}let v_569: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_568),6-proj-7-tuple(v_565))) in
        {200}let v_570: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_568),6-proj-7-tuple(v_565))) in
        {201}let v_571: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_568),6-proj-7-tuple(v_565))) in
        {202}let v_572: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_565)) && success?(2-proj-3-tuple(v_568))) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (if not-caught-fail(v_571) then (v_569,v_570,v_571) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {203}let v_573: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_568),1-proj-3-tuple(v_572),3-proj-3-tuple(v_568)))) in
        {204}let v_574: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_572)) && success?(symmetricstatepack(1-proj-3-tuple(v_568),1-proj-3-tuple(v_572),3-proj-3-tuple(v_568)))) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then symmetricstatepack(1-proj-3-tuple(v_573),2-proj-3-tuple(v_573),hash(3-proj-3-tuple(v_573),2-proj-3-tuple(v_572))) else fail-any) else fail-any))) in
        {205}let v_575: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_565)) && success?(1-proj-7-tuple(v_565))) then (if (not-caught-fail(v_568) && success?(is-true(success?(1-proj-3-tuple(v_568))))) then (if (not-caught-fail(v_572) && success?(is-true(success?(1-proj-3-tuple(v_572))))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-3-tuple(v_574))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_572)) then cipherstatepack(3-proj-3-tuple(v_572),minnonce) else fail-any),1-proj-3-tuple(v_572),3-proj-3-tuple(v_574)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {206}let v_576: key = catch-fail(1-proj-3-tuple(v_566)) in
        {207}let v_577: bitstring = catch-fail(symmetricstateunpack(v_575)) in
        {208}let v_578: symmetricstate = catch-fail((if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-3-tuple(v_577))))) then symmetricstatepack(1-proj-3-tuple(v_577),2-proj-3-tuple(v_577),hash(3-proj-3-tuple(v_577),v_576)) else fail-any)) in
        {209}let v_579: bitstring = catch-fail(symmetricstateunpack(v_578)) in
        {210}let v_580: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_579),v_576)) in
        {211}let v_581: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_579),v_576)) in
        {212}let v_582: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_579),v_576)) in
        {213}let v_583: bitstring = catch-fail((if success?(2-proj-3-tuple(v_579)) then (if not-caught-fail(v_580) then (if not-caught-fail(v_581) then (if not-caught-fail(v_582) then (v_580,v_581,v_582) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {214}let v_584: symmetricstate = catch-fail((if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if (not-caught-fail(v_583) && success?(is-true(success?(1-proj-3-tuple(v_583))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_583)) then cipherstatepack(2-proj-3-tuple(v_583),minnonce) else fail-any),1-proj-3-tuple(v_583),3-proj-3-tuple(v_579)) else fail-any) else fail-any)) in
        {215}let v_585: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_565))) in
        {216}let v_586: bitstring = catch-fail(symmetricstateunpack(v_584)) in
        {217}let v_587: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_586),(if success?(2-proj-7-tuple(v_565)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then dhexp(2-proj-2-tuple(v_585),v_576) else fail-any) else fail-any))) in
        {218}let v_588: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_586),(if success?(2-proj-7-tuple(v_565)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then dhexp(2-proj-2-tuple(v_585),v_576) else fail-any) else fail-any))) in
        {219}let v_589: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_586),(if success?(2-proj-7-tuple(v_565)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then dhexp(2-proj-2-tuple(v_585),v_576) else fail-any) else fail-any))) in
        {220}let v_590: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_565)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then dhexp(2-proj-2-tuple(v_585),v_576) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_586))) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (if not-caught-fail(v_589) then (v_587,v_588,v_589) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {221}let v_591: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_565)) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-2-tuple(v_585))))) then dhexp(2-proj-2-tuple(v_585),v_576) else fail-any) else fail-any)) then (if (not-caught-fail(v_586) && success?(is-true(success?(1-proj-3-tuple(v_586))))) then (if (not-caught-fail(v_590) && success?(is-true(success?(1-proj-3-tuple(v_590))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_590)) then cipherstatepack(2-proj-3-tuple(v_590),minnonce) else fail-any),1-proj-3-tuple(v_590),3-proj-3-tuple(v_586)) else fail-any) else fail-any) else fail-any)) in
        {222}let v_592: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_565))) in
        {223}let v_593: bitstring = catch-fail(symmetricstateunpack(v_591)) in
        {224}let v_594: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_593),(if (success?(4-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then dhexp(2-proj-2-tuple(v_592),4-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {225}let v_595: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_593),(if (success?(4-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then dhexp(2-proj-2-tuple(v_592),4-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {226}let v_596: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_593),(if (success?(4-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then dhexp(2-proj-2-tuple(v_592),4-proj-7-tuple(v_565)) else fail-any) else fail-any))) in
        {227}let v_597: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then dhexp(2-proj-2-tuple(v_592),4-proj-7-tuple(v_565)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_593))) then (if not-caught-fail(v_594) then (if not-caught-fail(v_595) then (if not-caught-fail(v_596) then (v_594,v_595,v_596) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_598: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_565)) && success?(2-proj-7-tuple(v_565))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then dhexp(2-proj-2-tuple(v_592),4-proj-7-tuple(v_565)) else fail-any) else fail-any)) then (if (not-caught-fail(v_593) && success?(is-true(success?(1-proj-3-tuple(v_593))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_597)) then cipherstatepack(2-proj-3-tuple(v_597),minnonce) else fail-any),1-proj-3-tuple(v_597),3-proj-3-tuple(v_593)) else fail-any) else fail-any) else fail-any)) in
        {229}let v_599: bitstring = catch-fail(symmetricstateunpack(v_598)) in
        {230}let v_600: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_599))) in
        {231}let v_601: aead = catch-fail(decrypt(1-proj-2-tuple(v_600),2-proj-2-tuple(v_600),3-proj-3-tuple(v_599),3-proj-3-tuple(v_566))) in
        {232}let v_602: bitstring = catch-fail(aeadunpack(v_601)) in
        {233}let v_603: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_599))) in
        {234}let v_604: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_600))) && success?(1-proj-3-tuple(v_599))) then (if (not-caught-fail(v_603) && success?(is-true(success?(1-proj-2-tuple(v_603))))) then cipherstatepack(1-proj-2-tuple(v_603),increment_nonce(2-proj-2-tuple(v_600))) else fail-any) else fail-any)) in
        {235}let v_605: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_566)) && (success?(3-proj-3-tuple(v_599)) && success?(1-proj-3-tuple(v_599)))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-2-tuple(v_600))))) then (if not-caught-fail(v_601) then (if (not-caught-fail(v_602) && success?(is-true(success?(1-proj-3-tuple(v_602))))) then (if not-caught-fail(v_604) then (v_604,3-proj-3-tuple(v_602),1-proj-3-tuple(v_602)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {236}let v_606: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_605),2-proj-3-tuple(v_599),3-proj-3-tuple(v_599)))) in
        {237}let v_607: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_566)) && success?(symmetricstatepack(1-proj-3-tuple(v_605),2-proj-3-tuple(v_599),3-proj-3-tuple(v_599)))) then (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-3-tuple(v_606))))) then symmetricstatepack(1-proj-3-tuple(v_606),2-proj-3-tuple(v_606),hash(3-proj-3-tuple(v_606),3-proj-3-tuple(v_566))) else fail-any) else fail-any)) in
        {238}let v_608: bitstring = catch-fail((if success?(3-proj-3-tuple(v_566)) then (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-3-tuple(v_599))))) then (if (not-caught-fail(v_605) && success?(is-true(success?(1-proj-3-tuple(v_605))))) then (if not-caught-fail(v_607) then (v_607,2-proj-3-tuple(v_605),3-proj-3-tuple(v_605)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {239}let v_609: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_608),2-proj-7-tuple(v_565),3-proj-7-tuple(v_565),4-proj-7-tuple(v_565),v_576,6-proj-7-tuple(v_565),7-proj-7-tuple(v_565))) in
        {240}let v_610: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_608))) in
        {241}let v_611: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_610),zero)) in
        {242}let v_612: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_610),zero)) in
        {243}let v_613: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_610),zero)) in
        {244}let v_614: bitstring = catch-fail((if success?(2-proj-3-tuple(v_610)) then (if not-caught-fail(v_611) then (if not-caught-fail(v_612) then (if not-caught-fail(v_613) then (v_611,v_612,v_613) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_615: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_614)) then cipherstatepack(1-proj-3-tuple(v_614),minnonce) else fail-any)) in
        {246}let v_616: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_614)) then cipherstatepack(2-proj-3-tuple(v_614),minnonce) else fail-any)) in
        {247}let v_617: bitstring = catch-fail((if success?(1-proj-3-tuple(v_608)) then (if (not-caught-fail(v_610) && success?(is-true(success?(1-proj-3-tuple(v_610))))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then (if not-caught-fail(v_615) then (if not-caught-fail(v_616) then (1-proj-3-tuple(v_608),v_615,v_616) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {248}let (hs_618: handshakestate,plaintext_a: bitstring,valid: bool,cs1_619: cipherstate,cs2_620: cipherstate) = (if (not-caught-fail(v_565) && success?(is-true(success?(1-proj-7-tuple(v_565))))) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-3-tuple(v_566))))) then (if not-caught-fail(v_567) then (if not-caught-fail(v_575) then (if not-caught-fail(v_576) then (if not-caught-fail(v_578) then (if not-caught-fail(v_584) then (if not-caught-fail(v_591) then (if not-caught-fail(v_598) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (v_567 && 3-proj-3-tuple(v_608)) then (if not-caught-fail(v_609) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (v_609,2-proj-3-tuple(v_608),true,2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {249}event RecvMsg(bob,alice,stagepack_a(sid),plaintext_a);
        {250}event RecvEnd(valid)
    ) | (
        {252}event LeakPsk(phase0,alice,bob);
        {253}out(pub, key_psk(alice,bob))
    ) | (
        {254}phase 1;
        {255}event LeakPsk(phase1,alice,bob);
        {256}out(pub, key_psk(alice,bob))
    ) | (
        {257}event LeakS(phase0,bob);
        {258}out(pub, key_s(bob))
    ) | (
        {259}phase 1;
        {260}event LeakS(phase1,bob);
        {261}out(pub, key_s(bob))
    )
) | (
    {262}let v_621: key = catch-fail(dhexp(key_s(bob),validkey(g))) in
    {263}let s_622: keypair = (if not-caught-fail(v_621) then keypairpack(validkey(v_621),key_s(bob)) else fail-any) in
    {264}out(pub, getpublickey(s_622));
    (
        {265}let e_623: keypair = keypairpack(empty,empty) in
        {266}let v_624: key = catch-fail(dhexp(key_s(charlie),validkey(g))) in
        {267}let rs_625: key = getpublickey((if not-caught-fail(v_624) then keypairpack(validkey(v_624),key_s(charlie)) else fail-any)) in
        {268}let re_626: key = empty in
        {269}let v_627: bitstring = catch-fail(hash(somename,empty)) in
        {270}let v_628: key = catch-fail(v_627) in
        {271}let v_629: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {272}let v_630: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then symmetricstatepack(v_629,v_628,v_627) else fail-any) else fail-any) else fail-any))) in
        {273}let v_631: symmetricstate = catch-fail((if success?((if not-caught-fail(v_627) then (if not-caught-fail(v_628) then (if not-caught-fail(v_629) then symmetricstatepack(v_629,v_628,v_627) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_630) && success?(is-true(success?(1-proj-3-tuple(v_630))))) then symmetricstatepack(1-proj-3-tuple(v_630),2-proj-3-tuple(v_630),hash(3-proj-3-tuple(v_630),empty)) else fail-any) else fail-any)) in
        {274}let v_632: bitstring = catch-fail(symmetricstateunpack(v_631)) in
        {275}let v_633: symmetricstate = catch-fail((if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then symmetricstatepack(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),hash(3-proj-3-tuple(v_632),rs_625)) else fail-any)) in
        {276}let v_634: bitstring = catch-fail(symmetricstateunpack(v_633)) in
        {277}let v_635: symmetricstate = catch-fail((if success?(getpublickey(s_622)) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then symmetricstatepack(1-proj-3-tuple(v_634),2-proj-3-tuple(v_634),hash(3-proj-3-tuple(v_634),getpublickey(s_622))) else fail-any) else fail-any)) in
        {278}let hs_636: handshakestate = (if not-caught-fail(v_631) then (if not-caught-fail(v_633) then (if not-caught-fail(v_635) then handshakestatepack(v_635,s_622,e_623,rs_625,re_626,key_psk(charlie,bob),false) else fail-any) else fail-any) else fail-any) in
        {279}insert statestore(bob,charlie,sid,statepack_a(hs_636))
    ) | (
        {337}get statestore(=bob,=charlie,=sid,statepack_a(hs_637: handshakestate)) in
        {280}in(pub, message_a_638: bitstring);
        {281}let v_639: bitstring = catch-fail(handshakestateunpack(hs_637)) in
        {282}let v_640: bitstring = catch-fail(deconcat3(message_a_638)) in
        {283}let v_641: bool = catch-fail(true) in
        {284}let v_642: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_639))) in
        {285}let v_643: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_642),6-proj-7-tuple(v_639))) in
        {286}let v_644: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_642),6-proj-7-tuple(v_639))) in
        {287}let v_645: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_642),6-proj-7-tuple(v_639))) in
        {288}let v_646: bitstring = catch-fail((if (success?(6-proj-7-tuple(v_639)) && success?(2-proj-3-tuple(v_642))) then (if not-caught-fail(v_643) then (if not-caught-fail(v_644) then (if not-caught-fail(v_645) then (v_643,v_644,v_645) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {289}let v_647: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_642),1-proj-3-tuple(v_646),3-proj-3-tuple(v_642)))) in
        {290}let v_648: bitstring = catch-fail(symmetricstateunpack((if (success?(2-proj-3-tuple(v_646)) && success?(symmetricstatepack(1-proj-3-tuple(v_642),1-proj-3-tuple(v_646),3-proj-3-tuple(v_642)))) then (if (not-caught-fail(v_647) && success?(is-true(success?(1-proj-3-tuple(v_647))))) then symmetricstatepack(1-proj-3-tuple(v_647),2-proj-3-tuple(v_647),hash(3-proj-3-tuple(v_647),2-proj-3-tuple(v_646))) else fail-any) else fail-any))) in
        {291}let v_649: symmetricstate = catch-fail((if (success?(6-proj-7-tuple(v_639)) && success?(1-proj-7-tuple(v_639))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then (if (not-caught-fail(v_646) && success?(is-true(success?(1-proj-3-tuple(v_646))))) then (if (not-caught-fail(v_648) && success?(is-true(success?(1-proj-3-tuple(v_648))))) then symmetricstatepack((if success?(3-proj-3-tuple(v_646)) then cipherstatepack(3-proj-3-tuple(v_646),minnonce) else fail-any),1-proj-3-tuple(v_646),3-proj-3-tuple(v_648)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {292}let v_650: key = catch-fail(1-proj-3-tuple(v_640)) in
        {293}let v_651: bitstring = catch-fail(symmetricstateunpack(v_649)) in
        {294}let v_652: symmetricstate = catch-fail((if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then symmetricstatepack(1-proj-3-tuple(v_651),2-proj-3-tuple(v_651),hash(3-proj-3-tuple(v_651),v_650)) else fail-any)) in
        {295}let v_653: bitstring = catch-fail(symmetricstateunpack(v_652)) in
        {296}let v_654: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_653),v_650)) in
        {297}let v_655: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_653),v_650)) in
        {298}let v_656: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_653),v_650)) in
        {299}let v_657: bitstring = catch-fail((if success?(2-proj-3-tuple(v_653)) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then (if not-caught-fail(v_656) then (v_654,v_655,v_656) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_658: symmetricstate = catch-fail((if (not-caught-fail(v_653) && success?(is-true(success?(1-proj-3-tuple(v_653))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_657)) then cipherstatepack(2-proj-3-tuple(v_657),minnonce) else fail-any),1-proj-3-tuple(v_657),3-proj-3-tuple(v_653)) else fail-any) else fail-any)) in
        {301}let v_659: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_639))) in
        {302}let v_660: bitstring = catch-fail(symmetricstateunpack(v_658)) in
        {303}let v_661: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_660),(if success?(2-proj-7-tuple(v_639)) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then dhexp(2-proj-2-tuple(v_659),v_650) else fail-any) else fail-any))) in
        {304}let v_662: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_660),(if success?(2-proj-7-tuple(v_639)) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then dhexp(2-proj-2-tuple(v_659),v_650) else fail-any) else fail-any))) in
        {305}let v_663: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_660),(if success?(2-proj-7-tuple(v_639)) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then dhexp(2-proj-2-tuple(v_659),v_650) else fail-any) else fail-any))) in
        {306}let v_664: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_639)) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then dhexp(2-proj-2-tuple(v_659),v_650) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_660))) then (if not-caught-fail(v_661) then (if not-caught-fail(v_662) then (if not-caught-fail(v_663) then (v_661,v_662,v_663) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {307}let v_665: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_639)) then (if (not-caught-fail(v_659) && success?(is-true(success?(1-proj-2-tuple(v_659))))) then dhexp(2-proj-2-tuple(v_659),v_650) else fail-any) else fail-any)) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if (not-caught-fail(v_664) && success?(is-true(success?(1-proj-3-tuple(v_664))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_664)) then cipherstatepack(2-proj-3-tuple(v_664),minnonce) else fail-any),1-proj-3-tuple(v_664),3-proj-3-tuple(v_660)) else fail-any) else fail-any) else fail-any)) in
        {308}let v_666: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_639))) in
        {309}let v_667: bitstring = catch-fail(symmetricstateunpack(v_665)) in
        {310}let v_668: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_667),(if (success?(4-proj-7-tuple(v_639)) && success?(2-proj-7-tuple(v_639))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_639)) else fail-any) else fail-any))) in
        {311}let v_669: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_667),(if (success?(4-proj-7-tuple(v_639)) && success?(2-proj-7-tuple(v_639))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_639)) else fail-any) else fail-any))) in
        {312}let v_670: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_667),(if (success?(4-proj-7-tuple(v_639)) && success?(2-proj-7-tuple(v_639))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_639)) else fail-any) else fail-any))) in
        {313}let v_671: bitstring = catch-fail((if (success?((if (success?(4-proj-7-tuple(v_639)) && success?(2-proj-7-tuple(v_639))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_639)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_667))) then (if not-caught-fail(v_668) then (if not-caught-fail(v_669) then (if not-caught-fail(v_670) then (v_668,v_669,v_670) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {314}let v_672: symmetricstate = catch-fail((if success?((if (success?(4-proj-7-tuple(v_639)) && success?(2-proj-7-tuple(v_639))) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-2-tuple(v_666))))) then dhexp(2-proj-2-tuple(v_666),4-proj-7-tuple(v_639)) else fail-any) else fail-any)) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-3-tuple(v_671))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_671)) then cipherstatepack(2-proj-3-tuple(v_671),minnonce) else fail-any),1-proj-3-tuple(v_671),3-proj-3-tuple(v_667)) else fail-any) else fail-any) else fail-any)) in
        {315}let v_673: bitstring = catch-fail(symmetricstateunpack(v_672)) in
        {316}let v_674: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_673))) in
        {317}let v_675: aead = catch-fail(decrypt(1-proj-2-tuple(v_674),2-proj-2-tuple(v_674),3-proj-3-tuple(v_673),3-proj-3-tuple(v_640))) in
        {318}let v_676: bitstring = catch-fail(aeadunpack(v_675)) in
        {319}let v_677: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_673))) in
        {320}let v_678: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_674))) && success?(1-proj-3-tuple(v_673))) then (if (not-caught-fail(v_677) && success?(is-true(success?(1-proj-2-tuple(v_677))))) then cipherstatepack(1-proj-2-tuple(v_677),increment_nonce(2-proj-2-tuple(v_674))) else fail-any) else fail-any)) in
        {321}let v_679: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_640)) && (success?(3-proj-3-tuple(v_673)) && success?(1-proj-3-tuple(v_673)))) then (if (not-caught-fail(v_674) && success?(is-true(success?(1-proj-2-tuple(v_674))))) then (if not-caught-fail(v_675) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then (if not-caught-fail(v_678) then (v_678,3-proj-3-tuple(v_676),1-proj-3-tuple(v_676)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {322}let v_680: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_679),2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)))) in
        {323}let v_681: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_640)) && success?(symmetricstatepack(1-proj-3-tuple(v_679),2-proj-3-tuple(v_673),3-proj-3-tuple(v_673)))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-3-tuple(v_680))))) then symmetricstatepack(1-proj-3-tuple(v_680),2-proj-3-tuple(v_680),hash(3-proj-3-tuple(v_680),3-proj-3-tuple(v_640))) else fail-any) else fail-any)) in
        {324}let v_682: bitstring = catch-fail((if success?(3-proj-3-tuple(v_640)) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-3-tuple(v_673))))) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if not-caught-fail(v_681) then (v_681,2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {325}let v_683: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_682),2-proj-7-tuple(v_639),3-proj-7-tuple(v_639),4-proj-7-tuple(v_639),v_650,6-proj-7-tuple(v_639),7-proj-7-tuple(v_639))) in
        {326}let v_684: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_682))) in
        {327}let v_685: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_684),zero)) in
        {328}let v_686: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_684),zero)) in
        {329}let v_687: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_684),zero)) in
        {330}let v_688: bitstring = catch-fail((if success?(2-proj-3-tuple(v_684)) then (if not-caught-fail(v_685) then (if not-caught-fail(v_686) then (if not-caught-fail(v_687) then (v_685,v_686,v_687) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {331}let v_689: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_688)) then cipherstatepack(1-proj-3-tuple(v_688),minnonce) else fail-any)) in
        {332}let v_690: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_688)) then cipherstatepack(2-proj-3-tuple(v_688),minnonce) else fail-any)) in
        {333}let v_691: bitstring = catch-fail((if success?(1-proj-3-tuple(v_682)) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-3-tuple(v_684))))) then (if (not-caught-fail(v_688) && success?(is-true(success?(1-proj-3-tuple(v_688))))) then (if not-caught-fail(v_689) then (if not-caught-fail(v_690) then (1-proj-3-tuple(v_682),v_689,v_690) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {334}let (hs_692: handshakestate,plaintext_a_693: bitstring,valid_694: bool,cs1_695: cipherstate,cs2_696: cipherstate) = (if (not-caught-fail(v_639) && success?(is-true(success?(1-proj-7-tuple(v_639))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_649) then (if not-caught-fail(v_650) then (if not-caught-fail(v_652) then (if not-caught-fail(v_658) then (if not-caught-fail(v_665) then (if not-caught-fail(v_672) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-3-tuple(v_682))))) then (if (v_641 && 3-proj-3-tuple(v_682)) then (if not-caught-fail(v_683) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-3-tuple(v_691))))) then (v_683,2-proj-3-tuple(v_682),true,2-proj-3-tuple(v_691),3-proj-3-tuple(v_691)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {335}event RecvMsg(bob,charlie,stagepack_a(sid),plaintext_a_693);
        {336}event RecvEnd(valid_694)
    ) | (
        {338}event LeakPsk(phase0,charlie,bob);
        {339}out(pub, key_psk(charlie,bob))
    ) | (
        {340}phase 1;
        {341}event LeakPsk(phase1,charlie,bob);
        {342}out(pub, key_psk(charlie,bob))
    ) | (
        {343}event LeakS(phase0,bob);
        {344}out(pub, key_s(bob))
    ) | (
        {345}phase 1;
        {346}event LeakS(phase1,bob);
        {347}out(pub, key_s(bob))
    )
)

-- Query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_814,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_814,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob,sid_a)); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))); attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 70 rules in the queue.
400 rules inserted. The rule base contains 371 rules. 43 rules in the queue.
600 rules inserted. The rule base contains 571 rules. 72 rules in the queue.
800 rules inserted. The rule base contains 771 rules. 123 rules in the queue.
1000 rules inserted. The rule base contains 971 rules. 144 rules in the queue.
1200 rules inserted. The rule base contains 1171 rules. 170 rules in the queue.
1400 rules inserted. The rule base contains 1347 rules. 206 rules in the queue.
1600 rules inserted. The rule base contains 1489 rules. 234 rules in the queue.
1800 rules inserted. The rule base contains 1613 rules. 220 rules in the queue.
2000 rules inserted. The rule base contains 1709 rules. 178 rules in the queue.
2200 rules inserted. The rule base contains 1746 rules. 130 rules in the queue.
2400 rules inserted. The rule base contains 1753 rules. 99 rules in the queue.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && attacker(m_1044096562) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096563]),m_1044096562))
Abbreviations:
sid_1044096657 = sid[!1 = @sid_1044096649]

1. The entry statestore(bob,alice,sid_1044096657,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {193}.
table(statestore(bob,alice,sid_1044096657,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

2. We assume as hypothesis that
attacker(m_1044096656).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The event LeakPsk(phase0,alice,bob) may be executed at {80}.
So the message key_psk(alice,bob) may be sent on channel pub at output {81}.
mess(pub,key_psk(alice,bob)).

6. By 4, the attacker may have the channel pub.
By 5, the message key_psk(alice,bob) may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) by listening on this channel.
attacker(key_psk(alice,bob)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know key_psk(alice,bob).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)).
attacker(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

11. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {178}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

12. By 4, the attacker may have the channel pub.
By 11, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

13. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

14. By 4, the attacker may have the channel pub.
By 13, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

15. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 14, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 12, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero)).

20. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

21. The event LeakS(phase0,bob) may be executed at {257}.
So the message key_s(bob) may be sent on channel pub at output {258}.
mess(pub,key_s(bob)).

22. By 4, the attacker may have the channel pub.
By 21, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

23. By 22, the attacker may know key_s(bob).
By 14, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).

24. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know key_psk(alice,bob).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)).
attacker(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero)).

26. By 25, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero)).

27. By 26, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero).
By 23, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
By 20, the attacker may know minnonce.
By 19, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero).
By 2, the attacker may know m_1044096656.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096656).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096656)).

29. The attacker has some term b_1044096642.
attacker(b_1044096642).

30. By 3, the attacker may know zero.
By 29, the attacker may know b_1044096642.
By 28, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096656).
Using the function concat3 the attacker may obtain concat3(zero,b_1044096642,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096656)).
attacker(concat3(zero,b_1044096642,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096656))).

31. By 4, the attacker may have the channel pub.
By 30, the attacker may have the message concat3(zero,b_1044096642,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096656)).
So the attacker may send this message on this channel.
mess(pub,concat3(zero,b_1044096642,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096656))).

32. The entry statestore(bob,alice,sid_1044096657,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {251}.
The message concat3(zero,b_1044096642,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096656)) that may be sent on channel pub by 31 may be received at input {194}.
So event RecvMsg(bob,alice,stagepack_a(sid_1044096657),m_1044096656) may be executed at {249}.
end(RecvMsg(bob,alice,stagepack_a(sid_1044096657),m_1044096656)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_814,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && attacker(m_1044096660) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096661]),m_1044096660))
goal reachable: begin(LeakS(phase0,alice)) && begin(LeakPsk(phase0,alice,bob)) && attacker(m_1044096664) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096665]),m_1044096664))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044096668]),msg_a(alice,bob,sid[!1 = @sid_1044096668]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096669]),msg_a(alice,bob,sid[!1 = @sid_1044096668])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_814,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_814,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && attacker(m_1044096694) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096695]),m_1044096694))
Abbreviations:
sid_1044096790 = sid[!1 = @sid_1044096782]

1. The entry statestore(bob,alice,sid_1044096790,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {193}.
table(statestore(bob,alice,sid_1044096790,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

2. We assume as hypothesis that
attacker(m_1044096789).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The event LeakPsk(phase0,alice,bob) may be executed at {80}.
So the message key_psk(alice,bob) may be sent on channel pub at output {81}.
mess(pub,key_psk(alice,bob)).

6. By 4, the attacker may have the channel pub.
By 5, the message key_psk(alice,bob) may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) by listening on this channel.
attacker(key_psk(alice,bob)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know key_psk(alice,bob).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)).
attacker(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

11. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {178}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

12. By 4, the attacker may have the channel pub.
By 11, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

13. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

14. By 4, the attacker may have the channel pub.
By 13, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

15. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 14, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 12, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero)).

20. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

21. The event LeakS(phase0,bob) may be executed at {257}.
So the message key_s(bob) may be sent on channel pub at output {258}.
mess(pub,key_s(bob)).

22. By 4, the attacker may have the channel pub.
By 21, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

23. By 22, the attacker may know key_s(bob).
By 14, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).

24. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know key_psk(alice,bob).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)).
attacker(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero)).

26. By 25, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero)).

27. By 26, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero).
By 23, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
By 20, the attacker may know minnonce.
By 19, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero).
By 2, the attacker may know m_1044096789.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096789).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096789)).

29. The attacker has some term b_1044096775.
attacker(b_1044096775).

30. By 3, the attacker may know zero.
By 29, the attacker may know b_1044096775.
By 28, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096789).
Using the function concat3 the attacker may obtain concat3(zero,b_1044096775,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096789)).
attacker(concat3(zero,b_1044096775,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096789))).

31. By 4, the attacker may have the channel pub.
By 30, the attacker may have the message concat3(zero,b_1044096775,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096789)).
So the attacker may send this message on this channel.
mess(pub,concat3(zero,b_1044096775,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096789))).

32. The entry statestore(bob,alice,sid_1044096790,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {251}.
The message concat3(zero,b_1044096775,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096789)) that may be sent on channel pub by 31 may be received at input {194}.
So event RecvMsg(bob,alice,stagepack_a(sid_1044096790),m_1044096789) may be executed at {249}.
end(RecvMsg(bob,alice,stagepack_a(sid_1044096790),m_1044096789)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,c_814,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && attacker(m_1044096793) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096794]),m_1044096793))
goal reachable: begin(LeakS(phase0,alice)) && begin(LeakPsk(phase0,alice,bob)) && attacker(m_1044096797) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096798]),m_1044096797))
goal reachable: begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044096801]),msg_a(alice,bob,sid[!1 = @sid_1044096801]))) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096802]),msg_a(alice,bob,sid[!1 = @sid_1044096801])))
RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || (event(LeakS(phase0,alice)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) is true.
Starting query event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && attacker(m_1044096826) -> end(RecvMsg(bob,alice,stagepack_a(sid[!1 = @sid_1044096827]),m_1044096826))
Abbreviations:
sid_1044096921 = sid[!1 = @sid_1044096913]

1. The entry statestore(bob,alice,sid_1044096921,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) may be inserted in a table at insert {193}.
table(statestore(bob,alice,sid_1044096921,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false)))).

2. We assume as hypothesis that
attacker(m_1044096920).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The event LeakPsk(phase0,alice,bob) may be executed at {80}.
So the message key_psk(alice,bob) may be sent on channel pub at output {81}.
mess(pub,key_psk(alice,bob)).

6. By 4, the attacker may have the channel pub.
By 5, the message key_psk(alice,bob) may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) by listening on this channel.
attacker(key_psk(alice,bob)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know key_psk(alice,bob).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)).
attacker(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

11. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {178}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

12. By 4, the attacker may have the channel pub.
By 11, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

13. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

14. By 4, the attacker may have the channel pub.
By 13, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

15. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

16. By 15, the attacker may know hash(hash(somename,empty),empty).
By 14, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

17. By 16, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 12, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

18. By 17, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

19. By 18, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero)).

20. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

21. The event LeakS(phase0,bob) may be executed at {257}.
So the message key_s(bob) may be sent on channel pub at output {258}.
mess(pub,key_s(bob)).

22. By 4, the attacker may have the channel pub.
By 21, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

23. By 22, the attacker may know key_s(bob).
By 14, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).

24. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know key_psk(alice,bob).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)).
attacker(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

25. By 24, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero)).

26. By 25, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero)).

27. By 26, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero).
By 23, the attacker may know dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g)))).

28. By 27, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))).
By 20, the attacker may know minnonce.
By 19, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero).
By 2, the attacker may know m_1044096920.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096920).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096920)).

29. The attacker has some term b_1044096906.
attacker(b_1044096906).

30. By 3, the attacker may know zero.
By 29, the attacker may know b_1044096906.
By 28, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096920).
Using the function concat3 the attacker may obtain concat3(zero,b_1044096906,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096920)).
attacker(concat3(zero,b_1044096906,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096920))).

31. By 4, the attacker may have the channel pub.
By 30, the attacker may have the message concat3(zero,b_1044096906,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096920)).
So the attacker may send this message on this channel.
mess(pub,concat3(zero,b_1044096906,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096920))).

32. The entry statestore(bob,alice,sid_1044096921,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(alice),g)),empty,key_psk(alice,bob),false))) that may be in a table by 1 may be read at get {251}.
The message concat3(zero,b_1044096906,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),zero),zero),dhexp_real(key_s(alice),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),zero),m_1044096920)) that may be sent on channel pub by 31 may be received at input {194}.
So event RecvMsg(bob,alice,stagepack_a(sid_1044096921),m_1044096920) may be executed at {249}.
end(RecvMsg(bob,alice,stagepack_a(sid_1044096921),m_1044096920)).


RESULT event(RecvMsg(bob,alice,stagepack_a(sid_b),m)) ==> event(SendMsg(alice,bob,stagepack_a(sid_a),m)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob,sid_a))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044096923]),msg_a(alice,bob,sid[!1 = @sid_1044096923]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1044096923]))
Abbreviations:
sid_1044097053 = sid[!1 = @sid_1044097028]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1044097053,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1044097053,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1044097053,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {79}.
The event SendMsg(alice,bob,stagepack_a(sid_1044097053),msg_a(alice,bob,sid_1044097053)) may be executed at {77}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053))) may be sent on channel pub at output {78}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {83}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {84}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {178}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {257}.
So the message key_s(bob) may be sent on channel pub at output {258}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097053),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097053),g))),msg_a(alice,bob,sid_1044097053)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1044097053) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1044097053)).


RESULT not attacker_p1(msg_a(alice,bob,sid_a)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044097055]),msg_a(alice,bob,sid[!1 = @sid_1044097055]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1044097055]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044097057]),msg_a(alice,bob,sid[!1 = @sid_1044097057]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1044097057]))
goal reachable: begin(LeakS(phase1,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044097059]),msg_a(alice,bob,sid[!1 = @sid_1044097059]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1044097059]))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase0,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044097062]),msg_a(alice,bob,sid[!1 = @sid_1044097062]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1044097062]))
RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase0,bob)) && event(LeakPsk(phase1,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(phase1,bob)) && event(LeakPsk(phase1,alice,bob))) is true.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044097078]),msg_a(alice,bob,sid[!1 = @sid_1044097078]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1044097078]))
Abbreviations:
sid_1044097211 = sid[!1 = @sid_1044097186]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1044097211,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1044097211,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1044097211,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {79}.
The event SendMsg(alice,bob,stagepack_a(sid_1044097211),msg_a(alice,bob,sid_1044097211)) may be executed at {77}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211))) may be sent on channel pub at output {78}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {83}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {84}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {178}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {257}.
So the message key_s(bob) may be sent on channel pub at output {258}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097211),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097211),g))),msg_a(alice,bob,sid_1044097211)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1044097211) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1044097211)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) || (event(LeakS(px,bob)) && event(LeakPsk(py,alice,bob)) && event(LeakS(pz,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob)))
goal reachable: begin(LeakS(phase0,bob)) && begin(LeakPsk(phase1,alice,bob)) && begin(SendMsg(alice,bob,stagepack_a(sid[!1 = @sid_1044097213]),msg_a(alice,bob,sid[!1 = @sid_1044097213]))) -> attacker_p1(msg_a(alice,bob,sid[!1 = @sid_1044097213]))
Abbreviations:
sid_1044097343 = sid[!1 = @sid_1044097318]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,sid_1044097343,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) may be inserted in a table at insert {21}.
table(statestore(alice,bob,sid_1044097343,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true)))).

3. The entry statestore(alice,bob,sid_1044097343,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(alice),g)),key_s(alice)),keypairpack(empty,empty),validkey(dhexp_real(key_s(bob),g)),empty,key_psk(alice,bob),true))) that may be in a table by 2 may be read at get {79}.
The event SendMsg(alice,bob,stagepack_a(sid_1044097343),msg_a(alice,bob,sid_1044097343)) may be executed at {77}.
So the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343))) may be sent on channel pub at output {78}.
mess(pub,concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343))) may be sent on this channel.
So the attacker may obtain the message concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343))) by listening on this channel.
attacker(concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343)))).

5. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343)).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343))).

6. By 5, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343)).
So the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343)) in phase 1.
attacker_p1(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343))).

7. By 4, the attacker may know concat3(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)),empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343))).
Using the function 1-proj-concat3 the attacker may obtain validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)).
attacker(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))).

8. By 7, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)).
So the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))).

9. Using the function pub the attacker may obtain pub in phase 1.
attacker_p1(pub).

10. The event LeakPsk(phase1,alice,bob) may be executed at {83}.
So the message key_psk(alice,bob) may be sent on channel pub in phase 1 at output {84}.
mess_p1(pub,key_psk(alice,bob)).

11. By 9, the attacker may have the channel pub in phase 1.
By 10, the message key_psk(alice,bob) in phase 1 may be sent on this channel.
So the attacker may obtain the message key_psk(alice,bob) in phase 1 by listening on this channel.
attacker_p1(key_psk(alice,bob)).

12. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

13. Using the function somename the attacker may obtain somename in phase 1.
attacker_p1(somename).

14. By 13, the attacker may know somename in phase 1.
By 12, the attacker may know empty in phase 1.
Using the function hash the attacker may obtain hash(somename,empty) in phase 1.
attacker_p1(hash(somename,empty)).

15. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash2(hash(somename,empty),key_psk(alice,bob))).

16. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {178}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

17. By 1, the attacker may have the channel pub.
By 16, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

18. The message validkey(dhexp_real(key_s(alice),g)) may be sent on channel pub at output {6}.
mess(pub,validkey(dhexp_real(key_s(alice),g))).

19. By 1, the attacker may have the channel pub.
By 18, the message validkey(dhexp_real(key_s(alice),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(alice),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(alice),g))).

20. Using the function empty the attacker may obtain empty.
attacker(empty).

21. Using the function somename the attacker may obtain somename.
attacker(somename).

22. By 21, the attacker may know somename.
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

23. By 22, the attacker may know hash(somename,empty).
By 20, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

24. By 23, the attacker may know hash(hash(somename,empty),empty).
By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g)))).

25. By 24, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))).
By 17, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

26. By 25, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g)))).

27. By 26, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))) in phase 1.
By 15, the attacker may know hmac_hash2(hash(somename,empty),key_psk(alice,bob)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob)))).

28. By 27, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)) in phase 1.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)))).

29. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

30. By 19, the attacker may know validkey(dhexp_real(key_s(alice),g)).
So the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(validkey(dhexp_real(key_s(alice),g))).

31. The event LeakS(phase0,bob) may be executed at {257}.
So the message key_s(bob) may be sent on channel pub at output {258}.
mess(pub,key_s(bob)).

32. By 1, the attacker may have the channel pub.
By 31, the message key_s(bob) may be sent on this channel.
So the attacker may obtain the message key_s(bob) by listening on this channel.
attacker(key_s(bob)).

33. By 32, the attacker may know key_s(bob).
So the attacker may know key_s(bob) in phase 1.
attacker_p1(key_s(bob)).

34. By 33, the attacker may know key_s(bob) in phase 1.
By 30, the attacker may know validkey(dhexp_real(key_s(alice),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))).

35. By 33, the attacker may know key_s(bob) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)) in phase 1.
Using the function dhexp the attacker may obtain dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g)) in phase 1.
attacker_p1(dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))).

36. By 14, the attacker may know hash(somename,empty) in phase 1.
By 11, the attacker may know key_psk(alice,bob) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
attacker_p1(hmac_hash1(hash(somename,empty),key_psk(alice,bob))).

37. By 36, the attacker may know hmac_hash1(hash(somename,empty),key_psk(alice,bob)) in phase 1.
By 8, the attacker may know validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g)))).

38. By 37, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))) in phase 1.
By 35, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g)) in phase 1.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))) in phase 1.
attacker_p1(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g)))).

39. By 38, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))) in phase 1.
By 34, the attacker may know dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)) in phase 1.
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
attacker_p1(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g)))).

40. By 39, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))) in phase 1.
By 29, the attacker may know minnonce in phase 1.
By 28, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))) in phase 1.
By 6, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(alice,bob)),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_e(alice,bob,sid_1044097343),g))),dhexp_real(key_s(bob),dhexp_real(key_s(alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343))).

41. By 40, the attacker may know aeadpack(true,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(alice),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(alice,bob))),validkey(dhexp_real(key_e(alice,bob,sid_1044097343),g))),msg_a(alice,bob,sid_1044097343)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob,sid_1044097343) in phase 1.
attacker_p1(msg_a(alice,bob,sid_1044097343)).


RESULT attacker_p1(msg_a(alice,bob,sid_a)) ==> (event(LeakS(phase0,bob)) && event(LeakPsk(phase0,alice,bob))) cannot be proved.
Starting query not event(RecvEnd(true))
goal reachable: begin(LeakPsk(phase0,charlie,bob)) -> end(RecvEnd(true))
Abbreviations:
sid_1044097410 = sid[!1 = @sid_1044097404]

1. The entry statestore(bob,charlie,sid_1044097410,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(charlie),g)),empty,key_psk(charlie,bob),false))) may be inserted in a table at insert {279}.
table(statestore(bob,charlie,sid_1044097410,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(charlie),g)),empty,key_psk(charlie,bob),false)))).

2. The attacker has some term plaintext_a_1044097403.
attacker(plaintext_a_1044097403).

3. Using the function zero the attacker may obtain zero.
attacker(zero).

4. Using the function pub the attacker may obtain pub.
attacker(pub).

5. The event LeakPsk(phase0,charlie,bob) may be executed at {338}.
So the message key_psk(charlie,bob) may be sent on channel pub at output {339}.
mess(pub,key_psk(charlie,bob)).

6. By 4, the attacker may have the channel pub.
By 5, the message key_psk(charlie,bob) may be sent on this channel.
So the attacker may obtain the message key_psk(charlie,bob) by listening on this channel.
attacker(key_psk(charlie,bob)).

7. Using the function empty the attacker may obtain empty.
attacker(empty).

8. Using the function somename the attacker may obtain somename.
attacker(somename).

9. By 8, the attacker may know somename.
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

10. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know key_psk(charlie,bob).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hash(somename,empty),key_psk(charlie,bob)).
attacker(hmac_hash2(hash(somename,empty),key_psk(charlie,bob))).

11. The message validkey(dhexp_real(key_s(bob),g)) may be sent on channel pub at output {178}.
mess(pub,validkey(dhexp_real(key_s(bob),g))).

12. By 4, the attacker may have the channel pub.
By 11, the message validkey(dhexp_real(key_s(bob),g)) may be sent on this channel.
So the attacker may obtain the message validkey(dhexp_real(key_s(bob),g)) by listening on this channel.
attacker(validkey(dhexp_real(key_s(bob),g))).

13. Using the function g the attacker may obtain g.
attacker(g).

14. The message key_s(charlie) may be sent on channel pub at output {1}.
mess(pub,key_s(charlie)).

15. By 4, the attacker may have the channel pub.
By 14, the message key_s(charlie) may be sent on this channel.
So the attacker may obtain the message key_s(charlie) by listening on this channel.
attacker(key_s(charlie)).

16. By 15, the attacker may know key_s(charlie).
By 13, the attacker may know g.
Using the function dhexp_real the attacker may obtain dhexp_real(key_s(charlie),g).
attacker(dhexp_real(key_s(charlie),g)).

17. By 16, the attacker may know dhexp_real(key_s(charlie),g).
Using the function validkey the attacker may obtain validkey(dhexp_real(key_s(charlie),g)).
attacker(validkey(dhexp_real(key_s(charlie),g))).

18. By 9, the attacker may know hash(somename,empty).
By 7, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

19. By 18, the attacker may know hash(hash(somename,empty),empty).
By 17, the attacker may know validkey(dhexp_real(key_s(charlie),g)).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))).
attacker(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g)))).

20. By 19, the attacker may know hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))).
By 12, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g)))).

21. By 20, the attacker may know hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))).
By 10, the attacker may know hmac_hash2(hash(somename,empty),key_psk(charlie,bob)).
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))).
attacker(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob)))).

22. By 21, the attacker may know hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))).
By 3, the attacker may know zero.
Using the function hash the attacker may obtain hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero).
attacker(hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero)).

23. Using the function minnonce the attacker may obtain minnonce.
attacker(minnonce).

24. By 15, the attacker may know key_s(charlie).
By 12, the attacker may know validkey(dhexp_real(key_s(bob),g)).
Using the function dhexp the attacker may obtain dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g)).
attacker(dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))).

25. By 9, the attacker may know hash(somename,empty).
By 6, the attacker may know key_psk(charlie,bob).
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hash(somename,empty),key_psk(charlie,bob)).
attacker(hmac_hash1(hash(somename,empty),key_psk(charlie,bob))).

26. By 25, the attacker may know hmac_hash1(hash(somename,empty),key_psk(charlie,bob)).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero).
attacker(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero)).

27. By 26, the attacker may know hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero).
By 3, the attacker may know zero.
Using the function hmac_hash1 the attacker may obtain hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero).
attacker(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero)).

28. By 27, the attacker may know hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero).
By 24, the attacker may know dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g)).
Using the function hmac_hash2 the attacker may obtain hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))).
attacker(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g)))).

29. By 28, the attacker may know hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))).
By 23, the attacker may know minnonce.
By 22, the attacker may know hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero).
By 2, the attacker may know plaintext_a_1044097403.
Using the function encrypt the attacker may obtain encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero),plaintext_a_1044097403).
attacker(encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero),plaintext_a_1044097403)).

30. The attacker has some term b_1044097397.
attacker(b_1044097397).

31. By 3, the attacker may know zero.
By 30, the attacker may know b_1044097397.
By 29, the attacker may know encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero),plaintext_a_1044097403).
Using the function concat3 the attacker may obtain concat3(zero,b_1044097397,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero),plaintext_a_1044097403)).
attacker(concat3(zero,b_1044097397,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero),plaintext_a_1044097403))).

32. By 4, the attacker may have the channel pub.
By 31, the attacker may have the message concat3(zero,b_1044097397,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero),plaintext_a_1044097403)).
So the attacker may send this message on this channel.
mess(pub,concat3(zero,b_1044097397,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero),plaintext_a_1044097403))).

33. The entry statestore(bob,charlie,sid_1044097410,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g)))),keypairpack(validkey(dhexp_real(key_s(bob),g)),key_s(bob)),keypairpack(empty,empty),validkey(dhexp_real(key_s(charlie),g)),empty,key_psk(charlie,bob),false))) that may be in a table by 1 may be read at get {337}.
The message concat3(zero,b_1044097397,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),key_psk(charlie,bob)),zero),zero),dhexp_real(key_s(charlie),dhexp_real(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),validkey(dhexp_real(key_s(charlie),g))),validkey(dhexp_real(key_s(bob),g))),hmac_hash2(hash(somename,empty),key_psk(charlie,bob))),zero),plaintext_a_1044097403)) that may be sent on channel pub by 32 may be received at input {280}.
So event RecvEnd(true) may be executed at {336}.
end(RecvEnd(true)).


RESULT not event(RecvEnd(true)) cannot be proved.
