File "IX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 274, character 7 - line 274, character 8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 275, character 7 - line 275, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 275, character 36 - line 275, character 36:
Warning: identifier h rebound.
File "IX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 314, character 6 - line 314, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 315, character 6 - line 315, character 7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 316, character 6 - line 316, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 318, character 6 - line 318, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 319, character 7 - line 319, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 319, character 26 - line 319, character 36:
Warning: identifier ciphertext1 rebound.
File "IX.noise.passive.pv", line 320, character 7 - line 320, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 320, character 26 - line 320, character 36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 321, character 6 - line 321, character 7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 328, character 6 - line 328, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 329, character 6 - line 329, character 7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 332, character 6 - line 332, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 334, character 6 - line 334, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 335, character 7 - line 335, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 335, character 26 - line 335, character 36:
Warning: identifier ciphertext1 rebound.
File "IX.noise.passive.pv", line 336, character 6 - line 336, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 337, character 7 - line 337, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 337, character 26 - line 337, character 36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 338, character 6 - line 338, character 7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 345, character 7 - line 345, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 345, character 26 - line 345, character 36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 346, character 6 - line 346, character 7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 353, character 7 - line 353, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 353, character 26 - line 353, character 36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 354, character 6 - line 354, character 7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 363, character 6 - line 363, character 7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 364, character 6 - line 364, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 366, character 7 - line 366, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 366, character 48 - line 366, character 53:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 367, character 6 - line 367, character 7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 368, character 7 - line 368, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 370, character 7 - line 370, character 8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 378, character 6 - line 378, character 7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 379, character 6 - line 379, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 381, character 6 - line 381, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 382, character 6 - line 382, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 383, character 7 - line 383, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 383, character 48 - line 383, character 53:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 384, character 6 - line 384, character 7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 385, character 6 - line 385, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 386, character 7 - line 386, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 388, character 7 - line 388, character 8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 396, character 7 - line 396, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 398, character 7 - line 398, character 8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 406, character 7 - line 406, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 408, character 7 - line 408, character 8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 554, character 8 - line 554, character 9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 406, character 7 - line 406, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 408, character 7 - line 408, character 8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 546, character 8 - line 546, character 9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 345, character 7 - line 345, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 345, character 26 - line 345, character 36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 346, character 6 - line 346, character 7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 539, character 8 - line 539, character 9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 378, character 6 - line 378, character 7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 379, character 6 - line 379, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 381, character 6 - line 381, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 382, character 6 - line 382, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 383, character 7 - line 383, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 383, character 48 - line 383, character 53:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 384, character 6 - line 384, character 7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 385, character 6 - line 385, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 386, character 7 - line 386, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 388, character 7 - line 388, character 8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 531, character 8 - line 531, character 9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 314, character 6 - line 314, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 315, character 6 - line 315, character 7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 316, character 6 - line 316, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 318, character 6 - line 318, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 319, character 7 - line 319, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 319, character 26 - line 319, character 36:
Warning: identifier ciphertext1 rebound.
File "IX.noise.passive.pv", line 320, character 7 - line 320, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 320, character 26 - line 320, character 36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 321, character 6 - line 321, character 7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 604, character 8 - line 604, character 9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 353, character 7 - line 353, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 353, character 26 - line 353, character 36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 354, character 6 - line 354, character 7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 597, character 8 - line 597, character 9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 396, character 7 - line 396, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 398, character 7 - line 398, character 8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 589, character 8 - line 589, character 9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 328, character 6 - line 328, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 329, character 6 - line 329, character 7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 330, character 6 - line 330, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 332, character 6 - line 332, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 333, character 6 - line 333, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 334, character 6 - line 334, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 335, character 7 - line 335, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 335, character 26 - line 335, character 36:
Warning: identifier ciphertext1 rebound.
File "IX.noise.passive.pv", line 336, character 6 - line 336, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 337, character 7 - line 337, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 337, character 26 - line 337, character 36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 338, character 6 - line 338, character 7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 265, character 7 - line 265, character 8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 284, character 7 - line 284, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 285, character 6 - line 285, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 582, character 8 - line 582, character 9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 363, character 6 - line 363, character 7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 364, character 6 - line 364, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 366, character 7 - line 366, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 366, character 48 - line 366, character 53:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 367, character 6 - line 367, character 7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 368, character 7 - line 368, character 8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 370, character 7 - line 370, character 8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 290, character 7 - line 290, character 8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 291, character 6 - line 291, character 7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}!
(
    {2}let s_589: keypair = keypairpack(empty,empty) in
    {3}out(pub, getpublickey(s_589));
    (
        {4}let e_590: keypair = keypairpack(empty,empty) in
        {5}let rs_591: key = empty in
        {6}let re_592: key = empty in
        {7}let v_593: bitstring = catch-fail(hash(somename,empty)) in
        {8}let v_594: key = catch-fail(v_593) in
        {9}let v_595: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {10}let v_596: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (if not-caught-fail(v_595) then symmetricstatepack(v_595,v_594,v_593) else fail-any) else fail-any) else fail-any))) in
        {11}let v_597: symmetricstate = catch-fail((if success?((if not-caught-fail(v_593) then (if not-caught-fail(v_594) then (if not-caught-fail(v_595) then symmetricstatepack(v_595,v_594,v_593) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_596) && success?(is-true(success?(1-proj-3-tuple(v_596))))) then symmetricstatepack(1-proj-3-tuple(v_596),2-proj-3-tuple(v_596),hash(3-proj-3-tuple(v_596),empty)) else fail-any) else fail-any)) in
        {12}let hs: handshakestate = (if not-caught-fail(v_597) then handshakestatepack(v_597,s_589,e_590,rs_591,re_592,empty,true) else fail-any) in
        {13}insert statestore(alice,bob,statepack_a(hs))
    ) | (
        {47}get statestore(=alice,=bob,statepack_a(hs_598: handshakestate)) in
        {14}let v_599: bitstring = catch-fail(handshakestateunpack(hs_598)) in
        {15}let v_600: bitstring = catch-fail((empty,empty,empty)) in
        {16}let v_601: key = catch-fail(dhexp(key_e(alice,bob),g)) in
        {17}let v_602: keypair = catch-fail((if not-caught-fail(v_601) then keypairpack(v_601,key_e(alice,bob)) else fail-any)) in
        {18}let v_603: bitstring = catch-fail(getpublickey(v_602)) in
        {19}let v_604: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_599))) in
        {20}let v_605: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_599)) then (if (not-caught-fail(v_604) && success?(is-true(success?(1-proj-3-tuple(v_604))))) then symmetricstatepack(1-proj-3-tuple(v_604),2-proj-3-tuple(v_604),hash(3-proj-3-tuple(v_604),v_603)) else fail-any) else fail-any)) in
        {21}let v_606: key = catch-fail(dhexp(key_s(alice),g)) in
        {22}let v_607: keypair = catch-fail((if not-caught-fail(v_606) then keypairpack(v_606,key_s(alice)) else fail-any)) in
        {23}let v_608: bitstring = catch-fail(symmetricstateunpack(v_605)) in
        {24}let v_609: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_608))) in
        {25}let v_610: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_609),2-proj-2-tuple(v_609),3-proj-3-tuple(v_608),getpublickey(v_607))) in
        {26}let v_611: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_608))) in
        {27}let v_612: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_609))) && success?(1-proj-3-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then cipherstatepack(1-proj-2-tuple(v_611),increment_nonce(2-proj-2-tuple(v_609))) else fail-any) else fail-any)) in
        {28}let v_613: bitstring = catch-fail((if (success?(getpublickey(v_607)) && (success?(3-proj-3-tuple(v_608)) && success?(1-proj-3-tuple(v_608)))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (v_612,v_610) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {29}let v_614: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_613),2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)))) in
        {30}let v_615: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_613)) && success?(symmetricstatepack(1-proj-2-tuple(v_613),2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then symmetricstatepack(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),hash(3-proj-3-tuple(v_614),2-proj-2-tuple(v_613))) else fail-any) else fail-any)) in
        {31}let v_616: bitstring = catch-fail((if success?(getpublickey(v_607)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if not-caught-fail(v_615) then (v_615,2-proj-2-tuple(v_613)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {32}let v_617: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_616))) in
        {33}let v_618: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {34}let v_619: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_618),2-proj-2-tuple(v_618),3-proj-3-tuple(v_617),msg_a(alice,bob))) in
        {35}let v_620: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_617))) in
        {36}let v_621: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_618))) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_620) && success?(is-true(success?(1-proj-2-tuple(v_620))))) then cipherstatepack(1-proj-2-tuple(v_620),increment_nonce(2-proj-2-tuple(v_618))) else fail-any) else fail-any)) in
        {37}let v_622: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_617)) && success?(1-proj-3-tuple(v_617))) then (if (not-caught-fail(v_618) && success?(is-true(success?(1-proj-2-tuple(v_618))))) then (if not-caught-fail(v_619) then (if not-caught-fail(v_621) then (v_621,v_619) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {38}let v_623: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) in
        {39}let v_624: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_622)) && success?(symmetricstatepack(1-proj-2-tuple(v_622),2-proj-3-tuple(v_617),3-proj-3-tuple(v_617)))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then symmetricstatepack(1-proj-3-tuple(v_623),2-proj-3-tuple(v_623),hash(3-proj-3-tuple(v_623),2-proj-2-tuple(v_622))) else fail-any) else fail-any)) in
        {40}let v_625: bitstring = catch-fail((if success?(1-proj-2-tuple(v_616)) then (if (not-caught-fail(v_617) && success?(is-true(success?(1-proj-3-tuple(v_617))))) then (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-2-tuple(v_622))))) then (if not-caught-fail(v_624) then (v_624,2-proj-2-tuple(v_622)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {41}let v_626: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_625),v_607,v_602,4-proj-7-tuple(v_599),5-proj-7-tuple(v_599),6-proj-7-tuple(v_599),7-proj-7-tuple(v_599))) in
        {42}let v_627: bitstring = catch-fail(concat3(v_603,2-proj-2-tuple(v_616),2-proj-2-tuple(v_625))) in
        {43}let (hs_628: handshakestate,re_629: key,message_a: bitstring) = (if (not-caught-fail(v_599) && success?(is-true(success?(1-proj-7-tuple(v_599))))) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if not-caught-fail(v_602) then (if not-caught-fail(v_603) then (if not-caught-fail(v_605) then (if not-caught-fail(v_607) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-2-tuple(v_625))))) then (if not-caught-fail(v_626) then (if not-caught-fail(v_627) then (v_626,5-proj-7-tuple(v_599),v_627) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {44}event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true);
        {45}insert statestore(alice,bob,statepack_b(hs_628));
        {46}out(pub, message_a)
    ) | (
        {102}get statestore(=alice,=bob,statepack_b(hs_630: handshakestate)) in
        {48}in(pub, message_b: bitstring);
        {49}let v_631: bitstring = catch-fail(handshakestateunpack(hs_630)) in
        {50}let v_632: bitstring = catch-fail(deconcat3(message_b)) in
        {51}let v_633: bool = catch-fail(true) in
        {52}let v_634: key = catch-fail(1-proj-3-tuple(v_632)) in
        {53}let v_635: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_631))) in
        {54}let v_636: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_631)) then (if (not-caught-fail(v_635) && success?(is-true(success?(1-proj-3-tuple(v_635))))) then symmetricstatepack(1-proj-3-tuple(v_635),2-proj-3-tuple(v_635),hash(3-proj-3-tuple(v_635),v_634)) else fail-any) else fail-any)) in
        {55}let v_637: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_631))) in
        {56}let v_638: bitstring = catch-fail(symmetricstateunpack(v_636)) in
        {57}let v_639: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_638),(if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-2-tuple(v_637))))) then dhexp(2-proj-2-tuple(v_637),v_634) else fail-any) else fail-any))) in
        {58}let v_640: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_638),(if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-2-tuple(v_637))))) then dhexp(2-proj-2-tuple(v_637),v_634) else fail-any) else fail-any))) in
        {59}let v_641: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_638),(if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-2-tuple(v_637))))) then dhexp(2-proj-2-tuple(v_637),v_634) else fail-any) else fail-any))) in
        {60}let v_642: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-2-tuple(v_637))))) then dhexp(2-proj-2-tuple(v_637),v_634) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_638))) then (if not-caught-fail(v_639) then (if not-caught-fail(v_640) then (if not-caught-fail(v_641) then (v_639,v_640,v_641) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {61}let v_643: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_637) && success?(is-true(success?(1-proj-2-tuple(v_637))))) then dhexp(2-proj-2-tuple(v_637),v_634) else fail-any) else fail-any)) then (if (not-caught-fail(v_638) && success?(is-true(success?(1-proj-3-tuple(v_638))))) then (if (not-caught-fail(v_642) && success?(is-true(success?(1-proj-3-tuple(v_642))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_642)) then cipherstatepack(2-proj-3-tuple(v_642),minnonce) else fail-any),1-proj-3-tuple(v_642),3-proj-3-tuple(v_638)) else fail-any) else fail-any) else fail-any)) in
        {62}let v_644: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_631))) in
        {63}let v_645: bitstring = catch-fail(symmetricstateunpack(v_643)) in
        {64}let v_646: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_645),(if success?(2-proj-7-tuple(v_631)) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then dhexp(2-proj-2-tuple(v_644),v_634) else fail-any) else fail-any))) in
        {65}let v_647: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_645),(if success?(2-proj-7-tuple(v_631)) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then dhexp(2-proj-2-tuple(v_644),v_634) else fail-any) else fail-any))) in
        {66}let v_648: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_645),(if success?(2-proj-7-tuple(v_631)) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then dhexp(2-proj-2-tuple(v_644),v_634) else fail-any) else fail-any))) in
        {67}let v_649: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_631)) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then dhexp(2-proj-2-tuple(v_644),v_634) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_645))) then (if not-caught-fail(v_646) then (if not-caught-fail(v_647) then (if not-caught-fail(v_648) then (v_646,v_647,v_648) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {68}let v_650: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_631)) then (if (not-caught-fail(v_644) && success?(is-true(success?(1-proj-2-tuple(v_644))))) then dhexp(2-proj-2-tuple(v_644),v_634) else fail-any) else fail-any)) then (if (not-caught-fail(v_645) && success?(is-true(success?(1-proj-3-tuple(v_645))))) then (if (not-caught-fail(v_649) && success?(is-true(success?(1-proj-3-tuple(v_649))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_649)) then cipherstatepack(2-proj-3-tuple(v_649),minnonce) else fail-any),1-proj-3-tuple(v_649),3-proj-3-tuple(v_645)) else fail-any) else fail-any) else fail-any)) in
        {69}let v_651: bitstring = catch-fail(symmetricstateunpack(v_650)) in
        {70}let v_652: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {71}let v_653: aead = catch-fail(decrypt(1-proj-2-tuple(v_652),2-proj-2-tuple(v_652),3-proj-3-tuple(v_651),2-proj-3-tuple(v_632))) in
        {72}let v_654: bitstring = catch-fail(aeadunpack(v_653)) in
        {73}let v_655: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_651))) in
        {74}let v_656: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_652))) && success?(1-proj-3-tuple(v_651))) then (if (not-caught-fail(v_655) && success?(is-true(success?(1-proj-2-tuple(v_655))))) then cipherstatepack(1-proj-2-tuple(v_655),increment_nonce(2-proj-2-tuple(v_652))) else fail-any) else fail-any)) in
        {75}let v_657: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_632)) && (success?(3-proj-3-tuple(v_651)) && success?(1-proj-3-tuple(v_651)))) then (if (not-caught-fail(v_652) && success?(is-true(success?(1-proj-2-tuple(v_652))))) then (if not-caught-fail(v_653) then (if (not-caught-fail(v_654) && success?(is-true(success?(1-proj-3-tuple(v_654))))) then (if not-caught-fail(v_656) then (v_656,3-proj-3-tuple(v_654),1-proj-3-tuple(v_654)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {76}let v_658: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) in
        {77}let v_659: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_632)) && success?(symmetricstatepack(1-proj-3-tuple(v_657),2-proj-3-tuple(v_651),3-proj-3-tuple(v_651)))) then (if (not-caught-fail(v_658) && success?(is-true(success?(1-proj-3-tuple(v_658))))) then symmetricstatepack(1-proj-3-tuple(v_658),2-proj-3-tuple(v_658),hash(3-proj-3-tuple(v_658),2-proj-3-tuple(v_632))) else fail-any) else fail-any)) in
        {78}let v_660: bitstring = catch-fail((if success?(2-proj-3-tuple(v_632)) then (if (not-caught-fail(v_651) && success?(is-true(success?(1-proj-3-tuple(v_651))))) then (if (not-caught-fail(v_657) && success?(is-true(success?(1-proj-3-tuple(v_657))))) then (if not-caught-fail(v_659) then (v_659,2-proj-3-tuple(v_657),3-proj-3-tuple(v_657)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {79}let v_661: key = catch-fail(2-proj-3-tuple(v_660)) in
        {80}let v_662: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_631))) in
        {81}let v_663: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_660))) in
        {82}let v_664: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_663),(if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_661) else fail-any) else fail-any))) in
        {83}let v_665: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_663),(if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_661) else fail-any) else fail-any))) in
        {84}let v_666: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_663),(if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_661) else fail-any) else fail-any))) in
        {85}let v_667: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_661) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_663))) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (if not-caught-fail(v_666) then (v_664,v_665,v_666) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {86}let v_668: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_631)) then (if (not-caught-fail(v_662) && success?(is-true(success?(1-proj-2-tuple(v_662))))) then dhexp(2-proj-2-tuple(v_662),v_661) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_660))) then (if (not-caught-fail(v_663) && success?(is-true(success?(1-proj-3-tuple(v_663))))) then (if (not-caught-fail(v_667) && success?(is-true(success?(1-proj-3-tuple(v_667))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_667)) then cipherstatepack(2-proj-3-tuple(v_667),minnonce) else fail-any),1-proj-3-tuple(v_667),3-proj-3-tuple(v_663)) else fail-any) else fail-any) else fail-any)) in
        {87}let v_669: bitstring = catch-fail(symmetricstateunpack(v_668)) in
        {88}let v_670: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {89}let v_671: aead = catch-fail(decrypt(1-proj-2-tuple(v_670),2-proj-2-tuple(v_670),3-proj-3-tuple(v_669),3-proj-3-tuple(v_632))) in
        {90}let v_672: bitstring = catch-fail(aeadunpack(v_671)) in
        {91}let v_673: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_669))) in
        {92}let v_674: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_670))) && success?(1-proj-3-tuple(v_669))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then cipherstatepack(1-proj-2-tuple(v_673),increment_nonce(2-proj-2-tuple(v_670))) else fail-any) else fail-any)) in
        {93}let v_675: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_632)) && (success?(3-proj-3-tuple(v_669)) && success?(1-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-2-tuple(v_670))))) then (if not-caught-fail(v_671) then (if (not-caught-fail(v_672) && success?(is-true(success?(1-proj-3-tuple(v_672))))) then (if not-caught-fail(v_674) then (v_674,3-proj-3-tuple(v_672),1-proj-3-tuple(v_672)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {94}let v_676: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) in
        {95}let v_677: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_632)) && success?(symmetricstatepack(1-proj-3-tuple(v_675),2-proj-3-tuple(v_669),3-proj-3-tuple(v_669)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_676),hash(3-proj-3-tuple(v_676),3-proj-3-tuple(v_632))) else fail-any) else fail-any)) in
        {96}let v_678: bitstring = catch-fail((if success?(3-proj-3-tuple(v_632)) then (if (not-caught-fail(v_669) && success?(is-true(success?(1-proj-3-tuple(v_669))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-3-tuple(v_675))))) then (if not-caught-fail(v_677) then (v_677,2-proj-3-tuple(v_675),3-proj-3-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {97}let v_679: key = catch-fail(dhexp(key_s(bob),g)) in
        {98}let v_680: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_678),2-proj-7-tuple(v_631),3-proj-7-tuple(v_631),v_661,v_634,6-proj-7-tuple(v_631),7-proj-7-tuple(v_631))) in
        {99}let (hs_681: handshakestate,re_682: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-7-tuple(v_631))))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then (if not-caught-fail(v_633) then (if not-caught-fail(v_634) then (if not-caught-fail(v_636) then (if not-caught-fail(v_643) then (if not-caught-fail(v_650) then (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-3-tuple(v_660))))) then (if not-caught-fail(v_661) then (if not-caught-fail(v_668) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-3-tuple(v_678))))) then (if ((3-proj-3-tuple(v_660) && 3-proj-3-tuple(v_678)) && (v_661 = getpublickey((if not-caught-fail(v_679) then keypairpack(v_679,key_s(bob)) else fail-any)))) then (if not-caught-fail(v_680) then (v_680,getpublickey(3-proj-7-tuple(v_631)),2-proj-3-tuple(v_678),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {100}event RecvMsg(alice,bob,stage_b,plaintext_b,valid);
        {101}insert statestore(alice,bob,statepack_c(hs_681))
    ) | (
        {120}get statestore(=alice,=bob,statepack_c(hs_683: handshakestate)) in
        {103}let v_684: bitstring = catch-fail(handshakestateunpack(hs_683)) in
        {104}let v_685: bitstring = catch-fail((empty,empty,empty)) in
        {105}let v_686: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_684))) in
        {106}let v_687: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_686))) in
        {107}let v_688: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_687),2-proj-2-tuple(v_687),3-proj-3-tuple(v_686),msg_c(alice,bob))) in
        {108}let v_689: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_686))) in
        {109}let v_690: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_687))) && success?(1-proj-3-tuple(v_686))) then (if (not-caught-fail(v_689) && success?(is-true(success?(1-proj-2-tuple(v_689))))) then cipherstatepack(1-proj-2-tuple(v_689),increment_nonce(2-proj-2-tuple(v_687))) else fail-any) else fail-any)) in
        {110}let v_691: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_686)) && success?(1-proj-3-tuple(v_686))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_690) then (v_690,v_688) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {111}let v_692: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_691),2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)))) in
        {112}let v_693: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_691)) && success?(symmetricstatepack(1-proj-2-tuple(v_691),2-proj-3-tuple(v_686),3-proj-3-tuple(v_686)))) then (if (not-caught-fail(v_692) && success?(is-true(success?(1-proj-3-tuple(v_692))))) then symmetricstatepack(1-proj-3-tuple(v_692),2-proj-3-tuple(v_692),hash(3-proj-3-tuple(v_692),2-proj-2-tuple(v_691))) else fail-any) else fail-any)) in
        {113}let v_694: bitstring = catch-fail((if success?(1-proj-7-tuple(v_684)) then (if (not-caught-fail(v_686) && success?(is-true(success?(1-proj-3-tuple(v_686))))) then (if (not-caught-fail(v_691) && success?(is-true(success?(1-proj-2-tuple(v_691))))) then (if not-caught-fail(v_693) then (v_693,2-proj-2-tuple(v_691)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {114}let v_695: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_694),2-proj-7-tuple(v_684),3-proj-7-tuple(v_684),4-proj-7-tuple(v_684),5-proj-7-tuple(v_684),6-proj-7-tuple(v_684),7-proj-7-tuple(v_684))) in
        {115}let v_696: bitstring = catch-fail(concat3(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),2-proj-2-tuple(v_694))) in
        {116}let (hs_697: handshakestate,re_698: key,message_c: bitstring) = (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-7-tuple(v_684))))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then (if (not-caught-fail(v_694) && success?(is-true(success?(1-proj-2-tuple(v_694))))) then (if not-caught-fail(v_695) then (if not-caught-fail(v_696) then (v_695,5-proj-7-tuple(v_684),v_696) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {117}event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true);
        {118}insert statestore(alice,bob,statepack_d(hs_697));
        {119}out(pub, message_c)
    ) | (
        {148}get statestore(=alice,=bob,statepack_d(hs_699: handshakestate)) in
        {121}in(pub, message_d: bitstring);
        {122}let v_700: bitstring = catch-fail(handshakestateunpack(hs_699)) in
        {123}let v_701: bitstring = catch-fail(deconcat3(message_d)) in
        {124}let v_702: bool = catch-fail(true) in
        {125}let v_703: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_700))) in
        {126}let v_704: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {127}let v_705: aead = catch-fail(decrypt(1-proj-2-tuple(v_704),2-proj-2-tuple(v_704),3-proj-3-tuple(v_703),3-proj-3-tuple(v_701))) in
        {128}let v_706: bitstring = catch-fail(aeadunpack(v_705)) in
        {129}let v_707: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_703))) in
        {130}let v_708: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_704))) && success?(1-proj-3-tuple(v_703))) then (if (not-caught-fail(v_707) && success?(is-true(success?(1-proj-2-tuple(v_707))))) then cipherstatepack(1-proj-2-tuple(v_707),increment_nonce(2-proj-2-tuple(v_704))) else fail-any) else fail-any)) in
        {131}let v_709: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_701)) && (success?(3-proj-3-tuple(v_703)) && success?(1-proj-3-tuple(v_703)))) then (if (not-caught-fail(v_704) && success?(is-true(success?(1-proj-2-tuple(v_704))))) then (if not-caught-fail(v_705) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then (if not-caught-fail(v_708) then (v_708,3-proj-3-tuple(v_706),1-proj-3-tuple(v_706)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {132}let v_710: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) in
        {133}let v_711: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_701)) && success?(symmetricstatepack(1-proj-3-tuple(v_709),2-proj-3-tuple(v_703),3-proj-3-tuple(v_703)))) then (if (not-caught-fail(v_710) && success?(is-true(success?(1-proj-3-tuple(v_710))))) then symmetricstatepack(1-proj-3-tuple(v_710),2-proj-3-tuple(v_710),hash(3-proj-3-tuple(v_710),3-proj-3-tuple(v_701))) else fail-any) else fail-any)) in
        {134}let v_712: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_701)) && success?(1-proj-7-tuple(v_700))) then (if (not-caught-fail(v_703) && success?(is-true(success?(1-proj-3-tuple(v_703))))) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if not-caught-fail(v_711) then (v_711,2-proj-3-tuple(v_709),3-proj-3-tuple(v_709)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {135}let v_713: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_712),2-proj-7-tuple(v_700),3-proj-7-tuple(v_700),4-proj-7-tuple(v_700),5-proj-7-tuple(v_700),6-proj-7-tuple(v_700),7-proj-7-tuple(v_700))) in
        {136}let v_714: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_712))) in
        {137}let v_715: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_714),zero)) in
        {138}let v_716: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_714),zero)) in
        {139}let v_717: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_714),zero)) in
        {140}let v_718: bitstring = catch-fail((if success?(2-proj-3-tuple(v_714)) then (if not-caught-fail(v_715) then (if not-caught-fail(v_716) then (if not-caught-fail(v_717) then (v_715,v_716,v_717) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {141}let v_719: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_718)) then cipherstatepack(1-proj-3-tuple(v_718),minnonce) else fail-any)) in
        {142}let v_720: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_718)) then cipherstatepack(2-proj-3-tuple(v_718),minnonce) else fail-any)) in
        {143}let v_721: bitstring = catch-fail((if success?(1-proj-3-tuple(v_712)) then (if (not-caught-fail(v_714) && success?(is-true(success?(1-proj-3-tuple(v_714))))) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if not-caught-fail(v_719) then (if not-caught-fail(v_720) then (1-proj-3-tuple(v_712),v_719,v_720) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {144}let (hs_722: handshakestate,re_723: key,plaintext_d: bitstring,valid_724: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_700) && success?(is-true(success?(1-proj-7-tuple(v_700))))) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-3-tuple(v_701))))) then (if not-caught-fail(v_702) then (if (not-caught-fail(v_712) && success?(is-true(success?(1-proj-3-tuple(v_712))))) then (if (v_702 && 3-proj-3-tuple(v_712)) then (if not-caught-fail(v_713) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (v_713,getpublickey(3-proj-7-tuple(v_700)),2-proj-3-tuple(v_712),true,2-proj-3-tuple(v_721),3-proj-3-tuple(v_721)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {145}event RecvMsg(alice,bob,stage_d,plaintext_d,valid_724);
        {146}insert statestore(alice,bob,statepack_e(hs_722));
        {147}event RecvEnd(valid_724)
    ) | (
        {149}event LeakS(phase0,alice);
        {150}out(pub, key_s(alice))
    ) | (
        {151}phase 1;
        {152}event LeakS(phase1,alice);
        {153}out(pub, key_s(alice))
    )
) | (
    {154}let s_725: keypair = keypairpack(empty,empty) in
    {155}out(pub, getpublickey(s_725));
    (
        {156}let e_726: keypair = keypairpack(empty,empty) in
        {157}let rs_727: key = empty in
        {158}let re_728: key = empty in
        {159}let v_729: bitstring = catch-fail(hash(somename,empty)) in
        {160}let v_730: key = catch-fail(v_729) in
        {161}let v_731: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {162}let v_732: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_729) then (if not-caught-fail(v_730) then (if not-caught-fail(v_731) then symmetricstatepack(v_731,v_730,v_729) else fail-any) else fail-any) else fail-any))) in
        {163}let v_733: symmetricstate = catch-fail((if success?((if not-caught-fail(v_729) then (if not-caught-fail(v_730) then (if not-caught-fail(v_731) then symmetricstatepack(v_731,v_730,v_729) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_732) && success?(is-true(success?(1-proj-3-tuple(v_732))))) then symmetricstatepack(1-proj-3-tuple(v_732),2-proj-3-tuple(v_732),hash(3-proj-3-tuple(v_732),empty)) else fail-any) else fail-any)) in
        {164}let hs_734: handshakestate = (if not-caught-fail(v_733) then handshakestatepack(v_733,s_725,e_726,rs_727,re_728,empty,true) else fail-any) in
        {165}insert statestore(alice,charlie,statepack_a(hs_734))
    ) | (
        {199}get statestore(=alice,=charlie,statepack_a(hs_735: handshakestate)) in
        {166}let v_736: bitstring = catch-fail(handshakestateunpack(hs_735)) in
        {167}let v_737: bitstring = catch-fail((empty,empty,empty)) in
        {168}let v_738: key = catch-fail(dhexp(key_e(alice,charlie),g)) in
        {169}let v_739: keypair = catch-fail((if not-caught-fail(v_738) then keypairpack(v_738,key_e(alice,charlie)) else fail-any)) in
        {170}let v_740: bitstring = catch-fail(getpublickey(v_739)) in
        {171}let v_741: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_736))) in
        {172}let v_742: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_736)) then (if (not-caught-fail(v_741) && success?(is-true(success?(1-proj-3-tuple(v_741))))) then symmetricstatepack(1-proj-3-tuple(v_741),2-proj-3-tuple(v_741),hash(3-proj-3-tuple(v_741),v_740)) else fail-any) else fail-any)) in
        {173}let v_743: key = catch-fail(dhexp(key_s(alice),g)) in
        {174}let v_744: keypair = catch-fail((if not-caught-fail(v_743) then keypairpack(v_743,key_s(alice)) else fail-any)) in
        {175}let v_745: bitstring = catch-fail(symmetricstateunpack(v_742)) in
        {176}let v_746: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_745))) in
        {177}let v_747: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_746),2-proj-2-tuple(v_746),3-proj-3-tuple(v_745),getpublickey(v_744))) in
        {178}let v_748: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_745))) in
        {179}let v_749: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_746))) && success?(1-proj-3-tuple(v_745))) then (if (not-caught-fail(v_748) && success?(is-true(success?(1-proj-2-tuple(v_748))))) then cipherstatepack(1-proj-2-tuple(v_748),increment_nonce(2-proj-2-tuple(v_746))) else fail-any) else fail-any)) in
        {180}let v_750: bitstring = catch-fail((if (success?(getpublickey(v_744)) && (success?(3-proj-3-tuple(v_745)) && success?(1-proj-3-tuple(v_745)))) then (if (not-caught-fail(v_746) && success?(is-true(success?(1-proj-2-tuple(v_746))))) then (if not-caught-fail(v_747) then (if not-caught-fail(v_749) then (v_749,v_747) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {181}let v_751: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_750),2-proj-3-tuple(v_745),3-proj-3-tuple(v_745)))) in
        {182}let v_752: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_750)) && success?(symmetricstatepack(1-proj-2-tuple(v_750),2-proj-3-tuple(v_745),3-proj-3-tuple(v_745)))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then symmetricstatepack(1-proj-3-tuple(v_751),2-proj-3-tuple(v_751),hash(3-proj-3-tuple(v_751),2-proj-2-tuple(v_750))) else fail-any) else fail-any)) in
        {183}let v_753: bitstring = catch-fail((if success?(getpublickey(v_744)) then (if (not-caught-fail(v_745) && success?(is-true(success?(1-proj-3-tuple(v_745))))) then (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-2-tuple(v_750))))) then (if not-caught-fail(v_752) then (v_752,2-proj-2-tuple(v_750)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {184}let v_754: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_753))) in
        {185}let v_755: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_754))) in
        {186}let v_756: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_755),2-proj-2-tuple(v_755),3-proj-3-tuple(v_754),msg_a(alice,charlie))) in
        {187}let v_757: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_754))) in
        {188}let v_758: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_755))) && success?(1-proj-3-tuple(v_754))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then cipherstatepack(1-proj-2-tuple(v_757),increment_nonce(2-proj-2-tuple(v_755))) else fail-any) else fail-any)) in
        {189}let v_759: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_754)) && success?(1-proj-3-tuple(v_754))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then (if not-caught-fail(v_756) then (if not-caught-fail(v_758) then (v_758,v_756) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {190}let v_760: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_759),2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)))) in
        {191}let v_761: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_759)) && success?(symmetricstatepack(1-proj-2-tuple(v_759),2-proj-3-tuple(v_754),3-proj-3-tuple(v_754)))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-3-tuple(v_760))))) then symmetricstatepack(1-proj-3-tuple(v_760),2-proj-3-tuple(v_760),hash(3-proj-3-tuple(v_760),2-proj-2-tuple(v_759))) else fail-any) else fail-any)) in
        {192}let v_762: bitstring = catch-fail((if success?(1-proj-2-tuple(v_753)) then (if (not-caught-fail(v_754) && success?(is-true(success?(1-proj-3-tuple(v_754))))) then (if (not-caught-fail(v_759) && success?(is-true(success?(1-proj-2-tuple(v_759))))) then (if not-caught-fail(v_761) then (v_761,2-proj-2-tuple(v_759)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {193}let v_763: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_762),v_744,v_739,4-proj-7-tuple(v_736),5-proj-7-tuple(v_736),6-proj-7-tuple(v_736),7-proj-7-tuple(v_736))) in
        {194}let v_764: bitstring = catch-fail(concat3(v_740,2-proj-2-tuple(v_753),2-proj-2-tuple(v_762))) in
        {195}let (hs_765: handshakestate,re_766: key,message_a_767: bitstring) = (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-7-tuple(v_736))))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-3-tuple(v_737))))) then (if not-caught-fail(v_739) then (if not-caught-fail(v_740) then (if not-caught-fail(v_742) then (if not-caught-fail(v_744) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if (not-caught-fail(v_762) && success?(is-true(success?(1-proj-2-tuple(v_762))))) then (if not-caught-fail(v_763) then (if not-caught-fail(v_764) then (v_763,5-proj-7-tuple(v_736),v_764) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {196}event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true);
        {197}insert statestore(alice,charlie,statepack_b(hs_765));
        {198}out(pub, message_a_767)
    ) | (
        {254}get statestore(=alice,=charlie,statepack_b(hs_768: handshakestate)) in
        {200}in(pub, message_b_769: bitstring);
        {201}let v_770: bitstring = catch-fail(handshakestateunpack(hs_768)) in
        {202}let v_771: bitstring = catch-fail(deconcat3(message_b_769)) in
        {203}let v_772: bool = catch-fail(true) in
        {204}let v_773: key = catch-fail(1-proj-3-tuple(v_771)) in
        {205}let v_774: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_770))) in
        {206}let v_775: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_770)) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then symmetricstatepack(1-proj-3-tuple(v_774),2-proj-3-tuple(v_774),hash(3-proj-3-tuple(v_774),v_773)) else fail-any) else fail-any)) in
        {207}let v_776: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_770))) in
        {208}let v_777: bitstring = catch-fail(symmetricstateunpack(v_775)) in
        {209}let v_778: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_777),(if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then dhexp(2-proj-2-tuple(v_776),v_773) else fail-any) else fail-any))) in
        {210}let v_779: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_777),(if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then dhexp(2-proj-2-tuple(v_776),v_773) else fail-any) else fail-any))) in
        {211}let v_780: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_777),(if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then dhexp(2-proj-2-tuple(v_776),v_773) else fail-any) else fail-any))) in
        {212}let v_781: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then dhexp(2-proj-2-tuple(v_776),v_773) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_777))) then (if not-caught-fail(v_778) then (if not-caught-fail(v_779) then (if not-caught-fail(v_780) then (v_778,v_779,v_780) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {213}let v_782: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_776) && success?(is-true(success?(1-proj-2-tuple(v_776))))) then dhexp(2-proj-2-tuple(v_776),v_773) else fail-any) else fail-any)) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then (if (not-caught-fail(v_781) && success?(is-true(success?(1-proj-3-tuple(v_781))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_781)) then cipherstatepack(2-proj-3-tuple(v_781),minnonce) else fail-any),1-proj-3-tuple(v_781),3-proj-3-tuple(v_777)) else fail-any) else fail-any) else fail-any)) in
        {214}let v_783: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_770))) in
        {215}let v_784: bitstring = catch-fail(symmetricstateunpack(v_782)) in
        {216}let v_785: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_784),(if success?(2-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),v_773) else fail-any) else fail-any))) in
        {217}let v_786: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_784),(if success?(2-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),v_773) else fail-any) else fail-any))) in
        {218}let v_787: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_784),(if success?(2-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),v_773) else fail-any) else fail-any))) in
        {219}let v_788: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),v_773) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_784))) then (if not-caught-fail(v_785) then (if not-caught-fail(v_786) then (if not-caught-fail(v_787) then (v_785,v_786,v_787) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {220}let v_789: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_770)) then (if (not-caught-fail(v_783) && success?(is-true(success?(1-proj-2-tuple(v_783))))) then dhexp(2-proj-2-tuple(v_783),v_773) else fail-any) else fail-any)) then (if (not-caught-fail(v_784) && success?(is-true(success?(1-proj-3-tuple(v_784))))) then (if (not-caught-fail(v_788) && success?(is-true(success?(1-proj-3-tuple(v_788))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_788)) then cipherstatepack(2-proj-3-tuple(v_788),minnonce) else fail-any),1-proj-3-tuple(v_788),3-proj-3-tuple(v_784)) else fail-any) else fail-any) else fail-any)) in
        {221}let v_790: bitstring = catch-fail(symmetricstateunpack(v_789)) in
        {222}let v_791: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_790))) in
        {223}let v_792: aead = catch-fail(decrypt(1-proj-2-tuple(v_791),2-proj-2-tuple(v_791),3-proj-3-tuple(v_790),2-proj-3-tuple(v_771))) in
        {224}let v_793: bitstring = catch-fail(aeadunpack(v_792)) in
        {225}let v_794: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_790))) in
        {226}let v_795: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_791))) && success?(1-proj-3-tuple(v_790))) then (if (not-caught-fail(v_794) && success?(is-true(success?(1-proj-2-tuple(v_794))))) then cipherstatepack(1-proj-2-tuple(v_794),increment_nonce(2-proj-2-tuple(v_791))) else fail-any) else fail-any)) in
        {227}let v_796: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_771)) && (success?(3-proj-3-tuple(v_790)) && success?(1-proj-3-tuple(v_790)))) then (if (not-caught-fail(v_791) && success?(is-true(success?(1-proj-2-tuple(v_791))))) then (if not-caught-fail(v_792) then (if (not-caught-fail(v_793) && success?(is-true(success?(1-proj-3-tuple(v_793))))) then (if not-caught-fail(v_795) then (v_795,3-proj-3-tuple(v_793),1-proj-3-tuple(v_793)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {228}let v_797: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_796),2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)))) in
        {229}let v_798: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_771)) && success?(symmetricstatepack(1-proj-3-tuple(v_796),2-proj-3-tuple(v_790),3-proj-3-tuple(v_790)))) then (if (not-caught-fail(v_797) && success?(is-true(success?(1-proj-3-tuple(v_797))))) then symmetricstatepack(1-proj-3-tuple(v_797),2-proj-3-tuple(v_797),hash(3-proj-3-tuple(v_797),2-proj-3-tuple(v_771))) else fail-any) else fail-any)) in
        {230}let v_799: bitstring = catch-fail((if success?(2-proj-3-tuple(v_771)) then (if (not-caught-fail(v_790) && success?(is-true(success?(1-proj-3-tuple(v_790))))) then (if (not-caught-fail(v_796) && success?(is-true(success?(1-proj-3-tuple(v_796))))) then (if not-caught-fail(v_798) then (v_798,2-proj-3-tuple(v_796),3-proj-3-tuple(v_796)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {231}let v_800: key = catch-fail(2-proj-3-tuple(v_799)) in
        {232}let v_801: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_770))) in
        {233}let v_802: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_799))) in
        {234}let v_803: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_802),(if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),v_800) else fail-any) else fail-any))) in
        {235}let v_804: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_802),(if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),v_800) else fail-any) else fail-any))) in
        {236}let v_805: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_802),(if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),v_800) else fail-any) else fail-any))) in
        {237}let v_806: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),v_800) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_802))) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then (if not-caught-fail(v_805) then (v_803,v_804,v_805) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let v_807: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_770)) then (if (not-caught-fail(v_801) && success?(is-true(success?(1-proj-2-tuple(v_801))))) then dhexp(2-proj-2-tuple(v_801),v_800) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_799))) then (if (not-caught-fail(v_802) && success?(is-true(success?(1-proj-3-tuple(v_802))))) then (if (not-caught-fail(v_806) && success?(is-true(success?(1-proj-3-tuple(v_806))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_806)) then cipherstatepack(2-proj-3-tuple(v_806),minnonce) else fail-any),1-proj-3-tuple(v_806),3-proj-3-tuple(v_802)) else fail-any) else fail-any) else fail-any)) in
        {239}let v_808: bitstring = catch-fail(symmetricstateunpack(v_807)) in
        {240}let v_809: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {241}let v_810: aead = catch-fail(decrypt(1-proj-2-tuple(v_809),2-proj-2-tuple(v_809),3-proj-3-tuple(v_808),3-proj-3-tuple(v_771))) in
        {242}let v_811: bitstring = catch-fail(aeadunpack(v_810)) in
        {243}let v_812: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_808))) in
        {244}let v_813: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_809))) && success?(1-proj-3-tuple(v_808))) then (if (not-caught-fail(v_812) && success?(is-true(success?(1-proj-2-tuple(v_812))))) then cipherstatepack(1-proj-2-tuple(v_812),increment_nonce(2-proj-2-tuple(v_809))) else fail-any) else fail-any)) in
        {245}let v_814: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_771)) && (success?(3-proj-3-tuple(v_808)) && success?(1-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_809) && success?(is-true(success?(1-proj-2-tuple(v_809))))) then (if not-caught-fail(v_810) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_813) then (v_813,3-proj-3-tuple(v_811),1-proj-3-tuple(v_811)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {246}let v_815: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) in
        {247}let v_816: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_771)) && success?(symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_808),3-proj-3-tuple(v_808)))) then (if (not-caught-fail(v_815) && success?(is-true(success?(1-proj-3-tuple(v_815))))) then symmetricstatepack(1-proj-3-tuple(v_815),2-proj-3-tuple(v_815),hash(3-proj-3-tuple(v_815),3-proj-3-tuple(v_771))) else fail-any) else fail-any)) in
        {248}let v_817: bitstring = catch-fail((if success?(3-proj-3-tuple(v_771)) then (if (not-caught-fail(v_808) && success?(is-true(success?(1-proj-3-tuple(v_808))))) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then (if not-caught-fail(v_816) then (v_816,2-proj-3-tuple(v_814),3-proj-3-tuple(v_814)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {249}let v_818: key = catch-fail(dhexp(key_s(charlie),g)) in
        {250}let v_819: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_817),2-proj-7-tuple(v_770),3-proj-7-tuple(v_770),v_800,v_773,6-proj-7-tuple(v_770),7-proj-7-tuple(v_770))) in
        {251}let (hs_820: handshakestate,re_821: key,plaintext_b_822: bitstring,valid_823: bool) = (if (not-caught-fail(v_770) && success?(is-true(success?(1-proj-7-tuple(v_770))))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if not-caught-fail(v_772) then (if not-caught-fail(v_773) then (if not-caught-fail(v_775) then (if not-caught-fail(v_782) then (if not-caught-fail(v_789) then (if (not-caught-fail(v_799) && success?(is-true(success?(1-proj-3-tuple(v_799))))) then (if not-caught-fail(v_800) then (if not-caught-fail(v_807) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-3-tuple(v_817))))) then (if ((3-proj-3-tuple(v_799) && 3-proj-3-tuple(v_817)) && (v_800 = getpublickey((if not-caught-fail(v_818) then keypairpack(v_818,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_819) then (v_819,getpublickey(3-proj-7-tuple(v_770)),2-proj-3-tuple(v_817),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {252}event RecvMsg(alice,charlie,stage_b,plaintext_b_822,valid_823);
        {253}insert statestore(alice,charlie,statepack_c(hs_820))
    ) | (
        {272}get statestore(=alice,=charlie,statepack_c(hs_824: handshakestate)) in
        {255}let v_825: bitstring = catch-fail(handshakestateunpack(hs_824)) in
        {256}let v_826: bitstring = catch-fail((empty,empty,empty)) in
        {257}let v_827: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_825))) in
        {258}let v_828: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_827))) in
        {259}let v_829: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_828),2-proj-2-tuple(v_828),3-proj-3-tuple(v_827),msg_c(alice,charlie))) in
        {260}let v_830: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_827))) in
        {261}let v_831: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_828))) && success?(1-proj-3-tuple(v_827))) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-2-tuple(v_830))))) then cipherstatepack(1-proj-2-tuple(v_830),increment_nonce(2-proj-2-tuple(v_828))) else fail-any) else fail-any)) in
        {262}let v_832: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_827)) && success?(1-proj-3-tuple(v_827))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-2-tuple(v_828))))) then (if not-caught-fail(v_829) then (if not-caught-fail(v_831) then (v_831,v_829) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {263}let v_833: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_832),2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)))) in
        {264}let v_834: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_832)) && success?(symmetricstatepack(1-proj-2-tuple(v_832),2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then symmetricstatepack(1-proj-3-tuple(v_833),2-proj-3-tuple(v_833),hash(3-proj-3-tuple(v_833),2-proj-2-tuple(v_832))) else fail-any) else fail-any)) in
        {265}let v_835: bitstring = catch-fail((if success?(1-proj-7-tuple(v_825)) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if (not-caught-fail(v_832) && success?(is-true(success?(1-proj-2-tuple(v_832))))) then (if not-caught-fail(v_834) then (v_834,2-proj-2-tuple(v_832)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {266}let v_836: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_835),2-proj-7-tuple(v_825),3-proj-7-tuple(v_825),4-proj-7-tuple(v_825),5-proj-7-tuple(v_825),6-proj-7-tuple(v_825),7-proj-7-tuple(v_825))) in
        {267}let v_837: bitstring = catch-fail(concat3(1-proj-3-tuple(v_826),2-proj-3-tuple(v_826),2-proj-2-tuple(v_835))) in
        {268}let (hs_838: handshakestate,re_839: key,message_c_840: bitstring) = (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-7-tuple(v_825))))) then (if (not-caught-fail(v_826) && success?(is-true(success?(1-proj-3-tuple(v_826))))) then (if (not-caught-fail(v_835) && success?(is-true(success?(1-proj-2-tuple(v_835))))) then (if not-caught-fail(v_836) then (if not-caught-fail(v_837) then (v_836,5-proj-7-tuple(v_825),v_837) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {269}event SendMsg(alice,charlie,stage_c,msg_c(alice,charlie),true);
        {270}insert statestore(alice,charlie,statepack_d(hs_838));
        {271}out(pub, message_c_840)
    ) | (
        {300}get statestore(=alice,=charlie,statepack_d(hs_841: handshakestate)) in
        {273}in(pub, message_d_842: bitstring);
        {274}let v_843: bitstring = catch-fail(handshakestateunpack(hs_841)) in
        {275}let v_844: bitstring = catch-fail(deconcat3(message_d_842)) in
        {276}let v_845: bool = catch-fail(true) in
        {277}let v_846: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_843))) in
        {278}let v_847: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_846))) in
        {279}let v_848: aead = catch-fail(decrypt(1-proj-2-tuple(v_847),2-proj-2-tuple(v_847),3-proj-3-tuple(v_846),3-proj-3-tuple(v_844))) in
        {280}let v_849: bitstring = catch-fail(aeadunpack(v_848)) in
        {281}let v_850: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_846))) in
        {282}let v_851: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_847))) && success?(1-proj-3-tuple(v_846))) then (if (not-caught-fail(v_850) && success?(is-true(success?(1-proj-2-tuple(v_850))))) then cipherstatepack(1-proj-2-tuple(v_850),increment_nonce(2-proj-2-tuple(v_847))) else fail-any) else fail-any)) in
        {283}let v_852: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_844)) && (success?(3-proj-3-tuple(v_846)) && success?(1-proj-3-tuple(v_846)))) then (if (not-caught-fail(v_847) && success?(is-true(success?(1-proj-2-tuple(v_847))))) then (if not-caught-fail(v_848) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then (if not-caught-fail(v_851) then (v_851,3-proj-3-tuple(v_849),1-proj-3-tuple(v_849)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {284}let v_853: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_852),2-proj-3-tuple(v_846),3-proj-3-tuple(v_846)))) in
        {285}let v_854: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_844)) && success?(symmetricstatepack(1-proj-3-tuple(v_852),2-proj-3-tuple(v_846),3-proj-3-tuple(v_846)))) then (if (not-caught-fail(v_853) && success?(is-true(success?(1-proj-3-tuple(v_853))))) then symmetricstatepack(1-proj-3-tuple(v_853),2-proj-3-tuple(v_853),hash(3-proj-3-tuple(v_853),3-proj-3-tuple(v_844))) else fail-any) else fail-any)) in
        {286}let v_855: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_844)) && success?(1-proj-7-tuple(v_843))) then (if (not-caught-fail(v_846) && success?(is-true(success?(1-proj-3-tuple(v_846))))) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if not-caught-fail(v_854) then (v_854,2-proj-3-tuple(v_852),3-proj-3-tuple(v_852)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {287}let v_856: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_855),2-proj-7-tuple(v_843),3-proj-7-tuple(v_843),4-proj-7-tuple(v_843),5-proj-7-tuple(v_843),6-proj-7-tuple(v_843),7-proj-7-tuple(v_843))) in
        {288}let v_857: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_855))) in
        {289}let v_858: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_857),zero)) in
        {290}let v_859: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_857),zero)) in
        {291}let v_860: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_857),zero)) in
        {292}let v_861: bitstring = catch-fail((if success?(2-proj-3-tuple(v_857)) then (if not-caught-fail(v_858) then (if not-caught-fail(v_859) then (if not-caught-fail(v_860) then (v_858,v_859,v_860) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {293}let v_862: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_861)) then cipherstatepack(1-proj-3-tuple(v_861),minnonce) else fail-any)) in
        {294}let v_863: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_861)) then cipherstatepack(2-proj-3-tuple(v_861),minnonce) else fail-any)) in
        {295}let v_864: bitstring = catch-fail((if success?(1-proj-3-tuple(v_855)) then (if (not-caught-fail(v_857) && success?(is-true(success?(1-proj-3-tuple(v_857))))) then (if (not-caught-fail(v_861) && success?(is-true(success?(1-proj-3-tuple(v_861))))) then (if not-caught-fail(v_862) then (if not-caught-fail(v_863) then (1-proj-3-tuple(v_855),v_862,v_863) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {296}let (hs_865: handshakestate,re_866: key,plaintext_d_867: bitstring,valid_868: bool,cs1_869: cipherstate,cs2_870: cipherstate) = (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-7-tuple(v_843))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then (if not-caught-fail(v_845) then (if (not-caught-fail(v_855) && success?(is-true(success?(1-proj-3-tuple(v_855))))) then (if (v_845 && 3-proj-3-tuple(v_855)) then (if not-caught-fail(v_856) then (if (not-caught-fail(v_864) && success?(is-true(success?(1-proj-3-tuple(v_864))))) then (v_856,getpublickey(3-proj-7-tuple(v_843)),2-proj-3-tuple(v_855),true,2-proj-3-tuple(v_864),3-proj-3-tuple(v_864)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {297}event RecvMsg(alice,charlie,stage_d,plaintext_d_867,valid_868);
        {298}insert statestore(alice,charlie,statepack_e(hs_865));
        {299}event RecvEnd(valid_868)
    ) | (
        {301}event LeakS(phase0,alice);
        {302}out(pub, key_s(alice))
    ) | (
        {303}phase 1;
        {304}event LeakS(phase1,alice);
        {305}out(pub, key_s(alice))
    )
) | (
    {306}let s_871: keypair = keypairpack(empty,empty) in
    {307}out(pub, getpublickey(s_871));
    (
        {308}let e_872: keypair = keypairpack(empty,empty) in
        {309}let rs_873: key = empty in
        {310}let re_874: key = empty in
        {311}let v_875: bitstring = catch-fail(hash(somename,empty)) in
        {312}let v_876: key = catch-fail(v_875) in
        {313}let v_877: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {314}let v_878: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then symmetricstatepack(v_877,v_876,v_875) else fail-any) else fail-any) else fail-any))) in
        {315}let v_879: symmetricstate = catch-fail((if success?((if not-caught-fail(v_875) then (if not-caught-fail(v_876) then (if not-caught-fail(v_877) then symmetricstatepack(v_877,v_876,v_875) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_878) && success?(is-true(success?(1-proj-3-tuple(v_878))))) then symmetricstatepack(1-proj-3-tuple(v_878),2-proj-3-tuple(v_878),hash(3-proj-3-tuple(v_878),empty)) else fail-any) else fail-any)) in
        {316}let hs_880: handshakestate = (if not-caught-fail(v_879) then handshakestatepack(v_879,s_871,e_872,rs_873,re_874,empty,false) else fail-any) in
        {317}insert statestore(bob,alice,statepack_a(hs_880))
    ) | (
        {351}get statestore(=bob,=alice,statepack_a(hs_881: handshakestate)) in
        {318}in(pub, message_a_882: bitstring);
        {319}let v_883: bitstring = catch-fail(handshakestateunpack(hs_881)) in
        {320}let v_884: bitstring = catch-fail(deconcat3(message_a_882)) in
        {321}let v_885: bool = catch-fail(true) in
        {322}let v_886: key = catch-fail(1-proj-3-tuple(v_884)) in
        {323}let v_887: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_883))) in
        {324}let v_888: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_883)) then (if (not-caught-fail(v_887) && success?(is-true(success?(1-proj-3-tuple(v_887))))) then symmetricstatepack(1-proj-3-tuple(v_887),2-proj-3-tuple(v_887),hash(3-proj-3-tuple(v_887),v_886)) else fail-any) else fail-any)) in
        {325}let v_889: bitstring = catch-fail(symmetricstateunpack(v_888)) in
        {326}let v_890: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_889))) in
        {327}let v_891: aead = catch-fail(decrypt(1-proj-2-tuple(v_890),2-proj-2-tuple(v_890),3-proj-3-tuple(v_889),2-proj-3-tuple(v_884))) in
        {328}let v_892: bitstring = catch-fail(aeadunpack(v_891)) in
        {329}let v_893: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_889))) in
        {330}let v_894: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_890))) && success?(1-proj-3-tuple(v_889))) then (if (not-caught-fail(v_893) && success?(is-true(success?(1-proj-2-tuple(v_893))))) then cipherstatepack(1-proj-2-tuple(v_893),increment_nonce(2-proj-2-tuple(v_890))) else fail-any) else fail-any)) in
        {331}let v_895: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_884)) && (success?(3-proj-3-tuple(v_889)) && success?(1-proj-3-tuple(v_889)))) then (if (not-caught-fail(v_890) && success?(is-true(success?(1-proj-2-tuple(v_890))))) then (if not-caught-fail(v_891) then (if (not-caught-fail(v_892) && success?(is-true(success?(1-proj-3-tuple(v_892))))) then (if not-caught-fail(v_894) then (v_894,3-proj-3-tuple(v_892),1-proj-3-tuple(v_892)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {332}let v_896: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_895),2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)))) in
        {333}let v_897: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_884)) && success?(symmetricstatepack(1-proj-3-tuple(v_895),2-proj-3-tuple(v_889),3-proj-3-tuple(v_889)))) then (if (not-caught-fail(v_896) && success?(is-true(success?(1-proj-3-tuple(v_896))))) then symmetricstatepack(1-proj-3-tuple(v_896),2-proj-3-tuple(v_896),hash(3-proj-3-tuple(v_896),2-proj-3-tuple(v_884))) else fail-any) else fail-any)) in
        {334}let v_898: bitstring = catch-fail((if success?(2-proj-3-tuple(v_884)) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then (if (not-caught-fail(v_895) && success?(is-true(success?(1-proj-3-tuple(v_895))))) then (if not-caught-fail(v_897) then (v_897,2-proj-3-tuple(v_895),3-proj-3-tuple(v_895)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {335}let v_899: key = catch-fail(2-proj-3-tuple(v_898)) in
        {336}let v_900: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_898))) in
        {337}let v_901: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {338}let v_902: aead = catch-fail(decrypt(1-proj-2-tuple(v_901),2-proj-2-tuple(v_901),3-proj-3-tuple(v_900),3-proj-3-tuple(v_884))) in
        {339}let v_903: bitstring = catch-fail(aeadunpack(v_902)) in
        {340}let v_904: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_900))) in
        {341}let v_905: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_901))) && success?(1-proj-3-tuple(v_900))) then (if (not-caught-fail(v_904) && success?(is-true(success?(1-proj-2-tuple(v_904))))) then cipherstatepack(1-proj-2-tuple(v_904),increment_nonce(2-proj-2-tuple(v_901))) else fail-any) else fail-any)) in
        {342}let v_906: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_884)) && (success?(3-proj-3-tuple(v_900)) && success?(1-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_901) && success?(is-true(success?(1-proj-2-tuple(v_901))))) then (if not-caught-fail(v_902) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-3-tuple(v_903))))) then (if not-caught-fail(v_905) then (v_905,3-proj-3-tuple(v_903),1-proj-3-tuple(v_903)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {343}let v_907: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) in
        {344}let v_908: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_884)) && success?(symmetricstatepack(1-proj-3-tuple(v_906),2-proj-3-tuple(v_900),3-proj-3-tuple(v_900)))) then (if (not-caught-fail(v_907) && success?(is-true(success?(1-proj-3-tuple(v_907))))) then symmetricstatepack(1-proj-3-tuple(v_907),2-proj-3-tuple(v_907),hash(3-proj-3-tuple(v_907),3-proj-3-tuple(v_884))) else fail-any) else fail-any)) in
        {345}let v_909: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_884)) && success?(1-proj-3-tuple(v_898))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-3-tuple(v_906))))) then (if not-caught-fail(v_908) then (v_908,2-proj-3-tuple(v_906),3-proj-3-tuple(v_906)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {346}let v_910: key = catch-fail(dhexp(key_s(alice),g)) in
        {347}let v_911: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_909),2-proj-7-tuple(v_883),3-proj-7-tuple(v_883),v_899,v_886,6-proj-7-tuple(v_883),7-proj-7-tuple(v_883))) in
        {348}let (hs_912: handshakestate,re_913: key,plaintext_a: bitstring,valid_914: bool) = (if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-7-tuple(v_883))))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-3-tuple(v_884))))) then (if not-caught-fail(v_885) then (if not-caught-fail(v_886) then (if not-caught-fail(v_888) then (if (not-caught-fail(v_898) && success?(is-true(success?(1-proj-3-tuple(v_898))))) then (if not-caught-fail(v_899) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then (if ((3-proj-3-tuple(v_898) && 3-proj-3-tuple(v_909)) && (v_899 = getpublickey((if not-caught-fail(v_910) then keypairpack(v_910,key_s(alice)) else fail-any)))) then (if not-caught-fail(v_911) then (v_911,getpublickey(3-proj-7-tuple(v_883)),2-proj-3-tuple(v_909),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {349}event RecvMsg(bob,alice,stage_a,plaintext_a,valid_914);
        {350}insert statestore(bob,alice,statepack_b(hs_912))
    ) | (
        {406}get statestore(=bob,=alice,statepack_b(hs_915: handshakestate)) in
        {352}let v_916: bitstring = catch-fail(handshakestateunpack(hs_915)) in
        {353}let v_917: bitstring = catch-fail((empty,empty,empty)) in
        {354}let v_918: key = catch-fail(dhexp(key_e(bob,alice),g)) in
        {355}let v_919: keypair = catch-fail((if not-caught-fail(v_918) then keypairpack(v_918,key_e(bob,alice)) else fail-any)) in
        {356}let v_920: bitstring = catch-fail(getpublickey(v_919)) in
        {357}let v_921: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_916))) in
        {358}let v_922: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_916)) then (if (not-caught-fail(v_921) && success?(is-true(success?(1-proj-3-tuple(v_921))))) then symmetricstatepack(1-proj-3-tuple(v_921),2-proj-3-tuple(v_921),hash(3-proj-3-tuple(v_921),v_920)) else fail-any) else fail-any)) in
        {359}let v_923: bitstring = catch-fail(keypairunpack(v_919)) in
        {360}let v_924: bitstring = catch-fail(symmetricstateunpack(v_922)) in
        {361}let v_925: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_924),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {362}let v_926: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_924),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {363}let v_927: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_924),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {364}let v_928: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_924))) then (if not-caught-fail(v_925) then (if not-caught-fail(v_926) then (if not-caught-fail(v_927) then (v_925,v_926,v_927) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {365}let v_929: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_923) && success?(is-true(success?(1-proj-2-tuple(v_923))))) then dhexp(2-proj-2-tuple(v_923),5-proj-7-tuple(v_916)) else fail-any) else fail-any)) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-3-tuple(v_924))))) then (if (not-caught-fail(v_928) && success?(is-true(success?(1-proj-3-tuple(v_928))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_928)) then cipherstatepack(2-proj-3-tuple(v_928),minnonce) else fail-any),1-proj-3-tuple(v_928),3-proj-3-tuple(v_924)) else fail-any) else fail-any) else fail-any)) in
        {366}let v_930: bitstring = catch-fail(keypairunpack(v_919)) in
        {367}let v_931: bitstring = catch-fail(symmetricstateunpack(v_929)) in
        {368}let v_932: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_931),(if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {369}let v_933: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_931),(if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {370}let v_934: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_931),(if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {371}let v_935: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_931))) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (if not-caught-fail(v_934) then (v_932,v_933,v_934) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {372}let v_936: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_916)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-2-tuple(v_930))))) then dhexp(2-proj-2-tuple(v_930),4-proj-7-tuple(v_916)) else fail-any) else fail-any)) then (if (not-caught-fail(v_931) && success?(is-true(success?(1-proj-3-tuple(v_931))))) then (if (not-caught-fail(v_935) && success?(is-true(success?(1-proj-3-tuple(v_935))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_935)) then cipherstatepack(2-proj-3-tuple(v_935),minnonce) else fail-any),1-proj-3-tuple(v_935),3-proj-3-tuple(v_931)) else fail-any) else fail-any) else fail-any)) in
        {373}let v_937: key = catch-fail(dhexp(key_s(bob),g)) in
        {374}let v_938: keypair = catch-fail((if not-caught-fail(v_937) then keypairpack(v_937,key_s(bob)) else fail-any)) in
        {375}let v_939: bitstring = catch-fail(symmetricstateunpack(v_936)) in
        {376}let v_940: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_939))) in
        {377}let v_941: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_940),2-proj-2-tuple(v_940),3-proj-3-tuple(v_939),getpublickey(v_938))) in
        {378}let v_942: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_939))) in
        {379}let v_943: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_940))) && success?(1-proj-3-tuple(v_939))) then (if (not-caught-fail(v_942) && success?(is-true(success?(1-proj-2-tuple(v_942))))) then cipherstatepack(1-proj-2-tuple(v_942),increment_nonce(2-proj-2-tuple(v_940))) else fail-any) else fail-any)) in
        {380}let v_944: bitstring = catch-fail((if (success?(getpublickey(v_938)) && (success?(3-proj-3-tuple(v_939)) && success?(1-proj-3-tuple(v_939)))) then (if (not-caught-fail(v_940) && success?(is-true(success?(1-proj-2-tuple(v_940))))) then (if not-caught-fail(v_941) then (if not-caught-fail(v_943) then (v_943,v_941) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {381}let v_945: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_944),2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)))) in
        {382}let v_946: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_944)) && success?(symmetricstatepack(1-proj-2-tuple(v_944),2-proj-3-tuple(v_939),3-proj-3-tuple(v_939)))) then (if (not-caught-fail(v_945) && success?(is-true(success?(1-proj-3-tuple(v_945))))) then symmetricstatepack(1-proj-3-tuple(v_945),2-proj-3-tuple(v_945),hash(3-proj-3-tuple(v_945),2-proj-2-tuple(v_944))) else fail-any) else fail-any)) in
        {383}let v_947: bitstring = catch-fail((if success?(getpublickey(v_938)) then (if (not-caught-fail(v_939) && success?(is-true(success?(1-proj-3-tuple(v_939))))) then (if (not-caught-fail(v_944) && success?(is-true(success?(1-proj-2-tuple(v_944))))) then (if not-caught-fail(v_946) then (v_946,2-proj-2-tuple(v_944)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {384}let v_948: bitstring = catch-fail(keypairunpack(v_938)) in
        {385}let v_949: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_947))) in
        {386}let v_950: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {387}let v_951: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {388}let v_952: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_949),(if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_916)) else fail-any) else fail-any))) in
        {389}let v_953: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_916)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_949))) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then (if not-caught-fail(v_952) then (v_950,v_951,v_952) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {390}let v_954: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_916)) then (if (not-caught-fail(v_948) && success?(is-true(success?(1-proj-2-tuple(v_948))))) then dhexp(2-proj-2-tuple(v_948),5-proj-7-tuple(v_916)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_947))) then (if (not-caught-fail(v_949) && success?(is-true(success?(1-proj-3-tuple(v_949))))) then (if (not-caught-fail(v_953) && success?(is-true(success?(1-proj-3-tuple(v_953))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_953)) then cipherstatepack(2-proj-3-tuple(v_953),minnonce) else fail-any),1-proj-3-tuple(v_953),3-proj-3-tuple(v_949)) else fail-any) else fail-any) else fail-any)) in
        {391}let v_955: bitstring = catch-fail(symmetricstateunpack(v_954)) in
        {392}let v_956: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {393}let v_957: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_956),2-proj-2-tuple(v_956),3-proj-3-tuple(v_955),msg_b(bob,alice))) in
        {394}let v_958: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_955))) in
        {395}let v_959: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_956))) && success?(1-proj-3-tuple(v_955))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-2-tuple(v_958))))) then cipherstatepack(1-proj-2-tuple(v_958),increment_nonce(2-proj-2-tuple(v_956))) else fail-any) else fail-any)) in
        {396}let v_960: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_955)) && success?(1-proj-3-tuple(v_955))) then (if (not-caught-fail(v_956) && success?(is-true(success?(1-proj-2-tuple(v_956))))) then (if not-caught-fail(v_957) then (if not-caught-fail(v_959) then (v_959,v_957) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {397}let v_961: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_960),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) in
        {398}let v_962: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_960)) && success?(symmetricstatepack(1-proj-2-tuple(v_960),2-proj-3-tuple(v_955),3-proj-3-tuple(v_955)))) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_961),hash(3-proj-3-tuple(v_961),2-proj-2-tuple(v_960))) else fail-any) else fail-any)) in
        {399}let v_963: bitstring = catch-fail((if (not-caught-fail(v_955) && success?(is-true(success?(1-proj-3-tuple(v_955))))) then (if (not-caught-fail(v_960) && success?(is-true(success?(1-proj-2-tuple(v_960))))) then (if not-caught-fail(v_962) then (v_962,2-proj-2-tuple(v_960)) else fail-any) else fail-any) else fail-any)) in
        {400}let v_964: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_963),v_938,v_919,4-proj-7-tuple(v_916),5-proj-7-tuple(v_916),6-proj-7-tuple(v_916),7-proj-7-tuple(v_916))) in
        {401}let v_965: bitstring = catch-fail(concat3(v_920,2-proj-2-tuple(v_947),2-proj-2-tuple(v_963))) in
        {402}let (hs_966: handshakestate,re_967: key,message_b_968: bitstring) = (if (not-caught-fail(v_916) && success?(is-true(success?(1-proj-7-tuple(v_916))))) then (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-3-tuple(v_917))))) then (if not-caught-fail(v_919) then (if not-caught-fail(v_920) then (if not-caught-fail(v_922) then (if not-caught-fail(v_929) then (if not-caught-fail(v_936) then (if not-caught-fail(v_938) then (if (not-caught-fail(v_947) && success?(is-true(success?(1-proj-2-tuple(v_947))))) then (if not-caught-fail(v_954) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-2-tuple(v_963))))) then (if not-caught-fail(v_964) then (if not-caught-fail(v_965) then (v_964,5-proj-7-tuple(v_916),v_965) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {403}event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true);
        {404}insert statestore(bob,alice,statepack_c(hs_966));
        {405}out(pub, message_b_968)
    ) | (
        {425}get statestore(=bob,=alice,statepack_c(hs_969: handshakestate)) in
        {407}in(pub, message_c_970: bitstring);
        {408}let v_971: bitstring = catch-fail(handshakestateunpack(hs_969)) in
        {409}let v_972: bitstring = catch-fail(deconcat3(message_c_970)) in
        {410}let v_973: bool = catch-fail(true) in
        {411}let v_974: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_971))) in
        {412}let v_975: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_974))) in
        {413}let v_976: aead = catch-fail(decrypt(1-proj-2-tuple(v_975),2-proj-2-tuple(v_975),3-proj-3-tuple(v_974),3-proj-3-tuple(v_972))) in
        {414}let v_977: bitstring = catch-fail(aeadunpack(v_976)) in
        {415}let v_978: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_974))) in
        {416}let v_979: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_975))) && success?(1-proj-3-tuple(v_974))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then cipherstatepack(1-proj-2-tuple(v_978),increment_nonce(2-proj-2-tuple(v_975))) else fail-any) else fail-any)) in
        {417}let v_980: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_972)) && (success?(3-proj-3-tuple(v_974)) && success?(1-proj-3-tuple(v_974)))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-2-tuple(v_975))))) then (if not-caught-fail(v_976) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if not-caught-fail(v_979) then (v_979,3-proj-3-tuple(v_977),1-proj-3-tuple(v_977)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {418}let v_981: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_980),2-proj-3-tuple(v_974),3-proj-3-tuple(v_974)))) in
        {419}let v_982: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_972)) && success?(symmetricstatepack(1-proj-3-tuple(v_980),2-proj-3-tuple(v_974),3-proj-3-tuple(v_974)))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then symmetricstatepack(1-proj-3-tuple(v_981),2-proj-3-tuple(v_981),hash(3-proj-3-tuple(v_981),3-proj-3-tuple(v_972))) else fail-any) else fail-any)) in
        {420}let v_983: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_972)) && success?(1-proj-7-tuple(v_971))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-3-tuple(v_980))))) then (if not-caught-fail(v_982) then (v_982,2-proj-3-tuple(v_980),3-proj-3-tuple(v_980)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {421}let v_984: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_983),2-proj-7-tuple(v_971),3-proj-7-tuple(v_971),4-proj-7-tuple(v_971),5-proj-7-tuple(v_971),6-proj-7-tuple(v_971),7-proj-7-tuple(v_971))) in
        {422}let (hs_985: handshakestate,re_986: key,plaintext_c: bitstring,valid_987: bool) = (if (not-caught-fail(v_971) && success?(is-true(success?(1-proj-7-tuple(v_971))))) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_973) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if (v_973 && 3-proj-3-tuple(v_983)) then (if not-caught-fail(v_984) then (v_984,getpublickey(3-proj-7-tuple(v_971)),2-proj-3-tuple(v_983),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {423}event RecvMsg(bob,alice,stage_c,plaintext_c,valid_987);
        {424}insert statestore(bob,alice,statepack_d(hs_985))
    ) | (
        {451}get statestore(=bob,=alice,statepack_d(hs_988: handshakestate)) in
        {426}let v_989: bitstring = catch-fail(handshakestateunpack(hs_988)) in
        {427}let v_990: bitstring = catch-fail((empty,empty,empty)) in
        {428}let v_991: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_989))) in
        {429}let v_992: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_991))) in
        {430}let v_993: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_992),2-proj-2-tuple(v_992),3-proj-3-tuple(v_991),msg_d(bob,alice))) in
        {431}let v_994: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_991))) in
        {432}let v_995: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_992))) && success?(1-proj-3-tuple(v_991))) then (if (not-caught-fail(v_994) && success?(is-true(success?(1-proj-2-tuple(v_994))))) then cipherstatepack(1-proj-2-tuple(v_994),increment_nonce(2-proj-2-tuple(v_992))) else fail-any) else fail-any)) in
        {433}let v_996: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_991)) && success?(1-proj-3-tuple(v_991))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-2-tuple(v_992))))) then (if not-caught-fail(v_993) then (if not-caught-fail(v_995) then (v_995,v_993) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {434}let v_997: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_996),2-proj-3-tuple(v_991),3-proj-3-tuple(v_991)))) in
        {435}let v_998: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_996)) && success?(symmetricstatepack(1-proj-2-tuple(v_996),2-proj-3-tuple(v_991),3-proj-3-tuple(v_991)))) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack(1-proj-3-tuple(v_997),2-proj-3-tuple(v_997),hash(3-proj-3-tuple(v_997),2-proj-2-tuple(v_996))) else fail-any) else fail-any)) in
        {436}let v_999: bitstring = catch-fail((if success?(1-proj-7-tuple(v_989)) then (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-3-tuple(v_991))))) then (if (not-caught-fail(v_996) && success?(is-true(success?(1-proj-2-tuple(v_996))))) then (if not-caught-fail(v_998) then (v_998,2-proj-2-tuple(v_996)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {437}let v_1000: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_999),2-proj-7-tuple(v_989),3-proj-7-tuple(v_989),4-proj-7-tuple(v_989),5-proj-7-tuple(v_989),6-proj-7-tuple(v_989),7-proj-7-tuple(v_989))) in
        {438}let v_1001: bitstring = catch-fail(concat3(1-proj-3-tuple(v_990),2-proj-3-tuple(v_990),2-proj-2-tuple(v_999))) in
        {439}let v_1002: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_999))) in
        {440}let v_1003: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1002),zero)) in
        {441}let v_1004: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1002),zero)) in
        {442}let v_1005: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1002),zero)) in
        {443}let v_1006: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1002)) then (if not-caught-fail(v_1003) then (if not-caught-fail(v_1004) then (if not-caught-fail(v_1005) then (v_1003,v_1004,v_1005) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {444}let v_1007: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1006)) then cipherstatepack(1-proj-3-tuple(v_1006),minnonce) else fail-any)) in
        {445}let v_1008: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1006)) then cipherstatepack(2-proj-3-tuple(v_1006),minnonce) else fail-any)) in
        {446}let v_1009: bitstring = catch-fail((if success?(1-proj-2-tuple(v_999)) then (if (not-caught-fail(v_1002) && success?(is-true(success?(1-proj-3-tuple(v_1002))))) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-3-tuple(v_1006))))) then (if not-caught-fail(v_1007) then (if not-caught-fail(v_1008) then (1-proj-2-tuple(v_999),v_1007,v_1008) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let (hs_1010: handshakestate,re_1011: key,message_d_1012: bitstring,cs1_1013: cipherstate,cs2_1014: cipherstate) = (if (not-caught-fail(v_989) && success?(is-true(success?(1-proj-7-tuple(v_989))))) then (if (not-caught-fail(v_990) && success?(is-true(success?(1-proj-3-tuple(v_990))))) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then (if not-caught-fail(v_1000) then (if not-caught-fail(v_1001) then (if (not-caught-fail(v_1009) && success?(is-true(success?(1-proj-3-tuple(v_1009))))) then (v_1000,5-proj-7-tuple(v_989),v_1001,2-proj-3-tuple(v_1009),3-proj-3-tuple(v_1009)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {448}event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true);
        {449}insert statestore(bob,alice,statepack_e(hs_1010));
        {450}out(pub, message_d_1012)
    ) | (
        {452}event LeakS(phase0,bob);
        {453}out(pub, key_s(bob))
    ) | (
        {454}phase 1;
        {455}event LeakS(phase1,bob);
        {456}out(pub, key_s(bob))
    )
) | (
    {457}let s_1015: keypair = keypairpack(empty,empty) in
    {458}out(pub, getpublickey(s_1015));
    (
        {459}let e_1016: keypair = keypairpack(empty,empty) in
        {460}let rs_1017: key = empty in
        {461}let re_1018: key = empty in
        {462}let v_1019: bitstring = catch-fail(hash(somename,empty)) in
        {463}let v_1020: key = catch-fail(v_1019) in
        {464}let v_1021: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {465}let v_1022: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_1019) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1021) then symmetricstatepack(v_1021,v_1020,v_1019) else fail-any) else fail-any) else fail-any))) in
        {466}let v_1023: symmetricstate = catch-fail((if success?((if not-caught-fail(v_1019) then (if not-caught-fail(v_1020) then (if not-caught-fail(v_1021) then symmetricstatepack(v_1021,v_1020,v_1019) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_1022) && success?(is-true(success?(1-proj-3-tuple(v_1022))))) then symmetricstatepack(1-proj-3-tuple(v_1022),2-proj-3-tuple(v_1022),hash(3-proj-3-tuple(v_1022),empty)) else fail-any) else fail-any)) in
        {467}let hs_1024: handshakestate = (if not-caught-fail(v_1023) then handshakestatepack(v_1023,s_1015,e_1016,rs_1017,re_1018,empty,false) else fail-any) in
        {468}insert statestore(bob,charlie,statepack_a(hs_1024))
    ) | (
        {502}get statestore(=bob,=charlie,statepack_a(hs_1025: handshakestate)) in
        {469}in(pub, message_a_1026: bitstring);
        {470}let v_1027: bitstring = catch-fail(handshakestateunpack(hs_1025)) in
        {471}let v_1028: bitstring = catch-fail(deconcat3(message_a_1026)) in
        {472}let v_1029: bool = catch-fail(true) in
        {473}let v_1030: key = catch-fail(1-proj-3-tuple(v_1028)) in
        {474}let v_1031: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1027))) in
        {475}let v_1032: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1027)) then (if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then symmetricstatepack(1-proj-3-tuple(v_1031),2-proj-3-tuple(v_1031),hash(3-proj-3-tuple(v_1031),v_1030)) else fail-any) else fail-any)) in
        {476}let v_1033: bitstring = catch-fail(symmetricstateunpack(v_1032)) in
        {477}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1033))) in
        {478}let v_1035: aead = catch-fail(decrypt(1-proj-2-tuple(v_1034),2-proj-2-tuple(v_1034),3-proj-3-tuple(v_1033),2-proj-3-tuple(v_1028))) in
        {479}let v_1036: bitstring = catch-fail(aeadunpack(v_1035)) in
        {480}let v_1037: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1033))) in
        {481}let v_1038: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1034))) && success?(1-proj-3-tuple(v_1033))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-2-tuple(v_1037))))) then cipherstatepack(1-proj-2-tuple(v_1037),increment_nonce(2-proj-2-tuple(v_1034))) else fail-any) else fail-any)) in
        {482}let v_1039: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_1028)) && (success?(3-proj-3-tuple(v_1033)) && success?(1-proj-3-tuple(v_1033)))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then (if not-caught-fail(v_1035) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-3-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,3-proj-3-tuple(v_1036),1-proj-3-tuple(v_1036)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {483}let v_1040: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1033),3-proj-3-tuple(v_1033)))) in
        {484}let v_1041: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_1028)) && success?(symmetricstatepack(1-proj-3-tuple(v_1039),2-proj-3-tuple(v_1033),3-proj-3-tuple(v_1033)))) then (if (not-caught-fail(v_1040) && success?(is-true(success?(1-proj-3-tuple(v_1040))))) then symmetricstatepack(1-proj-3-tuple(v_1040),2-proj-3-tuple(v_1040),hash(3-proj-3-tuple(v_1040),2-proj-3-tuple(v_1028))) else fail-any) else fail-any)) in
        {485}let v_1042: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1028)) then (if (not-caught-fail(v_1033) && success?(is-true(success?(1-proj-3-tuple(v_1033))))) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-3-tuple(v_1039))))) then (if not-caught-fail(v_1041) then (v_1041,2-proj-3-tuple(v_1039),3-proj-3-tuple(v_1039)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {486}let v_1043: key = catch-fail(2-proj-3-tuple(v_1042)) in
        {487}let v_1044: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_1042))) in
        {488}let v_1045: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1044))) in
        {489}let v_1046: aead = catch-fail(decrypt(1-proj-2-tuple(v_1045),2-proj-2-tuple(v_1045),3-proj-3-tuple(v_1044),3-proj-3-tuple(v_1028))) in
        {490}let v_1047: bitstring = catch-fail(aeadunpack(v_1046)) in
        {491}let v_1048: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1044))) in
        {492}let v_1049: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1045))) && success?(1-proj-3-tuple(v_1044))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-2-tuple(v_1048))))) then cipherstatepack(1-proj-2-tuple(v_1048),increment_nonce(2-proj-2-tuple(v_1045))) else fail-any) else fail-any)) in
        {493}let v_1050: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && (success?(3-proj-3-tuple(v_1044)) && success?(1-proj-3-tuple(v_1044)))) then (if (not-caught-fail(v_1045) && success?(is-true(success?(1-proj-2-tuple(v_1045))))) then (if not-caught-fail(v_1046) then (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-3-tuple(v_1047))))) then (if not-caught-fail(v_1049) then (v_1049,3-proj-3-tuple(v_1047),1-proj-3-tuple(v_1047)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {494}let v_1051: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1044),3-proj-3-tuple(v_1044)))) in
        {495}let v_1052: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && success?(symmetricstatepack(1-proj-3-tuple(v_1050),2-proj-3-tuple(v_1044),3-proj-3-tuple(v_1044)))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-3-tuple(v_1051))))) then symmetricstatepack(1-proj-3-tuple(v_1051),2-proj-3-tuple(v_1051),hash(3-proj-3-tuple(v_1051),3-proj-3-tuple(v_1028))) else fail-any) else fail-any)) in
        {496}let v_1053: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1028)) && success?(1-proj-3-tuple(v_1042))) then (if (not-caught-fail(v_1044) && success?(is-true(success?(1-proj-3-tuple(v_1044))))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if not-caught-fail(v_1052) then (v_1052,2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {497}let v_1054: key = catch-fail(dhexp(key_s(charlie),g)) in
        {498}let v_1055: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1053),2-proj-7-tuple(v_1027),3-proj-7-tuple(v_1027),v_1043,v_1030,6-proj-7-tuple(v_1027),7-proj-7-tuple(v_1027))) in
        {499}let (hs_1056: handshakestate,re_1057: key,plaintext_a_1058: bitstring,valid_1059: bool) = (if (not-caught-fail(v_1027) && success?(is-true(success?(1-proj-7-tuple(v_1027))))) then (if (not-caught-fail(v_1028) && success?(is-true(success?(1-proj-3-tuple(v_1028))))) then (if not-caught-fail(v_1029) then (if not-caught-fail(v_1030) then (if not-caught-fail(v_1032) then (if (not-caught-fail(v_1042) && success?(is-true(success?(1-proj-3-tuple(v_1042))))) then (if not-caught-fail(v_1043) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if ((3-proj-3-tuple(v_1042) && 3-proj-3-tuple(v_1053)) && (v_1043 = getpublickey((if not-caught-fail(v_1054) then keypairpack(v_1054,key_s(charlie)) else fail-any)))) then (if not-caught-fail(v_1055) then (v_1055,getpublickey(3-proj-7-tuple(v_1027)),2-proj-3-tuple(v_1053),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {500}event RecvMsg(bob,charlie,stage_a,plaintext_a_1058,valid_1059);
        {501}insert statestore(bob,charlie,statepack_b(hs_1056))
    ) | (
        {557}get statestore(=bob,=charlie,statepack_b(hs_1060: handshakestate)) in
        {503}let v_1061: bitstring = catch-fail(handshakestateunpack(hs_1060)) in
        {504}let v_1062: bitstring = catch-fail((empty,empty,empty)) in
        {505}let v_1063: key = catch-fail(dhexp(key_e(bob,charlie),g)) in
        {506}let v_1064: keypair = catch-fail((if not-caught-fail(v_1063) then keypairpack(v_1063,key_e(bob,charlie)) else fail-any)) in
        {507}let v_1065: bitstring = catch-fail(getpublickey(v_1064)) in
        {508}let v_1066: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1061))) in
        {509}let v_1067: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-3-tuple(v_1066))))) then symmetricstatepack(1-proj-3-tuple(v_1066),2-proj-3-tuple(v_1066),hash(3-proj-3-tuple(v_1066),v_1065)) else fail-any) else fail-any)) in
        {510}let v_1068: bitstring = catch-fail(keypairunpack(v_1064)) in
        {511}let v_1069: bitstring = catch-fail(symmetricstateunpack(v_1067)) in
        {512}let v_1070: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1069),(if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-2-tuple(v_1068))))) then dhexp(2-proj-2-tuple(v_1068),5-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {513}let v_1071: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1069),(if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-2-tuple(v_1068))))) then dhexp(2-proj-2-tuple(v_1068),5-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {514}let v_1072: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1069),(if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-2-tuple(v_1068))))) then dhexp(2-proj-2-tuple(v_1068),5-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {515}let v_1073: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-2-tuple(v_1068))))) then dhexp(2-proj-2-tuple(v_1068),5-proj-7-tuple(v_1061)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1069))) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1071) then (if not-caught-fail(v_1072) then (v_1070,v_1071,v_1072) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {516}let v_1074: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-2-tuple(v_1068))))) then dhexp(2-proj-2-tuple(v_1068),5-proj-7-tuple(v_1061)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-3-tuple(v_1069))))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-3-tuple(v_1073))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1073)) then cipherstatepack(2-proj-3-tuple(v_1073),minnonce) else fail-any),1-proj-3-tuple(v_1073),3-proj-3-tuple(v_1069)) else fail-any) else fail-any) else fail-any)) in
        {517}let v_1075: bitstring = catch-fail(keypairunpack(v_1064)) in
        {518}let v_1076: bitstring = catch-fail(symmetricstateunpack(v_1074)) in
        {519}let v_1077: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1076),(if success?(4-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then dhexp(2-proj-2-tuple(v_1075),4-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {520}let v_1078: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1076),(if success?(4-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then dhexp(2-proj-2-tuple(v_1075),4-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {521}let v_1079: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1076),(if success?(4-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then dhexp(2-proj-2-tuple(v_1075),4-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {522}let v_1080: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then dhexp(2-proj-2-tuple(v_1075),4-proj-7-tuple(v_1061)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1076))) then (if not-caught-fail(v_1077) then (if not-caught-fail(v_1078) then (if not-caught-fail(v_1079) then (v_1077,v_1078,v_1079) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {523}let v_1081: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1075) && success?(is-true(success?(1-proj-2-tuple(v_1075))))) then dhexp(2-proj-2-tuple(v_1075),4-proj-7-tuple(v_1061)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-3-tuple(v_1076))))) then (if (not-caught-fail(v_1080) && success?(is-true(success?(1-proj-3-tuple(v_1080))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1080)) then cipherstatepack(2-proj-3-tuple(v_1080),minnonce) else fail-any),1-proj-3-tuple(v_1080),3-proj-3-tuple(v_1076)) else fail-any) else fail-any) else fail-any)) in
        {524}let v_1082: key = catch-fail(dhexp(key_s(bob),g)) in
        {525}let v_1083: keypair = catch-fail((if not-caught-fail(v_1082) then keypairpack(v_1082,key_s(bob)) else fail-any)) in
        {526}let v_1084: bitstring = catch-fail(symmetricstateunpack(v_1081)) in
        {527}let v_1085: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1084))) in
        {528}let v_1086: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1085),2-proj-2-tuple(v_1085),3-proj-3-tuple(v_1084),getpublickey(v_1083))) in
        {529}let v_1087: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1084))) in
        {530}let v_1088: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1085))) && success?(1-proj-3-tuple(v_1084))) then (if (not-caught-fail(v_1087) && success?(is-true(success?(1-proj-2-tuple(v_1087))))) then cipherstatepack(1-proj-2-tuple(v_1087),increment_nonce(2-proj-2-tuple(v_1085))) else fail-any) else fail-any)) in
        {531}let v_1089: bitstring = catch-fail((if (success?(getpublickey(v_1083)) && (success?(3-proj-3-tuple(v_1084)) && success?(1-proj-3-tuple(v_1084)))) then (if (not-caught-fail(v_1085) && success?(is-true(success?(1-proj-2-tuple(v_1085))))) then (if not-caught-fail(v_1086) then (if not-caught-fail(v_1088) then (v_1088,v_1086) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {532}let v_1090: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1089),2-proj-3-tuple(v_1084),3-proj-3-tuple(v_1084)))) in
        {533}let v_1091: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1089)) && success?(symmetricstatepack(1-proj-2-tuple(v_1089),2-proj-3-tuple(v_1084),3-proj-3-tuple(v_1084)))) then (if (not-caught-fail(v_1090) && success?(is-true(success?(1-proj-3-tuple(v_1090))))) then symmetricstatepack(1-proj-3-tuple(v_1090),2-proj-3-tuple(v_1090),hash(3-proj-3-tuple(v_1090),2-proj-2-tuple(v_1089))) else fail-any) else fail-any)) in
        {534}let v_1092: bitstring = catch-fail((if success?(getpublickey(v_1083)) then (if (not-caught-fail(v_1084) && success?(is-true(success?(1-proj-3-tuple(v_1084))))) then (if (not-caught-fail(v_1089) && success?(is-true(success?(1-proj-2-tuple(v_1089))))) then (if not-caught-fail(v_1091) then (v_1091,2-proj-2-tuple(v_1089)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {535}let v_1093: bitstring = catch-fail(keypairunpack(v_1083)) in
        {536}let v_1094: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1092))) in
        {537}let v_1095: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1094),(if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),5-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {538}let v_1096: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1094),(if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),5-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {539}let v_1097: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1094),(if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),5-proj-7-tuple(v_1061)) else fail-any) else fail-any))) in
        {540}let v_1098: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),5-proj-7-tuple(v_1061)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1094))) then (if not-caught-fail(v_1095) then (if not-caught-fail(v_1096) then (if not-caught-fail(v_1097) then (v_1095,v_1096,v_1097) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {541}let v_1099: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_1061)) then (if (not-caught-fail(v_1093) && success?(is-true(success?(1-proj-2-tuple(v_1093))))) then dhexp(2-proj-2-tuple(v_1093),5-proj-7-tuple(v_1061)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1092))) then (if (not-caught-fail(v_1094) && success?(is-true(success?(1-proj-3-tuple(v_1094))))) then (if (not-caught-fail(v_1098) && success?(is-true(success?(1-proj-3-tuple(v_1098))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1098)) then cipherstatepack(2-proj-3-tuple(v_1098),minnonce) else fail-any),1-proj-3-tuple(v_1098),3-proj-3-tuple(v_1094)) else fail-any) else fail-any) else fail-any)) in
        {542}let v_1100: bitstring = catch-fail(symmetricstateunpack(v_1099)) in
        {543}let v_1101: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1100))) in
        {544}let v_1102: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1101),2-proj-2-tuple(v_1101),3-proj-3-tuple(v_1100),msg_b(bob,charlie))) in
        {545}let v_1103: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1100))) in
        {546}let v_1104: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1101))) && success?(1-proj-3-tuple(v_1100))) then (if (not-caught-fail(v_1103) && success?(is-true(success?(1-proj-2-tuple(v_1103))))) then cipherstatepack(1-proj-2-tuple(v_1103),increment_nonce(2-proj-2-tuple(v_1101))) else fail-any) else fail-any)) in
        {547}let v_1105: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1100)) && success?(1-proj-3-tuple(v_1100))) then (if (not-caught-fail(v_1101) && success?(is-true(success?(1-proj-2-tuple(v_1101))))) then (if not-caught-fail(v_1102) then (if not-caught-fail(v_1104) then (v_1104,v_1102) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {548}let v_1106: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1105),2-proj-3-tuple(v_1100),3-proj-3-tuple(v_1100)))) in
        {549}let v_1107: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1105)) && success?(symmetricstatepack(1-proj-2-tuple(v_1105),2-proj-3-tuple(v_1100),3-proj-3-tuple(v_1100)))) then (if (not-caught-fail(v_1106) && success?(is-true(success?(1-proj-3-tuple(v_1106))))) then symmetricstatepack(1-proj-3-tuple(v_1106),2-proj-3-tuple(v_1106),hash(3-proj-3-tuple(v_1106),2-proj-2-tuple(v_1105))) else fail-any) else fail-any)) in
        {550}let v_1108: bitstring = catch-fail((if (not-caught-fail(v_1100) && success?(is-true(success?(1-proj-3-tuple(v_1100))))) then (if (not-caught-fail(v_1105) && success?(is-true(success?(1-proj-2-tuple(v_1105))))) then (if not-caught-fail(v_1107) then (v_1107,2-proj-2-tuple(v_1105)) else fail-any) else fail-any) else fail-any)) in
        {551}let v_1109: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1108),v_1083,v_1064,4-proj-7-tuple(v_1061),5-proj-7-tuple(v_1061),6-proj-7-tuple(v_1061),7-proj-7-tuple(v_1061))) in
        {552}let v_1110: bitstring = catch-fail(concat3(v_1065,2-proj-2-tuple(v_1092),2-proj-2-tuple(v_1108))) in
        {553}let (hs_1111: handshakestate,re_1112: key,message_b_1113: bitstring) = (if (not-caught-fail(v_1061) && success?(is-true(success?(1-proj-7-tuple(v_1061))))) then (if (not-caught-fail(v_1062) && success?(is-true(success?(1-proj-3-tuple(v_1062))))) then (if not-caught-fail(v_1064) then (if not-caught-fail(v_1065) then (if not-caught-fail(v_1067) then (if not-caught-fail(v_1074) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1083) then (if (not-caught-fail(v_1092) && success?(is-true(success?(1-proj-2-tuple(v_1092))))) then (if not-caught-fail(v_1099) then (if (not-caught-fail(v_1108) && success?(is-true(success?(1-proj-2-tuple(v_1108))))) then (if not-caught-fail(v_1109) then (if not-caught-fail(v_1110) then (v_1109,5-proj-7-tuple(v_1061),v_1110) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {554}event SendMsg(bob,charlie,stage_b,msg_b(bob,charlie),true);
        {555}insert statestore(bob,charlie,statepack_c(hs_1111));
        {556}out(pub, message_b_1113)
    ) | (
        {576}get statestore(=bob,=charlie,statepack_c(hs_1114: handshakestate)) in
        {558}in(pub, message_c_1115: bitstring);
        {559}let v_1116: bitstring = catch-fail(handshakestateunpack(hs_1114)) in
        {560}let v_1117: bitstring = catch-fail(deconcat3(message_c_1115)) in
        {561}let v_1118: bool = catch-fail(true) in
        {562}let v_1119: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1116))) in
        {563}let v_1120: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1119))) in
        {564}let v_1121: aead = catch-fail(decrypt(1-proj-2-tuple(v_1120),2-proj-2-tuple(v_1120),3-proj-3-tuple(v_1119),3-proj-3-tuple(v_1117))) in
        {565}let v_1122: bitstring = catch-fail(aeadunpack(v_1121)) in
        {566}let v_1123: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1119))) in
        {567}let v_1124: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1120))) && success?(1-proj-3-tuple(v_1119))) then (if (not-caught-fail(v_1123) && success?(is-true(success?(1-proj-2-tuple(v_1123))))) then cipherstatepack(1-proj-2-tuple(v_1123),increment_nonce(2-proj-2-tuple(v_1120))) else fail-any) else fail-any)) in
        {568}let v_1125: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1117)) && (success?(3-proj-3-tuple(v_1119)) && success?(1-proj-3-tuple(v_1119)))) then (if (not-caught-fail(v_1120) && success?(is-true(success?(1-proj-2-tuple(v_1120))))) then (if not-caught-fail(v_1121) then (if (not-caught-fail(v_1122) && success?(is-true(success?(1-proj-3-tuple(v_1122))))) then (if not-caught-fail(v_1124) then (v_1124,3-proj-3-tuple(v_1122),1-proj-3-tuple(v_1122)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {569}let v_1126: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1125),2-proj-3-tuple(v_1119),3-proj-3-tuple(v_1119)))) in
        {570}let v_1127: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1117)) && success?(symmetricstatepack(1-proj-3-tuple(v_1125),2-proj-3-tuple(v_1119),3-proj-3-tuple(v_1119)))) then (if (not-caught-fail(v_1126) && success?(is-true(success?(1-proj-3-tuple(v_1126))))) then symmetricstatepack(1-proj-3-tuple(v_1126),2-proj-3-tuple(v_1126),hash(3-proj-3-tuple(v_1126),3-proj-3-tuple(v_1117))) else fail-any) else fail-any)) in
        {571}let v_1128: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1117)) && success?(1-proj-7-tuple(v_1116))) then (if (not-caught-fail(v_1119) && success?(is-true(success?(1-proj-3-tuple(v_1119))))) then (if (not-caught-fail(v_1125) && success?(is-true(success?(1-proj-3-tuple(v_1125))))) then (if not-caught-fail(v_1127) then (v_1127,2-proj-3-tuple(v_1125),3-proj-3-tuple(v_1125)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {572}let v_1129: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1128),2-proj-7-tuple(v_1116),3-proj-7-tuple(v_1116),4-proj-7-tuple(v_1116),5-proj-7-tuple(v_1116),6-proj-7-tuple(v_1116),7-proj-7-tuple(v_1116))) in
        {573}let (hs_1130: handshakestate,re_1131: key,plaintext_c_1132: bitstring,valid_1133: bool) = (if (not-caught-fail(v_1116) && success?(is-true(success?(1-proj-7-tuple(v_1116))))) then (if (not-caught-fail(v_1117) && success?(is-true(success?(1-proj-3-tuple(v_1117))))) then (if not-caught-fail(v_1118) then (if (not-caught-fail(v_1128) && success?(is-true(success?(1-proj-3-tuple(v_1128))))) then (if (v_1118 && 3-proj-3-tuple(v_1128)) then (if not-caught-fail(v_1129) then (v_1129,getpublickey(3-proj-7-tuple(v_1116)),2-proj-3-tuple(v_1128),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {574}event RecvMsg(bob,charlie,stage_c,plaintext_c_1132,valid_1133);
        {575}insert statestore(bob,charlie,statepack_d(hs_1130))
    ) | (
        {602}get statestore(=bob,=charlie,statepack_d(hs_1134: handshakestate)) in
        {577}let v_1135: bitstring = catch-fail(handshakestateunpack(hs_1134)) in
        {578}let v_1136: bitstring = catch-fail((empty,empty,empty)) in
        {579}let v_1137: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1135))) in
        {580}let v_1138: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1137))) in
        {581}let v_1139: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1138),2-proj-2-tuple(v_1138),3-proj-3-tuple(v_1137),msg_d(bob,charlie))) in
        {582}let v_1140: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1137))) in
        {583}let v_1141: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1138))) && success?(1-proj-3-tuple(v_1137))) then (if (not-caught-fail(v_1140) && success?(is-true(success?(1-proj-2-tuple(v_1140))))) then cipherstatepack(1-proj-2-tuple(v_1140),increment_nonce(2-proj-2-tuple(v_1138))) else fail-any) else fail-any)) in
        {584}let v_1142: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1137)) && success?(1-proj-3-tuple(v_1137))) then (if (not-caught-fail(v_1138) && success?(is-true(success?(1-proj-2-tuple(v_1138))))) then (if not-caught-fail(v_1139) then (if not-caught-fail(v_1141) then (v_1141,v_1139) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {585}let v_1143: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1142),2-proj-3-tuple(v_1137),3-proj-3-tuple(v_1137)))) in
        {586}let v_1144: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1142)) && success?(symmetricstatepack(1-proj-2-tuple(v_1142),2-proj-3-tuple(v_1137),3-proj-3-tuple(v_1137)))) then (if (not-caught-fail(v_1143) && success?(is-true(success?(1-proj-3-tuple(v_1143))))) then symmetricstatepack(1-proj-3-tuple(v_1143),2-proj-3-tuple(v_1143),hash(3-proj-3-tuple(v_1143),2-proj-2-tuple(v_1142))) else fail-any) else fail-any)) in
        {587}let v_1145: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1135)) then (if (not-caught-fail(v_1137) && success?(is-true(success?(1-proj-3-tuple(v_1137))))) then (if (not-caught-fail(v_1142) && success?(is-true(success?(1-proj-2-tuple(v_1142))))) then (if not-caught-fail(v_1144) then (v_1144,2-proj-2-tuple(v_1142)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {588}let v_1146: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1145),2-proj-7-tuple(v_1135),3-proj-7-tuple(v_1135),4-proj-7-tuple(v_1135),5-proj-7-tuple(v_1135),6-proj-7-tuple(v_1135),7-proj-7-tuple(v_1135))) in
        {589}let v_1147: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1136),2-proj-3-tuple(v_1136),2-proj-2-tuple(v_1145))) in
        {590}let v_1148: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1145))) in
        {591}let v_1149: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1148),zero)) in
        {592}let v_1150: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1148),zero)) in
        {593}let v_1151: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1148),zero)) in
        {594}let v_1152: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1148)) then (if not-caught-fail(v_1149) then (if not-caught-fail(v_1150) then (if not-caught-fail(v_1151) then (v_1149,v_1150,v_1151) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {595}let v_1153: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1152)) then cipherstatepack(1-proj-3-tuple(v_1152),minnonce) else fail-any)) in
        {596}let v_1154: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1152)) then cipherstatepack(2-proj-3-tuple(v_1152),minnonce) else fail-any)) in
        {597}let v_1155: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1145)) then (if (not-caught-fail(v_1148) && success?(is-true(success?(1-proj-3-tuple(v_1148))))) then (if (not-caught-fail(v_1152) && success?(is-true(success?(1-proj-3-tuple(v_1152))))) then (if not-caught-fail(v_1153) then (if not-caught-fail(v_1154) then (1-proj-2-tuple(v_1145),v_1153,v_1154) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {598}let (hs_1156: handshakestate,re_1157: key,message_d_1158: bitstring,cs1_1159: cipherstate,cs2_1160: cipherstate) = (if (not-caught-fail(v_1135) && success?(is-true(success?(1-proj-7-tuple(v_1135))))) then (if (not-caught-fail(v_1136) && success?(is-true(success?(1-proj-3-tuple(v_1136))))) then (if (not-caught-fail(v_1145) && success?(is-true(success?(1-proj-2-tuple(v_1145))))) then (if not-caught-fail(v_1146) then (if not-caught-fail(v_1147) then (if (not-caught-fail(v_1155) && success?(is-true(success?(1-proj-3-tuple(v_1155))))) then (v_1146,5-proj-7-tuple(v_1135),v_1147,2-proj-3-tuple(v_1155),3-proj-3-tuple(v_1155)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {599}event SendMsg(bob,charlie,stage_d,msg_d(bob,charlie),true);
        {600}insert statestore(bob,charlie,statepack_e(hs_1156));
        {601}out(pub, message_d_1158)
    ) | (
        {603}event LeakS(phase0,bob);
        {604}out(pub, key_s(bob))
    ) | (
        {605}phase 1;
        {606}event LeakS(phase1,bob);
        {607}out(pub, key_s(bob))
    )
) | (
    {608}out(pub, (key_s(charlie),key_e(charlie,alice),key_e(charlie,bob)))
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)); not event(RecvEnd(true))
Completing...
200 rules inserted. The rule base contains 200 rules. 312 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 124 rules in the queue.
600 rules inserted. The rule base contains 585 rules. 183 rules in the queue.
800 rules inserted. The rule base contains 764 rules. 202 rules in the queue.
1000 rules inserted. The rule base contains 940 rules. 154 rules in the queue.
1200 rules inserted. The rule base contains 1126 rules. 275 rules in the queue.
1400 rules inserted. The rule base contains 1297 rules. 241 rules in the queue.
1600 rules inserted. The rule base contains 1438 rules. 244 rules in the queue.
1800 rules inserted. The rule base contains 1562 rules. 190 rules in the queue.
2000 rules inserted. The rule base contains 1699 rules. 187 rules in the queue.
2200 rules inserted. The rule base contains 1823 rules. 225 rules in the queue.
2400 rules inserted. The rule base contains 1945 rules. 247 rules in the queue.
2600 rules inserted. The rule base contains 2050 rules. 272 rules in the queue.
2800 rules inserted. The rule base contains 2189 rules. 272 rules in the queue.
3000 rules inserted. The rule base contains 2350 rules. 302 rules in the queue.
3200 rules inserted. The rule base contains 2520 rules. 343 rules in the queue.
3400 rules inserted. The rule base contains 2642 rules. 352 rules in the queue.
3600 rules inserted. The rule base contains 2798 rules. 383 rules in the queue.
3800 rules inserted. The rule base contains 2948 rules. 394 rules in the queue.
4000 rules inserted. The rule base contains 3068 rules. 388 rules in the queue.
4200 rules inserted. The rule base contains 3180 rules. 372 rules in the queue.
4400 rules inserted. The rule base contains 3324 rules. 369 rules in the queue.
4600 rules inserted. The rule base contains 3488 rules. 355 rules in the queue.
4800 rules inserted. The rule base contains 3650 rules. 358 rules in the queue.
5000 rules inserted. The rule base contains 3808 rules. 397 rules in the queue.
5200 rules inserted. The rule base contains 3953 rules. 392 rules in the queue.
5400 rules inserted. The rule base contains 4112 rules. 399 rules in the queue.
5600 rules inserted. The rule base contains 4216 rules. 382 rules in the queue.
5800 rules inserted. The rule base contains 4312 rules. 375 rules in the queue.
6000 rules inserted. The rule base contains 4425 rules. 344 rules in the queue.
6200 rules inserted. The rule base contains 4532 rules. 286 rules in the queue.
6400 rules inserted. The rule base contains 4672 rules. 259 rules in the queue.
6600 rules inserted. The rule base contains 4815 rules. 260 rules in the queue.
6800 rules inserted. The rule base contains 4939 rules. 274 rules in the queue.
7000 rules inserted. The rule base contains 5024 rules. 261 rules in the queue.
7200 rules inserted. The rule base contains 5114 rules. 203 rules in the queue.
7400 rules inserted. The rule base contains 5247 rules. 166 rules in the queue.
7600 rules inserted. The rule base contains 5380 rules. 146 rules in the queue.
7800 rules inserted. The rule base contains 5476 rules. 112 rules in the queue.
8000 rules inserted. The rule base contains 5568 rules. 31 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {196}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {198}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {351}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {318}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {349}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1163,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {196}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {198}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {351}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {318}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {349}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {165}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {199}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {196}.
So the message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {198}.
mess(pub,concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {351}.
The message concat3(dhexp(key_e(alice,charlie),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,charlie),g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {318}.
We have dhexp(key_e(alice,charlie),g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {349}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


Could not find a trace corresponding to this derivation.
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_e(alice,bob),g).
attacker(dhexp(key_e(alice,bob),g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_e(alice,bob),g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


Could not find a trace corresponding to this derivation.
RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1163,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1163,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1163,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query not event(RecvEnd(true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvEnd(true))

1. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 1 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {45}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

3. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

4. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

5. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 4 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

6. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 3 may be read at get {351}.
The message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) that may be sent on channel pub by 5 may be received at input {318}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {350}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

7. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 6 may be read at get {406}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {403}.
So the message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) may be sent on channel pub at output {405}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))).

8. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 2 may be read at get {102}.
The message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) that may be sent on channel pub by 7 may be received at input {48}.
We have dhexp(key_e(bob,alice),g) <> caught-fail.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {101}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

9. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 8 may be read at get {120}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {117}.
So the entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {118}.
table(statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

10. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

11. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

12. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 11 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

13. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 10 may be read at get {351}.
The message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) that may be sent on channel pub by 12 may be received at input {318}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {350}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

14. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 13 may be read at get {406}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {403}.
So the entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {404}.
table(statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

15. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

16. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 15 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) may be inserted in a table at insert {45}.
table(statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true)))).

17. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {317}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

18. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {13}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

19. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 18 may be read at get {47}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {44}.
So the message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {46}.
mess(pub,concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

20. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 17 may be read at get {351}.
The message concat3(dhexp(key_e(alice,bob),g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) that may be sent on channel pub by 19 may be received at input {318}.
We have dhexp(key_e(alice,bob),g) <> caught-fail.
So the entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {350}.
table(statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

21. The entry statestore(bob,alice,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(empty,empty),keypairpack(empty,empty),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 20 may be read at get {406}.
The event SendMsg(bob,alice,stage_b,msg_b(bob,alice),true) may be executed at {403}.
So the message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) may be sent on channel pub at output {405}.
mess(pub,concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))).

22. The entry statestore(alice,bob,statepack_b(handshakestatepack(symmetricstatepack(cipherstatepack(empty,increment_nonce(increment_nonce(minnonce))),hash(somename,empty),hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),empty,empty,empty,true))) that may be in a table by 16 may be read at get {102}.
The message concat3(dhexp(key_e(bob,alice),g),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g)),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))) that may be sent on channel pub by 21 may be received at input {48}.
We have dhexp(key_e(bob,alice),g) <> caught-fail.
So the entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) may be inserted in a table at insert {101}.
table(statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true)))).

23. The entry statestore(alice,bob,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 22 may be read at get {120}.
The event SendMsg(alice,bob,stage_c,msg_c(alice,bob),true) may be executed at {117}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob))) may be sent on channel pub at output {119}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob)))).

24. The entry statestore(bob,alice,statepack_c(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce)),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 14 may be read at get {425}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob))) that may be sent on channel pub by 23 may be received at input {407}.
So the entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) may be inserted in a table at insert {424}.
table(statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false)))).

25. The entry statestore(bob,alice,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(bob),g),key_s(bob)),keypairpack(dhexp(key_e(bob,alice),g),key_e(bob,alice)),dhexp(key_s(alice),g),dhexp(key_e(alice,bob),g),empty,false))) that may be in a table by 24 may be read at get {451}.
The event SendMsg(bob,alice,stage_d,msg_d(bob,alice),true) may be executed at {448}.
So the message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice))) may be sent on channel pub at output {450}.
mess(pub,concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice)))).

26. The entry statestore(alice,bob,statepack_d(handshakestatepack(symmetricstatepack(cipherstatepack(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce))),hmac_hash1(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_s(bob),dhexp(key_e(alice,bob),g))),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob)))),keypairpack(dhexp(key_s(alice),g),key_s(alice)),keypairpack(dhexp(key_e(alice,bob),g),key_e(alice,bob)),dhexp(key_s(bob),g),dhexp(key_e(bob,alice),g),empty,true))) that may be in a table by 9 may be read at get {148}.
The message concat3(empty,empty,encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(increment_nonce(minnonce)),hash(hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),increment_nonce(minnonce),hash(hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),encrypt(hmac_hash2(hmac_hash1(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),dhexp(key_e(alice,bob),dhexp(key_s(bob),g))),minnonce,hash(hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),encrypt(hmac_hash2(hmac_hash1(hash(somename,empty),dhexp(key_e(alice,bob),dhexp(key_e(bob,alice),g))),dhexp(key_s(alice),dhexp(key_e(bob,alice),g))),minnonce,hash(hash(hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e(alice,bob),g)),dhexp(key_s(alice),g))),msg_a(alice,bob))),dhexp(key_e(bob,alice),g)),dhexp(key_s(bob),g))),msg_b(bob,alice))),msg_c(alice,bob))),msg_d(bob,alice))) that may be sent on channel pub by 25 may be received at input {121}.
So event RecvEnd(true) may be executed at {147}.
end(RecvEnd(true)).


Could not find a trace corresponding to this derivation.
RESULT not event(RecvEnd(true)) cannot be proved.
