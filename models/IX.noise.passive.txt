File "IX.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 249, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 250, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 250, character 36:
Warning: identifier h rebound.
File "IX.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 294, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 295, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 295, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IX.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 311, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 312, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 312, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IX.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 340, characters 6-7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 343, characters 48-53:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 344, characters 6-7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 345, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 347, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 355, characters 6-7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 358, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 360, characters 48-53:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 361, characters 6-7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 362, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 363, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 365, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 375, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 385, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 530, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 383, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 385, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 522, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 322, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 322, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 323, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 515, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 355, characters 6-7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 356, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 358, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 359, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 360, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 360, characters 48-53:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 361, characters 6-7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 362, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 363, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 365, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 507, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 290, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 291, characters 6-7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 292, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 294, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 295, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 295, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IX.noise.passive.pv", line 296, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 296, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 297, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 580, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 330, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 330, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 331, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 573, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 373, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 375, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 565, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 305, character 6:
Warning: identifier e rebound.
File "IX.noise.passive.pv", line 306, characters 6-7:
Warning: identifier ne rebound.
File "IX.noise.passive.pv", line 307, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 309, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 310, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 311, character 6:
Warning: identifier s rebound.
File "IX.noise.passive.pv", line 312, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 312, characters 26-36:
Warning: identifier ciphertext1 rebound.
File "IX.noise.passive.pv", line 313, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 314, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 314, characters 26-36:
Warning: identifier ciphertext2 rebound.
File "IX.noise.passive.pv", line 315, characters 6-7:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 240, characters 7-8:
Warning: identifier ck rebound.
File "IX.noise.passive.pv", line 259, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 260, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 558, characters 8-9:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 340, characters 6-7:
Warning: identifier re rebound.
File "IX.noise.passive.pv", line 341, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 343, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 343, characters 48-53:
Warning: identifier valid1 rebound.
File "IX.noise.passive.pv", line 344, characters 6-7:
Warning: identifier rs rebound.
File "IX.noise.passive.pv", line 345, characters 7-8:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 347, characters 7-8:
Warning: identifier hs rebound.
File "IX.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
File "IX.noise.passive.pv", line 265, characters 7-8:
Warning: identifier cs rebound.
File "IX.noise.passive.pv", line 266, characters 6-7:
Warning: identifier ss rebound.
Linear part:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Completing equations...
Completed equations:
dhexp(b_49,dhexp(a_48,g)) = dhexp(a_48,dhexp(b_49,g))
Convergent part:
Completing equations...
Completed equations:
Process:
{1}out(pub, key_s(charlie));
{2}!
(
    {3}let them: principal = bob in
    {4}let me: principal = alice in
    {5}let s_511: keypair = keypairpack(empty,empty) in
    {6}out(pub, getpublickey(s_511));
    (
        {7}let e_512: keypair = keypairpack(empty,empty) in
        {8}let rs_513: key = empty in
        {9}let re_514: key = empty in
        {10}let v_515: bitstring = catch-fail(hash(somename,empty)) in
        {11}let v_516: key = catch-fail(v_515) in
        {12}let v_517: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {13}let v_518: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (if not-caught-fail(v_517) then symmetricstatepack(v_517,v_516,v_515) else fail-any) else fail-any) else fail-any))) in
        {14}let v_519: symmetricstate = catch-fail((if success?((if not-caught-fail(v_515) then (if not-caught-fail(v_516) then (if not-caught-fail(v_517) then symmetricstatepack(v_517,v_516,v_515) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_518) && success?(is-true(success?(1-proj-3-tuple(v_518))))) then symmetricstatepack(1-proj-3-tuple(v_518),2-proj-3-tuple(v_518),hash(3-proj-3-tuple(v_518),empty)) else fail-any) else fail-any)) in
        {15}let hs: handshakestate = (if not-caught-fail(v_519) then handshakestatepack(v_519,s_511,e_512,rs_513,re_514,empty,true) else fail-any) in
        {16}insert statestore(me,them,statepack_a(hs))
    ) | (
        {51}get statestore(=me,=them,statepack_a(hs_520: handshakestate)) in
        {17}let v_521: bitstring = catch-fail(handshakestateunpack(hs_520)) in
        {18}let v_522: bitstring = catch-fail((empty,empty,empty)) in
        {19}new key_e[me,them]: key;
        {20}let v_523: key = catch-fail(dhexp(key_e,g)) in
        {21}let v_524: keypair = catch-fail((if not-caught-fail(v_523) then keypairpack(v_523,key_e) else fail-any)) in
        {22}let v_525: bitstring = catch-fail(getpublickey(v_524)) in
        {23}let v_526: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_521))) in
        {24}let v_527: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_521)) then (if (not-caught-fail(v_526) && success?(is-true(success?(1-proj-3-tuple(v_526))))) then symmetricstatepack(1-proj-3-tuple(v_526),2-proj-3-tuple(v_526),hash(3-proj-3-tuple(v_526),v_525)) else fail-any) else fail-any)) in
        {25}let v_528: key = catch-fail(dhexp(key_s(me),g)) in
        {26}let v_529: keypair = catch-fail((if not-caught-fail(v_528) then keypairpack(v_528,key_s(me)) else fail-any)) in
        {27}let v_530: bitstring = catch-fail(symmetricstateunpack(v_527)) in
        {28}let v_531: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {29}let v_532: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_531),2-proj-2-tuple(v_531),3-proj-3-tuple(v_530),getpublickey(v_529))) in
        {30}let v_533: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_530))) in
        {31}let v_534: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_531))) && success?(1-proj-3-tuple(v_530))) then (if (not-caught-fail(v_533) && success?(is-true(success?(1-proj-2-tuple(v_533))))) then cipherstatepack(1-proj-2-tuple(v_533),increment_nonce(2-proj-2-tuple(v_531))) else fail-any) else fail-any)) in
        {32}let v_535: bitstring = catch-fail((if (success?(getpublickey(v_529)) && (success?(3-proj-3-tuple(v_530)) && success?(1-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_531) && success?(is-true(success?(1-proj-2-tuple(v_531))))) then (if not-caught-fail(v_532) then (if not-caught-fail(v_534) then (v_534,v_532) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {33}let v_536: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_535),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) in
        {34}let v_537: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_535)) && success?(symmetricstatepack(1-proj-2-tuple(v_535),2-proj-3-tuple(v_530),3-proj-3-tuple(v_530)))) then (if (not-caught-fail(v_536) && success?(is-true(success?(1-proj-3-tuple(v_536))))) then symmetricstatepack(1-proj-3-tuple(v_536),2-proj-3-tuple(v_536),hash(3-proj-3-tuple(v_536),2-proj-2-tuple(v_535))) else fail-any) else fail-any)) in
        {35}let v_538: bitstring = catch-fail((if success?(getpublickey(v_529)) then (if (not-caught-fail(v_530) && success?(is-true(success?(1-proj-3-tuple(v_530))))) then (if (not-caught-fail(v_535) && success?(is-true(success?(1-proj-2-tuple(v_535))))) then (if not-caught-fail(v_537) then (v_537,2-proj-2-tuple(v_535)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {36}let v_539: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_538))) in
        {37}let v_540: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_539))) in
        {38}let v_541: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_540),2-proj-2-tuple(v_540),3-proj-3-tuple(v_539),msg_a(me,them))) in
        {39}let v_542: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_539))) in
        {40}let v_543: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_540))) && success?(1-proj-3-tuple(v_539))) then (if (not-caught-fail(v_542) && success?(is-true(success?(1-proj-2-tuple(v_542))))) then cipherstatepack(1-proj-2-tuple(v_542),increment_nonce(2-proj-2-tuple(v_540))) else fail-any) else fail-any)) in
        {41}let v_544: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_539)) && success?(1-proj-3-tuple(v_539))) then (if (not-caught-fail(v_540) && success?(is-true(success?(1-proj-2-tuple(v_540))))) then (if not-caught-fail(v_541) then (if not-caught-fail(v_543) then (v_543,v_541) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {42}let v_545: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_544),2-proj-3-tuple(v_539),3-proj-3-tuple(v_539)))) in
        {43}let v_546: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_544)) && success?(symmetricstatepack(1-proj-2-tuple(v_544),2-proj-3-tuple(v_539),3-proj-3-tuple(v_539)))) then (if (not-caught-fail(v_545) && success?(is-true(success?(1-proj-3-tuple(v_545))))) then symmetricstatepack(1-proj-3-tuple(v_545),2-proj-3-tuple(v_545),hash(3-proj-3-tuple(v_545),2-proj-2-tuple(v_544))) else fail-any) else fail-any)) in
        {44}let v_547: bitstring = catch-fail((if success?(1-proj-2-tuple(v_538)) then (if (not-caught-fail(v_539) && success?(is-true(success?(1-proj-3-tuple(v_539))))) then (if (not-caught-fail(v_544) && success?(is-true(success?(1-proj-2-tuple(v_544))))) then (if not-caught-fail(v_546) then (v_546,2-proj-2-tuple(v_544)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {45}let v_548: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_547),v_529,v_524,4-proj-7-tuple(v_521),5-proj-7-tuple(v_521),6-proj-7-tuple(v_521),7-proj-7-tuple(v_521))) in
        {46}let v_549: bitstring = catch-fail(concat3(v_525,2-proj-2-tuple(v_538),2-proj-2-tuple(v_547))) in
        {47}let (hs_550: handshakestate,re_551: key,message_a: bitstring) = (if (not-caught-fail(v_521) && success?(is-true(success?(1-proj-7-tuple(v_521))))) then (if (not-caught-fail(v_522) && success?(is-true(success?(1-proj-3-tuple(v_522))))) then (if not-caught-fail(v_524) then (if not-caught-fail(v_525) then (if not-caught-fail(v_527) then (if not-caught-fail(v_529) then (if (not-caught-fail(v_538) && success?(is-true(success?(1-proj-2-tuple(v_538))))) then (if (not-caught-fail(v_547) && success?(is-true(success?(1-proj-2-tuple(v_547))))) then (if not-caught-fail(v_548) then (if not-caught-fail(v_549) then (v_548,5-proj-7-tuple(v_521),v_549) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {48}event SendMsg(me,them,stage_a,msg_a(me,them),true);
        {49}insert statestore(me,them,statepack_b(hs_550));
        {50}out(pub, message_a)
    ) | (
        {106}get statestore(=me,=them,statepack_b(hs_552: handshakestate)) in
        {52}in(pub, message_b: bitstring);
        {53}let v_553: bitstring = catch-fail(handshakestateunpack(hs_552)) in
        {54}let v_554: bitstring = catch-fail(deconcat3(message_b)) in
        {55}let v_555: bool = catch-fail(true) in
        {56}let v_556: key = catch-fail(1-proj-3-tuple(v_554)) in
        {57}let v_557: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_553))) in
        {58}let v_558: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_553)) then (if (not-caught-fail(v_557) && success?(is-true(success?(1-proj-3-tuple(v_557))))) then symmetricstatepack(1-proj-3-tuple(v_557),2-proj-3-tuple(v_557),hash(3-proj-3-tuple(v_557),v_556)) else fail-any) else fail-any)) in
        {59}let v_559: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_553))) in
        {60}let v_560: bitstring = catch-fail(symmetricstateunpack(v_558)) in
        {61}let v_561: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
        {62}let v_562: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
        {63}let v_563: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_560),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any))) in
        {64}let v_564: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_560))) then (if not-caught-fail(v_561) then (if not-caught-fail(v_562) then (if not-caught-fail(v_563) then (v_561,v_562,v_563) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {65}let v_565: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_559) && success?(is-true(success?(1-proj-2-tuple(v_559))))) then dhexp(2-proj-2-tuple(v_559),v_556) else fail-any) else fail-any)) then (if (not-caught-fail(v_560) && success?(is-true(success?(1-proj-3-tuple(v_560))))) then (if (not-caught-fail(v_564) && success?(is-true(success?(1-proj-3-tuple(v_564))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_564)) then cipherstatepack(2-proj-3-tuple(v_564),minnonce) else fail-any),1-proj-3-tuple(v_564),3-proj-3-tuple(v_560)) else fail-any) else fail-any) else fail-any)) in
        {66}let v_566: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_553))) in
        {67}let v_567: bitstring = catch-fail(symmetricstateunpack(v_565)) in
        {68}let v_568: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_567),(if success?(2-proj-7-tuple(v_553)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_556) else fail-any) else fail-any))) in
        {69}let v_569: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_567),(if success?(2-proj-7-tuple(v_553)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_556) else fail-any) else fail-any))) in
        {70}let v_570: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_567),(if success?(2-proj-7-tuple(v_553)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_556) else fail-any) else fail-any))) in
        {71}let v_571: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_553)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_556) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_567))) then (if not-caught-fail(v_568) then (if not-caught-fail(v_569) then (if not-caught-fail(v_570) then (v_568,v_569,v_570) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {72}let v_572: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_553)) then (if (not-caught-fail(v_566) && success?(is-true(success?(1-proj-2-tuple(v_566))))) then dhexp(2-proj-2-tuple(v_566),v_556) else fail-any) else fail-any)) then (if (not-caught-fail(v_567) && success?(is-true(success?(1-proj-3-tuple(v_567))))) then (if (not-caught-fail(v_571) && success?(is-true(success?(1-proj-3-tuple(v_571))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_571)) then cipherstatepack(2-proj-3-tuple(v_571),minnonce) else fail-any),1-proj-3-tuple(v_571),3-proj-3-tuple(v_567)) else fail-any) else fail-any) else fail-any)) in
        {73}let v_573: bitstring = catch-fail(symmetricstateunpack(v_572)) in
        {74}let v_574: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {75}let v_575: aead = catch-fail(decrypt(1-proj-2-tuple(v_574),2-proj-2-tuple(v_574),3-proj-3-tuple(v_573),2-proj-3-tuple(v_554))) in
        {76}let v_576: bitstring = catch-fail(aeadunpack(v_575)) in
        {77}let v_577: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_573))) in
        {78}let v_578: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_574))) && success?(1-proj-3-tuple(v_573))) then (if (not-caught-fail(v_577) && success?(is-true(success?(1-proj-2-tuple(v_577))))) then cipherstatepack(1-proj-2-tuple(v_577),increment_nonce(2-proj-2-tuple(v_574))) else fail-any) else fail-any)) in
        {79}let v_579: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_554)) && (success?(3-proj-3-tuple(v_573)) && success?(1-proj-3-tuple(v_573)))) then (if (not-caught-fail(v_574) && success?(is-true(success?(1-proj-2-tuple(v_574))))) then (if not-caught-fail(v_575) then (if (not-caught-fail(v_576) && success?(is-true(success?(1-proj-3-tuple(v_576))))) then (if not-caught-fail(v_578) then (v_578,3-proj-3-tuple(v_576),1-proj-3-tuple(v_576)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {80}let v_580: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) in
        {81}let v_581: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_554)) && success?(symmetricstatepack(1-proj-3-tuple(v_579),2-proj-3-tuple(v_573),3-proj-3-tuple(v_573)))) then (if (not-caught-fail(v_580) && success?(is-true(success?(1-proj-3-tuple(v_580))))) then symmetricstatepack(1-proj-3-tuple(v_580),2-proj-3-tuple(v_580),hash(3-proj-3-tuple(v_580),2-proj-3-tuple(v_554))) else fail-any) else fail-any)) in
        {82}let v_582: bitstring = catch-fail((if success?(2-proj-3-tuple(v_554)) then (if (not-caught-fail(v_573) && success?(is-true(success?(1-proj-3-tuple(v_573))))) then (if (not-caught-fail(v_579) && success?(is-true(success?(1-proj-3-tuple(v_579))))) then (if not-caught-fail(v_581) then (v_581,2-proj-3-tuple(v_579),3-proj-3-tuple(v_579)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {83}let v_583: key = catch-fail(2-proj-3-tuple(v_582)) in
        {84}let v_584: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_553))) in
        {85}let v_585: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_582))) in
        {86}let v_586: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_585),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_583) else fail-any) else fail-any))) in
        {87}let v_587: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_585),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_583) else fail-any) else fail-any))) in
        {88}let v_588: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_585),(if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_583) else fail-any) else fail-any))) in
        {89}let v_589: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_583) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_585))) then (if not-caught-fail(v_586) then (if not-caught-fail(v_587) then (if not-caught-fail(v_588) then (v_586,v_587,v_588) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {90}let v_590: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_553)) then (if (not-caught-fail(v_584) && success?(is-true(success?(1-proj-2-tuple(v_584))))) then dhexp(2-proj-2-tuple(v_584),v_583) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_582))) then (if (not-caught-fail(v_585) && success?(is-true(success?(1-proj-3-tuple(v_585))))) then (if (not-caught-fail(v_589) && success?(is-true(success?(1-proj-3-tuple(v_589))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_589)) then cipherstatepack(2-proj-3-tuple(v_589),minnonce) else fail-any),1-proj-3-tuple(v_589),3-proj-3-tuple(v_585)) else fail-any) else fail-any) else fail-any)) in
        {91}let v_591: bitstring = catch-fail(symmetricstateunpack(v_590)) in
        {92}let v_592: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_591))) in
        {93}let v_593: aead = catch-fail(decrypt(1-proj-2-tuple(v_592),2-proj-2-tuple(v_592),3-proj-3-tuple(v_591),3-proj-3-tuple(v_554))) in
        {94}let v_594: bitstring = catch-fail(aeadunpack(v_593)) in
        {95}let v_595: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_591))) in
        {96}let v_596: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_592))) && success?(1-proj-3-tuple(v_591))) then (if (not-caught-fail(v_595) && success?(is-true(success?(1-proj-2-tuple(v_595))))) then cipherstatepack(1-proj-2-tuple(v_595),increment_nonce(2-proj-2-tuple(v_592))) else fail-any) else fail-any)) in
        {97}let v_597: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_554)) && (success?(3-proj-3-tuple(v_591)) && success?(1-proj-3-tuple(v_591)))) then (if (not-caught-fail(v_592) && success?(is-true(success?(1-proj-2-tuple(v_592))))) then (if not-caught-fail(v_593) then (if (not-caught-fail(v_594) && success?(is-true(success?(1-proj-3-tuple(v_594))))) then (if not-caught-fail(v_596) then (v_596,3-proj-3-tuple(v_594),1-proj-3-tuple(v_594)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {98}let v_598: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_591),3-proj-3-tuple(v_591)))) in
        {99}let v_599: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_554)) && success?(symmetricstatepack(1-proj-3-tuple(v_597),2-proj-3-tuple(v_591),3-proj-3-tuple(v_591)))) then (if (not-caught-fail(v_598) && success?(is-true(success?(1-proj-3-tuple(v_598))))) then symmetricstatepack(1-proj-3-tuple(v_598),2-proj-3-tuple(v_598),hash(3-proj-3-tuple(v_598),3-proj-3-tuple(v_554))) else fail-any) else fail-any)) in
        {100}let v_600: bitstring = catch-fail((if success?(3-proj-3-tuple(v_554)) then (if (not-caught-fail(v_591) && success?(is-true(success?(1-proj-3-tuple(v_591))))) then (if (not-caught-fail(v_597) && success?(is-true(success?(1-proj-3-tuple(v_597))))) then (if not-caught-fail(v_599) then (v_599,2-proj-3-tuple(v_597),3-proj-3-tuple(v_597)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {101}let v_601: key = catch-fail(dhexp(key_s(them),g)) in
        {102}let v_602: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_600),2-proj-7-tuple(v_553),3-proj-7-tuple(v_553),v_583,v_556,6-proj-7-tuple(v_553),7-proj-7-tuple(v_553))) in
        {103}let (hs_603: handshakestate,re_604: key,plaintext_b: bitstring,valid: bool) = (if (not-caught-fail(v_553) && success?(is-true(success?(1-proj-7-tuple(v_553))))) then (if (not-caught-fail(v_554) && success?(is-true(success?(1-proj-3-tuple(v_554))))) then (if not-caught-fail(v_555) then (if not-caught-fail(v_556) then (if not-caught-fail(v_558) then (if not-caught-fail(v_565) then (if not-caught-fail(v_572) then (if (not-caught-fail(v_582) && success?(is-true(success?(1-proj-3-tuple(v_582))))) then (if not-caught-fail(v_583) then (if not-caught-fail(v_590) then (if (not-caught-fail(v_600) && success?(is-true(success?(1-proj-3-tuple(v_600))))) then (if ((3-proj-3-tuple(v_582) && 3-proj-3-tuple(v_600)) && (v_583 = getpublickey((if not-caught-fail(v_601) then keypairpack(v_601,key_s(them)) else fail-any)))) then (if not-caught-fail(v_602) then (v_602,getpublickey(3-proj-7-tuple(v_553)),2-proj-3-tuple(v_600),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {104}event RecvMsg(me,them,stage_b,plaintext_b,valid);
        {105}insert statestore(me,them,statepack_c(hs_603))
    ) | (
        {124}get statestore(=me,=them,statepack_c(hs_605: handshakestate)) in
        {107}let v_606: bitstring = catch-fail(handshakestateunpack(hs_605)) in
        {108}let v_607: bitstring = catch-fail((empty,empty,empty)) in
        {109}let v_608: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_606))) in
        {110}let v_609: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_608))) in
        {111}let v_610: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_609),2-proj-2-tuple(v_609),3-proj-3-tuple(v_608),msg_c(me,them))) in
        {112}let v_611: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_608))) in
        {113}let v_612: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_609))) && success?(1-proj-3-tuple(v_608))) then (if (not-caught-fail(v_611) && success?(is-true(success?(1-proj-2-tuple(v_611))))) then cipherstatepack(1-proj-2-tuple(v_611),increment_nonce(2-proj-2-tuple(v_609))) else fail-any) else fail-any)) in
        {114}let v_613: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_608)) && success?(1-proj-3-tuple(v_608))) then (if (not-caught-fail(v_609) && success?(is-true(success?(1-proj-2-tuple(v_609))))) then (if not-caught-fail(v_610) then (if not-caught-fail(v_612) then (v_612,v_610) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {115}let v_614: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_613),2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)))) in
        {116}let v_615: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_613)) && success?(symmetricstatepack(1-proj-2-tuple(v_613),2-proj-3-tuple(v_608),3-proj-3-tuple(v_608)))) then (if (not-caught-fail(v_614) && success?(is-true(success?(1-proj-3-tuple(v_614))))) then symmetricstatepack(1-proj-3-tuple(v_614),2-proj-3-tuple(v_614),hash(3-proj-3-tuple(v_614),2-proj-2-tuple(v_613))) else fail-any) else fail-any)) in
        {117}let v_616: bitstring = catch-fail((if success?(1-proj-7-tuple(v_606)) then (if (not-caught-fail(v_608) && success?(is-true(success?(1-proj-3-tuple(v_608))))) then (if (not-caught-fail(v_613) && success?(is-true(success?(1-proj-2-tuple(v_613))))) then (if not-caught-fail(v_615) then (v_615,2-proj-2-tuple(v_613)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {118}let v_617: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_616),2-proj-7-tuple(v_606),3-proj-7-tuple(v_606),4-proj-7-tuple(v_606),5-proj-7-tuple(v_606),6-proj-7-tuple(v_606),7-proj-7-tuple(v_606))) in
        {119}let v_618: bitstring = catch-fail(concat3(1-proj-3-tuple(v_607),2-proj-3-tuple(v_607),2-proj-2-tuple(v_616))) in
        {120}let (hs_619: handshakestate,re_620: key,message_c: bitstring) = (if (not-caught-fail(v_606) && success?(is-true(success?(1-proj-7-tuple(v_606))))) then (if (not-caught-fail(v_607) && success?(is-true(success?(1-proj-3-tuple(v_607))))) then (if (not-caught-fail(v_616) && success?(is-true(success?(1-proj-2-tuple(v_616))))) then (if not-caught-fail(v_617) then (if not-caught-fail(v_618) then (v_617,5-proj-7-tuple(v_606),v_618) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {121}event SendMsg(me,them,stage_c,msg_c(me,them),true);
        {122}insert statestore(me,them,statepack_d(hs_619));
        {123}out(pub, message_c)
    ) | (
        {152}get statestore(=me,=them,statepack_d(hs_621: handshakestate)) in
        {125}in(pub, message_d: bitstring);
        {126}let v_622: bitstring = catch-fail(handshakestateunpack(hs_621)) in
        {127}let v_623: bitstring = catch-fail(deconcat3(message_d)) in
        {128}let v_624: bool = catch-fail(true) in
        {129}let v_625: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_622))) in
        {130}let v_626: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_625))) in
        {131}let v_627: aead = catch-fail(decrypt(1-proj-2-tuple(v_626),2-proj-2-tuple(v_626),3-proj-3-tuple(v_625),3-proj-3-tuple(v_623))) in
        {132}let v_628: bitstring = catch-fail(aeadunpack(v_627)) in
        {133}let v_629: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_625))) in
        {134}let v_630: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_626))) && success?(1-proj-3-tuple(v_625))) then (if (not-caught-fail(v_629) && success?(is-true(success?(1-proj-2-tuple(v_629))))) then cipherstatepack(1-proj-2-tuple(v_629),increment_nonce(2-proj-2-tuple(v_626))) else fail-any) else fail-any)) in
        {135}let v_631: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_623)) && (success?(3-proj-3-tuple(v_625)) && success?(1-proj-3-tuple(v_625)))) then (if (not-caught-fail(v_626) && success?(is-true(success?(1-proj-2-tuple(v_626))))) then (if not-caught-fail(v_627) then (if (not-caught-fail(v_628) && success?(is-true(success?(1-proj-3-tuple(v_628))))) then (if not-caught-fail(v_630) then (v_630,3-proj-3-tuple(v_628),1-proj-3-tuple(v_628)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {136}let v_632: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_631),2-proj-3-tuple(v_625),3-proj-3-tuple(v_625)))) in
        {137}let v_633: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_623)) && success?(symmetricstatepack(1-proj-3-tuple(v_631),2-proj-3-tuple(v_625),3-proj-3-tuple(v_625)))) then (if (not-caught-fail(v_632) && success?(is-true(success?(1-proj-3-tuple(v_632))))) then symmetricstatepack(1-proj-3-tuple(v_632),2-proj-3-tuple(v_632),hash(3-proj-3-tuple(v_632),3-proj-3-tuple(v_623))) else fail-any) else fail-any)) in
        {138}let v_634: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_623)) && success?(1-proj-7-tuple(v_622))) then (if (not-caught-fail(v_625) && success?(is-true(success?(1-proj-3-tuple(v_625))))) then (if (not-caught-fail(v_631) && success?(is-true(success?(1-proj-3-tuple(v_631))))) then (if not-caught-fail(v_633) then (v_633,2-proj-3-tuple(v_631),3-proj-3-tuple(v_631)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {139}let v_635: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_634),2-proj-7-tuple(v_622),3-proj-7-tuple(v_622),4-proj-7-tuple(v_622),5-proj-7-tuple(v_622),6-proj-7-tuple(v_622),7-proj-7-tuple(v_622))) in
        {140}let v_636: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_634))) in
        {141}let v_637: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_636),zero)) in
        {142}let v_638: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_636),zero)) in
        {143}let v_639: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_636),zero)) in
        {144}let v_640: bitstring = catch-fail((if success?(2-proj-3-tuple(v_636)) then (if not-caught-fail(v_637) then (if not-caught-fail(v_638) then (if not-caught-fail(v_639) then (v_637,v_638,v_639) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {145}let v_641: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_640)) then cipherstatepack(1-proj-3-tuple(v_640),minnonce) else fail-any)) in
        {146}let v_642: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_640)) then cipherstatepack(2-proj-3-tuple(v_640),minnonce) else fail-any)) in
        {147}let v_643: bitstring = catch-fail((if success?(1-proj-3-tuple(v_634)) then (if (not-caught-fail(v_636) && success?(is-true(success?(1-proj-3-tuple(v_636))))) then (if (not-caught-fail(v_640) && success?(is-true(success?(1-proj-3-tuple(v_640))))) then (if not-caught-fail(v_641) then (if not-caught-fail(v_642) then (1-proj-3-tuple(v_634),v_641,v_642) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {148}let (hs_644: handshakestate,re_645: key,plaintext_d: bitstring,valid_646: bool,cs1: cipherstate,cs2: cipherstate) = (if (not-caught-fail(v_622) && success?(is-true(success?(1-proj-7-tuple(v_622))))) then (if (not-caught-fail(v_623) && success?(is-true(success?(1-proj-3-tuple(v_623))))) then (if not-caught-fail(v_624) then (if (not-caught-fail(v_634) && success?(is-true(success?(1-proj-3-tuple(v_634))))) then (if (v_624 && 3-proj-3-tuple(v_634)) then (if not-caught-fail(v_635) then (if (not-caught-fail(v_643) && success?(is-true(success?(1-proj-3-tuple(v_643))))) then (v_635,getpublickey(3-proj-7-tuple(v_622)),2-proj-3-tuple(v_634),true,2-proj-3-tuple(v_643),3-proj-3-tuple(v_643)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {149}event RecvMsg(me,them,stage_d,plaintext_d,valid_646);
        {150}insert statestore(me,them,statepack_e(hs_644));
        {151}event RecvEnd(valid_646)
    ) | (
        {153}event LeakS(phase0,me);
        {154}out(pub, key_s(me))
    ) | (
        {155}phase 1;
        {156}event LeakS(phase1,me);
        {157}out(pub, key_s(me))
    )
) | (
    {158}let them_647: principal = charlie in
    {159}let me_648: principal = alice in
    {160}let s_649: keypair = keypairpack(empty,empty) in
    {161}out(pub, getpublickey(s_649));
    (
        {162}let e_650: keypair = keypairpack(empty,empty) in
        {163}let rs_651: key = empty in
        {164}let re_652: key = empty in
        {165}let v_653: bitstring = catch-fail(hash(somename,empty)) in
        {166}let v_654: key = catch-fail(v_653) in
        {167}let v_655: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {168}let v_656: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then symmetricstatepack(v_655,v_654,v_653) else fail-any) else fail-any) else fail-any))) in
        {169}let v_657: symmetricstate = catch-fail((if success?((if not-caught-fail(v_653) then (if not-caught-fail(v_654) then (if not-caught-fail(v_655) then symmetricstatepack(v_655,v_654,v_653) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_656) && success?(is-true(success?(1-proj-3-tuple(v_656))))) then symmetricstatepack(1-proj-3-tuple(v_656),2-proj-3-tuple(v_656),hash(3-proj-3-tuple(v_656),empty)) else fail-any) else fail-any)) in
        {170}let hs_658: handshakestate = (if not-caught-fail(v_657) then handshakestatepack(v_657,s_649,e_650,rs_651,re_652,empty,true) else fail-any) in
        {171}insert statestore(me_648,them_647,statepack_a(hs_658))
    ) | (
        {206}get statestore(=me_648,=them_647,statepack_a(hs_659: handshakestate)) in
        {172}let v_660: bitstring = catch-fail(handshakestateunpack(hs_659)) in
        {173}let v_661: bitstring = catch-fail((empty,empty,empty)) in
        {174}new key_e_662[me_648,them_647]: key;
        {175}let v_663: key = catch-fail(dhexp(key_e_662,g)) in
        {176}let v_664: keypair = catch-fail((if not-caught-fail(v_663) then keypairpack(v_663,key_e_662) else fail-any)) in
        {177}let v_665: bitstring = catch-fail(getpublickey(v_664)) in
        {178}let v_666: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_660))) in
        {179}let v_667: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_660)) then (if (not-caught-fail(v_666) && success?(is-true(success?(1-proj-3-tuple(v_666))))) then symmetricstatepack(1-proj-3-tuple(v_666),2-proj-3-tuple(v_666),hash(3-proj-3-tuple(v_666),v_665)) else fail-any) else fail-any)) in
        {180}let v_668: key = catch-fail(dhexp(key_s(me_648),g)) in
        {181}let v_669: keypair = catch-fail((if not-caught-fail(v_668) then keypairpack(v_668,key_s(me_648)) else fail-any)) in
        {182}let v_670: bitstring = catch-fail(symmetricstateunpack(v_667)) in
        {183}let v_671: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {184}let v_672: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_671),2-proj-2-tuple(v_671),3-proj-3-tuple(v_670),getpublickey(v_669))) in
        {185}let v_673: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_670))) in
        {186}let v_674: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_671))) && success?(1-proj-3-tuple(v_670))) then (if (not-caught-fail(v_673) && success?(is-true(success?(1-proj-2-tuple(v_673))))) then cipherstatepack(1-proj-2-tuple(v_673),increment_nonce(2-proj-2-tuple(v_671))) else fail-any) else fail-any)) in
        {187}let v_675: bitstring = catch-fail((if (success?(getpublickey(v_669)) && (success?(3-proj-3-tuple(v_670)) && success?(1-proj-3-tuple(v_670)))) then (if (not-caught-fail(v_671) && success?(is-true(success?(1-proj-2-tuple(v_671))))) then (if not-caught-fail(v_672) then (if not-caught-fail(v_674) then (v_674,v_672) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {188}let v_676: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_675),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) in
        {189}let v_677: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_675)) && success?(symmetricstatepack(1-proj-2-tuple(v_675),2-proj-3-tuple(v_670),3-proj-3-tuple(v_670)))) then (if (not-caught-fail(v_676) && success?(is-true(success?(1-proj-3-tuple(v_676))))) then symmetricstatepack(1-proj-3-tuple(v_676),2-proj-3-tuple(v_676),hash(3-proj-3-tuple(v_676),2-proj-2-tuple(v_675))) else fail-any) else fail-any)) in
        {190}let v_678: bitstring = catch-fail((if success?(getpublickey(v_669)) then (if (not-caught-fail(v_670) && success?(is-true(success?(1-proj-3-tuple(v_670))))) then (if (not-caught-fail(v_675) && success?(is-true(success?(1-proj-2-tuple(v_675))))) then (if not-caught-fail(v_677) then (v_677,2-proj-2-tuple(v_675)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {191}let v_679: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_678))) in
        {192}let v_680: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_679))) in
        {193}let v_681: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_680),2-proj-2-tuple(v_680),3-proj-3-tuple(v_679),msg_a(me_648,them_647))) in
        {194}let v_682: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_679))) in
        {195}let v_683: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_680))) && success?(1-proj-3-tuple(v_679))) then (if (not-caught-fail(v_682) && success?(is-true(success?(1-proj-2-tuple(v_682))))) then cipherstatepack(1-proj-2-tuple(v_682),increment_nonce(2-proj-2-tuple(v_680))) else fail-any) else fail-any)) in
        {196}let v_684: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_679)) && success?(1-proj-3-tuple(v_679))) then (if (not-caught-fail(v_680) && success?(is-true(success?(1-proj-2-tuple(v_680))))) then (if not-caught-fail(v_681) then (if not-caught-fail(v_683) then (v_683,v_681) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {197}let v_685: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_684),2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)))) in
        {198}let v_686: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_684)) && success?(symmetricstatepack(1-proj-2-tuple(v_684),2-proj-3-tuple(v_679),3-proj-3-tuple(v_679)))) then (if (not-caught-fail(v_685) && success?(is-true(success?(1-proj-3-tuple(v_685))))) then symmetricstatepack(1-proj-3-tuple(v_685),2-proj-3-tuple(v_685),hash(3-proj-3-tuple(v_685),2-proj-2-tuple(v_684))) else fail-any) else fail-any)) in
        {199}let v_687: bitstring = catch-fail((if success?(1-proj-2-tuple(v_678)) then (if (not-caught-fail(v_679) && success?(is-true(success?(1-proj-3-tuple(v_679))))) then (if (not-caught-fail(v_684) && success?(is-true(success?(1-proj-2-tuple(v_684))))) then (if not-caught-fail(v_686) then (v_686,2-proj-2-tuple(v_684)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {200}let v_688: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_687),v_669,v_664,4-proj-7-tuple(v_660),5-proj-7-tuple(v_660),6-proj-7-tuple(v_660),7-proj-7-tuple(v_660))) in
        {201}let v_689: bitstring = catch-fail(concat3(v_665,2-proj-2-tuple(v_678),2-proj-2-tuple(v_687))) in
        {202}let (hs_690: handshakestate,re_691: key,message_a_692: bitstring) = (if (not-caught-fail(v_660) && success?(is-true(success?(1-proj-7-tuple(v_660))))) then (if (not-caught-fail(v_661) && success?(is-true(success?(1-proj-3-tuple(v_661))))) then (if not-caught-fail(v_664) then (if not-caught-fail(v_665) then (if not-caught-fail(v_667) then (if not-caught-fail(v_669) then (if (not-caught-fail(v_678) && success?(is-true(success?(1-proj-2-tuple(v_678))))) then (if (not-caught-fail(v_687) && success?(is-true(success?(1-proj-2-tuple(v_687))))) then (if not-caught-fail(v_688) then (if not-caught-fail(v_689) then (v_688,5-proj-7-tuple(v_660),v_689) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {203}event SendMsg(me_648,them_647,stage_a,msg_a(me_648,them_647),true);
        {204}insert statestore(me_648,them_647,statepack_b(hs_690));
        {205}out(pub, message_a_692)
    ) | (
        {261}get statestore(=me_648,=them_647,statepack_b(hs_693: handshakestate)) in
        {207}in(pub, message_b_694: bitstring);
        {208}let v_695: bitstring = catch-fail(handshakestateunpack(hs_693)) in
        {209}let v_696: bitstring = catch-fail(deconcat3(message_b_694)) in
        {210}let v_697: bool = catch-fail(true) in
        {211}let v_698: key = catch-fail(1-proj-3-tuple(v_696)) in
        {212}let v_699: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_695))) in
        {213}let v_700: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_695)) then (if (not-caught-fail(v_699) && success?(is-true(success?(1-proj-3-tuple(v_699))))) then symmetricstatepack(1-proj-3-tuple(v_699),2-proj-3-tuple(v_699),hash(3-proj-3-tuple(v_699),v_698)) else fail-any) else fail-any)) in
        {214}let v_701: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_695))) in
        {215}let v_702: bitstring = catch-fail(symmetricstateunpack(v_700)) in
        {216}let v_703: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {217}let v_704: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {218}let v_705: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_702),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any))) in
        {219}let v_706: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_702))) then (if not-caught-fail(v_703) then (if not-caught-fail(v_704) then (if not-caught-fail(v_705) then (v_703,v_704,v_705) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {220}let v_707: symmetricstate = catch-fail((if success?((if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_701) && success?(is-true(success?(1-proj-2-tuple(v_701))))) then dhexp(2-proj-2-tuple(v_701),v_698) else fail-any) else fail-any)) then (if (not-caught-fail(v_702) && success?(is-true(success?(1-proj-3-tuple(v_702))))) then (if (not-caught-fail(v_706) && success?(is-true(success?(1-proj-3-tuple(v_706))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_706)) then cipherstatepack(2-proj-3-tuple(v_706),minnonce) else fail-any),1-proj-3-tuple(v_706),3-proj-3-tuple(v_702)) else fail-any) else fail-any) else fail-any)) in
        {221}let v_708: bitstring = catch-fail(keypairunpack(2-proj-7-tuple(v_695))) in
        {222}let v_709: bitstring = catch-fail(symmetricstateunpack(v_707)) in
        {223}let v_710: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {224}let v_711: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {225}let v_712: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_709),(if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any))) in
        {226}let v_713: bitstring = catch-fail((if (success?((if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_709))) then (if not-caught-fail(v_710) then (if not-caught-fail(v_711) then (if not-caught-fail(v_712) then (v_710,v_711,v_712) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {227}let v_714: symmetricstate = catch-fail((if success?((if success?(2-proj-7-tuple(v_695)) then (if (not-caught-fail(v_708) && success?(is-true(success?(1-proj-2-tuple(v_708))))) then dhexp(2-proj-2-tuple(v_708),v_698) else fail-any) else fail-any)) then (if (not-caught-fail(v_709) && success?(is-true(success?(1-proj-3-tuple(v_709))))) then (if (not-caught-fail(v_713) && success?(is-true(success?(1-proj-3-tuple(v_713))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_713)) then cipherstatepack(2-proj-3-tuple(v_713),minnonce) else fail-any),1-proj-3-tuple(v_713),3-proj-3-tuple(v_709)) else fail-any) else fail-any) else fail-any)) in
        {228}let v_715: bitstring = catch-fail(symmetricstateunpack(v_714)) in
        {229}let v_716: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_715))) in
        {230}let v_717: aead = catch-fail(decrypt(1-proj-2-tuple(v_716),2-proj-2-tuple(v_716),3-proj-3-tuple(v_715),2-proj-3-tuple(v_696))) in
        {231}let v_718: bitstring = catch-fail(aeadunpack(v_717)) in
        {232}let v_719: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_715))) in
        {233}let v_720: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_716))) && success?(1-proj-3-tuple(v_715))) then (if (not-caught-fail(v_719) && success?(is-true(success?(1-proj-2-tuple(v_719))))) then cipherstatepack(1-proj-2-tuple(v_719),increment_nonce(2-proj-2-tuple(v_716))) else fail-any) else fail-any)) in
        {234}let v_721: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_696)) && (success?(3-proj-3-tuple(v_715)) && success?(1-proj-3-tuple(v_715)))) then (if (not-caught-fail(v_716) && success?(is-true(success?(1-proj-2-tuple(v_716))))) then (if not-caught-fail(v_717) then (if (not-caught-fail(v_718) && success?(is-true(success?(1-proj-3-tuple(v_718))))) then (if not-caught-fail(v_720) then (v_720,3-proj-3-tuple(v_718),1-proj-3-tuple(v_718)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {235}let v_722: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_715),3-proj-3-tuple(v_715)))) in
        {236}let v_723: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_696)) && success?(symmetricstatepack(1-proj-3-tuple(v_721),2-proj-3-tuple(v_715),3-proj-3-tuple(v_715)))) then (if (not-caught-fail(v_722) && success?(is-true(success?(1-proj-3-tuple(v_722))))) then symmetricstatepack(1-proj-3-tuple(v_722),2-proj-3-tuple(v_722),hash(3-proj-3-tuple(v_722),2-proj-3-tuple(v_696))) else fail-any) else fail-any)) in
        {237}let v_724: bitstring = catch-fail((if success?(2-proj-3-tuple(v_696)) then (if (not-caught-fail(v_715) && success?(is-true(success?(1-proj-3-tuple(v_715))))) then (if (not-caught-fail(v_721) && success?(is-true(success?(1-proj-3-tuple(v_721))))) then (if not-caught-fail(v_723) then (v_723,2-proj-3-tuple(v_721),3-proj-3-tuple(v_721)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {238}let v_725: key = catch-fail(2-proj-3-tuple(v_724)) in
        {239}let v_726: bitstring = catch-fail(keypairunpack(3-proj-7-tuple(v_695))) in
        {240}let v_727: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_724))) in
        {241}let v_728: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_727),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_725) else fail-any) else fail-any))) in
        {242}let v_729: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_727),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_725) else fail-any) else fail-any))) in
        {243}let v_730: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_727),(if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_725) else fail-any) else fail-any))) in
        {244}let v_731: bitstring = catch-fail((if (success?((if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_725) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_727))) then (if not-caught-fail(v_728) then (if not-caught-fail(v_729) then (if not-caught-fail(v_730) then (v_728,v_729,v_730) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {245}let v_732: symmetricstate = catch-fail((if (success?((if success?(3-proj-7-tuple(v_695)) then (if (not-caught-fail(v_726) && success?(is-true(success?(1-proj-2-tuple(v_726))))) then dhexp(2-proj-2-tuple(v_726),v_725) else fail-any) else fail-any)) && success?(1-proj-3-tuple(v_724))) then (if (not-caught-fail(v_727) && success?(is-true(success?(1-proj-3-tuple(v_727))))) then (if (not-caught-fail(v_731) && success?(is-true(success?(1-proj-3-tuple(v_731))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_731)) then cipherstatepack(2-proj-3-tuple(v_731),minnonce) else fail-any),1-proj-3-tuple(v_731),3-proj-3-tuple(v_727)) else fail-any) else fail-any) else fail-any)) in
        {246}let v_733: bitstring = catch-fail(symmetricstateunpack(v_732)) in
        {247}let v_734: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {248}let v_735: aead = catch-fail(decrypt(1-proj-2-tuple(v_734),2-proj-2-tuple(v_734),3-proj-3-tuple(v_733),3-proj-3-tuple(v_696))) in
        {249}let v_736: bitstring = catch-fail(aeadunpack(v_735)) in
        {250}let v_737: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_733))) in
        {251}let v_738: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_734))) && success?(1-proj-3-tuple(v_733))) then (if (not-caught-fail(v_737) && success?(is-true(success?(1-proj-2-tuple(v_737))))) then cipherstatepack(1-proj-2-tuple(v_737),increment_nonce(2-proj-2-tuple(v_734))) else fail-any) else fail-any)) in
        {252}let v_739: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_696)) && (success?(3-proj-3-tuple(v_733)) && success?(1-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_734) && success?(is-true(success?(1-proj-2-tuple(v_734))))) then (if not-caught-fail(v_735) then (if (not-caught-fail(v_736) && success?(is-true(success?(1-proj-3-tuple(v_736))))) then (if not-caught-fail(v_738) then (v_738,3-proj-3-tuple(v_736),1-proj-3-tuple(v_736)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {253}let v_740: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) in
        {254}let v_741: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_696)) && success?(symmetricstatepack(1-proj-3-tuple(v_739),2-proj-3-tuple(v_733),3-proj-3-tuple(v_733)))) then (if (not-caught-fail(v_740) && success?(is-true(success?(1-proj-3-tuple(v_740))))) then symmetricstatepack(1-proj-3-tuple(v_740),2-proj-3-tuple(v_740),hash(3-proj-3-tuple(v_740),3-proj-3-tuple(v_696))) else fail-any) else fail-any)) in
        {255}let v_742: bitstring = catch-fail((if success?(3-proj-3-tuple(v_696)) then (if (not-caught-fail(v_733) && success?(is-true(success?(1-proj-3-tuple(v_733))))) then (if (not-caught-fail(v_739) && success?(is-true(success?(1-proj-3-tuple(v_739))))) then (if not-caught-fail(v_741) then (v_741,2-proj-3-tuple(v_739),3-proj-3-tuple(v_739)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {256}let v_743: key = catch-fail(dhexp(key_s(them_647),g)) in
        {257}let v_744: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_742),2-proj-7-tuple(v_695),3-proj-7-tuple(v_695),v_725,v_698,6-proj-7-tuple(v_695),7-proj-7-tuple(v_695))) in
        {258}let (hs_745: handshakestate,re_746: key,plaintext_b_747: bitstring,valid_748: bool) = (if (not-caught-fail(v_695) && success?(is-true(success?(1-proj-7-tuple(v_695))))) then (if (not-caught-fail(v_696) && success?(is-true(success?(1-proj-3-tuple(v_696))))) then (if not-caught-fail(v_697) then (if not-caught-fail(v_698) then (if not-caught-fail(v_700) then (if not-caught-fail(v_707) then (if not-caught-fail(v_714) then (if (not-caught-fail(v_724) && success?(is-true(success?(1-proj-3-tuple(v_724))))) then (if not-caught-fail(v_725) then (if not-caught-fail(v_732) then (if (not-caught-fail(v_742) && success?(is-true(success?(1-proj-3-tuple(v_742))))) then (if ((3-proj-3-tuple(v_724) && 3-proj-3-tuple(v_742)) && (v_725 = getpublickey((if not-caught-fail(v_743) then keypairpack(v_743,key_s(them_647)) else fail-any)))) then (if not-caught-fail(v_744) then (v_744,getpublickey(3-proj-7-tuple(v_695)),2-proj-3-tuple(v_742),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {259}event RecvMsg(me_648,them_647,stage_b,plaintext_b_747,valid_748);
        {260}insert statestore(me_648,them_647,statepack_c(hs_745))
    ) | (
        {279}get statestore(=me_648,=them_647,statepack_c(hs_749: handshakestate)) in
        {262}let v_750: bitstring = catch-fail(handshakestateunpack(hs_749)) in
        {263}let v_751: bitstring = catch-fail((empty,empty,empty)) in
        {264}let v_752: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_750))) in
        {265}let v_753: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {266}let v_754: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_753),2-proj-2-tuple(v_753),3-proj-3-tuple(v_752),msg_c(me_648,them_647))) in
        {267}let v_755: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_752))) in
        {268}let v_756: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_753))) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_755) && success?(is-true(success?(1-proj-2-tuple(v_755))))) then cipherstatepack(1-proj-2-tuple(v_755),increment_nonce(2-proj-2-tuple(v_753))) else fail-any) else fail-any)) in
        {269}let v_757: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_752)) && success?(1-proj-3-tuple(v_752))) then (if (not-caught-fail(v_753) && success?(is-true(success?(1-proj-2-tuple(v_753))))) then (if not-caught-fail(v_754) then (if not-caught-fail(v_756) then (v_756,v_754) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {270}let v_758: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_757),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) in
        {271}let v_759: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_757)) && success?(symmetricstatepack(1-proj-2-tuple(v_757),2-proj-3-tuple(v_752),3-proj-3-tuple(v_752)))) then (if (not-caught-fail(v_758) && success?(is-true(success?(1-proj-3-tuple(v_758))))) then symmetricstatepack(1-proj-3-tuple(v_758),2-proj-3-tuple(v_758),hash(3-proj-3-tuple(v_758),2-proj-2-tuple(v_757))) else fail-any) else fail-any)) in
        {272}let v_760: bitstring = catch-fail((if success?(1-proj-7-tuple(v_750)) then (if (not-caught-fail(v_752) && success?(is-true(success?(1-proj-3-tuple(v_752))))) then (if (not-caught-fail(v_757) && success?(is-true(success?(1-proj-2-tuple(v_757))))) then (if not-caught-fail(v_759) then (v_759,2-proj-2-tuple(v_757)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {273}let v_761: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_760),2-proj-7-tuple(v_750),3-proj-7-tuple(v_750),4-proj-7-tuple(v_750),5-proj-7-tuple(v_750),6-proj-7-tuple(v_750),7-proj-7-tuple(v_750))) in
        {274}let v_762: bitstring = catch-fail(concat3(1-proj-3-tuple(v_751),2-proj-3-tuple(v_751),2-proj-2-tuple(v_760))) in
        {275}let (hs_763: handshakestate,re_764: key,message_c_765: bitstring) = (if (not-caught-fail(v_750) && success?(is-true(success?(1-proj-7-tuple(v_750))))) then (if (not-caught-fail(v_751) && success?(is-true(success?(1-proj-3-tuple(v_751))))) then (if (not-caught-fail(v_760) && success?(is-true(success?(1-proj-2-tuple(v_760))))) then (if not-caught-fail(v_761) then (if not-caught-fail(v_762) then (v_761,5-proj-7-tuple(v_750),v_762) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {276}event SendMsg(me_648,them_647,stage_c,msg_c(me_648,them_647),true);
        {277}insert statestore(me_648,them_647,statepack_d(hs_763));
        {278}out(pub, message_c_765)
    ) | (
        {307}get statestore(=me_648,=them_647,statepack_d(hs_766: handshakestate)) in
        {280}in(pub, message_d_767: bitstring);
        {281}let v_768: bitstring = catch-fail(handshakestateunpack(hs_766)) in
        {282}let v_769: bitstring = catch-fail(deconcat3(message_d_767)) in
        {283}let v_770: bool = catch-fail(true) in
        {284}let v_771: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_768))) in
        {285}let v_772: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {286}let v_773: aead = catch-fail(decrypt(1-proj-2-tuple(v_772),2-proj-2-tuple(v_772),3-proj-3-tuple(v_771),3-proj-3-tuple(v_769))) in
        {287}let v_774: bitstring = catch-fail(aeadunpack(v_773)) in
        {288}let v_775: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_771))) in
        {289}let v_776: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_772))) && success?(1-proj-3-tuple(v_771))) then (if (not-caught-fail(v_775) && success?(is-true(success?(1-proj-2-tuple(v_775))))) then cipherstatepack(1-proj-2-tuple(v_775),increment_nonce(2-proj-2-tuple(v_772))) else fail-any) else fail-any)) in
        {290}let v_777: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_769)) && (success?(3-proj-3-tuple(v_771)) && success?(1-proj-3-tuple(v_771)))) then (if (not-caught-fail(v_772) && success?(is-true(success?(1-proj-2-tuple(v_772))))) then (if not-caught-fail(v_773) then (if (not-caught-fail(v_774) && success?(is-true(success?(1-proj-3-tuple(v_774))))) then (if not-caught-fail(v_776) then (v_776,3-proj-3-tuple(v_774),1-proj-3-tuple(v_774)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {291}let v_778: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_777),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) in
        {292}let v_779: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_769)) && success?(symmetricstatepack(1-proj-3-tuple(v_777),2-proj-3-tuple(v_771),3-proj-3-tuple(v_771)))) then (if (not-caught-fail(v_778) && success?(is-true(success?(1-proj-3-tuple(v_778))))) then symmetricstatepack(1-proj-3-tuple(v_778),2-proj-3-tuple(v_778),hash(3-proj-3-tuple(v_778),3-proj-3-tuple(v_769))) else fail-any) else fail-any)) in
        {293}let v_780: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_769)) && success?(1-proj-7-tuple(v_768))) then (if (not-caught-fail(v_771) && success?(is-true(success?(1-proj-3-tuple(v_771))))) then (if (not-caught-fail(v_777) && success?(is-true(success?(1-proj-3-tuple(v_777))))) then (if not-caught-fail(v_779) then (v_779,2-proj-3-tuple(v_777),3-proj-3-tuple(v_777)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {294}let v_781: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_780),2-proj-7-tuple(v_768),3-proj-7-tuple(v_768),4-proj-7-tuple(v_768),5-proj-7-tuple(v_768),6-proj-7-tuple(v_768),7-proj-7-tuple(v_768))) in
        {295}let v_782: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_780))) in
        {296}let v_783: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_782),zero)) in
        {297}let v_784: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_782),zero)) in
        {298}let v_785: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_782),zero)) in
        {299}let v_786: bitstring = catch-fail((if success?(2-proj-3-tuple(v_782)) then (if not-caught-fail(v_783) then (if not-caught-fail(v_784) then (if not-caught-fail(v_785) then (v_783,v_784,v_785) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {300}let v_787: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_786)) then cipherstatepack(1-proj-3-tuple(v_786),minnonce) else fail-any)) in
        {301}let v_788: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_786)) then cipherstatepack(2-proj-3-tuple(v_786),minnonce) else fail-any)) in
        {302}let v_789: bitstring = catch-fail((if success?(1-proj-3-tuple(v_780)) then (if (not-caught-fail(v_782) && success?(is-true(success?(1-proj-3-tuple(v_782))))) then (if (not-caught-fail(v_786) && success?(is-true(success?(1-proj-3-tuple(v_786))))) then (if not-caught-fail(v_787) then (if not-caught-fail(v_788) then (1-proj-3-tuple(v_780),v_787,v_788) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {303}let (hs_790: handshakestate,re_791: key,plaintext_d_792: bitstring,valid_793: bool,cs1_794: cipherstate,cs2_795: cipherstate) = (if (not-caught-fail(v_768) && success?(is-true(success?(1-proj-7-tuple(v_768))))) then (if (not-caught-fail(v_769) && success?(is-true(success?(1-proj-3-tuple(v_769))))) then (if not-caught-fail(v_770) then (if (not-caught-fail(v_780) && success?(is-true(success?(1-proj-3-tuple(v_780))))) then (if (v_770 && 3-proj-3-tuple(v_780)) then (if not-caught-fail(v_781) then (if (not-caught-fail(v_789) && success?(is-true(success?(1-proj-3-tuple(v_789))))) then (v_781,getpublickey(3-proj-7-tuple(v_768)),2-proj-3-tuple(v_780),true,2-proj-3-tuple(v_789),3-proj-3-tuple(v_789)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {304}event RecvMsg(me_648,them_647,stage_d,plaintext_d_792,valid_793);
        {305}insert statestore(me_648,them_647,statepack_e(hs_790));
        {306}event RecvEnd(valid_793)
    ) | (
        {308}event LeakS(phase0,me_648);
        {309}out(pub, key_s(me_648))
    ) | (
        {310}phase 1;
        {311}event LeakS(phase1,me_648);
        {312}out(pub, key_s(me_648))
    )
) | (
    {313}let them_796: principal = alice in
    {314}let me_797: principal = bob in
    {315}let s_798: keypair = keypairpack(empty,empty) in
    {316}out(pub, getpublickey(s_798));
    (
        {317}let e_799: keypair = keypairpack(empty,empty) in
        {318}let rs_800: key = empty in
        {319}let re_801: key = empty in
        {320}let v_802: bitstring = catch-fail(hash(somename,empty)) in
        {321}let v_803: key = catch-fail(v_802) in
        {322}let v_804: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {323}let v_805: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_802) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then symmetricstatepack(v_804,v_803,v_802) else fail-any) else fail-any) else fail-any))) in
        {324}let v_806: symmetricstate = catch-fail((if success?((if not-caught-fail(v_802) then (if not-caught-fail(v_803) then (if not-caught-fail(v_804) then symmetricstatepack(v_804,v_803,v_802) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_805) && success?(is-true(success?(1-proj-3-tuple(v_805))))) then symmetricstatepack(1-proj-3-tuple(v_805),2-proj-3-tuple(v_805),hash(3-proj-3-tuple(v_805),empty)) else fail-any) else fail-any)) in
        {325}let hs_807: handshakestate = (if not-caught-fail(v_806) then handshakestatepack(v_806,s_798,e_799,rs_800,re_801,empty,false) else fail-any) in
        {326}insert statestore(me_797,them_796,statepack_a(hs_807))
    ) | (
        {360}get statestore(=me_797,=them_796,statepack_a(hs_808: handshakestate)) in
        {327}in(pub, message_a_809: bitstring);
        {328}let v_810: bitstring = catch-fail(handshakestateunpack(hs_808)) in
        {329}let v_811: bitstring = catch-fail(deconcat3(message_a_809)) in
        {330}let v_812: bool = catch-fail(true) in
        {331}let v_813: key = catch-fail(1-proj-3-tuple(v_811)) in
        {332}let v_814: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_810))) in
        {333}let v_815: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_810)) then (if (not-caught-fail(v_814) && success?(is-true(success?(1-proj-3-tuple(v_814))))) then symmetricstatepack(1-proj-3-tuple(v_814),2-proj-3-tuple(v_814),hash(3-proj-3-tuple(v_814),v_813)) else fail-any) else fail-any)) in
        {334}let v_816: bitstring = catch-fail(symmetricstateunpack(v_815)) in
        {335}let v_817: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_816))) in
        {336}let v_818: aead = catch-fail(decrypt(1-proj-2-tuple(v_817),2-proj-2-tuple(v_817),3-proj-3-tuple(v_816),2-proj-3-tuple(v_811))) in
        {337}let v_819: bitstring = catch-fail(aeadunpack(v_818)) in
        {338}let v_820: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_816))) in
        {339}let v_821: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_817))) && success?(1-proj-3-tuple(v_816))) then (if (not-caught-fail(v_820) && success?(is-true(success?(1-proj-2-tuple(v_820))))) then cipherstatepack(1-proj-2-tuple(v_820),increment_nonce(2-proj-2-tuple(v_817))) else fail-any) else fail-any)) in
        {340}let v_822: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_811)) && (success?(3-proj-3-tuple(v_816)) && success?(1-proj-3-tuple(v_816)))) then (if (not-caught-fail(v_817) && success?(is-true(success?(1-proj-2-tuple(v_817))))) then (if not-caught-fail(v_818) then (if (not-caught-fail(v_819) && success?(is-true(success?(1-proj-3-tuple(v_819))))) then (if not-caught-fail(v_821) then (v_821,3-proj-3-tuple(v_819),1-proj-3-tuple(v_819)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {341}let v_823: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_822),2-proj-3-tuple(v_816),3-proj-3-tuple(v_816)))) in
        {342}let v_824: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_811)) && success?(symmetricstatepack(1-proj-3-tuple(v_822),2-proj-3-tuple(v_816),3-proj-3-tuple(v_816)))) then (if (not-caught-fail(v_823) && success?(is-true(success?(1-proj-3-tuple(v_823))))) then symmetricstatepack(1-proj-3-tuple(v_823),2-proj-3-tuple(v_823),hash(3-proj-3-tuple(v_823),2-proj-3-tuple(v_811))) else fail-any) else fail-any)) in
        {343}let v_825: bitstring = catch-fail((if success?(2-proj-3-tuple(v_811)) then (if (not-caught-fail(v_816) && success?(is-true(success?(1-proj-3-tuple(v_816))))) then (if (not-caught-fail(v_822) && success?(is-true(success?(1-proj-3-tuple(v_822))))) then (if not-caught-fail(v_824) then (v_824,2-proj-3-tuple(v_822),3-proj-3-tuple(v_822)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {344}let v_826: key = catch-fail(2-proj-3-tuple(v_825)) in
        {345}let v_827: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_825))) in
        {346}let v_828: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_827))) in
        {347}let v_829: aead = catch-fail(decrypt(1-proj-2-tuple(v_828),2-proj-2-tuple(v_828),3-proj-3-tuple(v_827),3-proj-3-tuple(v_811))) in
        {348}let v_830: bitstring = catch-fail(aeadunpack(v_829)) in
        {349}let v_831: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_827))) in
        {350}let v_832: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_828))) && success?(1-proj-3-tuple(v_827))) then (if (not-caught-fail(v_831) && success?(is-true(success?(1-proj-2-tuple(v_831))))) then cipherstatepack(1-proj-2-tuple(v_831),increment_nonce(2-proj-2-tuple(v_828))) else fail-any) else fail-any)) in
        {351}let v_833: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_811)) && (success?(3-proj-3-tuple(v_827)) && success?(1-proj-3-tuple(v_827)))) then (if (not-caught-fail(v_828) && success?(is-true(success?(1-proj-2-tuple(v_828))))) then (if not-caught-fail(v_829) then (if (not-caught-fail(v_830) && success?(is-true(success?(1-proj-3-tuple(v_830))))) then (if not-caught-fail(v_832) then (v_832,3-proj-3-tuple(v_830),1-proj-3-tuple(v_830)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {352}let v_834: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_833),2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)))) in
        {353}let v_835: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_811)) && success?(symmetricstatepack(1-proj-3-tuple(v_833),2-proj-3-tuple(v_827),3-proj-3-tuple(v_827)))) then (if (not-caught-fail(v_834) && success?(is-true(success?(1-proj-3-tuple(v_834))))) then symmetricstatepack(1-proj-3-tuple(v_834),2-proj-3-tuple(v_834),hash(3-proj-3-tuple(v_834),3-proj-3-tuple(v_811))) else fail-any) else fail-any)) in
        {354}let v_836: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_811)) && success?(1-proj-3-tuple(v_825))) then (if (not-caught-fail(v_827) && success?(is-true(success?(1-proj-3-tuple(v_827))))) then (if (not-caught-fail(v_833) && success?(is-true(success?(1-proj-3-tuple(v_833))))) then (if not-caught-fail(v_835) then (v_835,2-proj-3-tuple(v_833),3-proj-3-tuple(v_833)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {355}let v_837: key = catch-fail(dhexp(key_s(them_796),g)) in
        {356}let v_838: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_836),2-proj-7-tuple(v_810),3-proj-7-tuple(v_810),v_826,v_813,6-proj-7-tuple(v_810),7-proj-7-tuple(v_810))) in
        {357}let (hs_839: handshakestate,re_840: key,plaintext_a: bitstring,valid_841: bool) = (if (not-caught-fail(v_810) && success?(is-true(success?(1-proj-7-tuple(v_810))))) then (if (not-caught-fail(v_811) && success?(is-true(success?(1-proj-3-tuple(v_811))))) then (if not-caught-fail(v_812) then (if not-caught-fail(v_813) then (if not-caught-fail(v_815) then (if (not-caught-fail(v_825) && success?(is-true(success?(1-proj-3-tuple(v_825))))) then (if not-caught-fail(v_826) then (if (not-caught-fail(v_836) && success?(is-true(success?(1-proj-3-tuple(v_836))))) then (if ((3-proj-3-tuple(v_825) && 3-proj-3-tuple(v_836)) && (v_826 = getpublickey((if not-caught-fail(v_837) then keypairpack(v_837,key_s(them_796)) else fail-any)))) then (if not-caught-fail(v_838) then (v_838,getpublickey(3-proj-7-tuple(v_810)),2-proj-3-tuple(v_836),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {358}event RecvMsg(me_797,them_796,stage_a,plaintext_a,valid_841);
        {359}insert statestore(me_797,them_796,statepack_b(hs_839))
    ) | (
        {416}get statestore(=me_797,=them_796,statepack_b(hs_842: handshakestate)) in
        {361}let v_843: bitstring = catch-fail(handshakestateunpack(hs_842)) in
        {362}let v_844: bitstring = catch-fail((empty,empty,empty)) in
        {363}new key_e_845[me_797,them_796]: key;
        {364}let v_846: key = catch-fail(dhexp(key_e_845,g)) in
        {365}let v_847: keypair = catch-fail((if not-caught-fail(v_846) then keypairpack(v_846,key_e_845) else fail-any)) in
        {366}let v_848: bitstring = catch-fail(getpublickey(v_847)) in
        {367}let v_849: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_843))) in
        {368}let v_850: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_843)) then (if (not-caught-fail(v_849) && success?(is-true(success?(1-proj-3-tuple(v_849))))) then symmetricstatepack(1-proj-3-tuple(v_849),2-proj-3-tuple(v_849),hash(3-proj-3-tuple(v_849),v_848)) else fail-any) else fail-any)) in
        {369}let v_851: bitstring = catch-fail(keypairunpack(v_847)) in
        {370}let v_852: bitstring = catch-fail(symmetricstateunpack(v_850)) in
        {371}let v_853: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_852),(if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {372}let v_854: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_852),(if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {373}let v_855: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_852),(if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {374}let v_856: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_843)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_852))) then (if not-caught-fail(v_853) then (if not-caught-fail(v_854) then (if not-caught-fail(v_855) then (v_853,v_854,v_855) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {375}let v_857: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_851) && success?(is-true(success?(1-proj-2-tuple(v_851))))) then dhexp(2-proj-2-tuple(v_851),5-proj-7-tuple(v_843)) else fail-any) else fail-any)) then (if (not-caught-fail(v_852) && success?(is-true(success?(1-proj-3-tuple(v_852))))) then (if (not-caught-fail(v_856) && success?(is-true(success?(1-proj-3-tuple(v_856))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_856)) then cipherstatepack(2-proj-3-tuple(v_856),minnonce) else fail-any),1-proj-3-tuple(v_856),3-proj-3-tuple(v_852)) else fail-any) else fail-any) else fail-any)) in
        {376}let v_858: bitstring = catch-fail(keypairunpack(v_847)) in
        {377}let v_859: bitstring = catch-fail(symmetricstateunpack(v_857)) in
        {378}let v_860: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_859),(if success?(4-proj-7-tuple(v_843)) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then dhexp(2-proj-2-tuple(v_858),4-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {379}let v_861: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_859),(if success?(4-proj-7-tuple(v_843)) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then dhexp(2-proj-2-tuple(v_858),4-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {380}let v_862: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_859),(if success?(4-proj-7-tuple(v_843)) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then dhexp(2-proj-2-tuple(v_858),4-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {381}let v_863: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_843)) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then dhexp(2-proj-2-tuple(v_858),4-proj-7-tuple(v_843)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_859))) then (if not-caught-fail(v_860) then (if not-caught-fail(v_861) then (if not-caught-fail(v_862) then (v_860,v_861,v_862) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {382}let v_864: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_843)) then (if (not-caught-fail(v_858) && success?(is-true(success?(1-proj-2-tuple(v_858))))) then dhexp(2-proj-2-tuple(v_858),4-proj-7-tuple(v_843)) else fail-any) else fail-any)) then (if (not-caught-fail(v_859) && success?(is-true(success?(1-proj-3-tuple(v_859))))) then (if (not-caught-fail(v_863) && success?(is-true(success?(1-proj-3-tuple(v_863))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_863)) then cipherstatepack(2-proj-3-tuple(v_863),minnonce) else fail-any),1-proj-3-tuple(v_863),3-proj-3-tuple(v_859)) else fail-any) else fail-any) else fail-any)) in
        {383}let v_865: key = catch-fail(dhexp(key_s(me_797),g)) in
        {384}let v_866: keypair = catch-fail((if not-caught-fail(v_865) then keypairpack(v_865,key_s(me_797)) else fail-any)) in
        {385}let v_867: bitstring = catch-fail(symmetricstateunpack(v_864)) in
        {386}let v_868: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_867))) in
        {387}let v_869: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_868),2-proj-2-tuple(v_868),3-proj-3-tuple(v_867),getpublickey(v_866))) in
        {388}let v_870: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_867))) in
        {389}let v_871: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_868))) && success?(1-proj-3-tuple(v_867))) then (if (not-caught-fail(v_870) && success?(is-true(success?(1-proj-2-tuple(v_870))))) then cipherstatepack(1-proj-2-tuple(v_870),increment_nonce(2-proj-2-tuple(v_868))) else fail-any) else fail-any)) in
        {390}let v_872: bitstring = catch-fail((if (success?(getpublickey(v_866)) && (success?(3-proj-3-tuple(v_867)) && success?(1-proj-3-tuple(v_867)))) then (if (not-caught-fail(v_868) && success?(is-true(success?(1-proj-2-tuple(v_868))))) then (if not-caught-fail(v_869) then (if not-caught-fail(v_871) then (v_871,v_869) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {391}let v_873: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_872),2-proj-3-tuple(v_867),3-proj-3-tuple(v_867)))) in
        {392}let v_874: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_872)) && success?(symmetricstatepack(1-proj-2-tuple(v_872),2-proj-3-tuple(v_867),3-proj-3-tuple(v_867)))) then (if (not-caught-fail(v_873) && success?(is-true(success?(1-proj-3-tuple(v_873))))) then symmetricstatepack(1-proj-3-tuple(v_873),2-proj-3-tuple(v_873),hash(3-proj-3-tuple(v_873),2-proj-2-tuple(v_872))) else fail-any) else fail-any)) in
        {393}let v_875: bitstring = catch-fail((if success?(getpublickey(v_866)) then (if (not-caught-fail(v_867) && success?(is-true(success?(1-proj-3-tuple(v_867))))) then (if (not-caught-fail(v_872) && success?(is-true(success?(1-proj-2-tuple(v_872))))) then (if not-caught-fail(v_874) then (v_874,2-proj-2-tuple(v_872)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {394}let v_876: bitstring = catch-fail(keypairunpack(v_866)) in
        {395}let v_877: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_875))) in
        {396}let v_878: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_877),(if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {397}let v_879: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_877),(if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {398}let v_880: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_877),(if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_843)) else fail-any) else fail-any))) in
        {399}let v_881: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_843)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_877))) then (if not-caught-fail(v_878) then (if not-caught-fail(v_879) then (if not-caught-fail(v_880) then (v_878,v_879,v_880) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {400}let v_882: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_843)) then (if (not-caught-fail(v_876) && success?(is-true(success?(1-proj-2-tuple(v_876))))) then dhexp(2-proj-2-tuple(v_876),5-proj-7-tuple(v_843)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_875))) then (if (not-caught-fail(v_877) && success?(is-true(success?(1-proj-3-tuple(v_877))))) then (if (not-caught-fail(v_881) && success?(is-true(success?(1-proj-3-tuple(v_881))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_881)) then cipherstatepack(2-proj-3-tuple(v_881),minnonce) else fail-any),1-proj-3-tuple(v_881),3-proj-3-tuple(v_877)) else fail-any) else fail-any) else fail-any)) in
        {401}let v_883: bitstring = catch-fail(symmetricstateunpack(v_882)) in
        {402}let v_884: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_883))) in
        {403}let v_885: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_884),2-proj-2-tuple(v_884),3-proj-3-tuple(v_883),msg_b(me_797,them_796))) in
        {404}let v_886: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_883))) in
        {405}let v_887: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_884))) && success?(1-proj-3-tuple(v_883))) then (if (not-caught-fail(v_886) && success?(is-true(success?(1-proj-2-tuple(v_886))))) then cipherstatepack(1-proj-2-tuple(v_886),increment_nonce(2-proj-2-tuple(v_884))) else fail-any) else fail-any)) in
        {406}let v_888: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_883)) && success?(1-proj-3-tuple(v_883))) then (if (not-caught-fail(v_884) && success?(is-true(success?(1-proj-2-tuple(v_884))))) then (if not-caught-fail(v_885) then (if not-caught-fail(v_887) then (v_887,v_885) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {407}let v_889: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_888),2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)))) in
        {408}let v_890: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_888)) && success?(symmetricstatepack(1-proj-2-tuple(v_888),2-proj-3-tuple(v_883),3-proj-3-tuple(v_883)))) then (if (not-caught-fail(v_889) && success?(is-true(success?(1-proj-3-tuple(v_889))))) then symmetricstatepack(1-proj-3-tuple(v_889),2-proj-3-tuple(v_889),hash(3-proj-3-tuple(v_889),2-proj-2-tuple(v_888))) else fail-any) else fail-any)) in
        {409}let v_891: bitstring = catch-fail((if (not-caught-fail(v_883) && success?(is-true(success?(1-proj-3-tuple(v_883))))) then (if (not-caught-fail(v_888) && success?(is-true(success?(1-proj-2-tuple(v_888))))) then (if not-caught-fail(v_890) then (v_890,2-proj-2-tuple(v_888)) else fail-any) else fail-any) else fail-any)) in
        {410}let v_892: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_891),v_866,v_847,4-proj-7-tuple(v_843),5-proj-7-tuple(v_843),6-proj-7-tuple(v_843),7-proj-7-tuple(v_843))) in
        {411}let v_893: bitstring = catch-fail(concat3(v_848,2-proj-2-tuple(v_875),2-proj-2-tuple(v_891))) in
        {412}let (hs_894: handshakestate,re_895: key,message_b_896: bitstring) = (if (not-caught-fail(v_843) && success?(is-true(success?(1-proj-7-tuple(v_843))))) then (if (not-caught-fail(v_844) && success?(is-true(success?(1-proj-3-tuple(v_844))))) then (if not-caught-fail(v_847) then (if not-caught-fail(v_848) then (if not-caught-fail(v_850) then (if not-caught-fail(v_857) then (if not-caught-fail(v_864) then (if not-caught-fail(v_866) then (if (not-caught-fail(v_875) && success?(is-true(success?(1-proj-2-tuple(v_875))))) then (if not-caught-fail(v_882) then (if (not-caught-fail(v_891) && success?(is-true(success?(1-proj-2-tuple(v_891))))) then (if not-caught-fail(v_892) then (if not-caught-fail(v_893) then (v_892,5-proj-7-tuple(v_843),v_893) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {413}event SendMsg(me_797,them_796,stage_b,msg_b(me_797,them_796),true);
        {414}insert statestore(me_797,them_796,statepack_c(hs_894));
        {415}out(pub, message_b_896)
    ) | (
        {435}get statestore(=me_797,=them_796,statepack_c(hs_897: handshakestate)) in
        {417}in(pub, message_c_898: bitstring);
        {418}let v_899: bitstring = catch-fail(handshakestateunpack(hs_897)) in
        {419}let v_900: bitstring = catch-fail(deconcat3(message_c_898)) in
        {420}let v_901: bool = catch-fail(true) in
        {421}let v_902: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_899))) in
        {422}let v_903: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_902))) in
        {423}let v_904: aead = catch-fail(decrypt(1-proj-2-tuple(v_903),2-proj-2-tuple(v_903),3-proj-3-tuple(v_902),3-proj-3-tuple(v_900))) in
        {424}let v_905: bitstring = catch-fail(aeadunpack(v_904)) in
        {425}let v_906: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_902))) in
        {426}let v_907: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_903))) && success?(1-proj-3-tuple(v_902))) then (if (not-caught-fail(v_906) && success?(is-true(success?(1-proj-2-tuple(v_906))))) then cipherstatepack(1-proj-2-tuple(v_906),increment_nonce(2-proj-2-tuple(v_903))) else fail-any) else fail-any)) in
        {427}let v_908: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_900)) && (success?(3-proj-3-tuple(v_902)) && success?(1-proj-3-tuple(v_902)))) then (if (not-caught-fail(v_903) && success?(is-true(success?(1-proj-2-tuple(v_903))))) then (if not-caught-fail(v_904) then (if (not-caught-fail(v_905) && success?(is-true(success?(1-proj-3-tuple(v_905))))) then (if not-caught-fail(v_907) then (v_907,3-proj-3-tuple(v_905),1-proj-3-tuple(v_905)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {428}let v_909: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)))) in
        {429}let v_910: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_900)) && success?(symmetricstatepack(1-proj-3-tuple(v_908),2-proj-3-tuple(v_902),3-proj-3-tuple(v_902)))) then (if (not-caught-fail(v_909) && success?(is-true(success?(1-proj-3-tuple(v_909))))) then symmetricstatepack(1-proj-3-tuple(v_909),2-proj-3-tuple(v_909),hash(3-proj-3-tuple(v_909),3-proj-3-tuple(v_900))) else fail-any) else fail-any)) in
        {430}let v_911: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_900)) && success?(1-proj-7-tuple(v_899))) then (if (not-caught-fail(v_902) && success?(is-true(success?(1-proj-3-tuple(v_902))))) then (if (not-caught-fail(v_908) && success?(is-true(success?(1-proj-3-tuple(v_908))))) then (if not-caught-fail(v_910) then (v_910,2-proj-3-tuple(v_908),3-proj-3-tuple(v_908)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {431}let v_912: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_911),2-proj-7-tuple(v_899),3-proj-7-tuple(v_899),4-proj-7-tuple(v_899),5-proj-7-tuple(v_899),6-proj-7-tuple(v_899),7-proj-7-tuple(v_899))) in
        {432}let (hs_913: handshakestate,re_914: key,plaintext_c: bitstring,valid_915: bool) = (if (not-caught-fail(v_899) && success?(is-true(success?(1-proj-7-tuple(v_899))))) then (if (not-caught-fail(v_900) && success?(is-true(success?(1-proj-3-tuple(v_900))))) then (if not-caught-fail(v_901) then (if (not-caught-fail(v_911) && success?(is-true(success?(1-proj-3-tuple(v_911))))) then (if (v_901 && 3-proj-3-tuple(v_911)) then (if not-caught-fail(v_912) then (v_912,getpublickey(3-proj-7-tuple(v_899)),2-proj-3-tuple(v_911),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {433}event RecvMsg(me_797,them_796,stage_c,plaintext_c,valid_915);
        {434}insert statestore(me_797,them_796,statepack_d(hs_913))
    ) | (
        {461}get statestore(=me_797,=them_796,statepack_d(hs_916: handshakestate)) in
        {436}let v_917: bitstring = catch-fail(handshakestateunpack(hs_916)) in
        {437}let v_918: bitstring = catch-fail((empty,empty,empty)) in
        {438}let v_919: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_917))) in
        {439}let v_920: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_919))) in
        {440}let v_921: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_920),2-proj-2-tuple(v_920),3-proj-3-tuple(v_919),msg_d(me_797,them_796))) in
        {441}let v_922: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_919))) in
        {442}let v_923: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_920))) && success?(1-proj-3-tuple(v_919))) then (if (not-caught-fail(v_922) && success?(is-true(success?(1-proj-2-tuple(v_922))))) then cipherstatepack(1-proj-2-tuple(v_922),increment_nonce(2-proj-2-tuple(v_920))) else fail-any) else fail-any)) in
        {443}let v_924: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_919)) && success?(1-proj-3-tuple(v_919))) then (if (not-caught-fail(v_920) && success?(is-true(success?(1-proj-2-tuple(v_920))))) then (if not-caught-fail(v_921) then (if not-caught-fail(v_923) then (v_923,v_921) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {444}let v_925: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_924),2-proj-3-tuple(v_919),3-proj-3-tuple(v_919)))) in
        {445}let v_926: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_924)) && success?(symmetricstatepack(1-proj-2-tuple(v_924),2-proj-3-tuple(v_919),3-proj-3-tuple(v_919)))) then (if (not-caught-fail(v_925) && success?(is-true(success?(1-proj-3-tuple(v_925))))) then symmetricstatepack(1-proj-3-tuple(v_925),2-proj-3-tuple(v_925),hash(3-proj-3-tuple(v_925),2-proj-2-tuple(v_924))) else fail-any) else fail-any)) in
        {446}let v_927: bitstring = catch-fail((if success?(1-proj-7-tuple(v_917)) then (if (not-caught-fail(v_919) && success?(is-true(success?(1-proj-3-tuple(v_919))))) then (if (not-caught-fail(v_924) && success?(is-true(success?(1-proj-2-tuple(v_924))))) then (if not-caught-fail(v_926) then (v_926,2-proj-2-tuple(v_924)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {447}let v_928: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_927),2-proj-7-tuple(v_917),3-proj-7-tuple(v_917),4-proj-7-tuple(v_917),5-proj-7-tuple(v_917),6-proj-7-tuple(v_917),7-proj-7-tuple(v_917))) in
        {448}let v_929: bitstring = catch-fail(concat3(1-proj-3-tuple(v_918),2-proj-3-tuple(v_918),2-proj-2-tuple(v_927))) in
        {449}let v_930: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_927))) in
        {450}let v_931: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_930),zero)) in
        {451}let v_932: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_930),zero)) in
        {452}let v_933: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_930),zero)) in
        {453}let v_934: bitstring = catch-fail((if success?(2-proj-3-tuple(v_930)) then (if not-caught-fail(v_931) then (if not-caught-fail(v_932) then (if not-caught-fail(v_933) then (v_931,v_932,v_933) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {454}let v_935: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_934)) then cipherstatepack(1-proj-3-tuple(v_934),minnonce) else fail-any)) in
        {455}let v_936: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_934)) then cipherstatepack(2-proj-3-tuple(v_934),minnonce) else fail-any)) in
        {456}let v_937: bitstring = catch-fail((if success?(1-proj-2-tuple(v_927)) then (if (not-caught-fail(v_930) && success?(is-true(success?(1-proj-3-tuple(v_930))))) then (if (not-caught-fail(v_934) && success?(is-true(success?(1-proj-3-tuple(v_934))))) then (if not-caught-fail(v_935) then (if not-caught-fail(v_936) then (1-proj-2-tuple(v_927),v_935,v_936) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {457}let (hs_938: handshakestate,re_939: key,message_d_940: bitstring,cs1_941: cipherstate,cs2_942: cipherstate) = (if (not-caught-fail(v_917) && success?(is-true(success?(1-proj-7-tuple(v_917))))) then (if (not-caught-fail(v_918) && success?(is-true(success?(1-proj-3-tuple(v_918))))) then (if (not-caught-fail(v_927) && success?(is-true(success?(1-proj-2-tuple(v_927))))) then (if not-caught-fail(v_928) then (if not-caught-fail(v_929) then (if (not-caught-fail(v_937) && success?(is-true(success?(1-proj-3-tuple(v_937))))) then (v_928,5-proj-7-tuple(v_917),v_929,2-proj-3-tuple(v_937),3-proj-3-tuple(v_937)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {458}event SendMsg(me_797,them_796,stage_d,msg_d(me_797,them_796),true);
        {459}insert statestore(me_797,them_796,statepack_e(hs_938));
        {460}out(pub, message_d_940)
    ) | (
        {462}event LeakS(phase0,me_797);
        {463}out(pub, key_s(me_797))
    ) | (
        {464}phase 1;
        {465}event LeakS(phase1,me_797);
        {466}out(pub, key_s(me_797))
    )
) | (
    {467}let them_943: principal = charlie in
    {468}let me_944: principal = bob in
    {469}let s_945: keypair = keypairpack(empty,empty) in
    {470}out(pub, getpublickey(s_945));
    (
        {471}let e_946: keypair = keypairpack(empty,empty) in
        {472}let rs_947: key = empty in
        {473}let re_948: key = empty in
        {474}let v_949: bitstring = catch-fail(hash(somename,empty)) in
        {475}let v_950: key = catch-fail(v_949) in
        {476}let v_951: cipherstate = catch-fail(cipherstatepack(empty,minnonce)) in
        {477}let v_952: bitstring = catch-fail(symmetricstateunpack((if not-caught-fail(v_949) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then symmetricstatepack(v_951,v_950,v_949) else fail-any) else fail-any) else fail-any))) in
        {478}let v_953: symmetricstate = catch-fail((if success?((if not-caught-fail(v_949) then (if not-caught-fail(v_950) then (if not-caught-fail(v_951) then symmetricstatepack(v_951,v_950,v_949) else fail-any) else fail-any) else fail-any)) then (if (not-caught-fail(v_952) && success?(is-true(success?(1-proj-3-tuple(v_952))))) then symmetricstatepack(1-proj-3-tuple(v_952),2-proj-3-tuple(v_952),hash(3-proj-3-tuple(v_952),empty)) else fail-any) else fail-any)) in
        {479}let hs_954: handshakestate = (if not-caught-fail(v_953) then handshakestatepack(v_953,s_945,e_946,rs_947,re_948,empty,false) else fail-any) in
        {480}insert statestore(me_944,them_943,statepack_a(hs_954))
    ) | (
        {514}get statestore(=me_944,=them_943,statepack_a(hs_955: handshakestate)) in
        {481}in(pub, message_a_956: bitstring);
        {482}let v_957: bitstring = catch-fail(handshakestateunpack(hs_955)) in
        {483}let v_958: bitstring = catch-fail(deconcat3(message_a_956)) in
        {484}let v_959: bool = catch-fail(true) in
        {485}let v_960: key = catch-fail(1-proj-3-tuple(v_958)) in
        {486}let v_961: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_957))) in
        {487}let v_962: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_957)) then (if (not-caught-fail(v_961) && success?(is-true(success?(1-proj-3-tuple(v_961))))) then symmetricstatepack(1-proj-3-tuple(v_961),2-proj-3-tuple(v_961),hash(3-proj-3-tuple(v_961),v_960)) else fail-any) else fail-any)) in
        {488}let v_963: bitstring = catch-fail(symmetricstateunpack(v_962)) in
        {489}let v_964: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_963))) in
        {490}let v_965: aead = catch-fail(decrypt(1-proj-2-tuple(v_964),2-proj-2-tuple(v_964),3-proj-3-tuple(v_963),2-proj-3-tuple(v_958))) in
        {491}let v_966: bitstring = catch-fail(aeadunpack(v_965)) in
        {492}let v_967: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_963))) in
        {493}let v_968: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_964))) && success?(1-proj-3-tuple(v_963))) then (if (not-caught-fail(v_967) && success?(is-true(success?(1-proj-2-tuple(v_967))))) then cipherstatepack(1-proj-2-tuple(v_967),increment_nonce(2-proj-2-tuple(v_964))) else fail-any) else fail-any)) in
        {494}let v_969: bitstring = catch-fail((if (success?(2-proj-3-tuple(v_958)) && (success?(3-proj-3-tuple(v_963)) && success?(1-proj-3-tuple(v_963)))) then (if (not-caught-fail(v_964) && success?(is-true(success?(1-proj-2-tuple(v_964))))) then (if not-caught-fail(v_965) then (if (not-caught-fail(v_966) && success?(is-true(success?(1-proj-3-tuple(v_966))))) then (if not-caught-fail(v_968) then (v_968,3-proj-3-tuple(v_966),1-proj-3-tuple(v_966)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {495}let v_970: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_969),2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)))) in
        {496}let v_971: symmetricstate = catch-fail((if (success?(2-proj-3-tuple(v_958)) && success?(symmetricstatepack(1-proj-3-tuple(v_969),2-proj-3-tuple(v_963),3-proj-3-tuple(v_963)))) then (if (not-caught-fail(v_970) && success?(is-true(success?(1-proj-3-tuple(v_970))))) then symmetricstatepack(1-proj-3-tuple(v_970),2-proj-3-tuple(v_970),hash(3-proj-3-tuple(v_970),2-proj-3-tuple(v_958))) else fail-any) else fail-any)) in
        {497}let v_972: bitstring = catch-fail((if success?(2-proj-3-tuple(v_958)) then (if (not-caught-fail(v_963) && success?(is-true(success?(1-proj-3-tuple(v_963))))) then (if (not-caught-fail(v_969) && success?(is-true(success?(1-proj-3-tuple(v_969))))) then (if not-caught-fail(v_971) then (v_971,2-proj-3-tuple(v_969),3-proj-3-tuple(v_969)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {498}let v_973: key = catch-fail(2-proj-3-tuple(v_972)) in
        {499}let v_974: bitstring = catch-fail(symmetricstateunpack(1-proj-3-tuple(v_972))) in
        {500}let v_975: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_974))) in
        {501}let v_976: aead = catch-fail(decrypt(1-proj-2-tuple(v_975),2-proj-2-tuple(v_975),3-proj-3-tuple(v_974),3-proj-3-tuple(v_958))) in
        {502}let v_977: bitstring = catch-fail(aeadunpack(v_976)) in
        {503}let v_978: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_974))) in
        {504}let v_979: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_975))) && success?(1-proj-3-tuple(v_974))) then (if (not-caught-fail(v_978) && success?(is-true(success?(1-proj-2-tuple(v_978))))) then cipherstatepack(1-proj-2-tuple(v_978),increment_nonce(2-proj-2-tuple(v_975))) else fail-any) else fail-any)) in
        {505}let v_980: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_958)) && (success?(3-proj-3-tuple(v_974)) && success?(1-proj-3-tuple(v_974)))) then (if (not-caught-fail(v_975) && success?(is-true(success?(1-proj-2-tuple(v_975))))) then (if not-caught-fail(v_976) then (if (not-caught-fail(v_977) && success?(is-true(success?(1-proj-3-tuple(v_977))))) then (if not-caught-fail(v_979) then (v_979,3-proj-3-tuple(v_977),1-proj-3-tuple(v_977)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {506}let v_981: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_980),2-proj-3-tuple(v_974),3-proj-3-tuple(v_974)))) in
        {507}let v_982: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_958)) && success?(symmetricstatepack(1-proj-3-tuple(v_980),2-proj-3-tuple(v_974),3-proj-3-tuple(v_974)))) then (if (not-caught-fail(v_981) && success?(is-true(success?(1-proj-3-tuple(v_981))))) then symmetricstatepack(1-proj-3-tuple(v_981),2-proj-3-tuple(v_981),hash(3-proj-3-tuple(v_981),3-proj-3-tuple(v_958))) else fail-any) else fail-any)) in
        {508}let v_983: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_958)) && success?(1-proj-3-tuple(v_972))) then (if (not-caught-fail(v_974) && success?(is-true(success?(1-proj-3-tuple(v_974))))) then (if (not-caught-fail(v_980) && success?(is-true(success?(1-proj-3-tuple(v_980))))) then (if not-caught-fail(v_982) then (v_982,2-proj-3-tuple(v_980),3-proj-3-tuple(v_980)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {509}let v_984: key = catch-fail(dhexp(key_s(them_943),g)) in
        {510}let v_985: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_983),2-proj-7-tuple(v_957),3-proj-7-tuple(v_957),v_973,v_960,6-proj-7-tuple(v_957),7-proj-7-tuple(v_957))) in
        {511}let (hs_986: handshakestate,re_987: key,plaintext_a_988: bitstring,valid_989: bool) = (if (not-caught-fail(v_957) && success?(is-true(success?(1-proj-7-tuple(v_957))))) then (if (not-caught-fail(v_958) && success?(is-true(success?(1-proj-3-tuple(v_958))))) then (if not-caught-fail(v_959) then (if not-caught-fail(v_960) then (if not-caught-fail(v_962) then (if (not-caught-fail(v_972) && success?(is-true(success?(1-proj-3-tuple(v_972))))) then (if not-caught-fail(v_973) then (if (not-caught-fail(v_983) && success?(is-true(success?(1-proj-3-tuple(v_983))))) then (if ((3-proj-3-tuple(v_972) && 3-proj-3-tuple(v_983)) && (v_973 = getpublickey((if not-caught-fail(v_984) then keypairpack(v_984,key_s(them_943)) else fail-any)))) then (if not-caught-fail(v_985) then (v_985,getpublickey(3-proj-7-tuple(v_957)),2-proj-3-tuple(v_983),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {512}event RecvMsg(me_944,them_943,stage_a,plaintext_a_988,valid_989);
        {513}insert statestore(me_944,them_943,statepack_b(hs_986))
    ) | (
        {570}get statestore(=me_944,=them_943,statepack_b(hs_990: handshakestate)) in
        {515}let v_991: bitstring = catch-fail(handshakestateunpack(hs_990)) in
        {516}let v_992: bitstring = catch-fail((empty,empty,empty)) in
        {517}new key_e_993[me_944,them_943]: key;
        {518}let v_994: key = catch-fail(dhexp(key_e_993,g)) in
        {519}let v_995: keypair = catch-fail((if not-caught-fail(v_994) then keypairpack(v_994,key_e_993) else fail-any)) in
        {520}let v_996: bitstring = catch-fail(getpublickey(v_995)) in
        {521}let v_997: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_991))) in
        {522}let v_998: symmetricstate = catch-fail((if success?(1-proj-7-tuple(v_991)) then (if (not-caught-fail(v_997) && success?(is-true(success?(1-proj-3-tuple(v_997))))) then symmetricstatepack(1-proj-3-tuple(v_997),2-proj-3-tuple(v_997),hash(3-proj-3-tuple(v_997),v_996)) else fail-any) else fail-any)) in
        {523}let v_999: bitstring = catch-fail(keypairunpack(v_995)) in
        {524}let v_1000: bitstring = catch-fail(symmetricstateunpack(v_998)) in
        {525}let v_1001: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1000),(if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then dhexp(2-proj-2-tuple(v_999),5-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {526}let v_1002: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1000),(if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then dhexp(2-proj-2-tuple(v_999),5-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {527}let v_1003: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1000),(if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then dhexp(2-proj-2-tuple(v_999),5-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {528}let v_1004: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then dhexp(2-proj-2-tuple(v_999),5-proj-7-tuple(v_991)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1000))) then (if not-caught-fail(v_1001) then (if not-caught-fail(v_1002) then (if not-caught-fail(v_1003) then (v_1001,v_1002,v_1003) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {529}let v_1005: symmetricstate = catch-fail((if success?((if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_999) && success?(is-true(success?(1-proj-2-tuple(v_999))))) then dhexp(2-proj-2-tuple(v_999),5-proj-7-tuple(v_991)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1000) && success?(is-true(success?(1-proj-3-tuple(v_1000))))) then (if (not-caught-fail(v_1004) && success?(is-true(success?(1-proj-3-tuple(v_1004))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1004)) then cipherstatepack(2-proj-3-tuple(v_1004),minnonce) else fail-any),1-proj-3-tuple(v_1004),3-proj-3-tuple(v_1000)) else fail-any) else fail-any) else fail-any)) in
        {530}let v_1006: bitstring = catch-fail(keypairunpack(v_995)) in
        {531}let v_1007: bitstring = catch-fail(symmetricstateunpack(v_1005)) in
        {532}let v_1008: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1007),(if success?(4-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {533}let v_1009: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1007),(if success?(4-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {534}let v_1010: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1007),(if success?(4-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {535}let v_1011: bitstring = catch-fail((if (success?((if success?(4-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_991)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1007))) then (if not-caught-fail(v_1008) then (if not-caught-fail(v_1009) then (if not-caught-fail(v_1010) then (v_1008,v_1009,v_1010) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {536}let v_1012: symmetricstate = catch-fail((if success?((if success?(4-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1006) && success?(is-true(success?(1-proj-2-tuple(v_1006))))) then dhexp(2-proj-2-tuple(v_1006),4-proj-7-tuple(v_991)) else fail-any) else fail-any)) then (if (not-caught-fail(v_1007) && success?(is-true(success?(1-proj-3-tuple(v_1007))))) then (if (not-caught-fail(v_1011) && success?(is-true(success?(1-proj-3-tuple(v_1011))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1011)) then cipherstatepack(2-proj-3-tuple(v_1011),minnonce) else fail-any),1-proj-3-tuple(v_1011),3-proj-3-tuple(v_1007)) else fail-any) else fail-any) else fail-any)) in
        {537}let v_1013: key = catch-fail(dhexp(key_s(me_944),g)) in
        {538}let v_1014: keypair = catch-fail((if not-caught-fail(v_1013) then keypairpack(v_1013,key_s(me_944)) else fail-any)) in
        {539}let v_1015: bitstring = catch-fail(symmetricstateunpack(v_1012)) in
        {540}let v_1016: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1015))) in
        {541}let v_1017: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1016),2-proj-2-tuple(v_1016),3-proj-3-tuple(v_1015),getpublickey(v_1014))) in
        {542}let v_1018: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1015))) in
        {543}let v_1019: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1016))) && success?(1-proj-3-tuple(v_1015))) then (if (not-caught-fail(v_1018) && success?(is-true(success?(1-proj-2-tuple(v_1018))))) then cipherstatepack(1-proj-2-tuple(v_1018),increment_nonce(2-proj-2-tuple(v_1016))) else fail-any) else fail-any)) in
        {544}let v_1020: bitstring = catch-fail((if (success?(getpublickey(v_1014)) && (success?(3-proj-3-tuple(v_1015)) && success?(1-proj-3-tuple(v_1015)))) then (if (not-caught-fail(v_1016) && success?(is-true(success?(1-proj-2-tuple(v_1016))))) then (if not-caught-fail(v_1017) then (if not-caught-fail(v_1019) then (v_1019,v_1017) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {545}let v_1021: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1020),2-proj-3-tuple(v_1015),3-proj-3-tuple(v_1015)))) in
        {546}let v_1022: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1020)) && success?(symmetricstatepack(1-proj-2-tuple(v_1020),2-proj-3-tuple(v_1015),3-proj-3-tuple(v_1015)))) then (if (not-caught-fail(v_1021) && success?(is-true(success?(1-proj-3-tuple(v_1021))))) then symmetricstatepack(1-proj-3-tuple(v_1021),2-proj-3-tuple(v_1021),hash(3-proj-3-tuple(v_1021),2-proj-2-tuple(v_1020))) else fail-any) else fail-any)) in
        {547}let v_1023: bitstring = catch-fail((if success?(getpublickey(v_1014)) then (if (not-caught-fail(v_1015) && success?(is-true(success?(1-proj-3-tuple(v_1015))))) then (if (not-caught-fail(v_1020) && success?(is-true(success?(1-proj-2-tuple(v_1020))))) then (if not-caught-fail(v_1022) then (v_1022,2-proj-2-tuple(v_1020)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {548}let v_1024: bitstring = catch-fail(keypairunpack(v_1014)) in
        {549}let v_1025: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1023))) in
        {550}let v_1026: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1025),(if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-2-tuple(v_1024))))) then dhexp(2-proj-2-tuple(v_1024),5-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {551}let v_1027: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1025),(if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-2-tuple(v_1024))))) then dhexp(2-proj-2-tuple(v_1024),5-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {552}let v_1028: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1025),(if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-2-tuple(v_1024))))) then dhexp(2-proj-2-tuple(v_1024),5-proj-7-tuple(v_991)) else fail-any) else fail-any))) in
        {553}let v_1029: bitstring = catch-fail((if (success?((if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-2-tuple(v_1024))))) then dhexp(2-proj-2-tuple(v_1024),5-proj-7-tuple(v_991)) else fail-any) else fail-any)) && success?(2-proj-3-tuple(v_1025))) then (if not-caught-fail(v_1026) then (if not-caught-fail(v_1027) then (if not-caught-fail(v_1028) then (v_1026,v_1027,v_1028) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {554}let v_1030: symmetricstate = catch-fail((if (success?((if success?(5-proj-7-tuple(v_991)) then (if (not-caught-fail(v_1024) && success?(is-true(success?(1-proj-2-tuple(v_1024))))) then dhexp(2-proj-2-tuple(v_1024),5-proj-7-tuple(v_991)) else fail-any) else fail-any)) && success?(1-proj-2-tuple(v_1023))) then (if (not-caught-fail(v_1025) && success?(is-true(success?(1-proj-3-tuple(v_1025))))) then (if (not-caught-fail(v_1029) && success?(is-true(success?(1-proj-3-tuple(v_1029))))) then symmetricstatepack((if success?(2-proj-3-tuple(v_1029)) then cipherstatepack(2-proj-3-tuple(v_1029),minnonce) else fail-any),1-proj-3-tuple(v_1029),3-proj-3-tuple(v_1025)) else fail-any) else fail-any) else fail-any)) in
        {555}let v_1031: bitstring = catch-fail(symmetricstateunpack(v_1030)) in
        {556}let v_1032: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1031))) in
        {557}let v_1033: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1032),2-proj-2-tuple(v_1032),3-proj-3-tuple(v_1031),msg_b(me_944,them_943))) in
        {558}let v_1034: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1031))) in
        {559}let v_1035: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1032))) && success?(1-proj-3-tuple(v_1031))) then (if (not-caught-fail(v_1034) && success?(is-true(success?(1-proj-2-tuple(v_1034))))) then cipherstatepack(1-proj-2-tuple(v_1034),increment_nonce(2-proj-2-tuple(v_1032))) else fail-any) else fail-any)) in
        {560}let v_1036: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1031)) && success?(1-proj-3-tuple(v_1031))) then (if (not-caught-fail(v_1032) && success?(is-true(success?(1-proj-2-tuple(v_1032))))) then (if not-caught-fail(v_1033) then (if not-caught-fail(v_1035) then (v_1035,v_1033) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {561}let v_1037: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1036),2-proj-3-tuple(v_1031),3-proj-3-tuple(v_1031)))) in
        {562}let v_1038: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1036)) && success?(symmetricstatepack(1-proj-2-tuple(v_1036),2-proj-3-tuple(v_1031),3-proj-3-tuple(v_1031)))) then (if (not-caught-fail(v_1037) && success?(is-true(success?(1-proj-3-tuple(v_1037))))) then symmetricstatepack(1-proj-3-tuple(v_1037),2-proj-3-tuple(v_1037),hash(3-proj-3-tuple(v_1037),2-proj-2-tuple(v_1036))) else fail-any) else fail-any)) in
        {563}let v_1039: bitstring = catch-fail((if (not-caught-fail(v_1031) && success?(is-true(success?(1-proj-3-tuple(v_1031))))) then (if (not-caught-fail(v_1036) && success?(is-true(success?(1-proj-2-tuple(v_1036))))) then (if not-caught-fail(v_1038) then (v_1038,2-proj-2-tuple(v_1036)) else fail-any) else fail-any) else fail-any)) in
        {564}let v_1040: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1039),v_1014,v_995,4-proj-7-tuple(v_991),5-proj-7-tuple(v_991),6-proj-7-tuple(v_991),7-proj-7-tuple(v_991))) in
        {565}let v_1041: bitstring = catch-fail(concat3(v_996,2-proj-2-tuple(v_1023),2-proj-2-tuple(v_1039))) in
        {566}let (hs_1042: handshakestate,re_1043: key,message_b_1044: bitstring) = (if (not-caught-fail(v_991) && success?(is-true(success?(1-proj-7-tuple(v_991))))) then (if (not-caught-fail(v_992) && success?(is-true(success?(1-proj-3-tuple(v_992))))) then (if not-caught-fail(v_995) then (if not-caught-fail(v_996) then (if not-caught-fail(v_998) then (if not-caught-fail(v_1005) then (if not-caught-fail(v_1012) then (if not-caught-fail(v_1014) then (if (not-caught-fail(v_1023) && success?(is-true(success?(1-proj-2-tuple(v_1023))))) then (if not-caught-fail(v_1030) then (if (not-caught-fail(v_1039) && success?(is-true(success?(1-proj-2-tuple(v_1039))))) then (if not-caught-fail(v_1040) then (if not-caught-fail(v_1041) then (v_1040,5-proj-7-tuple(v_991),v_1041) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {567}event SendMsg(me_944,them_943,stage_b,msg_b(me_944,them_943),true);
        {568}insert statestore(me_944,them_943,statepack_c(hs_1042));
        {569}out(pub, message_b_1044)
    ) | (
        {589}get statestore(=me_944,=them_943,statepack_c(hs_1045: handshakestate)) in
        {571}in(pub, message_c_1046: bitstring);
        {572}let v_1047: bitstring = catch-fail(handshakestateunpack(hs_1045)) in
        {573}let v_1048: bitstring = catch-fail(deconcat3(message_c_1046)) in
        {574}let v_1049: bool = catch-fail(true) in
        {575}let v_1050: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1047))) in
        {576}let v_1051: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {577}let v_1052: aead = catch-fail(decrypt(1-proj-2-tuple(v_1051),2-proj-2-tuple(v_1051),3-proj-3-tuple(v_1050),3-proj-3-tuple(v_1048))) in
        {578}let v_1053: bitstring = catch-fail(aeadunpack(v_1052)) in
        {579}let v_1054: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1050))) in
        {580}let v_1055: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1051))) && success?(1-proj-3-tuple(v_1050))) then (if (not-caught-fail(v_1054) && success?(is-true(success?(1-proj-2-tuple(v_1054))))) then cipherstatepack(1-proj-2-tuple(v_1054),increment_nonce(2-proj-2-tuple(v_1051))) else fail-any) else fail-any)) in
        {581}let v_1056: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1048)) && (success?(3-proj-3-tuple(v_1050)) && success?(1-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1051) && success?(is-true(success?(1-proj-2-tuple(v_1051))))) then (if not-caught-fail(v_1052) then (if (not-caught-fail(v_1053) && success?(is-true(success?(1-proj-3-tuple(v_1053))))) then (if not-caught-fail(v_1055) then (v_1055,3-proj-3-tuple(v_1053),1-proj-3-tuple(v_1053)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {582}let v_1057: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) in
        {583}let v_1058: symmetricstate = catch-fail((if (success?(3-proj-3-tuple(v_1048)) && success?(symmetricstatepack(1-proj-3-tuple(v_1056),2-proj-3-tuple(v_1050),3-proj-3-tuple(v_1050)))) then (if (not-caught-fail(v_1057) && success?(is-true(success?(1-proj-3-tuple(v_1057))))) then symmetricstatepack(1-proj-3-tuple(v_1057),2-proj-3-tuple(v_1057),hash(3-proj-3-tuple(v_1057),3-proj-3-tuple(v_1048))) else fail-any) else fail-any)) in
        {584}let v_1059: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1048)) && success?(1-proj-7-tuple(v_1047))) then (if (not-caught-fail(v_1050) && success?(is-true(success?(1-proj-3-tuple(v_1050))))) then (if (not-caught-fail(v_1056) && success?(is-true(success?(1-proj-3-tuple(v_1056))))) then (if not-caught-fail(v_1058) then (v_1058,2-proj-3-tuple(v_1056),3-proj-3-tuple(v_1056)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {585}let v_1060: handshakestate = catch-fail(handshakestatepack(1-proj-3-tuple(v_1059),2-proj-7-tuple(v_1047),3-proj-7-tuple(v_1047),4-proj-7-tuple(v_1047),5-proj-7-tuple(v_1047),6-proj-7-tuple(v_1047),7-proj-7-tuple(v_1047))) in
        {586}let (hs_1061: handshakestate,re_1062: key,plaintext_c_1063: bitstring,valid_1064: bool) = (if (not-caught-fail(v_1047) && success?(is-true(success?(1-proj-7-tuple(v_1047))))) then (if (not-caught-fail(v_1048) && success?(is-true(success?(1-proj-3-tuple(v_1048))))) then (if not-caught-fail(v_1049) then (if (not-caught-fail(v_1059) && success?(is-true(success?(1-proj-3-tuple(v_1059))))) then (if (v_1049 && 3-proj-3-tuple(v_1059)) then (if not-caught-fail(v_1060) then (v_1060,getpublickey(3-proj-7-tuple(v_1047)),2-proj-3-tuple(v_1059),true) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {587}event RecvMsg(me_944,them_943,stage_c,plaintext_c_1063,valid_1064);
        {588}insert statestore(me_944,them_943,statepack_d(hs_1061))
    ) | (
        {615}get statestore(=me_944,=them_943,statepack_d(hs_1065: handshakestate)) in
        {590}let v_1066: bitstring = catch-fail(handshakestateunpack(hs_1065)) in
        {591}let v_1067: bitstring = catch-fail((empty,empty,empty)) in
        {592}let v_1068: bitstring = catch-fail(symmetricstateunpack(1-proj-7-tuple(v_1066))) in
        {593}let v_1069: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1068))) in
        {594}let v_1070: bitstring = catch-fail(encrypt(1-proj-2-tuple(v_1069),2-proj-2-tuple(v_1069),3-proj-3-tuple(v_1068),msg_d(me_944,them_943))) in
        {595}let v_1071: bitstring = catch-fail(cipherstateunpack(1-proj-3-tuple(v_1068))) in
        {596}let v_1072: cipherstate = catch-fail((if (success?(increment_nonce(2-proj-2-tuple(v_1069))) && success?(1-proj-3-tuple(v_1068))) then (if (not-caught-fail(v_1071) && success?(is-true(success?(1-proj-2-tuple(v_1071))))) then cipherstatepack(1-proj-2-tuple(v_1071),increment_nonce(2-proj-2-tuple(v_1069))) else fail-any) else fail-any)) in
        {597}let v_1073: bitstring = catch-fail((if (success?(3-proj-3-tuple(v_1068)) && success?(1-proj-3-tuple(v_1068))) then (if (not-caught-fail(v_1069) && success?(is-true(success?(1-proj-2-tuple(v_1069))))) then (if not-caught-fail(v_1070) then (if not-caught-fail(v_1072) then (v_1072,v_1070) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {598}let v_1074: bitstring = catch-fail(symmetricstateunpack(symmetricstatepack(1-proj-2-tuple(v_1073),2-proj-3-tuple(v_1068),3-proj-3-tuple(v_1068)))) in
        {599}let v_1075: symmetricstate = catch-fail((if (success?(2-proj-2-tuple(v_1073)) && success?(symmetricstatepack(1-proj-2-tuple(v_1073),2-proj-3-tuple(v_1068),3-proj-3-tuple(v_1068)))) then (if (not-caught-fail(v_1074) && success?(is-true(success?(1-proj-3-tuple(v_1074))))) then symmetricstatepack(1-proj-3-tuple(v_1074),2-proj-3-tuple(v_1074),hash(3-proj-3-tuple(v_1074),2-proj-2-tuple(v_1073))) else fail-any) else fail-any)) in
        {600}let v_1076: bitstring = catch-fail((if success?(1-proj-7-tuple(v_1066)) then (if (not-caught-fail(v_1068) && success?(is-true(success?(1-proj-3-tuple(v_1068))))) then (if (not-caught-fail(v_1073) && success?(is-true(success?(1-proj-2-tuple(v_1073))))) then (if not-caught-fail(v_1075) then (v_1075,2-proj-2-tuple(v_1073)) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {601}let v_1077: handshakestate = catch-fail(handshakestatepack(1-proj-2-tuple(v_1076),2-proj-7-tuple(v_1066),3-proj-7-tuple(v_1066),4-proj-7-tuple(v_1066),5-proj-7-tuple(v_1066),6-proj-7-tuple(v_1066),7-proj-7-tuple(v_1066))) in
        {602}let v_1078: bitstring = catch-fail(concat3(1-proj-3-tuple(v_1067),2-proj-3-tuple(v_1067),2-proj-2-tuple(v_1076))) in
        {603}let v_1079: bitstring = catch-fail(symmetricstateunpack(1-proj-2-tuple(v_1076))) in
        {604}let v_1080: key = catch-fail(hmac_hash1(2-proj-3-tuple(v_1079),zero)) in
        {605}let v_1081: key = catch-fail(hmac_hash2(2-proj-3-tuple(v_1079),zero)) in
        {606}let v_1082: key = catch-fail(hmac_hash3(2-proj-3-tuple(v_1079),zero)) in
        {607}let v_1083: bitstring = catch-fail((if success?(2-proj-3-tuple(v_1079)) then (if not-caught-fail(v_1080) then (if not-caught-fail(v_1081) then (if not-caught-fail(v_1082) then (v_1080,v_1081,v_1082) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {608}let v_1084: cipherstate = catch-fail((if success?(1-proj-3-tuple(v_1083)) then cipherstatepack(1-proj-3-tuple(v_1083),minnonce) else fail-any)) in
        {609}let v_1085: cipherstate = catch-fail((if success?(2-proj-3-tuple(v_1083)) then cipherstatepack(2-proj-3-tuple(v_1083),minnonce) else fail-any)) in
        {610}let v_1086: bitstring = catch-fail((if success?(1-proj-2-tuple(v_1076)) then (if (not-caught-fail(v_1079) && success?(is-true(success?(1-proj-3-tuple(v_1079))))) then (if (not-caught-fail(v_1083) && success?(is-true(success?(1-proj-3-tuple(v_1083))))) then (if not-caught-fail(v_1084) then (if not-caught-fail(v_1085) then (1-proj-2-tuple(v_1076),v_1084,v_1085) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any)) in
        {611}let (hs_1087: handshakestate,re_1088: key,message_d_1089: bitstring,cs1_1090: cipherstate,cs2_1091: cipherstate) = (if (not-caught-fail(v_1066) && success?(is-true(success?(1-proj-7-tuple(v_1066))))) then (if (not-caught-fail(v_1067) && success?(is-true(success?(1-proj-3-tuple(v_1067))))) then (if (not-caught-fail(v_1076) && success?(is-true(success?(1-proj-2-tuple(v_1076))))) then (if not-caught-fail(v_1077) then (if not-caught-fail(v_1078) then (if (not-caught-fail(v_1086) && success?(is-true(success?(1-proj-3-tuple(v_1086))))) then (v_1077,5-proj-7-tuple(v_1066),v_1078,2-proj-3-tuple(v_1086),3-proj-3-tuple(v_1086)) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) else fail-any) in
        {612}event SendMsg(me_944,them_943,stage_d,msg_d(me_944,them_943),true);
        {613}insert statestore(me_944,them_943,statepack_e(hs_1087));
        {614}out(pub, message_d_1089)
    ) | (
        {616}event LeakS(phase0,me_944);
        {617}out(pub, key_s(me_944))
    ) | (
        {618}phase 1;
        {619}event LeakS(phase1,me_944);
        {620}out(pub, key_s(me_944))
    )
)

-- Query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_a(alice,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_b(bob,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)); event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)); not attacker_p1(msg_c(alice,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))); attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)); event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)); not attacker_p1(msg_d(bob,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))); attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
Completing...
200 rules inserted. The rule base contains 200 rules. 290 rules in the queue.
400 rules inserted. The rule base contains 400 rules. 103 rules in the queue.
600 rules inserted. The rule base contains 587 rules. 218 rules in the queue.
800 rules inserted. The rule base contains 761 rules. 189 rules in the queue.
1000 rules inserted. The rule base contains 938 rules. 174 rules in the queue.
1200 rules inserted. The rule base contains 1121 rules. 259 rules in the queue.
1400 rules inserted. The rule base contains 1287 rules. 246 rules in the queue.
1600 rules inserted. The rule base contains 1415 rules. 226 rules in the queue.
1800 rules inserted. The rule base contains 1540 rules. 183 rules in the queue.
2000 rules inserted. The rule base contains 1692 rules. 195 rules in the queue.
2200 rules inserted. The rule base contains 1811 rules. 233 rules in the queue.
2400 rules inserted. The rule base contains 1924 rules. 249 rules in the queue.
2600 rules inserted. The rule base contains 2044 rules. 288 rules in the queue.
2800 rules inserted. The rule base contains 2182 rules. 277 rules in the queue.
3000 rules inserted. The rule base contains 2346 rules. 311 rules in the queue.
3200 rules inserted. The rule base contains 2504 rules. 348 rules in the queue.
3400 rules inserted. The rule base contains 2636 rules. 359 rules in the queue.
3600 rules inserted. The rule base contains 2791 rules. 383 rules in the queue.
3800 rules inserted. The rule base contains 2923 rules. 389 rules in the queue.
4000 rules inserted. The rule base contains 3045 rules. 383 rules in the queue.
4200 rules inserted. The rule base contains 3169 rules. 380 rules in the queue.
4400 rules inserted. The rule base contains 3322 rules. 369 rules in the queue.
4600 rules inserted. The rule base contains 3483 rules. 357 rules in the queue.
4800 rules inserted. The rule base contains 3639 rules. 366 rules in the queue.
5000 rules inserted. The rule base contains 3795 rules. 396 rules in the queue.
5200 rules inserted. The rule base contains 3945 rules. 390 rules in the queue.
5400 rules inserted. The rule base contains 4097 rules. 392 rules in the queue.
5600 rules inserted. The rule base contains 4196 rules. 390 rules in the queue.
5800 rules inserted. The rule base contains 4295 rules. 362 rules in the queue.
6000 rules inserted. The rule base contains 4409 rules. 324 rules in the queue.
6200 rules inserted. The rule base contains 4521 rules. 280 rules in the queue.
6400 rules inserted. The rule base contains 4650 rules. 253 rules in the queue.
6600 rules inserted. The rule base contains 4791 rules. 262 rules in the queue.
6800 rules inserted. The rule base contains 4915 rules. 263 rules in the queue.
7000 rules inserted. The rule base contains 5010 rules. 258 rules in the queue.
7200 rules inserted. The rule base contains 5099 rules. 198 rules in the queue.
7400 rules inserted. The rule base contains 5239 rules. 154 rules in the queue.
7600 rules inserted. The rule base contains 5357 rules. 139 rules in the queue.
7800 rules inserted. The rule base contains 5464 rules. 95 rules in the queue.
8000 rules inserted. The rule base contains 5524 rules. 25 rules in the queue.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_11790332249 = key_e_662[me_648 = alice,them_647 = charlie,!1 = @sid_11790332233]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {326}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {171}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {206}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {203}.
So the message concat3(dhexp(key_e_11790332249,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {205}.
mess(pub,concat3(dhexp(key_e_11790332249,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {360}.
The message concat3(dhexp(key_e_11790332249,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332249,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {327}.
We have dhexp(key_e_11790332249,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {358}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,c_1172,stage_a,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_11790332286 = key_e_662[me_648 = alice,them_647 = charlie,!1 = @sid_11790332270]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {326}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {171}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {206}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {203}.
So the message concat3(dhexp(key_e_11790332286,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {205}.
mess(pub,concat3(dhexp(key_e_11790332286,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {360}.
The message concat3(dhexp(key_e_11790332286,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332286,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {327}.
We have dhexp(key_e_11790332286,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {358}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true)) -> end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true))
Abbreviations:
key_e_11790332317 = key_e_662[me_648 = alice,them_647 = charlie,!1 = @sid_11790332301]

1. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) may be inserted in a table at insert {326}.
table(statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false)))).

2. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {171}.
table(statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,charlie,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {206}.
The event SendMsg(alice,charlie,stage_a,msg_a(alice,charlie),true) may be executed at {203}.
So the message concat3(dhexp(key_e_11790332317,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) may be sent on channel pub at output {205}.
mess(pub,concat3(dhexp(key_e_11790332317,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie)))).

4. The entry statestore(bob,alice,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,false))) that may be in a table by 1 may be read at get {360}.
The message concat3(dhexp(key_e_11790332317,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_e_11790332317,g)),dhexp(key_s(alice),g))),msg_a(alice,charlie))) that may be sent on channel pub by 3 may be received at input {327}.
We have dhexp(key_e_11790332317,g) <> caught-fail.
So event RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true) may be executed at {358}.
end(RecvMsg(bob,alice,stage_a,msg_a(alice,charlie),true)).


RESULT event(RecvMsg(bob,alice,stage_a,m,true)) ==> event(SendMsg(alice,bob,stage_a,m,true)) || event(LeakS(phase0,alice)) cannot be proved.
Starting query not attacker_p1(msg_a(alice,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_11790332387 = key_e[me = alice,them = bob,!1 = @sid_11790332373]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_11790332387,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_11790332387,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_11790332387,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_11790332387,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_11790332387,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_11790332387,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_11790332387,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_11790332387,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_11790332387,g).
attacker(dhexp(key_11790332387,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_11790332387,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332387,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT not attacker_p1(msg_a(alice,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_11790332457 = key_e[me = alice,them = bob,!1 = @sid_11790332443]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_11790332457,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_11790332457,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_11790332457,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_11790332457,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_11790332457,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_11790332457,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_11790332457,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_11790332457,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_11790332457,g).
attacker(dhexp(key_11790332457,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_11790332457,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332457,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_11790332528 = key_e[me = alice,them = bob,!1 = @sid_11790332514]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_11790332528,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_11790332528,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_11790332528,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_11790332528,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_11790332528,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_11790332528,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_11790332528,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_11790332528,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_11790332528,g).
attacker(dhexp(key_11790332528,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_11790332528,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332528,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) cannot be proved.
Starting query attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> attacker_p1(msg_a(alice,bob))
Abbreviations:
key_11790332598 = key_e[me = alice,them = bob,!1 = @sid_11790332584]

1. Using the function pub the attacker may obtain pub.
attacker(pub).

2. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) may be inserted in a table at insert {16}.
table(statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true)))).

3. The entry statestore(alice,bob,statepack_a(handshakestatepack(symmetricstatepack(cipherstatepack(empty,minnonce),hash(somename,empty),hash(hash(somename,empty),empty)),keypairpack(empty,empty),keypairpack(empty,empty),empty,empty,empty,true))) that may be in a table by 2 may be read at get {51}.
The event SendMsg(alice,bob,stage_a,msg_a(alice,bob),true) may be executed at {48}.
So the message concat3(dhexp(key_11790332598,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on channel pub at output {50}.
mess(pub,concat3(dhexp(key_11790332598,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

4. By 1, the attacker may have the channel pub.
By 3, the message concat3(dhexp(key_11790332598,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) may be sent on this channel.
So the attacker may obtain the message concat3(dhexp(key_11790332598,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))) by listening on this channel.
attacker(concat3(dhexp(key_11790332598,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)))).

5. By 4, the attacker may know concat3(dhexp(key_11790332598,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 3-proj-concat3 the attacker may obtain encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
attacker(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

6. By 5, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)).
So the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

7. By 4, the attacker may know concat3(dhexp(key_11790332598,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 2-proj-concat3 the attacker may obtain encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)).
attacker(encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))).

8. By 4, the attacker may know concat3(dhexp(key_11790332598,g),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)),encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).
Using the function 1-proj-concat3 the attacker may obtain dhexp(key_11790332598,g).
attacker(dhexp(key_11790332598,g)).

9. Using the function empty the attacker may obtain empty.
attacker(empty).

10. Using the function somename the attacker may obtain somename.
attacker(somename).

11. By 10, the attacker may know somename.
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(somename,empty).
attacker(hash(somename,empty)).

12. By 11, the attacker may know hash(somename,empty).
By 9, the attacker may know empty.
Using the function hash the attacker may obtain hash(hash(somename,empty),empty).
attacker(hash(hash(somename,empty),empty)).

13. By 12, the attacker may know hash(hash(somename,empty),empty).
By 8, the attacker may know dhexp(key_11790332598,g).
Using the function hash the attacker may obtain hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)).
attacker(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g))).

14. By 13, the attacker may know hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)).
By 7, the attacker may know encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)).
Using the function hash the attacker may obtain hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))).
attacker(hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)))).

15. By 14, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))).
So the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))) in phase 1.
attacker_p1(hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g)))).

16. Using the function minnonce the attacker may obtain minnonce in phase 1.
attacker_p1(minnonce).

17. By 16, the attacker may know minnonce in phase 1.
Using the function increment_nonce the attacker may obtain increment_nonce(minnonce) in phase 1.
attacker_p1(increment_nonce(minnonce)).

18. Using the function empty the attacker may obtain empty in phase 1.
attacker_p1(empty).

19. By 18, the attacker may know empty in phase 1.
By 17, the attacker may know increment_nonce(minnonce) in phase 1.
By 15, the attacker may know hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))) in phase 1.
By 6, the attacker may know encrypt(empty,increment_nonce(minnonce),hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function decrypt the attacker may obtain aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
attacker_p1(aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob))).

20. By 19, the attacker may know aeadpack(true,hash(hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),encrypt(empty,minnonce,hash(hash(hash(somename,empty),empty),dhexp(key_11790332598,g)),dhexp(key_s(alice),g))),msg_a(alice,bob)) in phase 1.
Using the function 3-proj-aeadpack the attacker may obtain msg_a(alice,bob) in phase 1.
attacker_p1(msg_a(alice,bob)).


RESULT attacker_p1(msg_a(alice,bob)) ==> event(LeakS(phase0,bob)) cannot be proved.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,c_1172,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_b,msg_b(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_b,m,true)) ==> event(SendMsg(bob,alice,stage_b,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_b(bob,alice))
RESULT not attacker_p1(msg_b(bob,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_b(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,c_1172,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(bob,alice,stage_c,msg_c(alice,bob),true))
RESULT event(RecvMsg(bob,alice,stage_c,m,true)) ==> event(SendMsg(alice,bob,stage_c,m,true)) || event(LeakS(phase0,alice)) is true.
Starting query not attacker_p1(msg_c(alice,bob))
RESULT not attacker_p1(msg_c(alice,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || event(LeakS(phase1,bob)) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice)))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) || (event(LeakS(phase1,bob)) && event(LeakS(p,alice))) is true.
Starting query attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob))
RESULT attacker_p1(msg_c(alice,bob)) ==> event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,c_1172,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) || event(LeakS(phase0,alice)) is true.
Starting query event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob))
goal reachable: begin(SendMsg(bob,alice,stage_d,msg_d(bob,alice),true)) && begin(SendMsg(alice,bob,stage_c,msg_c(alice,bob),true)) && begin(SendMsg(bob,alice,stage_b,msg_b(bob,alice),true)) && begin(SendMsg(alice,bob,stage_a,msg_a(alice,bob),true)) -> end(RecvMsg(alice,bob,stage_d,msg_d(bob,alice),true))
RESULT event(RecvMsg(alice,bob,stage_d,m,true)) ==> event(SendMsg(bob,alice,stage_d,m,true)) || event(LeakS(phase0,bob)) is true.
Starting query not attacker_p1(msg_d(bob,alice))
RESULT not attacker_p1(msg_d(bob,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || event(LeakS(phase1,alice)) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob)))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) || (event(LeakS(phase1,alice)) && event(LeakS(p,bob))) is true.
Starting query attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice))
RESULT attacker_p1(msg_d(bob,alice)) ==> event(LeakS(phase0,alice)) is true.
